// This file has been generated by Py++.

#include "def.h"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "MyIReferenceCounted.h"

#include "IUIAnimator.h"

#include "IUIObject.h"

#include "UIManager.h"

namespace bp = boost::python;

struct IUIAnimator_wrapper : IUIAnimator, bp::wrapper< IUIAnimator > {

    IUIAnimator_wrapper()
    : IUIAnimator()
      , bp::wrapper< IUIAnimator >(){
        // null constructor
        
    }

    virtual ::IUIAnimator * Clone(  ){
        bp::override func_Clone = this->get_override( "Clone" );
        return func_Clone(  );
    }

    virtual bool animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ){
        bp::override func_animateUIObject = this->get_override( "animateUIObject" );
        return func_animateUIObject( boost::python::ptr(node), timeMS );
    }

};

struct IUIObject_wrapper : IUIObject, bp::wrapper< IUIObject > {

    IUIObject_wrapper(::IUIObject * parent, ::irr::s32 width, ::irr::s32 height, ::irr::s32 order=0, int shape=int(::SQUARE), ::irr::core::vector2d< float > const & position=irr::core::vector2d<float>(0.0f, 0.0f), ::irr::f32 rotdeg=0, ::irr::core::vector2d< float > const & scale=irr::core::vector2d<float>(1.0e+0f, 1.0e+0f) )
    : IUIObject( boost::python::ptr(parent), width, height, order, shape, boost::ref(position), rotdeg, boost::ref(scale) )
      , bp::wrapper< IUIObject >(){
        // constructor
    
    }

    virtual void AddAnimator( ::IUIAnimator * ani ) {
        if( bp::override func_AddAnimator = this->get_override( "AddAnimator" ) )
            func_AddAnimator( boost::python::ptr(ani) );
        else{
            this->IUIObject::AddAnimator( boost::python::ptr(ani) );
        }
    }
    
    void default_AddAnimator( ::IUIAnimator * ani ) {
        IUIObject::AddAnimator( boost::python::ptr(ani) );
    }

    virtual void AddChild( ::IUIObject * child ) {
        if( bp::override func_AddChild = this->get_override( "AddChild" ) )
            func_AddChild( boost::python::ptr(child) );
        else{
            this->IUIObject::AddChild( boost::python::ptr(child) );
        }
    }
    
    void default_AddChild( ::IUIObject * child ) {
        IUIObject::AddChild( boost::python::ptr(child) );
    }

    virtual void AddFunc( ::std::string const & eventName, ::std::string const & funcName, ::std::string const & ModuleName ) {
        if( bp::override func_AddFunc = this->get_override( "AddFunc" ) )
            func_AddFunc( eventName, funcName, ModuleName );
        else{
            this->IUIObject::AddFunc( eventName, funcName, ModuleName );
        }
    }
    
    void default_AddFunc( ::std::string const & eventName, ::std::string const & funcName, ::std::string const & ModuleName ) {
        IUIObject::AddFunc( eventName, funcName, ModuleName );
    }

    virtual ::IUIObject * Clone(  ){
        bp::override func_Clone = this->get_override( "Clone" );
        return func_Clone(  );
    }

    virtual void CloneMembersFrom( ::IUIObject * toCopyFrom ) {
        if( bp::override func_CloneMembersFrom = this->get_override( "CloneMembersFrom" ) )
            func_CloneMembersFrom( boost::python::ptr(toCopyFrom) );
        else{
            this->IUIObject::CloneMembersFrom( boost::python::ptr(toCopyFrom) );
        }
    }
    
    void default_CloneMembersFrom( ::IUIObject * toCopyFrom ) {
        IUIObject::CloneMembersFrom( boost::python::ptr(toCopyFrom) );
    }

    virtual void Draw(  ){
        bp::override func_Draw = this->get_override( "Draw" );
        func_Draw(  );
    }

    virtual void DrawTree(  ) {
        if( bp::override func_DrawTree = this->get_override( "DrawTree" ) )
            func_DrawTree(  );
        else{
            this->IUIObject::DrawTree(  );
        }
    }
    
    void default_DrawTree(  ) {
        IUIObject::DrawTree( );
    }

    virtual ::irr::f32 GetAbsoluteAlpha(  ) const  {
        if( bp::override func_GetAbsoluteAlpha = this->get_override( "GetAbsoluteAlpha" ) )
            return func_GetAbsoluteAlpha(  );
        else{
            return this->IUIObject::GetAbsoluteAlpha(  );
        }
    }
    
    ::irr::f32 default_GetAbsoluteAlpha(  ) const  {
        return IUIObject::GetAbsoluteAlpha( );
    }

    virtual ::irr::core::vector2d< float > GetAbsolutePosition(  ) const  {
        if( bp::override func_GetAbsolutePosition = this->get_override( "GetAbsolutePosition" ) )
            return func_GetAbsolutePosition(  );
        else{
            return this->IUIObject::GetAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector2d< float > default_GetAbsolutePosition(  ) const  {
        return IUIObject::GetAbsolutePosition( );
    }

    virtual ::irr::f32 GetAlpha(  ) const  {
        if( bp::override func_GetAlpha = this->get_override( "GetAlpha" ) )
            return func_GetAlpha(  );
        else{
            return this->IUIObject::GetAlpha(  );
        }
    }
    
    ::irr::f32 default_GetAlpha(  ) const  {
        return IUIObject::GetAlpha( );
    }

    virtual ::irr::s32 GetOrder(  ) const  {
        if( bp::override func_GetOrder = this->get_override( "GetOrder" ) )
            return func_GetOrder(  );
        else{
            return this->IUIObject::GetOrder(  );
        }
    }
    
    ::irr::s32 default_GetOrder(  ) const  {
        return IUIObject::GetOrder( );
    }

    virtual ::IUIObject * GetParent(  ) const  {
        if( bp::override func_GetParent = this->get_override( "GetParent" ) )
            return func_GetParent(  );
        else{
            return this->IUIObject::GetParent(  );
        }
    }
    
    ::IUIObject * default_GetParent(  ) const  {
        return IUIObject::GetParent( );
    }

    virtual ::irr::f32 GetRotation(  ) const  {
        if( bp::override func_GetRotation = this->get_override( "GetRotation" ) )
            return func_GetRotation(  );
        else{
            return this->IUIObject::GetRotation(  );
        }
    }
    
    ::irr::f32 default_GetRotation(  ) const  {
        return IUIObject::GetRotation( );
    }

    virtual bool GetVisible(  ) {
        if( bp::override func_GetVisible = this->get_override( "GetVisible" ) )
            return func_GetVisible(  );
        else{
            return this->IUIObject::GetVisible(  );
        }
    }
    
    bool default_GetVisible(  ) {
        return IUIObject::GetVisible( );
    }

    virtual ::IUIObject * HitTest( ::irr::s32 x, ::irr::s32 y ) {
        if( bp::override func_HitTest = this->get_override( "HitTest" ) )
            return func_HitTest( x, y );
        else{
            return this->IUIObject::HitTest( x, y );
        }
    }
    
    ::IUIObject * default_HitTest( ::irr::s32 x, ::irr::s32 y ) {
        return IUIObject::HitTest( x, y );
    }

    virtual bool IsPointIn( ::irr::s32 x, ::irr::s32 y ) {
        if( bp::override func_IsPointIn = this->get_override( "IsPointIn" ) )
            return func_IsPointIn( x, y );
        else{
            return this->IUIObject::IsPointIn( x, y );
        }
    }
    
    bool default_IsPointIn( ::irr::s32 x, ::irr::s32 y ) {
        return IUIObject::IsPointIn( x, y );
    }

    bool IsPointInCircle( ::irr::s32 x, ::irr::s32 y ){
        return IUIObject::IsPointInCircle( x, y );
    }

    bool IsPointInSquare( ::irr::s32 x, ::irr::s32 y ){
        return IUIObject::IsPointInSquare( x, y );
    }

    virtual void OnAnimate( ::irr::u32 time ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( time );
        else{
            this->IUIObject::OnAnimate( time );
        }
    }
    
    void default_OnAnimate( ::irr::u32 time ) {
        IUIObject::OnAnimate( time );
    }

    virtual void OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            func_OnEvent( boost::ref(event) );
        else{
            this->IUIObject::OnEvent( boost::ref(event) );
        }
    }
    
    void default_OnEvent( ::irr::SEvent const & event ) {
        IUIObject::OnEvent( boost::ref(event) );
    }

    virtual void OnKeyDown( ::irr::SEvent::SKeyInput const & event ) {
        if( bp::override func_OnKeyDown = this->get_override( "OnKeyDown" ) )
            func_OnKeyDown( boost::ref(event) );
        else{
            this->IUIObject::OnKeyDown( boost::ref(event) );
        }
    }
    
    void default_OnKeyDown( ::irr::SEvent::SKeyInput const & event ) {
        IUIObject::OnKeyDown( boost::ref(event) );
    }

    virtual void OnKeyUp( ::irr::SEvent::SKeyInput const & event ) {
        if( bp::override func_OnKeyUp = this->get_override( "OnKeyUp" ) )
            func_OnKeyUp( boost::ref(event) );
        else{
            this->IUIObject::OnKeyUp( boost::ref(event) );
        }
    }
    
    void default_OnKeyUp( ::irr::SEvent::SKeyInput const & event ) {
        IUIObject::OnKeyUp( boost::ref(event) );
    }

    virtual void OnMouseLeftButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseLeftButtonDown = this->get_override( "OnMouseLeftButtonDown" ) )
            func_OnMouseLeftButtonDown( boost::ref(event) );
        else{
            this->IUIObject::OnMouseLeftButtonDown( boost::ref(event) );
        }
    }
    
    void default_OnMouseLeftButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnMouseLeftButtonDown( boost::ref(event) );
    }

    virtual void OnMouseLeftButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseLeftButtonUp = this->get_override( "OnMouseLeftButtonUp" ) )
            func_OnMouseLeftButtonUp( boost::ref(event) );
        else{
            this->IUIObject::OnMouseLeftButtonUp( boost::ref(event) );
        }
    }
    
    void default_OnMouseLeftButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnMouseLeftButtonUp( boost::ref(event) );
    }

    virtual void OnMouseMove( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseMove = this->get_override( "OnMouseMove" ) )
            func_OnMouseMove( boost::ref(event) );
        else{
            this->IUIObject::OnMouseMove( boost::ref(event) );
        }
    }
    
    void default_OnMouseMove( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnMouseMove( boost::ref(event) );
    }

    virtual void OnMouseRightButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseRightButtonDown = this->get_override( "OnMouseRightButtonDown" ) )
            func_OnMouseRightButtonDown( boost::ref(event) );
        else{
            this->IUIObject::OnMouseRightButtonDown( boost::ref(event) );
        }
    }
    
    void default_OnMouseRightButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnMouseRightButtonDown( boost::ref(event) );
    }

    virtual void OnMouseRightButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseRightButtonUp = this->get_override( "OnMouseRightButtonUp" ) )
            func_OnMouseRightButtonUp( boost::ref(event) );
        else{
            this->IUIObject::OnMouseRightButtonUp( boost::ref(event) );
        }
    }
    
    void default_OnMouseRightButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnMouseRightButtonUp( boost::ref(event) );
    }

    virtual void OnWheel( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnWheel = this->get_override( "OnWheel" ) )
            func_OnWheel( boost::ref(event) );
        else{
            this->IUIObject::OnWheel( boost::ref(event) );
        }
    }
    
    void default_OnWheel( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnWheel( boost::ref(event) );
    }

    virtual void PythonFunc( ::std::string const & eventName ) {
        if( bp::override func_PythonFunc = this->get_override( "PythonFunc" ) )
            func_PythonFunc( eventName );
        else{
            this->IUIObject::PythonFunc( eventName );
        }
    }
    
    void default_PythonFunc( ::std::string const & eventName ) {
        IUIObject::PythonFunc( eventName );
    }

    virtual void RemoveAll(  ) {
        if( bp::override func_RemoveAll = this->get_override( "RemoveAll" ) )
            func_RemoveAll(  );
        else{
            this->IUIObject::RemoveAll(  );
        }
    }
    
    void default_RemoveAll(  ) {
        IUIObject::RemoveAll( );
    }

    virtual void RemoveAnimator( ::IUIAnimator * ani ) {
        if( bp::override func_RemoveAnimator = this->get_override( "RemoveAnimator" ) )
            func_RemoveAnimator( boost::python::ptr(ani) );
        else{
            this->IUIObject::RemoveAnimator( boost::python::ptr(ani) );
        }
    }
    
    void default_RemoveAnimator( ::IUIAnimator * ani ) {
        IUIObject::RemoveAnimator( boost::python::ptr(ani) );
    }

    virtual void RemoveAnimators(  ) {
        if( bp::override func_RemoveAnimators = this->get_override( "RemoveAnimators" ) )
            func_RemoveAnimators(  );
        else{
            this->IUIObject::RemoveAnimators(  );
        }
    }
    
    void default_RemoveAnimators(  ) {
        IUIObject::RemoveAnimators( );
    }

    virtual void RemoveChild( ::IUIObject * node ) {
        if( bp::override func_RemoveChild = this->get_override( "RemoveChild" ) )
            func_RemoveChild( boost::python::ptr(node) );
        else{
            this->IUIObject::RemoveChild( boost::python::ptr(node) );
        }
    }
    
    void default_RemoveChild( ::IUIObject * node ) {
        IUIObject::RemoveChild( boost::python::ptr(node) );
    }

    virtual void RemoveFunc( ::std::string const & funcName ) {
        if( bp::override func_RemoveFunc = this->get_override( "RemoveFunc" ) )
            func_RemoveFunc( funcName );
        else{
            this->IUIObject::RemoveFunc( funcName );
        }
    }
    
    void default_RemoveFunc( ::std::string const & funcName ) {
        IUIObject::RemoveFunc( funcName );
    }

    virtual void SetAlpha( ::irr::f32 alpha ) {
        if( bp::override func_SetAlpha = this->get_override( "SetAlpha" ) )
            func_SetAlpha( alpha );
        else{
            this->IUIObject::SetAlpha( alpha );
        }
    }
    
    void default_SetAlpha( ::irr::f32 alpha ) {
        IUIObject::SetAlpha( alpha );
    }

    virtual void SetOrder( ::irr::s32 order ) {
        if( bp::override func_SetOrder = this->get_override( "SetOrder" ) )
            func_SetOrder( order );
        else{
            this->IUIObject::SetOrder( order );
        }
    }
    
    void default_SetOrder( ::irr::s32 order ) {
        IUIObject::SetOrder( order );
    }

    virtual void SetParent( ::IUIObject * parent ) {
        if( bp::override func_SetParent = this->get_override( "SetParent" ) )
            func_SetParent( boost::python::ptr(parent) );
        else{
            this->IUIObject::SetParent( boost::python::ptr(parent) );
        }
    }
    
    void default_SetParent( ::IUIObject * parent ) {
        IUIObject::SetParent( boost::python::ptr(parent) );
    }

    virtual void SetPosition( ::irr::core::vector2d< float > const & pos ) {
        if( bp::override func_SetPosition = this->get_override( "SetPosition" ) )
            func_SetPosition( boost::ref(pos) );
        else{
            this->IUIObject::SetPosition( boost::ref(pos) );
        }
    }
    
    void default_SetPosition( ::irr::core::vector2d< float > const & pos ) {
        IUIObject::SetPosition( boost::ref(pos) );
    }

    virtual void SetRotation( ::irr::f32 rotdeg ) {
        if( bp::override func_SetRotation = this->get_override( "SetRotation" ) )
            func_SetRotation( rotdeg );
        else{
            this->IUIObject::SetRotation( rotdeg );
        }
    }
    
    void default_SetRotation( ::irr::f32 rotdeg ) {
        IUIObject::SetRotation( rotdeg );
    }

    virtual void SetScale( ::irr::core::vector2d< float > const & scale ) {
        if( bp::override func_SetScale = this->get_override( "SetScale" ) )
            func_SetScale( boost::ref(scale) );
        else{
            this->IUIObject::SetScale( boost::ref(scale) );
        }
    }
    
    void default_SetScale( ::irr::core::vector2d< float > const & scale ) {
        IUIObject::SetScale( boost::ref(scale) );
    }

    virtual void SetVisible( bool isvisible ) {
        if( bp::override func_SetVisible = this->get_override( "SetVisible" ) )
            func_SetVisible( isvisible );
        else{
            this->IUIObject::SetVisible( isvisible );
        }
    }
    
    void default_SetVisible( bool isvisible ) {
        IUIObject::SetVisible( isvisible );
    }

    virtual void UpdateAbsolutePosition(  ) {
        if( bp::override func_UpdateAbsolutePosition = this->get_override( "UpdateAbsolutePosition" ) )
            func_UpdateAbsolutePosition(  );
        else{
            this->IUIObject::UpdateAbsolutePosition(  );
        }
    }
    
    void default_UpdateAbsolutePosition(  ) {
        IUIObject::UpdateAbsolutePosition( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->IUIObject::remove(  );
        }
    }
    
    void default_remove(  ) {
        IUIObject::remove( );
    }

};

BOOST_PYTHON_MODULE( UI ){
    //{ //::std::vector< IUIObject* >
    //    typedef bp::class_< std::vector< IUIObject* > > vector_less__IUIObject_ptr___greater__exposer_t;
    //    vector_less__IUIObject_ptr___greater__exposer_t vector_less__IUIObject_ptr___greater__exposer = vector_less__IUIObject_ptr___greater__exposer_t( "vector_less__IUIObject_ptr___greater_" );
    //    bp::scope vector_less__IUIObject_ptr___greater__scope( vector_less__IUIObject_ptr___greater__exposer );
    //    vector_less__IUIObject_ptr___greater__exposer.def( bp::vector_indexing_suite< ::std::vector< IUIObject* > >() );
    //}

    //{ //::std::vector< IUIAnimator* >
    //    typedef bp::class_< std::vector< IUIAnimator* > > vector_less__IUIAnimator_ptr___greater__exposer_t;
    //    vector_less__IUIAnimator_ptr___greater__exposer_t vector_less__IUIAnimator_ptr___greater__exposer = vector_less__IUIAnimator_ptr___greater__exposer_t( "vector_less__IUIAnimator_ptr___greater_" );
    //    bp::scope vector_less__IUIAnimator_ptr___greater__scope( vector_less__IUIAnimator_ptr___greater__exposer );
    //    vector_less__IUIAnimator_ptr___greater__exposer.def( bp::vector_indexing_suite< ::std::vector< IUIAnimator* > >() );
    //}

    bp::enum_< SHAPE_FLAGS>("SHAPE_FLAGS")
        .value("SQUARE", SQUARE)
        .value("CIRCLE", CIRCLE)
        .value("TRIANGLE", TRIANGLE)
        .export_values()
        ;

    bp::class_< Scar::IReferenceCounted >( "IReferenceCounted", bp::init< >() )    
        .def( 
            "drop"
            , (bool ( ::Scar::IReferenceCounted::* )(  ) const)( &::Scar::IReferenceCounted::drop ) )    
        .def( 
            "getReferenceCount"
            , (::irr::s32 ( ::Scar::IReferenceCounted::* )(  ) const)( &::Scar::IReferenceCounted::getReferenceCount ) )    
        .def( 
            "grab"
            , (void ( ::Scar::IReferenceCounted::* )(  ) const)( &::Scar::IReferenceCounted::grab ) );

    bp::class_< IUIAnimator_wrapper, bp::bases< Scar::IReferenceCounted >, boost::noncopyable >( "IUIAnimator" )    
        .def( 
            "Clone"
            , bp::pure_virtual( (::IUIAnimator * ( ::IUIAnimator::* )(  ) )(&::IUIAnimator::Clone) )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "animateUIObject"
            , bp::pure_virtual( (bool ( ::IUIAnimator::* )( ::IUIObject *,::irr::u32 ) )(&::IUIAnimator::animateUIObject) )
            , ( bp::arg("node"), bp::arg("timeMS") ) );

    bp::class_< IUIObject_wrapper, bp::bases< Scar::IReferenceCounted >, boost::noncopyable >( "IUIObject", bp::init< IUIObject *, irr::s32, irr::s32, bp::optional< irr::s32, int, irr::core::vector2d< float > const &, irr::f32, irr::core::vector2d< float > const & > >(( bp::arg("parent"), bp::arg("width"), bp::arg("height"), bp::arg("order")=(::irr::s32)(0), bp::arg("shape")=int(::SQUARE), bp::arg("position")=irr::core::vector2d<float>(0.0f, 0.0f), bp::arg("rotdeg")=0, bp::arg("scale")=irr::core::vector2d<float>(1.0e+0f, 1.0e+0f) )) )    
        .def( 
            "AddAnimator"
            , (void ( ::IUIObject::* )( ::IUIAnimator * ) )(&::IUIObject::AddAnimator)
            , (void ( IUIObject_wrapper::* )( ::IUIAnimator * ) )(&IUIObject_wrapper::default_AddAnimator)
            , ( bp::arg("ani") ) )    
        .def( 
            "AddChild"
            , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::AddChild)
            , (void ( IUIObject_wrapper::* )( ::IUIObject * ) )(&IUIObject_wrapper::default_AddChild)
            , ( bp::arg("child") ) )    
        .def( 
            "AddFunc"
            , (void ( ::IUIObject::* )( ::std::string const &,::std::string const &,::std::string const & ) )(&::IUIObject::AddFunc)
            , (void ( IUIObject_wrapper::* )( ::std::string const &,::std::string const &,::std::string const & ) )(&IUIObject_wrapper::default_AddFunc)
            , ( bp::arg("eventName"), bp::arg("funcName"), bp::arg("ModuleName") ) )    
        .def( 
            "Clone"
            , bp::pure_virtual( (::IUIObject * ( ::IUIObject::* )(  ) )(&::IUIObject::Clone) )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "CloneMembersFrom"
            , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::CloneMembersFrom)
            , (void ( IUIObject_wrapper::* )( ::IUIObject * ) )(&IUIObject_wrapper::default_CloneMembersFrom)
            , ( bp::arg("toCopyFrom") ) )    
        .def( 
            "Draw"
            , bp::pure_virtual( (void ( ::IUIObject::* )(  ) )(&::IUIObject::Draw) ) )    
        .def( 
            "DrawTree"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::DrawTree)
            , (void ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_DrawTree) )    
        .def( 
            "GetAbsoluteAlpha"
            , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAbsoluteAlpha)
            , (::irr::f32 ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetAbsoluteAlpha) )    
        .def( 
            "GetAbsolutePosition"
            , (::irr::core::vector2d< float > ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAbsolutePosition)
            , (::irr::core::vector2d< float > ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetAbsolutePosition) )    
       /* .def( 
            "GetAbsoluteTransformation"
            , (::boost::numeric::ublas::matrix< float, boost::numeric::ublas::basic_row_major< unsigned long, long >, boost::numeric::ublas::unbounded_array< float, std::allocator< float > > > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAbsoluteTransformation)
            , bp::return_value_policy< bp::copy_const_reference >() )    */
        .def( 
            "GetAlpha"
            , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAlpha)
            , (::irr::f32 ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetAlpha) )    
        .def( 
            "GetAnimators"
            , (::std::vector< IUIAnimator* > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAnimators)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetChildren"
            , (::std::vector< IUIObject* > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetLeftTop"
            , (::irr::core::vector2df const & ( ::IUIObject::* )(  ) const)( &::IUIObject::GetLeftTop )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetName"
            , (::std::string const & ( ::IUIObject::* )(  ) const)( &::IUIObject::GetName )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetOrder"
            , (::irr::s32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetOrder)
            , (::irr::s32 ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetOrder) )    
        .def( 
            "GetParent"
            , (::IUIObject * ( ::IUIObject::* )(  ) const)(&::IUIObject::GetParent)
            , (::IUIObject * ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetParent)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "GetPosition"
            , (::irr::core::vector2d< float > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
       /* .def( 
            "GetRelativeTransformation"
            , (::boost::numeric::ublas::matrix< float, boost::numeric::ublas::basic_row_major< unsigned long, long >, boost::numeric::ublas::unbounded_array< float, std::allocator< float > > > ( ::IUIObject::* )(  ) const)(&::IUIObject::GetRelativeTransformation)
            , (::boost::numeric::ublas::matrix< float, boost::numeric::ublas::basic_row_major< unsigned long, long >, boost::numeric::ublas::unbounded_array< float, std::allocator< float > > > ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetRelativeTransformation) )    */
        .def( 
            "GetRightBottom"
            , (::irr::core::vector2df const & ( ::IUIObject::* )(  ) const)( &::IUIObject::GetRightBottom )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetRotation"
            , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetRotation)
            , (::irr::f32 ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetRotation) )    
        .def( 
            "GetScale"
            , (::irr::core::vector2d< float > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetVisible"
            , (bool ( ::IUIObject::* )(  ) )(&::IUIObject::GetVisible)
            , (bool ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_GetVisible) )    
        .def( 
            "HitTest"
            , (::IUIObject * ( ::IUIObject::* )( ::irr::s32,::irr::s32 ) )(&::IUIObject::HitTest)
            , (::IUIObject * ( IUIObject_wrapper::* )( ::irr::s32,::irr::s32 ) )(&IUIObject_wrapper::default_HitTest)
            , ( bp::arg("x"), bp::arg("y") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "IsPointIn"
            , (bool ( ::IUIObject::* )( ::irr::s32,::irr::s32 ) )(&::IUIObject::IsPointIn)
            , (bool ( IUIObject_wrapper::* )( ::irr::s32,::irr::s32 ) )(&IUIObject_wrapper::default_IsPointIn)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "IsPointInCircle"
            , (bool ( IUIObject_wrapper::* )( ::irr::s32,::irr::s32 ) )(&IUIObject_wrapper::IsPointInCircle)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "IsPointInSquare"
            , (bool ( IUIObject_wrapper::* )( ::irr::s32,::irr::s32 ) )(&IUIObject_wrapper::IsPointInSquare)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "LoadImage"
            , (void ( ::IUIObject::* )( char * ) )( &::IUIObject::LoadImage )
            , ( bp::arg("arg0") ) )    
        .def( 
            "OnAnimate"
            , (void ( ::IUIObject::* )( ::irr::u32 ) )(&::IUIObject::OnAnimate)
            , (void ( IUIObject_wrapper::* )( ::irr::u32 ) )(&IUIObject_wrapper::default_OnAnimate)
            , ( bp::arg("time") ) )    
        .def( 
            "OnEvent"
            , (void ( ::IUIObject::* )( ::irr::SEvent const & ) )(&::IUIObject::OnEvent)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent const & ) )(&IUIObject_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnKeyDown"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SKeyInput const & ) )(&::IUIObject::OnKeyDown)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SKeyInput const & ) )(&IUIObject_wrapper::default_OnKeyDown)
            , ( bp::arg("event") ) )    
        .def( 
            "OnKeyUp"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SKeyInput const & ) )(&::IUIObject::OnKeyUp)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SKeyInput const & ) )(&IUIObject_wrapper::default_OnKeyUp)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseLeftButtonDown"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnMouseLeftButtonDown)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&IUIObject_wrapper::default_OnMouseLeftButtonDown)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseLeftButtonUp"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnMouseLeftButtonUp)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&IUIObject_wrapper::default_OnMouseLeftButtonUp)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseMove"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnMouseMove)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&IUIObject_wrapper::default_OnMouseMove)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseRightButtonDown"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnMouseRightButtonDown)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&IUIObject_wrapper::default_OnMouseRightButtonDown)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseRightButtonUp"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnMouseRightButtonUp)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&IUIObject_wrapper::default_OnMouseRightButtonUp)
            , ( bp::arg("event") ) )    
        .def( 
            "OnWheel"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnWheel)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&IUIObject_wrapper::default_OnWheel)
            , ( bp::arg("event") ) )    
        .def( 
            "PythonFunc"
            , (void ( ::IUIObject::* )( ::std::string const & ) )(&::IUIObject::PythonFunc)
            , (void ( IUIObject_wrapper::* )( ::std::string const & ) )(&IUIObject_wrapper::default_PythonFunc)
            , ( bp::arg("eventName") ) )    
        .def( 
            "RemoveAll"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::RemoveAll)
            , (void ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_RemoveAll) )    
        .def( 
            "RemoveAnimator"
            , (void ( ::IUIObject::* )( ::IUIAnimator * ) )(&::IUIObject::RemoveAnimator)
            , (void ( IUIObject_wrapper::* )( ::IUIAnimator * ) )(&IUIObject_wrapper::default_RemoveAnimator)
            , ( bp::arg("ani") ) )    
        .def( 
            "RemoveAnimators"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::RemoveAnimators)
            , (void ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_RemoveAnimators) )    
        .def( 
            "RemoveChild"
            , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::RemoveChild)
            , (void ( IUIObject_wrapper::* )( ::IUIObject * ) )(&IUIObject_wrapper::default_RemoveChild)
            , ( bp::arg("node") ) )    
        .def( 
            "RemoveFunc"
            , (void ( ::IUIObject::* )( ::std::string const & ) )(&::IUIObject::RemoveFunc)
            , (void ( IUIObject_wrapper::* )( ::std::string const & ) )(&IUIObject_wrapper::default_RemoveFunc)
            , ( bp::arg("funcName") ) )    
        .def( 
            "SetAlpha"
            , (void ( ::IUIObject::* )( ::irr::f32 ) )(&::IUIObject::SetAlpha)
            , (void ( IUIObject_wrapper::* )( ::irr::f32 ) )(&IUIObject_wrapper::default_SetAlpha)
            , ( bp::arg("alpha") ) )    
        .def( 
            "SetAntiAliasing"
            , (void ( ::IUIObject::* )( bool ) )( &::IUIObject::SetAntiAliasing )
            , ( bp::arg("bAnti")=(bool)(true) ) )    
        .def( 
            "SetName"
            , (void ( ::IUIObject::* )( ::std::string const & ) )( &::IUIObject::SetName )
            , ( bp::arg("name") ) )    
        .def( 
            "SetOrder"
            , (void ( ::IUIObject::* )( ::irr::s32 ) )(&::IUIObject::SetOrder)
            , (void ( IUIObject_wrapper::* )( ::irr::s32 ) )(&IUIObject_wrapper::default_SetOrder)
            , ( bp::arg("order") ) )    
        .def( 
            "SetParent"
            , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::SetParent)
            , (void ( IUIObject_wrapper::* )( ::IUIObject * ) )(&IUIObject_wrapper::default_SetParent)
            , ( bp::arg("parent") ) )    
        .def( 
            "SetPosition"
            , (void ( ::IUIObject::* )( ::irr::core::vector2d< float > const & ) )(&::IUIObject::SetPosition)
            , (void ( IUIObject_wrapper::* )( ::irr::core::vector2d< float > const & ) )(&IUIObject_wrapper::default_SetPosition)
            , ( bp::arg("pos") ) )    
        .def( 
            "SetRotation"
            , (void ( ::IUIObject::* )( ::irr::f32 ) )(&::IUIObject::SetRotation)
            , (void ( IUIObject_wrapper::* )( ::irr::f32 ) )(&IUIObject_wrapper::default_SetRotation)
            , ( bp::arg("rotdeg") ) )    
        .def( 
            "SetScale"
            , (void ( ::IUIObject::* )( ::irr::core::vector2d< float > const & ) )(&::IUIObject::SetScale)
            , (void ( IUIObject_wrapper::* )( ::irr::core::vector2d< float > const & ) )(&IUIObject_wrapper::default_SetScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "SetSourceRect"
            , (void ( ::IUIObject::* )( ::irr::core::vector2df const &,::irr::core::vector2df const & ) )( &::IUIObject::SetSourceRect )
            , ( bp::arg("leftTop"), bp::arg("rightBottom") ) )    
        .def( 
            "SetVisible"
            , (void ( ::IUIObject::* )( bool ) )(&::IUIObject::SetVisible)
            , (void ( IUIObject_wrapper::* )( bool ) )(&IUIObject_wrapper::default_SetVisible)
            , ( bp::arg("isvisible") ) )    
        .def( 
            "UpdateAbsolutePosition"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::UpdateAbsolutePosition)
            , (void ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_UpdateAbsolutePosition) )    
        .def( 
            "remove"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::remove)
            , (void ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_remove) );

    { //::UIManager
        typedef bp::class_< UIManager > UIManager_exposer_t;
        UIManager_exposer_t UIManager_exposer = UIManager_exposer_t( "UIManager", bp::init< irr::ITimer * >(( bp::arg("timer") )) );
        bp::scope UIManager_scope( UIManager_exposer );
        bp::implicitly_convertible< irr::ITimer *, UIManager >();
        { //::UIManager::AddUIButton
        
            typedef ::IUIObject * ( ::UIManager::*AddUIButton_function_type )( ::IUIObject *,::irr::s32,::irr::s32,::irr::s32,int,::irr::core::vector2d< float > const &,::irr::f32,::irr::core::vector2d< float > const & ) ;
            
            UIManager_exposer.def( 
                "AddUIButton"
                , AddUIButton_function_type( &::UIManager::AddUIButton )
                , ( bp::arg("parent"), bp::arg("width"), bp::arg("height"), bp::arg("order")=(::irr::s32)(0), bp::arg("shape")=int(::SQUARE), bp::arg("position")=irr::core::vector2d<float>(0.0f, 0.0f), bp::arg("rotdeg")=0, bp::arg("scale")=irr::core::vector2d<float>(1.0e+0f, 1.0e+0f) )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::UIManager::AddUIImage
        
            typedef ::IUIObject * ( ::UIManager::*AddUIImage_function_type )( ::IUIObject *,::irr::s32,::irr::s32,::irr::s32,int,::irr::core::vector2d< float > const &,::irr::f32,::irr::core::vector2d< float > const & ) ;
            
            UIManager_exposer.def( 
                "AddUIImage"
                , AddUIImage_function_type( &::UIManager::AddUIImage )
                , ( bp::arg("parent"), bp::arg("width"), bp::arg("height"), bp::arg("order")=(::irr::s32)(0), bp::arg("shape")=int(::SQUARE), bp::arg("position")=irr::core::vector2d<float>(0.0f, 0.0f), bp::arg("rotdeg")=0, bp::arg("scale")=irr::core::vector2d<float>(1.0e+0f, 1.0e+0f) )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::UIManager::AddUIStaticText
        
            typedef ::IUIObject * ( ::UIManager::*AddUIStaticText_function_type )( ::IUIObject *,::irr::s32,::irr::s32,::std::wstring,::irr::video::SColor,::irr::u32,bool,bool,::irr::s32,int,::irr::core::vector2d< float > const &,::irr::f32,::irr::core::vector2d< float > const &,bool ) ;
            
            UIManager_exposer.def( 
                "AddUIStaticText"
                , AddUIStaticText_function_type( &::UIManager::AddUIStaticText )
                , ( bp::arg("parent"), bp::arg("width"), bp::arg("hegit"), bp::arg("text"), bp::arg("color"), bp::arg("fontsize")=(::irr::u32)(14), bp::arg("hcenter")=(bool)(false), bp::arg("vcenter")=(bool)(false), bp::arg("order")=(::irr::s32)(0), bp::arg("shape")=int(::SQUARE), bp::arg("position")=irr::core::vector2d<float>(0.0f, 0.0f), bp::arg("rotdeg")=0, bp::arg("scale")=irr::core::vector2d<float>(1.0e+0f, 1.0e+0f), bp::arg("Isvisible")=(bool)(true) )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::UIManager::Clear
        
            typedef void ( ::UIManager::*Clear_function_type )(  ) ;
            
            UIManager_exposer.def( 
                "Clear"
                , Clear_function_type( &::UIManager::Clear ) );
        
        }
        { //::UIManager::CreateAnimatorAlphaChange
        
            typedef ::IUIAnimator * ( ::UIManager::*CreateAnimatorAlphaChange_function_type )( ::irr::u32,::irr::u32,::irr::f32,::irr::f32,bool ) ;
            
            UIManager_exposer.def( 
                "CreateAnimatorAlphaChange"
                , CreateAnimatorAlphaChange_function_type( &::UIManager::CreateAnimatorAlphaChange )
                , ( bp::arg("begin"), bp::arg("duration"), bp::arg("srcalpha"), bp::arg("taralpha"), bp::arg("loop")=(bool)(false) )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::UIManager::CreateAnimatorDeletion
        
            typedef ::IUIAnimator * ( ::UIManager::*CreateAnimatorDeletion_function_type )( ::irr::u32,::irr::u32 ) ;
            
            UIManager_exposer.def( 
                "CreateAnimatorDeletion"
                , CreateAnimatorDeletion_function_type( &::UIManager::CreateAnimatorDeletion )
                , ( bp::arg("now"), bp::arg("time") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::UIManager::CreateAnimatorRotation
        
            typedef ::IUIAnimator * ( ::UIManager::*CreateAnimatorRotation_function_type )( ::irr::u32,::irr::u32,::irr::f32,bool ) ;
            
            UIManager_exposer.def( 
                "CreateAnimatorRotation"
                , CreateAnimatorRotation_function_type( &::UIManager::CreateAnimatorRotation )
                , ( bp::arg("begin"), bp::arg("duration"), bp::arg("angle"), bp::arg("loop")=(bool)(false) )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::UIManager::CreateAnimatorScale
        
            typedef ::IUIAnimator * ( ::UIManager::*CreateAnimatorScale_function_type )( ::irr::u32,::irr::u32,::irr::core::vector2d< float >,bool ) ;
            
            UIManager_exposer.def( 
                "CreateAnimatorScale"
                , CreateAnimatorScale_function_type( &::UIManager::CreateAnimatorScale )
                , ( bp::arg("begin"), bp::arg("duration"), bp::arg("scale"), bp::arg("loop")=(bool)(false) )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::UIManager::CreateAnimatorTimelag
        
            typedef ::IUIAnimator * ( ::UIManager::*CreateAnimatorTimelag_function_type )( ::irr::u32,::irr::u32,::std::string,::std::string,bool ) ;
            
            UIManager_exposer.def( 
                "CreateAnimatorTimelag"
                , CreateAnimatorTimelag_function_type( &::UIManager::CreateAnimatorTimelag )
                , ( bp::arg("begin"), bp::arg("duration"), bp::arg("moduleName"), bp::arg("funName"), bp::arg("loop")=(bool)(false) )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::UIManager::CreateAnimatorTranslation
        
            typedef ::IUIAnimator * ( ::UIManager::*CreateAnimatorTranslation_function_type )( ::irr::u32,::irr::u32,::irr::core::vector2df const &,bool ) ;
            
            UIManager_exposer.def( 
                "CreateAnimatorTranslation"
                , CreateAnimatorTranslation_function_type( &::UIManager::CreateAnimatorTranslation )
                , ( bp::arg("begin"), bp::arg("duration"), bp::arg("offset"), bp::arg("loop")=(bool)(false) )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::UIManager::DrawAll
        
            typedef void ( ::UIManager::*DrawAll_function_type )(  ) ;
            
            UIManager_exposer.def( 
                "DrawAll"
                , DrawAll_function_type( &::UIManager::DrawAll ) );
        
        }
        { //::UIManager::GetObjectByName
        
            typedef ::IUIObject * ( ::UIManager::*GetObjectByName_function_type )( ::std::string const &,::IUIObject * ) ;
            
            UIManager_exposer.def( 
                "GetObjectByName"
                , GetObjectByName_function_type( &::UIManager::GetObjectByName )
                , ( bp::arg("name"), bp::arg("node")=bp::object() )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        //{ //::UIManager::GetRoot
        //
        //    typedef ::IUIObject * ( ::UIManager::*GetRoot_function_type )(  ) ;
        //    
        //    UIManager_exposer.def( 
        //        "GetRoot"
        //        , GetRoot_function_type( &::UIManager::GetRoot )
        //        , bp::return_value_policy< bp::reference_existing_object >() );
        //
        //}
        { //::UIManager::GetRootUIObject
        
            typedef ::IUIObject * ( ::UIManager::*GetRootUIObject_function_type )(  ) ;
            
            UIManager_exposer.def( 
                "GetRootUIObject"
                , GetRootUIObject_function_type( &::UIManager::GetRootUIObject )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::UIManager::GetUIObjectByName
        
            typedef ::IUIObject * ( ::UIManager::*GetUIObjectByName_function_type )( ::std::string const & ) ;
            
            UIManager_exposer.def( 
                "GetUIObjectByName"
                , GetUIObjectByName_function_type( &::UIManager::GetUIObjectByName )
                , ( bp::arg("name") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::UIManager::OnEvent
        
            typedef void ( ::UIManager::*OnEvent_function_type )( ::irr::SEvent const & ) ;
            
            UIManager_exposer.def( 
                "OnEvent"
                , OnEvent_function_type( &::UIManager::OnEvent )
                , ( bp::arg("event") ) );
        
        }
        //{ //::UIManager::RunTree
        //
        //    typedef void ( ::UIManager::*RunTree_function_type )(  ) ;
        //    
        //    UIManager_exposer.def( 
        //        "RunTree"
        //        , RunTree_function_type( &::UIManager::RunTree ) );
        //
        //}
        //{ //::UIManager::SetRoot
        //
        //    typedef bool ( ::UIManager::*SetRoot_function_type )( ::IUIObject * ) ;
        //    
        //    UIManager_exposer.def( 
        //        "SetRoot"
        //        , SetRoot_function_type( &::UIManager::SetRoot )
        //        , ( bp::arg("root") ) );
        //
        //}
    }
}
