// This file has been generated by Py++.

#include "def.h"

#include "AllAnimators.h"

#include "AllUIObjects.h"

#include "AlphaChangeUIAnimator.h"

#include "UIButton.h"

#include "BlinkUIAnimator.h"

#include "DeletionUIAnimator.h"

#include "GameScene.h"

#include "IUIAnimator.h"

#include "IUIObject.h"

#include "MenuScene.h"

#include "MultiplayerScene.h"

#include "MyIReferenceCounted.h"

#include "RotateUIAnimator.h"

#include "ScaleUIAnimator.h"

#include "StartScene.h"

#include "TranslateUIAnimator.h"

#include "UIAnimators.h"

#include "UIButton.h"

#include "UIImage.h"

#include "TimelagUIAnimator.h"

namespace bp = boost::python;

struct IUIAnimator_wrapper : IUIAnimator, bp::wrapper< IUIAnimator > {

    IUIAnimator_wrapper()
    : IUIAnimator()
      , bp::wrapper< IUIAnimator >(){
        // null constructor
        
    }

    virtual ::IUIAnimator * Clone(  ){
        bp::override func_Clone = this->get_override( "Clone" );
        return func_Clone(  );
    }

    virtual bool animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ){
        bp::override func_animateUIObject = this->get_override( "animateUIObject" );
        return func_animateUIObject( boost::python::ptr(node), timeMS );
    }

};

struct AlphaChangeUIAnimator_wrapper : AlphaChangeUIAnimator, bp::wrapper< AlphaChangeUIAnimator > {

    AlphaChangeUIAnimator_wrapper(AlphaChangeUIAnimator const & arg )
    : AlphaChangeUIAnimator( arg )
      , bp::wrapper< AlphaChangeUIAnimator >(){
        // copy constructor
        
    }

    AlphaChangeUIAnimator_wrapper(::irr::u32 begin, ::irr::u32 duration, ::irr::f32 srcalpha, ::irr::f32 taralpha, bool loop=false )
    : AlphaChangeUIAnimator( begin, duration, srcalpha, taralpha, loop )
      , bp::wrapper< AlphaChangeUIAnimator >(){
        // constructor
    
    }

    virtual ::AlphaChangeUIAnimator * Clone(  ) {
        if( bp::override func_Clone = this->get_override( "Clone" ) )
            return func_Clone(  );
        else{
            return this->AlphaChangeUIAnimator::Clone(  );
        }
    }
    
    ::AlphaChangeUIAnimator * default_Clone(  ) {
        return AlphaChangeUIAnimator::Clone( );
    }

    virtual bool animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
        if( bp::override func_animateUIObject = this->get_override( "animateUIObject" ) )
            return func_animateUIObject( boost::python::ptr(node), timeMS );
        else{
            return this->AlphaChangeUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
        }
    }
    
    bool default_animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
        return AlphaChangeUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
    }

};

struct BlinkUIAnimator_wrapper : BlinkUIAnimator, bp::wrapper< BlinkUIAnimator > {

    BlinkUIAnimator_wrapper(BlinkUIAnimator const & arg )
    : BlinkUIAnimator( arg )
      , bp::wrapper< BlinkUIAnimator >(){
        // copy constructor
        
    }

    BlinkUIAnimator_wrapper(::irr::core::vector2d< float > const & offset )
    : BlinkUIAnimator( boost::ref(offset) )
      , bp::wrapper< BlinkUIAnimator >(){
        // constructor
    
    }

    virtual ::BlinkUIAnimator * Clone(  ) {
        if( bp::override func_Clone = this->get_override( "Clone" ) )
            return func_Clone(  );
        else{
            return this->BlinkUIAnimator::Clone(  );
        }
    }
    
    ::BlinkUIAnimator * default_Clone(  ) {
        return BlinkUIAnimator::Clone( );
    }

    virtual bool animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
        if( bp::override func_animateUIObject = this->get_override( "animateUIObject" ) )
            return func_animateUIObject( boost::python::ptr(node), timeMS );
        else{
            return this->BlinkUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
        }
    }
    
    bool default_animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
        return BlinkUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
    }

};

struct DeletionAnimator_wrapper : DeletionAnimator, bp::wrapper< DeletionAnimator > {

    DeletionAnimator_wrapper(DeletionAnimator const & arg )
    : DeletionAnimator( arg )
      , bp::wrapper< DeletionAnimator >(){
        // copy constructor
        
    }

    DeletionAnimator_wrapper(::irr::u32 now, ::irr::u32 time )
    : DeletionAnimator( now, time )
      , bp::wrapper< DeletionAnimator >(){
        // constructor
    
    }

    virtual ::IUIAnimator * Clone(  ) {
        if( bp::override func_Clone = this->get_override( "Clone" ) )
            return func_Clone(  );
        else{
            return this->DeletionAnimator::Clone(  );
        }
    }
    
    ::IUIAnimator * default_Clone(  ) {
        return DeletionAnimator::Clone( );
    }

    virtual bool animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
        if( bp::override func_animateUIObject = this->get_override( "animateUIObject" ) )
            return func_animateUIObject( boost::python::ptr(node), timeMS );
        else{
            return this->DeletionAnimator::animateUIObject( boost::python::ptr(node), timeMS );
        }
    }
    
    bool default_animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
        return DeletionAnimator::animateUIObject( boost::python::ptr(node), timeMS );
    }

};

struct GameScene_wrapper : GameScene, bp::wrapper< GameScene > {

    GameScene_wrapper( )
    : GameScene( )
      , bp::wrapper< GameScene >(){
        // null constructor
    
    }

    virtual void Draw(  ) {
        if( bp::override func_Draw = this->get_override( "Draw" ) )
            func_Draw(  );
        else{
            this->GameScene::Draw(  );
        }
    }
    
    void default_Draw(  ) {
        GameScene::Draw( );
    }

    virtual void Init(  ){
        bp::override func_Init = this->get_override( "Init" );
        func_Init(  );
    }

    virtual void Release(  ){
        bp::override func_Release = this->get_override( "Release" );
        func_Release(  );
    }

    virtual void Run(  ){
        bp::override func_Run = this->get_override( "Run" );
        func_Run(  );
    }

};

struct IUIObject_wrapper : IUIObject, bp::wrapper< IUIObject > {

    IUIObject_wrapper(::IUIObject * parent, ::irr::s32 width, ::irr::s32 height, ::irr::s32 order=0, int shape=int(::SQUARE), ::irr::core::vector2d< float > const & position=irr::core::vector2d<float>(0.0f, 0.0f), ::irr::f32 rotdeg=0, ::irr::core::vector2d< float > const & scale=irr::core::vector2d<float>(1.0e+0f, 1.0e+0f) )
    : IUIObject( boost::python::ptr(parent), width, height, order, shape, boost::ref(position), rotdeg, boost::ref(scale) )
      , bp::wrapper< IUIObject >(){
        // constructor
    
    }

    virtual void AddAnimator( ::IUIAnimator * ani ) {
        if( bp::override func_AddAnimator = this->get_override( "AddAnimator" ) )
            func_AddAnimator( boost::python::ptr(ani) );
        else{
            this->IUIObject::AddAnimator( boost::python::ptr(ani) );
        }
    }
    
    void default_AddAnimator( ::IUIAnimator * ani ) {
        IUIObject::AddAnimator( boost::python::ptr(ani) );
    }

    virtual void AddChild( ::IUIObject * child ) {
        if( bp::override func_AddChild = this->get_override( "AddChild" ) )
            func_AddChild( boost::python::ptr(child) );
        else{
            this->IUIObject::AddChild( boost::python::ptr(child) );
        }
    }
    
    void default_AddChild( ::IUIObject * child ) {
        IUIObject::AddChild( boost::python::ptr(child) );
    }

    virtual void Draw(  ){
        bp::override func_Draw = this->get_override( "Draw" );
        func_Draw(  );
    }

    virtual void DrawTree(  ) {
        if( bp::override func_DrawTree = this->get_override( "DrawTree" ) )
            func_DrawTree(  );
        else{
            this->IUIObject::DrawTree(  );
        }
    }
    
    void default_DrawTree(  ) {
        IUIObject::DrawTree( );
    }

    virtual ::irr::f32 GetAbsoluteAlpha(  ) const  {
        if( bp::override func_GetAbsoluteAlpha = this->get_override( "GetAbsoluteAlpha" ) )
            return func_GetAbsoluteAlpha(  );
        else{
            return this->IUIObject::GetAbsoluteAlpha(  );
        }
    }
    
    ::irr::f32 default_GetAbsoluteAlpha(  ) const  {
        return IUIObject::GetAbsoluteAlpha( );
    }

    virtual ::irr::core::vector2d< float > GetAbsolutePosition(  ) const  {
        if( bp::override func_GetAbsolutePosition = this->get_override( "GetAbsolutePosition" ) )
            return func_GetAbsolutePosition(  );
        else{
            return this->IUIObject::GetAbsolutePosition(  );
        }
    }

	virtual IUIObject* GetParent() const
	{
		return this->IUIObject::GetParent();
	}
    
    ::irr::core::vector2d< float > default_GetAbsolutePosition(  ) const  {
        return IUIObject::GetAbsolutePosition( );
    }

    virtual ::irr::f32 GetAlpha(  ) const  {
        if( bp::override func_GetAlpha = this->get_override( "GetAlpha" ) )
            return func_GetAlpha(  );
        else{
            return this->IUIObject::GetAlpha(  );
        }
    }
    
    ::irr::f32 default_GetAlpha(  ) const  {
        return IUIObject::GetAlpha( );
    }

    virtual ::irr::s32 GetOrder(  ) const  {
        if( bp::override func_GetOrder = this->get_override( "GetOrder" ) )
            return func_GetOrder(  );
        else{
            return this->IUIObject::GetOrder(  );
        }
    }
    
    ::irr::s32 default_GetOrder(  ) const  {
        return IUIObject::GetOrder( );
    }

    virtual ::irr::f32 GetRotation(  ) const  {
        if( bp::override func_GetRotation = this->get_override( "GetRotation" ) )
            return func_GetRotation(  );
        else{
            return this->IUIObject::GetRotation(  );
        }
    }
    
    ::irr::f32 default_GetRotation(  ) const  {
        return IUIObject::GetRotation( );
    }

    virtual bool GetVisible(  ) {
        if( bp::override func_GetVisible = this->get_override( "GetVisible" ) )
            return func_GetVisible(  );
        else{
            return this->IUIObject::GetVisible(  );
        }
    }
    
    bool default_GetVisible(  ) {
        return IUIObject::GetVisible( );
    }

    virtual ::IUIObject * HitTest( ::irr::s32 x, ::irr::s32 y ) {
        if( bp::override func_HitTest = this->get_override( "HitTest" ) )
            return func_HitTest( x, y );
        else{
            return this->IUIObject::HitTest( x, y );
        }
    }
    
    ::IUIObject * default_HitTest( ::irr::s32 x, ::irr::s32 y ) {
        return IUIObject::HitTest( x, y );
    }

    virtual bool IsPointIn( ::irr::s32 x, ::irr::s32 y ) {
        if( bp::override func_IsPointIn = this->get_override( "IsPointIn" ) )
            return func_IsPointIn( x, y );
        else{
            return this->IUIObject::IsPointIn( x, y );
        }
    }
    
    bool default_IsPointIn( ::irr::s32 x, ::irr::s32 y ) {
        return IUIObject::IsPointIn( x, y );
    }

    bool IsPointInCircle( ::irr::s32 x, ::irr::s32 y ){
        return IUIObject::IsPointInCircle( x, y );
    }

    bool IsPointInSquare( ::irr::s32 x, ::irr::s32 y ){
        return IUIObject::IsPointInSquare( x, y );
    }

    virtual void OnAnimate( ::irr::u32 time ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( time );
        else{
            this->IUIObject::OnAnimate( time );
        }
    }
    
    void default_OnAnimate( ::irr::u32 time ) {
        IUIObject::OnAnimate( time );
    }

    virtual void OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            func_OnEvent( boost::ref(event) );
        else{
            this->IUIObject::OnEvent( boost::ref(event) );
        }
    }
    
    void default_OnEvent( ::irr::SEvent const & event ) {
        IUIObject::OnEvent( boost::ref(event) );
    }

    virtual void OnKeyDown( ::irr::SEvent::SKeyInput const & event ) {
        if( bp::override func_OnKeyDown = this->get_override( "OnKeyDown" ) )
            func_OnKeyDown( boost::ref(event) );
        else{
            this->IUIObject::OnKeyDown( boost::ref(event) );
        }
    }
    
    void default_OnKeyDown( ::irr::SEvent::SKeyInput const & event ) {
        IUIObject::OnKeyDown( boost::ref(event) );
    }

    virtual void OnKeyUp( ::irr::SEvent::SKeyInput const & event ) {
        if( bp::override func_OnKeyUp = this->get_override( "OnKeyUp" ) )
            func_OnKeyUp( boost::ref(event) );
        else{
            this->IUIObject::OnKeyUp( boost::ref(event) );
        }
    }
    
    void default_OnKeyUp( ::irr::SEvent::SKeyInput const & event ) {
        IUIObject::OnKeyUp( boost::ref(event) );
    }

    virtual void OnMouseLeftButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseLeftButtonDown = this->get_override( "OnMouseLeftButtonDown" ) )
            func_OnMouseLeftButtonDown( boost::ref(event) );
        else{
            this->IUIObject::OnMouseLeftButtonDown( boost::ref(event) );
        }
    }
    
    void default_OnMouseLeftButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnMouseLeftButtonDown( boost::ref(event) );
    }

    virtual void OnMouseLeftButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseLeftButtonUp = this->get_override( "OnMouseLeftButtonUp" ) )
            func_OnMouseLeftButtonUp( boost::ref(event) );
        else{
            this->IUIObject::OnMouseLeftButtonUp( boost::ref(event) );
        }
    }
    
    void default_OnMouseLeftButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnMouseLeftButtonUp( boost::ref(event) );
    }

    virtual void OnMouseMove( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseMove = this->get_override( "OnMouseMove" ) )
            func_OnMouseMove( boost::ref(event) );
        else{
            this->IUIObject::OnMouseMove( boost::ref(event) );
        }
    }
    
    void default_OnMouseMove( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnMouseMove( boost::ref(event) );
    }

    virtual void OnMouseRightButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseRightButtonDown = this->get_override( "OnMouseRightButtonDown" ) )
            func_OnMouseRightButtonDown( boost::ref(event) );
        else{
            this->IUIObject::OnMouseRightButtonDown( boost::ref(event) );
        }
    }
    
    void default_OnMouseRightButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnMouseRightButtonDown( boost::ref(event) );
    }

    virtual void OnMouseRightButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseRightButtonUp = this->get_override( "OnMouseRightButtonUp" ) )
            func_OnMouseRightButtonUp( boost::ref(event) );
        else{
            this->IUIObject::OnMouseRightButtonUp( boost::ref(event) );
        }
    }
    
    void default_OnMouseRightButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnMouseRightButtonUp( boost::ref(event) );
    }

    virtual void OnWheel( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnWheel = this->get_override( "OnWheel" ) )
            func_OnWheel( boost::ref(event) );
        else{
            this->IUIObject::OnWheel( boost::ref(event) );
        }
    }
    
    void default_OnWheel( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnWheel( boost::ref(event) );
    }

    virtual void RemoveAll(  ) {
        if( bp::override func_RemoveAll = this->get_override( "RemoveAll" ) )
            func_RemoveAll(  );
        else{
            this->IUIObject::RemoveAll(  );
        }
    }
    
    void default_RemoveAll(  ) {
        IUIObject::RemoveAll( );
    }

    virtual void RemoveAnimator( ::IUIAnimator * ani ) {
        if( bp::override func_RemoveAnimator = this->get_override( "RemoveAnimator" ) )
            func_RemoveAnimator( boost::python::ptr(ani) );
        else{
            this->IUIObject::RemoveAnimator( boost::python::ptr(ani) );
        }
    }
    
    void default_RemoveAnimator( ::IUIAnimator * ani ) {
        IUIObject::RemoveAnimator( boost::python::ptr(ani) );
    }

    virtual void RemoveAnimators(  ) {
        if( bp::override func_RemoveAnimators = this->get_override( "RemoveAnimators" ) )
            func_RemoveAnimators(  );
        else{
            this->IUIObject::RemoveAnimators(  );
        }
    }
    
    void default_RemoveAnimators(  ) {
        IUIObject::RemoveAnimators( );
    }

    virtual void RemoveChild( ::IUIObject * node ) {
        if( bp::override func_RemoveChild = this->get_override( "RemoveChild" ) )
            func_RemoveChild( boost::python::ptr(node) );
        else{
            this->IUIObject::RemoveChild( boost::python::ptr(node) );
        }
    }
    
    void default_RemoveChild( ::IUIObject * node ) {
        IUIObject::RemoveChild( boost::python::ptr(node) );
    }

    virtual void SetAlpha( ::irr::f32 alpha ) {
        if( bp::override func_SetAlpha = this->get_override( "SetAlpha" ) )
            func_SetAlpha( alpha );
        else{
            this->IUIObject::SetAlpha( alpha );
        }
    }
    
    void default_SetAlpha( ::irr::f32 alpha ) {
        IUIObject::SetAlpha( alpha );
    }

    virtual void SetOrder( ::irr::s32 order ) {
        if( bp::override func_SetOrder = this->get_override( "SetOrder" ) )
            func_SetOrder( order );
        else{
            this->IUIObject::SetOrder( order );
        }
    }
    
    void default_SetOrder( ::irr::s32 order ) {
        IUIObject::SetOrder( order );
    }

    virtual void SetParent( ::IUIObject * parent ) {
        if( bp::override func_SetParent = this->get_override( "SetParent" ) )
            func_SetParent( boost::python::ptr(parent) );
        else{
            this->IUIObject::SetParent( boost::python::ptr(parent) );
        }
    }
    
    void default_SetParent( ::IUIObject * parent ) {
        IUIObject::SetParent( boost::python::ptr(parent) );
    }

    virtual void SetPosition( ::irr::core::vector2d< float > const & pos ) {
        if( bp::override func_SetPosition = this->get_override( "SetPosition" ) )
            func_SetPosition( boost::ref(pos) );
        else{
            this->IUIObject::SetPosition( boost::ref(pos) );
        }
    }
    
    void default_SetPosition( ::irr::core::vector2d< float > const & pos ) {
        IUIObject::SetPosition( boost::ref(pos) );
    }

    virtual void SetRotation( ::irr::f32 rotdeg ) {
        if( bp::override func_SetRotation = this->get_override( "SetRotation" ) )
            func_SetRotation( rotdeg );
        else{
            this->IUIObject::SetRotation( rotdeg );
        }
    }
    
    void default_SetRotation( ::irr::f32 rotdeg ) {
        IUIObject::SetRotation( rotdeg );
    }

    virtual void SetScale( ::irr::core::vector2d< float > const & scale ) {
        if( bp::override func_SetScale = this->get_override( "SetScale" ) )
            func_SetScale( boost::ref(scale) );
        else{
            this->IUIObject::SetScale( boost::ref(scale) );
        }
    }
    
    void default_SetScale( ::irr::core::vector2d< float > const & scale ) {
        IUIObject::SetScale( boost::ref(scale) );
    }

    virtual void SetVisible( bool isvisible ) {
        if( bp::override func_SetVisible = this->get_override( "SetVisible" ) )
            func_SetVisible( isvisible );
        else{
            this->IUIObject::SetVisible( isvisible );
        }
    }
    
    void default_SetVisible( bool isvisible ) {
        IUIObject::SetVisible( isvisible );
    }

    virtual void UpdateAbsolutePosition(  ) {
        if( bp::override func_UpdateAbsolutePosition = this->get_override( "UpdateAbsolutePosition" ) )
            func_UpdateAbsolutePosition(  );
        else{
            this->IUIObject::UpdateAbsolutePosition(  );
        }
    }
    
    void default_UpdateAbsolutePosition(  ) {
        IUIObject::UpdateAbsolutePosition( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->IUIObject::remove(  );
        }
    }
    
    void default_remove(  ) {
        IUIObject::remove( );
    }

};

struct MenuScene_wrapper : MenuScene, bp::wrapper< MenuScene > {

    MenuScene_wrapper(MenuScene const & arg )
    : MenuScene( arg )
      , bp::wrapper< MenuScene >(){
        // copy constructor
        
    }

    MenuScene_wrapper( const std::string& sceneName )
    : MenuScene( sceneName )
      , bp::wrapper< MenuScene >(){
        // null constructor
    
    }

    virtual void Draw(  ) {
        if( bp::override func_Draw = this->get_override( "Draw" ) )
            func_Draw(  );
        else{
            this->MenuScene::Draw(  );
        }
    }
    
    void default_Draw(  ) {
        MenuScene::Draw( );
    }

    virtual void Init(  ) {
        if( bp::override func_Init = this->get_override( "Init" ) )
            func_Init(  );
        else{
            this->MenuScene::Init(  );
        }
    }
    
    void default_Init(  ) {
        MenuScene::Init( );
    }

    virtual void Release(  ) {
        if( bp::override func_Release = this->get_override( "Release" ) )
            func_Release(  );
        else{
            this->MenuScene::Release(  );
        }
    }
    
    void default_Release(  ) {
        MenuScene::Release( );
    }

    virtual void Run(  ) {
        if( bp::override func_Run = this->get_override( "Run" ) )
            func_Run(  );
        else{
            this->MenuScene::Run(  );
        }
    }
    
    void default_Run(  ) {
        MenuScene::Run( );
    }

};

struct MultiplayerScene_wrapper : MultiplayerScene, bp::wrapper< MultiplayerScene > {

    MultiplayerScene_wrapper(MultiplayerScene const & arg )
    : MultiplayerScene( arg )
      , bp::wrapper< MultiplayerScene >(){
        // copy constructor
        
    }

    MultiplayerScene_wrapper( )
    : MultiplayerScene( )
      , bp::wrapper< MultiplayerScene >(){
        // null constructor
    
    }

    virtual void Init(  ) {
        if( bp::override func_Init = this->get_override( "Init" ) )
            func_Init(  );
        else{
            this->MultiplayerScene::Init(  );
        }
    }
    
    void default_Init(  ) {
        MultiplayerScene::Init( );
    }

    virtual void Release(  ) {
        if( bp::override func_Release = this->get_override( "Release" ) )
            func_Release(  );
        else{
            this->MultiplayerScene::Release(  );
        }
    }
    
    void default_Release(  ) {
        MultiplayerScene::Release( );
    }

    virtual void Run(  ) {
        if( bp::override func_Run = this->get_override( "Run" ) )
            func_Run(  );
        else{
            this->MultiplayerScene::Run(  );
        }
    }
    
    void default_Run(  ) {
        MultiplayerScene::Run( );
    }

    virtual void Draw(  ) {
        if( bp::override func_Draw = this->get_override( "Draw" ) )
            func_Draw(  );
        else{
            this->MultiplayerScene::Draw(  );
        }
    }
    
    void default_Draw(  ) {
        GameScene::Draw( );
    }

};

struct RotateUIAnimator_wrapper : RotateUIAnimator, bp::wrapper< RotateUIAnimator > {

    RotateUIAnimator_wrapper(RotateUIAnimator const & arg )
    : RotateUIAnimator( arg )
      , bp::wrapper< RotateUIAnimator >(){
        // copy constructor
        
    }

    RotateUIAnimator_wrapper(::irr::u32 begin, ::irr::u32 duration, ::irr::f32 angle, bool loop=false )
    : RotateUIAnimator( begin, duration, angle, loop )
      , bp::wrapper< RotateUIAnimator >(){
        // constructor
    
    }

    virtual ::RotateUIAnimator * Clone(  ) {
        if( bp::override func_Clone = this->get_override( "Clone" ) )
            return func_Clone(  );
        else{
            return this->RotateUIAnimator::Clone(  );
        }
    }
    
    ::RotateUIAnimator * default_Clone(  ) {
        return RotateUIAnimator::Clone( );
    }

    virtual bool animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
        if( bp::override func_animateUIObject = this->get_override( "animateUIObject" ) )
            return func_animateUIObject( boost::python::ptr(node), timeMS );
        else{
            return this->RotateUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
        }
    }
    
    bool default_animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
        return RotateUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
    }

};

struct ScaleUIAnimator_wrapper : ScaleUIAnimator, bp::wrapper< ScaleUIAnimator > {

    ScaleUIAnimator_wrapper(ScaleUIAnimator const & arg )
    : ScaleUIAnimator( arg )
      , bp::wrapper< ScaleUIAnimator >(){
        // copy constructor
        
    }

    ScaleUIAnimator_wrapper(::irr::u32 begin, ::irr::u32 duration, ::irr::core::vector2d< float > scale, bool loop=false )
    : ScaleUIAnimator( begin, duration, scale, loop )
      , bp::wrapper< ScaleUIAnimator >(){
        // constructor
    
    }

    virtual ::ScaleUIAnimator * Clone(  ) {
        if( bp::override func_Clone = this->get_override( "Clone" ) )
            return func_Clone(  );
        else{
            return this->ScaleUIAnimator::Clone(  );
        }
    }
    
    ::ScaleUIAnimator * default_Clone(  ) {
        return ScaleUIAnimator::Clone( );
    }

    virtual bool animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
        if( bp::override func_animateUIObject = this->get_override( "animateUIObject" ) )
            return func_animateUIObject( boost::python::ptr(node), timeMS );
        else{
            return this->ScaleUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
        }
    }
    
    bool default_animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
        return ScaleUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
    }

};

struct StartScene_wrapper : StartScene, bp::wrapper< StartScene > {

    StartScene_wrapper(StartScene const & arg )
    : StartScene( arg )
      , bp::wrapper< StartScene >(){
        // copy constructor
        
    }

    StartScene_wrapper( )
    : StartScene( )
      , bp::wrapper< StartScene >(){
        // null constructor
    
    }

    virtual void Draw(  ) {
        if( bp::override func_Draw = this->get_override( "Draw" ) )
            func_Draw(  );
        else{
            this->StartScene::Draw(  );
        }
    }
    
    void default_Draw(  ) {
        StartScene::Draw( );
    }

    virtual void Init(  ) {
        if( bp::override func_Init = this->get_override( "Init" ) )
            func_Init(  );
        else{
            this->StartScene::Init(  );
        }
    }
    
    void default_Init(  ) {
        StartScene::Init( );
    }

    virtual void Release(  ) {
        if( bp::override func_Release = this->get_override( "Release" ) )
            func_Release(  );
        else{
            this->StartScene::Release(  );
        }
    }
    
    void default_Release(  ) {
        StartScene::Release( );
    }

    virtual void Run(  ) {
        if( bp::override func_Run = this->get_override( "Run" ) )
            func_Run(  );
        else{
            this->StartScene::Run(  );
        }
    }
    
    void default_Run(  ) {
        StartScene::Run( );
    }

};

struct TranslateUIAnimator_wrapper : TranslateUIAnimator, bp::wrapper< TranslateUIAnimator > {

    TranslateUIAnimator_wrapper(TranslateUIAnimator const & arg )
    : TranslateUIAnimator( arg )
      , bp::wrapper< TranslateUIAnimator >(){
        // copy constructor
        
    }

    TranslateUIAnimator_wrapper(::irr::u32 begin, ::irr::u32 duration, ::irr::core::vector2d< int > const & offset, bool loop=false )
    : TranslateUIAnimator( begin, duration, boost::ref(offset), loop )
      , bp::wrapper< TranslateUIAnimator >(){
        // constructor
    
    }

    virtual ::TranslateUIAnimator * Clone(  ) {
        if( bp::override func_Clone = this->get_override( "Clone" ) )
            return func_Clone(  );
        else{
            return this->TranslateUIAnimator::Clone(  );
        }
    }
    
    ::TranslateUIAnimator * default_Clone(  ) {
        return TranslateUIAnimator::Clone( );
    }

    virtual bool animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
        if( bp::override func_animateUIObject = this->get_override( "animateUIObject" ) )
            return func_animateUIObject( boost::python::ptr(node), timeMS );
        else{
            return this->TranslateUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
        }
    }
    
    bool default_animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
        return TranslateUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
    }

};

struct UIButton_wrapper : UIButton, bp::wrapper< UIButton > {

    UIButton_wrapper(UIButton const & arg )
    : UIButton( arg )
      , bp::wrapper< UIButton >(){
        // copy constructor
        
    }

    UIButton_wrapper(::IUIObject * parent, ::irr::s32 width, ::irr::s32 height, ::irr::s32 order=0, int shape=int(::SQUARE), ::irr::core::vector2d< float > const & position=irr::core::vector2d<float>(0.0f, 0.0f), ::irr::f32 rotdeg=0, ::irr::core::vector2d< float > const & scale=irr::core::vector2d<float>(1.0e+0f, 1.0e+0f) )
    : UIButton( boost::python::ptr(parent), width, height, order, shape, boost::ref(position), rotdeg, boost::ref(scale) )
      , bp::wrapper< UIButton >(){
        // constructor
    
    }

    virtual void Draw(  ) {
        if( bp::override func_Draw = this->get_override( "Draw" ) )
            func_Draw(  );
        else{
            this->UIButton::Draw(  );
        }
    }
    
    void default_Draw(  ) {
        UIButton::Draw( );
    }

    virtual void OnMouseLeftButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseLeftButtonDown = this->get_override( "OnMouseLeftButtonDown" ) )
            func_OnMouseLeftButtonDown( boost::ref(event) );
        else{
            this->UIButton::OnMouseLeftButtonDown( boost::ref(event) );
        }
    }
    
    void default_OnMouseLeftButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        UIButton::OnMouseLeftButtonDown( boost::ref(event) );
    }

    virtual void OnMouseLeftButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseLeftButtonUp = this->get_override( "OnMouseLeftButtonUp" ) )
            func_OnMouseLeftButtonUp( boost::ref(event) );
        else{
            this->UIButton::OnMouseLeftButtonUp( boost::ref(event) );
        }
    }
    
    void default_OnMouseLeftButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        UIButton::OnMouseLeftButtonUp( boost::ref(event) );
    }

    virtual void OnMouseMove( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseMove = this->get_override( "OnMouseMove" ) )
            func_OnMouseMove( boost::ref(event) );
        else{
            this->UIButton::OnMouseMove( boost::ref(event) );
        }
    }
    
    void default_OnMouseMove( ::irr::SEvent::SMouseInput const & event ) {
        UIButton::OnMouseMove( boost::ref(event) );
    }

    virtual void OnMouseRightButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseRightButtonDown = this->get_override( "OnMouseRightButtonDown" ) )
            func_OnMouseRightButtonDown( boost::ref(event) );
        else{
            this->UIButton::OnMouseRightButtonDown( boost::ref(event) );
        }
    }
    
    void default_OnMouseRightButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        UIButton::OnMouseRightButtonDown( boost::ref(event) );
    }

    virtual void OnMouseRightButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseRightButtonUp = this->get_override( "OnMouseRightButtonUp" ) )
            func_OnMouseRightButtonUp( boost::ref(event) );
        else{
            this->UIButton::OnMouseRightButtonUp( boost::ref(event) );
        }
    }
    
    void default_OnMouseRightButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        UIButton::OnMouseRightButtonUp( boost::ref(event) );
    }

    virtual void AddAnimator( ::IUIAnimator * ani ) {
        if( bp::override func_AddAnimator = this->get_override( "AddAnimator" ) )
            func_AddAnimator( boost::python::ptr(ani) );
        else{
            this->IUIObject::AddAnimator( boost::python::ptr(ani) );
        }
    }
    
    void default_AddAnimator( ::IUIAnimator * ani ) {
        IUIObject::AddAnimator( boost::python::ptr(ani) );
    }

    virtual void AddChild( ::IUIObject * child ) {
        if( bp::override func_AddChild = this->get_override( "AddChild" ) )
            func_AddChild( boost::python::ptr(child) );
        else{
            this->IUIObject::AddChild( boost::python::ptr(child) );
        }
    }
    
    void default_AddChild( ::IUIObject * child ) {
        IUIObject::AddChild( boost::python::ptr(child) );
    }

    virtual void DrawTree(  ) {
        if( bp::override func_DrawTree = this->get_override( "DrawTree" ) )
            func_DrawTree(  );
        else{
            this->IUIObject::DrawTree(  );
        }
    }
    
    void default_DrawTree(  ) {
        IUIObject::DrawTree( );
    }

    virtual ::irr::f32 GetAbsoluteAlpha(  ) const  {
        if( bp::override func_GetAbsoluteAlpha = this->get_override( "GetAbsoluteAlpha" ) )
            return func_GetAbsoluteAlpha(  );
        else{
            return this->IUIObject::GetAbsoluteAlpha(  );
        }
    }
    
    ::irr::f32 default_GetAbsoluteAlpha(  ) const  {
        return IUIObject::GetAbsoluteAlpha( );
    }

    virtual ::irr::core::vector2d< float > GetAbsolutePosition(  ) const  {
        if( bp::override func_GetAbsolutePosition = this->get_override( "GetAbsolutePosition" ) )
            return func_GetAbsolutePosition(  );
        else{
            return this->IUIObject::GetAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector2d< float > default_GetAbsolutePosition(  ) const  {
        return IUIObject::GetAbsolutePosition( );
    }

    virtual ::irr::f32 GetAlpha(  ) const  {
        if( bp::override func_GetAlpha = this->get_override( "GetAlpha" ) )
            return func_GetAlpha(  );
        else{
            return this->IUIObject::GetAlpha(  );
        }
    }
    
    ::irr::f32 default_GetAlpha(  ) const  {
        return IUIObject::GetAlpha( );
    }

    virtual ::irr::s32 GetOrder(  ) const  {
        if( bp::override func_GetOrder = this->get_override( "GetOrder" ) )
            return func_GetOrder(  );
        else{
            return this->IUIObject::GetOrder(  );
        }
    }
    
    ::irr::s32 default_GetOrder(  ) const  {
        return IUIObject::GetOrder( );
    }

    virtual ::irr::f32 GetRotation(  ) const  {
        if( bp::override func_GetRotation = this->get_override( "GetRotation" ) )
            return func_GetRotation(  );
        else{
            return this->IUIObject::GetRotation(  );
        }
    }
    
    ::irr::f32 default_GetRotation(  ) const  {
        return IUIObject::GetRotation( );
    }

    virtual bool GetVisible(  ) {
        if( bp::override func_GetVisible = this->get_override( "GetVisible" ) )
            return func_GetVisible(  );
        else{
            return this->IUIObject::GetVisible(  );
        }
    }
    
    bool default_GetVisible(  ) {
        return IUIObject::GetVisible( );
    }

    virtual ::IUIObject * HitTest( ::irr::s32 x, ::irr::s32 y ) {
        if( bp::override func_HitTest = this->get_override( "HitTest" ) )
            return func_HitTest( x, y );
        else{
            return this->IUIObject::HitTest( x, y );
        }
    }
    
    ::IUIObject * default_HitTest( ::irr::s32 x, ::irr::s32 y ) {
        return IUIObject::HitTest( x, y );
    }

    virtual bool IsPointIn( ::irr::s32 x, ::irr::s32 y ) {
        if( bp::override func_IsPointIn = this->get_override( "IsPointIn" ) )
            return func_IsPointIn( x, y );
        else{
            return this->IUIObject::IsPointIn( x, y );
        }
    }
    
    bool default_IsPointIn( ::irr::s32 x, ::irr::s32 y ) {
        return IUIObject::IsPointIn( x, y );
    }

    bool IsPointInCircle( ::irr::s32 x, ::irr::s32 y ){
        return IUIObject::IsPointInCircle( x, y );
    }

    bool IsPointInSquare( ::irr::s32 x, ::irr::s32 y ){
        return IUIObject::IsPointInSquare( x, y );
    }

    virtual void OnAnimate( ::irr::u32 time ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( time );
        else{
            this->IUIObject::OnAnimate( time );
        }
    }
    
    void default_OnAnimate( ::irr::u32 time ) {
        IUIObject::OnAnimate( time );
    }

    virtual void OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            func_OnEvent( boost::ref(event) );
        else{
            this->IUIObject::OnEvent( boost::ref(event) );
        }
    }
    
    void default_OnEvent( ::irr::SEvent const & event ) {
        IUIObject::OnEvent( boost::ref(event) );
    }

    virtual void OnKeyDown( ::irr::SEvent::SKeyInput const & event ) {
        if( bp::override func_OnKeyDown = this->get_override( "OnKeyDown" ) )
            func_OnKeyDown( boost::ref(event) );
        else{
            this->IUIObject::OnKeyDown( boost::ref(event) );
        }
    }
    
    void default_OnKeyDown( ::irr::SEvent::SKeyInput const & event ) {
        IUIObject::OnKeyDown( boost::ref(event) );
    }

    virtual void OnKeyUp( ::irr::SEvent::SKeyInput const & event ) {
        if( bp::override func_OnKeyUp = this->get_override( "OnKeyUp" ) )
            func_OnKeyUp( boost::ref(event) );
        else{
            this->IUIObject::OnKeyUp( boost::ref(event) );
        }
    }
    
    void default_OnKeyUp( ::irr::SEvent::SKeyInput const & event ) {
        IUIObject::OnKeyUp( boost::ref(event) );
    }

    virtual void OnWheel( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnWheel = this->get_override( "OnWheel" ) )
            func_OnWheel( boost::ref(event) );
        else{
            this->IUIObject::OnWheel( boost::ref(event) );
        }
    }
    
    void default_OnWheel( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnWheel( boost::ref(event) );
    }

    virtual void RemoveAll(  ) {
        if( bp::override func_RemoveAll = this->get_override( "RemoveAll" ) )
            func_RemoveAll(  );
        else{
            this->IUIObject::RemoveAll(  );
        }
    }
    
    void default_RemoveAll(  ) {
        IUIObject::RemoveAll( );
    }

    virtual void RemoveAnimator( ::IUIAnimator * ani ) {
        if( bp::override func_RemoveAnimator = this->get_override( "RemoveAnimator" ) )
            func_RemoveAnimator( boost::python::ptr(ani) );
        else{
            this->IUIObject::RemoveAnimator( boost::python::ptr(ani) );
        }
    }
    
    void default_RemoveAnimator( ::IUIAnimator * ani ) {
        IUIObject::RemoveAnimator( boost::python::ptr(ani) );
    }

    virtual void RemoveAnimators(  ) {
        if( bp::override func_RemoveAnimators = this->get_override( "RemoveAnimators" ) )
            func_RemoveAnimators(  );
        else{
            this->IUIObject::RemoveAnimators(  );
        }
    }
    
    void default_RemoveAnimators(  ) {
        IUIObject::RemoveAnimators( );
    }

    virtual void RemoveChild( ::IUIObject * node ) {
        if( bp::override func_RemoveChild = this->get_override( "RemoveChild" ) )
            func_RemoveChild( boost::python::ptr(node) );
        else{
            this->IUIObject::RemoveChild( boost::python::ptr(node) );
        }
    }
    
    void default_RemoveChild( ::IUIObject * node ) {
        IUIObject::RemoveChild( boost::python::ptr(node) );
    }

    virtual void SetAlpha( ::irr::f32 alpha ) {
        if( bp::override func_SetAlpha = this->get_override( "SetAlpha" ) )
            func_SetAlpha( alpha );
        else{
            this->IUIObject::SetAlpha( alpha );
        }
    }
    
    void default_SetAlpha( ::irr::f32 alpha ) {
        IUIObject::SetAlpha( alpha );
    }

    virtual void SetOrder( ::irr::s32 order ) {
        if( bp::override func_SetOrder = this->get_override( "SetOrder" ) )
            func_SetOrder( order );
        else{
            this->IUIObject::SetOrder( order );
        }
    }
    
    void default_SetOrder( ::irr::s32 order ) {
        IUIObject::SetOrder( order );
    }

    virtual void SetParent( ::IUIObject * parent ) {
        if( bp::override func_SetParent = this->get_override( "SetParent" ) )
            func_SetParent( boost::python::ptr(parent) );
        else{
            this->IUIObject::SetParent( boost::python::ptr(parent) );
        }
    }
    
    void default_SetParent( ::IUIObject * parent ) {
        IUIObject::SetParent( boost::python::ptr(parent) );
    }

    virtual void SetPosition( ::irr::core::vector2d< float > const & pos ) {
        if( bp::override func_SetPosition = this->get_override( "SetPosition" ) )
            func_SetPosition( boost::ref(pos) );
        else{
            this->IUIObject::SetPosition( boost::ref(pos) );
        }
    }
    
    void default_SetPosition( ::irr::core::vector2d< float > const & pos ) {
        IUIObject::SetPosition( boost::ref(pos) );
    }

    virtual void SetRotation( ::irr::f32 rotdeg ) {
        if( bp::override func_SetRotation = this->get_override( "SetRotation" ) )
            func_SetRotation( rotdeg );
        else{
            this->IUIObject::SetRotation( rotdeg );
        }
    }
    
    void default_SetRotation( ::irr::f32 rotdeg ) {
        IUIObject::SetRotation( rotdeg );
    }

    virtual void SetScale( ::irr::core::vector2d< float > const & scale ) {
        if( bp::override func_SetScale = this->get_override( "SetScale" ) )
            func_SetScale( boost::ref(scale) );
        else{
            this->IUIObject::SetScale( boost::ref(scale) );
        }
    }
    
    void default_SetScale( ::irr::core::vector2d< float > const & scale ) {
        IUIObject::SetScale( boost::ref(scale) );
    }

    virtual void SetVisible( bool isvisible ) {
        if( bp::override func_SetVisible = this->get_override( "SetVisible" ) )
            func_SetVisible( isvisible );
        else{
            this->IUIObject::SetVisible( isvisible );
        }
    }
    
    void default_SetVisible( bool isvisible ) {
        IUIObject::SetVisible( isvisible );
    }

    virtual void UpdateAbsolutePosition(  ) {
        if( bp::override func_UpdateAbsolutePosition = this->get_override( "UpdateAbsolutePosition" ) )
            func_UpdateAbsolutePosition(  );
        else{
            this->IUIObject::UpdateAbsolutePosition(  );
        }
    }
    
    void default_UpdateAbsolutePosition(  ) {
        IUIObject::UpdateAbsolutePosition( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->IUIObject::remove(  );
        }
    }
    
    void default_remove(  ) {
        IUIObject::remove( );
    }

};

struct UIImage_wrapper : UIImage, bp::wrapper< UIImage > {

    UIImage_wrapper(UIImage const & arg )
    : UIImage( arg )
      , bp::wrapper< UIImage >(){
        // copy constructor
        
    }

    UIImage_wrapper(::IUIObject * parent, ::irr::s32 width, ::irr::s32 height, ::irr::s32 order=0, int shape=int(::SQUARE), ::irr::core::vector2d< float > const & position=irr::core::vector2d<float>(0.0f, 0.0f), ::irr::f32 rotdeg=0, ::irr::core::vector2d< float > const & scale=irr::core::vector2d<float>(1.0e+0f, 1.0e+0f) )
    : UIImage( boost::python::ptr(parent), width, height, order, shape, boost::ref(position), rotdeg, boost::ref(scale) )
      , bp::wrapper< UIImage >(){
        // constructor
    
    }

    virtual void Draw(  ) {
        if( bp::override func_Draw = this->get_override( "Draw" ) )
            func_Draw(  );
        else{
            this->UIImage::Draw(  );
        }
    }
    
    void default_Draw(  ) {
        UIImage::Draw( );
    }

    virtual void AddAnimator( ::IUIAnimator * ani ) {
        if( bp::override func_AddAnimator = this->get_override( "AddAnimator" ) )
            func_AddAnimator( boost::python::ptr(ani) );
        else{
            this->IUIObject::AddAnimator( boost::python::ptr(ani) );
        }
    }
    
    void default_AddAnimator( ::IUIAnimator * ani ) {
        IUIObject::AddAnimator( boost::python::ptr(ani) );
    }

    virtual void AddChild( ::IUIObject * child ) {
        if( bp::override func_AddChild = this->get_override( "AddChild" ) )
            func_AddChild( boost::python::ptr(child) );
        else{
            this->IUIObject::AddChild( boost::python::ptr(child) );
        }
    }
    
    void default_AddChild( ::IUIObject * child ) {
        IUIObject::AddChild( boost::python::ptr(child) );
    }

    virtual void DrawTree(  ) {
        if( bp::override func_DrawTree = this->get_override( "DrawTree" ) )
            func_DrawTree(  );
        else{
            this->IUIObject::DrawTree(  );
        }
    }
    
    void default_DrawTree(  ) {
        IUIObject::DrawTree( );
    }

    virtual ::irr::f32 GetAbsoluteAlpha(  ) const  {
        if( bp::override func_GetAbsoluteAlpha = this->get_override( "GetAbsoluteAlpha" ) )
            return func_GetAbsoluteAlpha(  );
        else{
            return this->IUIObject::GetAbsoluteAlpha(  );
        }
    }
    
    ::irr::f32 default_GetAbsoluteAlpha(  ) const  {
        return IUIObject::GetAbsoluteAlpha( );
    }

    virtual ::irr::core::vector2d< float > GetAbsolutePosition(  ) const  {
        if( bp::override func_GetAbsolutePosition = this->get_override( "GetAbsolutePosition" ) )
            return func_GetAbsolutePosition(  );
        else{
            return this->IUIObject::GetAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector2d< float > default_GetAbsolutePosition(  ) const  {
        return IUIObject::GetAbsolutePosition( );
    }

    virtual ::irr::f32 GetAlpha(  ) const  {
        if( bp::override func_GetAlpha = this->get_override( "GetAlpha" ) )
            return func_GetAlpha(  );
        else{
            return this->IUIObject::GetAlpha(  );
        }
    }
    
    ::irr::f32 default_GetAlpha(  ) const  {
        return IUIObject::GetAlpha( );
    }

    virtual ::irr::s32 GetOrder(  ) const  {
        if( bp::override func_GetOrder = this->get_override( "GetOrder" ) )
            return func_GetOrder(  );
        else{
            return this->IUIObject::GetOrder(  );
        }
    }
    
    ::irr::s32 default_GetOrder(  ) const  {
        return IUIObject::GetOrder( );
    }

    virtual ::irr::f32 GetRotation(  ) const  {
        if( bp::override func_GetRotation = this->get_override( "GetRotation" ) )
            return func_GetRotation(  );
        else{
            return this->IUIObject::GetRotation(  );
        }
    }
    
    ::irr::f32 default_GetRotation(  ) const  {
        return IUIObject::GetRotation( );
    }

    virtual bool GetVisible(  ) {
        if( bp::override func_GetVisible = this->get_override( "GetVisible" ) )
            return func_GetVisible(  );
        else{
            return this->IUIObject::GetVisible(  );
        }
    }
    
    bool default_GetVisible(  ) {
        return IUIObject::GetVisible( );
    }

    virtual ::IUIObject * HitTest( ::irr::s32 x, ::irr::s32 y ) {
        if( bp::override func_HitTest = this->get_override( "HitTest" ) )
            return func_HitTest( x, y );
        else{
            return this->IUIObject::HitTest( x, y );
        }
    }
    
    ::IUIObject * default_HitTest( ::irr::s32 x, ::irr::s32 y ) {
        return IUIObject::HitTest( x, y );
    }

    virtual bool IsPointIn( ::irr::s32 x, ::irr::s32 y ) {
        if( bp::override func_IsPointIn = this->get_override( "IsPointIn" ) )
            return func_IsPointIn( x, y );
        else{
            return this->IUIObject::IsPointIn( x, y );
        }
    }
    
    bool default_IsPointIn( ::irr::s32 x, ::irr::s32 y ) {
        return IUIObject::IsPointIn( x, y );
    }

    bool IsPointInCircle( ::irr::s32 x, ::irr::s32 y ){
        return IUIObject::IsPointInCircle( x, y );
    }

    bool IsPointInSquare( ::irr::s32 x, ::irr::s32 y ){
        return IUIObject::IsPointInSquare( x, y );
    }

    virtual void OnAnimate( ::irr::u32 time ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( time );
        else{
            this->IUIObject::OnAnimate( time );
        }
    }
    
    void default_OnAnimate( ::irr::u32 time ) {
        IUIObject::OnAnimate( time );
    }

    virtual void OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            func_OnEvent( boost::ref(event) );
        else{
            this->IUIObject::OnEvent( boost::ref(event) );
        }
    }
    
    void default_OnEvent( ::irr::SEvent const & event ) {
        IUIObject::OnEvent( boost::ref(event) );
    }

    virtual void OnKeyDown( ::irr::SEvent::SKeyInput const & event ) {
        if( bp::override func_OnKeyDown = this->get_override( "OnKeyDown" ) )
            func_OnKeyDown( boost::ref(event) );
        else{
            this->IUIObject::OnKeyDown( boost::ref(event) );
        }
    }
    
    void default_OnKeyDown( ::irr::SEvent::SKeyInput const & event ) {
        IUIObject::OnKeyDown( boost::ref(event) );
    }

    virtual void OnKeyUp( ::irr::SEvent::SKeyInput const & event ) {
        if( bp::override func_OnKeyUp = this->get_override( "OnKeyUp" ) )
            func_OnKeyUp( boost::ref(event) );
        else{
            this->IUIObject::OnKeyUp( boost::ref(event) );
        }
    }
    
    void default_OnKeyUp( ::irr::SEvent::SKeyInput const & event ) {
        IUIObject::OnKeyUp( boost::ref(event) );
    }

    virtual void OnMouseLeftButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseLeftButtonDown = this->get_override( "OnMouseLeftButtonDown" ) )
            func_OnMouseLeftButtonDown( boost::ref(event) );
        else{
            this->IUIObject::OnMouseLeftButtonDown( boost::ref(event) );
        }
    }
    
    void default_OnMouseLeftButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnMouseLeftButtonDown( boost::ref(event) );
    }

    virtual void OnMouseLeftButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseLeftButtonUp = this->get_override( "OnMouseLeftButtonUp" ) )
            func_OnMouseLeftButtonUp( boost::ref(event) );
        else{
            this->IUIObject::OnMouseLeftButtonUp( boost::ref(event) );
        }
    }
    
    void default_OnMouseLeftButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnMouseLeftButtonUp( boost::ref(event) );
    }

    virtual void OnMouseMove( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseMove = this->get_override( "OnMouseMove" ) )
            func_OnMouseMove( boost::ref(event) );
        else{
            this->IUIObject::OnMouseMove( boost::ref(event) );
        }
    }
    
    void default_OnMouseMove( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnMouseMove( boost::ref(event) );
    }

    virtual void OnMouseRightButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseRightButtonDown = this->get_override( "OnMouseRightButtonDown" ) )
            func_OnMouseRightButtonDown( boost::ref(event) );
        else{
            this->IUIObject::OnMouseRightButtonDown( boost::ref(event) );
        }
    }
    
    void default_OnMouseRightButtonDown( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnMouseRightButtonDown( boost::ref(event) );
    }

    virtual void OnMouseRightButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnMouseRightButtonUp = this->get_override( "OnMouseRightButtonUp" ) )
            func_OnMouseRightButtonUp( boost::ref(event) );
        else{
            this->IUIObject::OnMouseRightButtonUp( boost::ref(event) );
        }
    }
    
    void default_OnMouseRightButtonUp( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnMouseRightButtonUp( boost::ref(event) );
    }

    virtual void OnWheel( ::irr::SEvent::SMouseInput const & event ) {
        if( bp::override func_OnWheel = this->get_override( "OnWheel" ) )
            func_OnWheel( boost::ref(event) );
        else{
            this->IUIObject::OnWheel( boost::ref(event) );
        }
    }
    
    void default_OnWheel( ::irr::SEvent::SMouseInput const & event ) {
        IUIObject::OnWheel( boost::ref(event) );
    }

    virtual void RemoveAll(  ) {
        if( bp::override func_RemoveAll = this->get_override( "RemoveAll" ) )
            func_RemoveAll(  );
        else{
            this->IUIObject::RemoveAll(  );
        }
    }
    
    void default_RemoveAll(  ) {
        IUIObject::RemoveAll( );
    }

    virtual void RemoveAnimator( ::IUIAnimator * ani ) {
        if( bp::override func_RemoveAnimator = this->get_override( "RemoveAnimator" ) )
            func_RemoveAnimator( boost::python::ptr(ani) );
        else{
            this->IUIObject::RemoveAnimator( boost::python::ptr(ani) );
        }
    }
    
    void default_RemoveAnimator( ::IUIAnimator * ani ) {
        IUIObject::RemoveAnimator( boost::python::ptr(ani) );
    }

    virtual void RemoveAnimators(  ) {
        if( bp::override func_RemoveAnimators = this->get_override( "RemoveAnimators" ) )
            func_RemoveAnimators(  );
        else{
            this->IUIObject::RemoveAnimators(  );
        }
    }
    
    void default_RemoveAnimators(  ) {
        IUIObject::RemoveAnimators( );
    }

    virtual void RemoveChild( ::IUIObject * node ) {
        if( bp::override func_RemoveChild = this->get_override( "RemoveChild" ) )
            func_RemoveChild( boost::python::ptr(node) );
        else{
            this->IUIObject::RemoveChild( boost::python::ptr(node) );
        }
    }
    
    void default_RemoveChild( ::IUIObject * node ) {
        IUIObject::RemoveChild( boost::python::ptr(node) );
    }

    virtual void SetAlpha( ::irr::f32 alpha ) {
        if( bp::override func_SetAlpha = this->get_override( "SetAlpha" ) )
            func_SetAlpha( alpha );
        else{
            this->IUIObject::SetAlpha( alpha );
        }
    }
    
    void default_SetAlpha( ::irr::f32 alpha ) {
        IUIObject::SetAlpha( alpha );
    }

    virtual void SetOrder( ::irr::s32 order ) {
        if( bp::override func_SetOrder = this->get_override( "SetOrder" ) )
            func_SetOrder( order );
        else{
            this->IUIObject::SetOrder( order );
        }
    }
    
    void default_SetOrder( ::irr::s32 order ) {
        IUIObject::SetOrder( order );
    }

    virtual void SetParent( ::IUIObject * parent ) {
        if( bp::override func_SetParent = this->get_override( "SetParent" ) )
            func_SetParent( boost::python::ptr(parent) );
        else{
            this->IUIObject::SetParent( boost::python::ptr(parent) );
        }
    }
    
    void default_SetParent( ::IUIObject * parent ) {
        IUIObject::SetParent( boost::python::ptr(parent) );
    }

    virtual void SetPosition( ::irr::core::vector2d< float > const & pos ) {
        if( bp::override func_SetPosition = this->get_override( "SetPosition" ) )
            func_SetPosition( boost::ref(pos) );
        else{
            this->IUIObject::SetPosition( boost::ref(pos) );
        }
    }
    
    void default_SetPosition( ::irr::core::vector2d< float > const & pos ) {
        IUIObject::SetPosition( boost::ref(pos) );
    }

    virtual void SetRotation( ::irr::f32 rotdeg ) {
        if( bp::override func_SetRotation = this->get_override( "SetRotation" ) )
            func_SetRotation( rotdeg );
        else{
            this->IUIObject::SetRotation( rotdeg );
        }
    }
    
    void default_SetRotation( ::irr::f32 rotdeg ) {
        IUIObject::SetRotation( rotdeg );
    }

    virtual void SetScale( ::irr::core::vector2d< float > const & scale ) {
        if( bp::override func_SetScale = this->get_override( "SetScale" ) )
            func_SetScale( boost::ref(scale) );
        else{
            this->IUIObject::SetScale( boost::ref(scale) );
        }
    }
    
    void default_SetScale( ::irr::core::vector2d< float > const & scale ) {
        IUIObject::SetScale( boost::ref(scale) );
    }

    virtual void SetVisible( bool isvisible ) {
        if( bp::override func_SetVisible = this->get_override( "SetVisible" ) )
            func_SetVisible( isvisible );
        else{
            this->IUIObject::SetVisible( isvisible );
        }
    }
    
    void default_SetVisible( bool isvisible ) {
        IUIObject::SetVisible( isvisible );
    }

    virtual void UpdateAbsolutePosition(  ) {
        if( bp::override func_UpdateAbsolutePosition = this->get_override( "UpdateAbsolutePosition" ) )
            func_UpdateAbsolutePosition(  );
        else{
            this->IUIObject::UpdateAbsolutePosition(  );
        }
    }
    
    void default_UpdateAbsolutePosition(  ) {
        IUIObject::UpdateAbsolutePosition( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->IUIObject::remove(  );
        }
    }
    
    void default_remove(  ) {
        IUIObject::remove( );
    }

};

struct IGUIButton_wrapper : irr::gui::IGUIButton, bp::wrapper< irr::gui::IGUIButton > {

    IGUIButton_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIButton( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIButton >(){
        // constructor
    
    }

    virtual bool isAlphaChannelUsed(  ) const {
        bp::override func_isAlphaChannelUsed = this->get_override( "isAlphaChannelUsed" );
        return func_isAlphaChannelUsed(  );
    }

    virtual bool isDrawingBorder(  ) const {
        bp::override func_isDrawingBorder = this->get_override( "isDrawingBorder" );
        return func_isDrawingBorder(  );
    }

    virtual bool isPressed(  ) const {
        bp::override func_isPressed = this->get_override( "isPressed" );
        return func_isPressed(  );
    }

    virtual bool isPushButton(  ) const {
        bp::override func_isPushButton = this->get_override( "isPushButton" );
        return func_isPushButton(  );
    }

    virtual bool isScalingImage(  ) const {
        bp::override func_isScalingImage = this->get_override( "isScalingImage" );
        return func_isScalingImage(  );
    }

    virtual void setDrawBorder( bool border=true ){
        bp::override func_setDrawBorder = this->get_override( "setDrawBorder" );
        func_setDrawBorder( border );
    }

    virtual void setImage( ::irr::video::ITexture * image=0 ){
        bp::override func_setImage = this->get_override( "setImage" );
        func_setImage( boost::python::ptr(image) );
    }

    virtual void setImage( ::irr::video::ITexture * image, ::irr::core::rect< int > const & pos ){
        bp::override func_setImage = this->get_override( "setImage" );
        func_setImage( boost::python::ptr(image), boost::ref(pos) );
    }

    virtual void setIsPushButton( bool isPushButton=true ){
        bp::override func_setIsPushButton = this->get_override( "setIsPushButton" );
        func_setIsPushButton( isPushButton );
    }

    virtual void setOverrideFont( ::irr::gui::IGUIFont * font=0 ){
        bp::override func_setOverrideFont = this->get_override( "setOverrideFont" );
        func_setOverrideFont( boost::python::ptr(font) );
    }

    virtual void setPressed( bool pressed=true ){
        bp::override func_setPressed = this->get_override( "setPressed" );
        func_setPressed( pressed );
    }

    virtual void setPressedImage( ::irr::video::ITexture * image=0 ){
        bp::override func_setPressedImage = this->get_override( "setPressedImage" );
        func_setPressedImage( boost::python::ptr(image) );
    }

    virtual void setPressedImage( ::irr::video::ITexture * image, ::irr::core::rect< int > const & pos ){
        bp::override func_setPressedImage = this->get_override( "setPressedImage" );
        func_setPressedImage( boost::python::ptr(image), boost::ref(pos) );
    }

    virtual void setScaleImage( bool scaleImage=true ){
        bp::override func_setScaleImage = this->get_override( "setScaleImage" );
        func_setScaleImage( scaleImage );
    }

    virtual void setSprite( ::irr::gui::EGUI_BUTTON_STATE state, ::irr::s32 index, ::irr::video::SColor color=irr::video::SColor(255u, 255u, 255u, 255u), bool loop=false ){
        bp::override func_setSprite = this->get_override( "setSprite" );
        func_setSprite( state, index, color, loop );
    }

    virtual void setSpriteBank( ::irr::gui::IGUISpriteBank * bank=0 ){
        bp::override func_setSpriteBank = this->get_override( "setSpriteBank" );
        func_setSpriteBank( boost::python::ptr(bank) );
    }

    virtual void setUseAlphaChannel( bool useAlphaChannel=true ){
        bp::override func_setUseAlphaChannel = this->get_override( "setUseAlphaChannel" );
        func_setUseAlphaChannel( useAlphaChannel );
    }

};

struct IGUIImage_wrapper : irr::gui::IGUIImage, bp::wrapper< irr::gui::IGUIImage > {

    IGUIImage_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIImage( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIImage >(){
        // constructor
    
    }

    virtual bool isAlphaChannelUsed(  ) const {
        bp::override func_isAlphaChannelUsed = this->get_override( "isAlphaChannelUsed" );
        return func_isAlphaChannelUsed(  );
    }

    virtual bool isImageScaled(  ) const {
        bp::override func_isImageScaled = this->get_override( "isImageScaled" );
        return func_isImageScaled(  );
    }

    virtual void setColor( ::irr::video::SColor color ){
        bp::override func_setColor = this->get_override( "setColor" );
        func_setColor( color );
    }

    virtual void setImage( ::irr::video::ITexture * image ){
        bp::override func_setImage = this->get_override( "setImage" );
        func_setImage( boost::python::ptr(image) );
    }

    virtual void setScaleImage( bool scale ){
        bp::override func_setScaleImage = this->get_override( "setScaleImage" );
        func_setScaleImage( scale );
    }

    virtual void setUseAlphaChannel( bool use ){
        bp::override func_setUseAlphaChannel = this->get_override( "setUseAlphaChannel" );
        func_setUseAlphaChannel( use );
    }

};

BOOST_PYTHON_MODULE( UI ){
    bp::enum_< irr::gui::EGUI_BUTTON_STATE>("EGUI_BUTTON_STATE")
        .value("EGBS_BUTTON_UP", irr::gui::EGBS_BUTTON_UP)
        .value("EGBS_BUTTON_DOWN", irr::gui::EGBS_BUTTON_DOWN)
        .value("EGBS_BUTTON_MOUSE_OVER", irr::gui::EGBS_BUTTON_MOUSE_OVER)
        .value("EGBS_BUTTON_MOUSE_OFF", irr::gui::EGBS_BUTTON_MOUSE_OFF)
        .value("EGBS_BUTTON_FOCUSED", irr::gui::EGBS_BUTTON_FOCUSED)
        .value("EGBS_BUTTON_NOT_FOCUSED", irr::gui::EGBS_BUTTON_NOT_FOCUSED)
        .value("EGBS_COUNT", irr::gui::EGBS_COUNT)
        .export_values()
        ;

    bp::enum_< SHAPE_FLAGS>("SHAPE_FLAGS")
        .value("SQUARE", SQUARE)
        .value("CIRCLE", CIRCLE)
        .value("TRIANGLE", TRIANGLE)
        .export_values()
        ;

    bp::class_< Scar::IReferenceCounted >( "IReferenceCounted", bp::init< >() )    
        .def( 
            "drop"
            , (bool ( ::Scar::IReferenceCounted::* )(  ) const)( &::Scar::IReferenceCounted::drop ) )    
        .def( 
            "getReferenceCount"
            , (::irr::s32 ( ::Scar::IReferenceCounted::* )(  ) const)( &::Scar::IReferenceCounted::getReferenceCount ) )    
        .def( 
            "grab"
            , (void ( ::Scar::IReferenceCounted::* )(  ) const)( &::Scar::IReferenceCounted::grab ) );

    bp::class_< IUIAnimator_wrapper, bp::bases< Scar::IReferenceCounted >, boost::noncopyable >( "IUIAnimator" )    
        .def( 
            "Clone"
            , bp::pure_virtual( (::IUIAnimator * ( ::IUIAnimator::* )(  ) )(&::IUIAnimator::Clone) )
                , bp::return_value_policy< bp::reference_existing_object >()
 )    
        .def( 
            "animateUIObject"
            , bp::pure_virtual( (bool ( ::IUIAnimator::* )( ::IUIObject *,::irr::u32 ) )(&::IUIAnimator::animateUIObject) )
            , ( bp::arg("node"), bp::arg("timeMS") ) );

    bp::class_< AlphaChangeUIAnimator_wrapper, bp::bases< IUIAnimator > >( "AlphaChangeUIAnimator", bp::init< irr::u32, irr::u32, irr::f32, irr::f32, bp::optional< bool > >(( bp::arg("begin"), bp::arg("duration"), bp::arg("srcalpha"), bp::arg("taralpha"), bp::arg("loop")=(bool)(false) )) )    
        .def( 
            "Clone"
            , (::AlphaChangeUIAnimator * ( ::AlphaChangeUIAnimator::* )(  ) )(&::AlphaChangeUIAnimator::Clone)
            , (::AlphaChangeUIAnimator * ( AlphaChangeUIAnimator_wrapper::* )(  ) )(&AlphaChangeUIAnimator_wrapper::default_Clone)
                , bp::return_value_policy< bp::reference_existing_object >()
 )    
        .def( 
            "animateUIObject"
            , (bool ( ::AlphaChangeUIAnimator::* )( ::IUIObject *,::irr::u32 ) )(&::AlphaChangeUIAnimator::animateUIObject)
            , (bool ( AlphaChangeUIAnimator_wrapper::* )( ::IUIObject *,::irr::u32 ) )(&AlphaChangeUIAnimator_wrapper::default_animateUIObject)
            , ( bp::arg("node"), bp::arg("timeMS") ) );

    { //::BlinkUIAnimator
        typedef bp::class_< BlinkUIAnimator_wrapper, bp::bases< IUIAnimator > > BlinkUIAnimator_exposer_t;
        BlinkUIAnimator_exposer_t BlinkUIAnimator_exposer = BlinkUIAnimator_exposer_t( "BlinkUIAnimator", bp::init< irr::core::vector2d< float > const & >(( bp::arg("offset") )) );
        bp::scope BlinkUIAnimator_scope( BlinkUIAnimator_exposer );
        bp::implicitly_convertible< irr::core::vector2d< float > const &, BlinkUIAnimator >();
        { //::BlinkUIAnimator::Clone
        
            typedef ::BlinkUIAnimator * ( ::BlinkUIAnimator::*Clone_function_type )(  ) ;
            typedef ::BlinkUIAnimator * ( BlinkUIAnimator_wrapper::*default_Clone_function_type )(  ) ;
            
            BlinkUIAnimator_exposer.def( 
                "Clone"
                , Clone_function_type(&::BlinkUIAnimator::Clone)
                , default_Clone_function_type(&BlinkUIAnimator_wrapper::default_Clone)
                    , bp::return_value_policy< bp::reference_existing_object >()
 );
        
        }
        { //::BlinkUIAnimator::animateUIObject
        
            typedef bool ( ::BlinkUIAnimator::*animateUIObject_function_type )( ::IUIObject *,::irr::u32 ) ;
            typedef bool ( BlinkUIAnimator_wrapper::*default_animateUIObject_function_type )( ::IUIObject *,::irr::u32 ) ;
            
            BlinkUIAnimator_exposer.def( 
                "animateUIObject"
                , animateUIObject_function_type(&::BlinkUIAnimator::animateUIObject)
                , default_animateUIObject_function_type(&BlinkUIAnimator_wrapper::default_animateUIObject)
                , ( bp::arg("node"), bp::arg("timeMS") ) );
        
        }
    }

    bp::class_< DeletionAnimator_wrapper, bp::bases< IUIAnimator > >( "DeletionAnimator", bp::init< irr::u32, irr::u32 >(( bp::arg("now"), bp::arg("time") )) )    
        .def( 
            "Clone"
            , (::IUIAnimator * ( ::DeletionAnimator::* )(  ) )(&::DeletionAnimator::Clone)
            , (::IUIAnimator * ( DeletionAnimator_wrapper::* )(  ) )(&DeletionAnimator_wrapper::default_Clone)
                , bp::return_value_policy< bp::reference_existing_object >()
 )    
        .def( 
            "animateUIObject"
            , (bool ( ::DeletionAnimator::* )( ::IUIObject *,::irr::u32 ) )(&::DeletionAnimator::animateUIObject)
            , (bool ( DeletionAnimator_wrapper::* )( ::IUIObject *,::irr::u32 ) )(&DeletionAnimator_wrapper::default_animateUIObject)
            , ( bp::arg("node"), bp::arg("timeMS") ) );

    bp::class_< GameScene_wrapper, boost::noncopyable >( "GameScene", bp::init< >() )    
		.def_readwrite( "Scenes", &GameScene_wrapper::Scenes )
        .def( 
            "Draw"
            , (void ( ::GameScene::* )(  ) )(&::GameScene::Draw)
            , (void ( GameScene_wrapper::* )(  ) )(&GameScene_wrapper::default_Draw) )    
        .def( 
            "Init"
            , bp::pure_virtual( (void ( ::GameScene::* )(  ) )(&::GameScene::Init) ) )    
        .def( 
            "Release"
            , bp::pure_virtual( (void ( ::GameScene::* )(  ) )(&::GameScene::Release) ) )    
        .def( 
            "Run"
            , bp::pure_virtual( (void ( ::GameScene::* )(  ) )(&::GameScene::Run) ) );

    bp::class_< IUIObject_wrapper, bp::bases< Scar::IReferenceCounted >, boost::noncopyable >( "IUIObject", bp::init< IUIObject *, irr::s32, irr::s32, bp::optional< irr::s32, int, irr::core::vector2d< float > const &, irr::f32, irr::core::vector2d< float > const & > >(( bp::arg("parent"), bp::arg("width"), bp::arg("height"), bp::arg("order")=(::irr::s32)(0), bp::arg("shape")=int(::SQUARE), bp::arg("position")=irr::core::vector2d<float>(0.0f, 0.0f), bp::arg("rotdeg")=0, bp::arg("scale")=irr::core::vector2d<float>(1.0e+0f, 1.0e+0f) )) )    
        .def( 
            "AddAnimator"
            , (void ( ::IUIObject::* )( ::IUIAnimator * ) )(&::IUIObject::AddAnimator)
            , (void ( IUIObject_wrapper::* )( ::IUIAnimator * ) )(&IUIObject_wrapper::default_AddAnimator)
            , ( bp::arg("ani") ) )    
        .def( 
            "AddChild"
            , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::AddChild)
            , (void ( IUIObject_wrapper::* )( ::IUIObject * ) )(&IUIObject_wrapper::default_AddChild)
            , ( bp::arg("child") ) )    
        .def( 
            "AddFunc"
            , (void ( ::IUIObject::* )( ::std::string const &,::std::string const &,::std::string const & ) )( &::IUIObject::AddFunc )
            , ( bp::arg("eventName"), bp::arg("funcName"), bp::arg("ModuleName") ) )    
		.def(
			"GetParent"
			, &::IUIObject::GetParent
			, bp::return_value_policy< bp::reference_existing_object >()
			)	
        .def( 
            "Draw"
            , bp::pure_virtual( (void ( ::IUIObject::* )(  ) )(&::IUIObject::Draw) ) )    
        .def( 
            "DrawTree"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::DrawTree)
            , (void ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_DrawTree) )    
        .def( 
            "GetAbsoluteAlpha"
            , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAbsoluteAlpha)
            , (::irr::f32 ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetAbsoluteAlpha) )    
        .def( 
            "GetAbsolutePosition"
            , (::irr::core::vector2d< float > ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAbsolutePosition)
            , (::irr::core::vector2d< float > ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetAbsolutePosition) )    
        .def( 
            "GetAlpha"
            , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAlpha)
            , (::irr::f32 ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetAlpha) )    
        .def( 
            "GetAnimators"
            , (::std::vector< IUIAnimator* > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAnimators)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetChildren"
            , (::std::vector< IUIObject* > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetOrder"
            , (::irr::s32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetOrder)
            , (::irr::s32 ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetOrder) )    
        .def( 
            "GetPosition"
            , (::irr::core::vector2d< float > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetRotation"
            , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetRotation)
            , (::irr::f32 ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetRotation) )    
        .def( 
            "GetScale"
            , (::irr::core::vector2d< float > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetVisible"
            , (bool ( ::IUIObject::* )(  ) )(&::IUIObject::GetVisible)
            , (bool ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_GetVisible) )    
        .def( 
            "HitTest"
            , (::IUIObject * ( ::IUIObject::* )( ::irr::s32,::irr::s32 ) )(&::IUIObject::HitTest)
            , (::IUIObject * ( IUIObject_wrapper::* )( ::irr::s32,::irr::s32 ) )(&IUIObject_wrapper::default_HitTest)
            , ( bp::arg("x"), bp::arg("y") )
                , bp::return_value_policy< bp::reference_existing_object >()
 )    
        .def( 
            "IsPointIn"
            , (bool ( ::IUIObject::* )( ::irr::s32,::irr::s32 ) )(&::IUIObject::IsPointIn)
            , (bool ( IUIObject_wrapper::* )( ::irr::s32,::irr::s32 ) )(&IUIObject_wrapper::default_IsPointIn)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "IsPointInCircle"
            , (bool ( IUIObject_wrapper::* )( ::irr::s32,::irr::s32 ) )(&IUIObject_wrapper::IsPointInCircle)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "IsPointInSquare"
            , (bool ( IUIObject_wrapper::* )( ::irr::s32,::irr::s32 ) )(&IUIObject_wrapper::IsPointInSquare)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "LoadImage"
            , (void ( ::IUIObject::* )( char * ) )( &::IUIObject::LoadImage )
            , ( bp::arg("arg0") ) )    
        .def( 
            "OnAnimate"
            , (void ( ::IUIObject::* )( ::irr::u32 ) )(&::IUIObject::OnAnimate)
            , (void ( IUIObject_wrapper::* )( ::irr::u32 ) )(&IUIObject_wrapper::default_OnAnimate)
            , ( bp::arg("time") ) )    
        .def( 
            "OnEvent"
            , (void ( ::IUIObject::* )( ::irr::SEvent const & ) )(&::IUIObject::OnEvent)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent const & ) )(&IUIObject_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnKeyDown"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SKeyInput const & ) )(&::IUIObject::OnKeyDown)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SKeyInput const & ) )(&IUIObject_wrapper::default_OnKeyDown)
            , ( bp::arg("event") ) )    
        .def( 
            "OnKeyUp"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SKeyInput const & ) )(&::IUIObject::OnKeyUp)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SKeyInput const & ) )(&IUIObject_wrapper::default_OnKeyUp)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseLeftButtonDown"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnMouseLeftButtonDown)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&IUIObject_wrapper::default_OnMouseLeftButtonDown)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseLeftButtonUp"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnMouseLeftButtonUp)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&IUIObject_wrapper::default_OnMouseLeftButtonUp)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseMove"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnMouseMove)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&IUIObject_wrapper::default_OnMouseMove)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseRightButtonDown"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnMouseRightButtonDown)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&IUIObject_wrapper::default_OnMouseRightButtonDown)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseRightButtonUp"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnMouseRightButtonUp)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&IUIObject_wrapper::default_OnMouseRightButtonUp)
            , ( bp::arg("event") ) )    
        .def( 
            "OnWheel"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnWheel)
            , (void ( IUIObject_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&IUIObject_wrapper::default_OnWheel)
            , ( bp::arg("event") ) )    
        .def( 
            "RemoveAll"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::RemoveAll)
            , (void ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_RemoveAll) )    
        .def( 
            "RemoveAnimator"
            , (void ( ::IUIObject::* )( ::IUIAnimator * ) )(&::IUIObject::RemoveAnimator)
            , (void ( IUIObject_wrapper::* )( ::IUIAnimator * ) )(&IUIObject_wrapper::default_RemoveAnimator)
            , ( bp::arg("ani") ) )    
        .def( 
            "RemoveAnimators"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::RemoveAnimators)
            , (void ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_RemoveAnimators) )    
        .def( 
            "RemoveChild"
            , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::RemoveChild)
            , (void ( IUIObject_wrapper::* )( ::IUIObject * ) )(&IUIObject_wrapper::default_RemoveChild)
            , ( bp::arg("node") ) )    
        .def( 
            "RemoveFunc"
            , (void ( ::IUIObject::* )( ::std::string const & ) )( &::IUIObject::RemoveFunc )
            , ( bp::arg("funcName") ) )    
        .def( 
            "SetAlpha"
            , (void ( ::IUIObject::* )( ::irr::f32 ) )(&::IUIObject::SetAlpha)
            , (void ( IUIObject_wrapper::* )( ::irr::f32 ) )(&IUIObject_wrapper::default_SetAlpha)
            , ( bp::arg("alpha") ) )    
        .def( 
            "SetOrder"
            , (void ( ::IUIObject::* )( ::irr::s32 ) )(&::IUIObject::SetOrder)
            , (void ( IUIObject_wrapper::* )( ::irr::s32 ) )(&IUIObject_wrapper::default_SetOrder)
            , ( bp::arg("order") ) )    
        .def( 
            "SetParent"
            , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::SetParent)
            , (void ( IUIObject_wrapper::* )( ::IUIObject * ) )(&IUIObject_wrapper::default_SetParent)
            , ( bp::arg("parent") ) )    
        .def( 
            "SetPosition"
            , (void ( ::IUIObject::* )( ::irr::core::vector2d< float > const & ) )(&::IUIObject::SetPosition)
            , (void ( IUIObject_wrapper::* )( ::irr::core::vector2d< float > const & ) )(&IUIObject_wrapper::default_SetPosition)
            , ( bp::arg("pos") ) )    
        .def( 
            "SetRotation"
            , (void ( ::IUIObject::* )( ::irr::f32 ) )(&::IUIObject::SetRotation)
            , (void ( IUIObject_wrapper::* )( ::irr::f32 ) )(&IUIObject_wrapper::default_SetRotation)
            , ( bp::arg("rotdeg") ) )    
        .def( 
            "SetScale"
            , (void ( ::IUIObject::* )( ::irr::core::vector2d< float > const & ) )(&::IUIObject::SetScale)
            , (void ( IUIObject_wrapper::* )( ::irr::core::vector2d< float > const & ) )(&IUIObject_wrapper::default_SetScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "SetVisible"
            , (void ( ::IUIObject::* )( bool ) )(&::IUIObject::SetVisible)
            , (void ( IUIObject_wrapper::* )( bool ) )(&IUIObject_wrapper::default_SetVisible)
            , ( bp::arg("isvisible") ) )    
        .def( 
            "UpdateAbsolutePosition"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::UpdateAbsolutePosition)
            , (void ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_UpdateAbsolutePosition) )    
        .def( 
            "remove"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::remove)
            , (void ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_remove) );

    bp::class_< MenuScene_wrapper, bp::bases< GameScene > >( "MenuScene", bp::init< const std::string& >() )    
        .def( 
            "Draw"
            , (void ( ::MenuScene::* )(  ) )(&::MenuScene::Draw)
            , (void ( MenuScene_wrapper::* )(  ) )(&MenuScene_wrapper::default_Draw) )    
        .def( 
            "Init"
            , (void ( ::MenuScene::* )(  ) )(&::MenuScene::Init)
            , (void ( MenuScene_wrapper::* )(  ) )(&MenuScene_wrapper::default_Init) )    
        .def( 
            "Release"
            , (void ( ::MenuScene::* )(  ) )(&::MenuScene::Release)
            , (void ( MenuScene_wrapper::* )(  ) )(&MenuScene_wrapper::default_Release) )    
        .def( 
            "Run"
            , (void ( ::MenuScene::* )(  ) )(&::MenuScene::Run)
            , (void ( MenuScene_wrapper::* )(  ) )(&MenuScene_wrapper::default_Run) );

    bp::class_< MultiplayerScene_wrapper, bp::bases< GameScene > >( "MultiplayerScene", bp::init< >() )    
        .def( 
            "Init"
            , (void ( ::MultiplayerScene::* )(  ) )(&::MultiplayerScene::Init)
            , (void ( MultiplayerScene_wrapper::* )(  ) )(&MultiplayerScene_wrapper::default_Init) )    
        .def( 
            "Release"
            , (void ( ::MultiplayerScene::* )(  ) )(&::MultiplayerScene::Release)
            , (void ( MultiplayerScene_wrapper::* )(  ) )(&MultiplayerScene_wrapper::default_Release) )    
        .def( 
            "Run"
            , (void ( ::MultiplayerScene::* )(  ) )(&::MultiplayerScene::Run)
            , (void ( MultiplayerScene_wrapper::* )(  ) )(&MultiplayerScene_wrapper::default_Run) )    
        .def( 
            "Draw"
            , (void ( ::GameScene::* )(  ) )(&::GameScene::Draw)
            , (void ( MultiplayerScene_wrapper::* )(  ) )(&MultiplayerScene_wrapper::default_Draw) );

    bp::class_< RotateUIAnimator_wrapper, bp::bases< IUIAnimator > >( "RotateUIAnimator", bp::init< irr::u32, irr::u32, irr::f32, bp::optional< bool > >(( bp::arg("begin"), bp::arg("duration"), bp::arg("angle"), bp::arg("loop")=(bool)(false) )) )    
        .def( 
            "Clone"
            , (::RotateUIAnimator * ( ::RotateUIAnimator::* )(  ) )(&::RotateUIAnimator::Clone)
            , (::RotateUIAnimator * ( RotateUIAnimator_wrapper::* )(  ) )(&RotateUIAnimator_wrapper::default_Clone)
                , bp::return_value_policy< bp::reference_existing_object >()
 )    
        .def( 
            "animateUIObject"
            , (bool ( ::RotateUIAnimator::* )( ::IUIObject *,::irr::u32 ) )(&::RotateUIAnimator::animateUIObject)
            , (bool ( RotateUIAnimator_wrapper::* )( ::IUIObject *,::irr::u32 ) )(&RotateUIAnimator_wrapper::default_animateUIObject)
            , ( bp::arg("node"), bp::arg("timeMS") ) );

    bp::class_< ScaleUIAnimator_wrapper, bp::bases< IUIAnimator > >( "ScaleUIAnimator", bp::init< irr::u32, irr::u32, irr::core::vector2d< float >, bp::optional< bool > >(( bp::arg("begin"), bp::arg("duration"), bp::arg("scale"), bp::arg("loop")=(bool)(false) )) )    
        .def( 
            "Clone"
            , (::ScaleUIAnimator * ( ::ScaleUIAnimator::* )(  ) )(&::ScaleUIAnimator::Clone)
            , (::ScaleUIAnimator * ( ScaleUIAnimator_wrapper::* )(  ) )(&ScaleUIAnimator_wrapper::default_Clone)
                , bp::return_value_policy< bp::reference_existing_object >()
 )    
        .def( 
            "animateUIObject"
            , (bool ( ::ScaleUIAnimator::* )( ::IUIObject *,::irr::u32 ) )(&::ScaleUIAnimator::animateUIObject)
            , (bool ( ScaleUIAnimator_wrapper::* )( ::IUIObject *,::irr::u32 ) )(&ScaleUIAnimator_wrapper::default_animateUIObject)
            , ( bp::arg("node"), bp::arg("timeMS") ) );

    bp::class_< StartScene_wrapper, bp::bases< GameScene > >( "StartScene", bp::init< >() )    
        .def( 
            "Draw"
            , (void ( ::StartScene::* )(  ) )(&::StartScene::Draw)
            , (void ( StartScene_wrapper::* )(  ) )(&StartScene_wrapper::default_Draw) )    
        .def( 
            "Init"
            , (void ( ::StartScene::* )(  ) )(&::StartScene::Init)
            , (void ( StartScene_wrapper::* )(  ) )(&StartScene_wrapper::default_Init) )    
        .def( 
            "Release"
            , (void ( ::StartScene::* )(  ) )(&::StartScene::Release)
            , (void ( StartScene_wrapper::* )(  ) )(&StartScene_wrapper::default_Release) )    
        .def( 
            "Run"
            , (void ( ::StartScene::* )(  ) )(&::StartScene::Run)
            , (void ( StartScene_wrapper::* )(  ) )(&StartScene_wrapper::default_Run) );

    bp::class_< TranslateUIAnimator_wrapper, bp::bases< IUIAnimator > >( "TranslateUIAnimator", bp::init< irr::u32, irr::u32, irr::core::vector2d< int > const &, bp::optional< bool > >(( bp::arg("begin"), bp::arg("duration"), bp::arg("offset"), bp::arg("loop")=(bool)(false) )) )    
        .def( 
            "Clone"
            , (::TranslateUIAnimator * ( ::TranslateUIAnimator::* )(  ) )(&::TranslateUIAnimator::Clone)
            , (::TranslateUIAnimator * ( TranslateUIAnimator_wrapper::* )(  ) )(&TranslateUIAnimator_wrapper::default_Clone)
                , bp::return_value_policy< bp::reference_existing_object >()
 )    
        .def( 
            "animateUIObject"
            , (bool ( ::TranslateUIAnimator::* )( ::IUIObject *,::irr::u32 ) )(&::TranslateUIAnimator::animateUIObject)
            , (bool ( TranslateUIAnimator_wrapper::* )( ::IUIObject *,::irr::u32 ) )(&TranslateUIAnimator_wrapper::default_animateUIObject)
            , ( bp::arg("node"), bp::arg("timeMS") ) );


	//////////////////////////////////////////////////////////////////////
//	TimelagUIAnimator( u32 begin, u32 duration, std::string moduleName, std::string funName, bool loop = false );
	// 
	bp::class_< TimelagUIAnimator, bp::bases< IUIAnimator > >( 
		"TimelagUIAnimator",
		bp::init< irr::u32, irr::u32, const std::string&, const std::string& , bp::optional< bool > >
		(( bp::arg("begin"), bp::arg("duration"), bp::arg("moduleName"), bp::arg("funName"), bp::arg("loop")=(bool)(false) )) )    
		.def( 
		"Clone"
		, &TimelagUIAnimator::Clone
		, bp::return_value_policy< bp::reference_existing_object >()
		)    
		.def( 
		"animateUIObject"
		, &TimelagUIAnimator::animateUIObject

		);


    bp::class_< UIButton_wrapper, bp::bases< IUIObject > >( "UIButton", bp::init< IUIObject *, irr::s32, irr::s32, bp::optional< irr::s32, int, irr::core::vector2d< float > const &, irr::f32, irr::core::vector2d< float > const & > >(( bp::arg("parent"), bp::arg("width"), bp::arg("height"), bp::arg("order")=(::irr::s32)(0), bp::arg("shape")=int(::SQUARE), bp::arg("position")=irr::core::vector2d<float>(0.0f, 0.0f), bp::arg("rotdeg")=0, bp::arg("scale")=irr::core::vector2d<float>(1.0e+0f, 1.0e+0f) )) )    
        .def( 
            "Draw"
            , (void ( ::UIButton::* )(  ) )(&::UIButton::Draw)
            , (void ( UIButton_wrapper::* )(  ) )(&UIButton_wrapper::default_Draw) )    
        .def( 
            "OnMouseLeftButtonDown"
            , (void ( ::UIButton::* )( ::irr::SEvent::SMouseInput const & ) )(&::UIButton::OnMouseLeftButtonDown)
            , (void ( UIButton_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&UIButton_wrapper::default_OnMouseLeftButtonDown)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseLeftButtonUp"
            , (void ( ::UIButton::* )( ::irr::SEvent::SMouseInput const & ) )(&::UIButton::OnMouseLeftButtonUp)
            , (void ( UIButton_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&UIButton_wrapper::default_OnMouseLeftButtonUp)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseMove"
            , (void ( ::UIButton::* )( ::irr::SEvent::SMouseInput const & ) )(&::UIButton::OnMouseMove)
            , (void ( UIButton_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&UIButton_wrapper::default_OnMouseMove)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseMoveIn"
            , (void ( ::UIButton::* )(  ) )( &::UIButton::OnMouseMoveIn ) )    
        .def( 
            "OnMouseMoveOut"
            , (void ( ::UIButton::* )(  ) )( &::UIButton::OnMouseMoveOut ) )    
        .def( 
            "OnMouseRightButtonDown"
            , (void ( ::UIButton::* )( ::irr::SEvent::SMouseInput const & ) )(&::UIButton::OnMouseRightButtonDown)
            , (void ( UIButton_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&UIButton_wrapper::default_OnMouseRightButtonDown)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseRightButtonUp"
            , (void ( ::UIButton::* )( ::irr::SEvent::SMouseInput const & ) )(&::UIButton::OnMouseRightButtonUp)
            , (void ( UIButton_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&UIButton_wrapper::default_OnMouseRightButtonUp)
            , ( bp::arg("event") ) )    
        .def( 
            "AddAnimator"
            , (void ( ::IUIObject::* )( ::IUIAnimator * ) )(&::IUIObject::AddAnimator)
            , (void ( UIButton_wrapper::* )( ::IUIAnimator * ) )(&UIButton_wrapper::default_AddAnimator)
            , ( bp::arg("ani") ) )    
        .def( 
            "AddChild"
            , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::AddChild)
            , (void ( UIButton_wrapper::* )( ::IUIObject * ) )(&UIButton_wrapper::default_AddChild)
            , ( bp::arg("child") ) )    
        .def( 
            "DrawTree"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::DrawTree)
            , (void ( UIButton_wrapper::* )(  ) )(&UIButton_wrapper::default_DrawTree) )    
        .def( 
            "GetAbsoluteAlpha"
            , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAbsoluteAlpha)
            , (::irr::f32 ( UIButton_wrapper::* )(  ) const)(&UIButton_wrapper::default_GetAbsoluteAlpha) )    
        .def( 
            "GetAbsolutePosition"
            , (::irr::core::vector2d< float > ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAbsolutePosition)
            , (::irr::core::vector2d< float > ( UIButton_wrapper::* )(  ) const)(&UIButton_wrapper::default_GetAbsolutePosition) )    
        .def( 
            "GetAlpha"
            , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAlpha)
            , (::irr::f32 ( UIButton_wrapper::* )(  ) const)(&UIButton_wrapper::default_GetAlpha) )    
        .def( 
            "GetAnimators"
            , (::std::vector< IUIAnimator* > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAnimators)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetChildren"
            , (::std::vector< IUIObject* > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetOrder"
            , (::irr::s32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetOrder)
            , (::irr::s32 ( UIButton_wrapper::* )(  ) const)(&UIButton_wrapper::default_GetOrder) )    
        .def( 
            "GetPosition"
            , (::irr::core::vector2d< float > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetRotation"
            , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetRotation)
            , (::irr::f32 ( UIButton_wrapper::* )(  ) const)(&UIButton_wrapper::default_GetRotation) )    
        .def( 
            "GetScale"
            , (::irr::core::vector2d< float > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetVisible"
            , (bool ( ::IUIObject::* )(  ) )(&::IUIObject::GetVisible)
            , (bool ( UIButton_wrapper::* )(  ) )(&UIButton_wrapper::default_GetVisible) )    
        .def( 
            "HitTest"
            , (::IUIObject * ( ::IUIObject::* )( ::irr::s32,::irr::s32 ) )(&::IUIObject::HitTest)
            , (::IUIObject * ( UIButton_wrapper::* )( ::irr::s32,::irr::s32 ) )(&UIButton_wrapper::default_HitTest)
            , ( bp::arg("x"), bp::arg("y") )
                , bp::return_value_policy< bp::reference_existing_object >()
 )    
        .def( 
            "IsPointIn"
            , (bool ( ::IUIObject::* )( ::irr::s32,::irr::s32 ) )(&::IUIObject::IsPointIn)
            , (bool ( UIButton_wrapper::* )( ::irr::s32,::irr::s32 ) )(&UIButton_wrapper::default_IsPointIn)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "IsPointInCircle"
            , (bool ( UIButton_wrapper::* )( ::irr::s32,::irr::s32 ) )(&UIButton_wrapper::IsPointInCircle)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "IsPointInSquare"
            , (bool ( UIButton_wrapper::* )( ::irr::s32,::irr::s32 ) )(&UIButton_wrapper::IsPointInSquare)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "OnAnimate"
            , (void ( ::IUIObject::* )( ::irr::u32 ) )(&::IUIObject::OnAnimate)
            , (void ( UIButton_wrapper::* )( ::irr::u32 ) )(&UIButton_wrapper::default_OnAnimate)
            , ( bp::arg("time") ) )    
        .def( 
            "OnEvent"
            , (void ( ::IUIObject::* )( ::irr::SEvent const & ) )(&::IUIObject::OnEvent)
            , (void ( UIButton_wrapper::* )( ::irr::SEvent const & ) )(&UIButton_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnKeyDown"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SKeyInput const & ) )(&::IUIObject::OnKeyDown)
            , (void ( UIButton_wrapper::* )( ::irr::SEvent::SKeyInput const & ) )(&UIButton_wrapper::default_OnKeyDown)
            , ( bp::arg("event") ) )    
        .def( 
            "OnKeyUp"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SKeyInput const & ) )(&::IUIObject::OnKeyUp)
            , (void ( UIButton_wrapper::* )( ::irr::SEvent::SKeyInput const & ) )(&UIButton_wrapper::default_OnKeyUp)
            , ( bp::arg("event") ) )    
        .def( 
            "OnWheel"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnWheel)
            , (void ( UIButton_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&UIButton_wrapper::default_OnWheel)
            , ( bp::arg("event") ) )    
        .def( 
            "RemoveAll"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::RemoveAll)
            , (void ( UIButton_wrapper::* )(  ) )(&UIButton_wrapper::default_RemoveAll) )    
        .def( 
            "RemoveAnimator"
            , (void ( ::IUIObject::* )( ::IUIAnimator * ) )(&::IUIObject::RemoveAnimator)
            , (void ( UIButton_wrapper::* )( ::IUIAnimator * ) )(&UIButton_wrapper::default_RemoveAnimator)
            , ( bp::arg("ani") ) )    
        .def( 
            "RemoveAnimators"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::RemoveAnimators)
            , (void ( UIButton_wrapper::* )(  ) )(&UIButton_wrapper::default_RemoveAnimators) )    
        .def( 
            "RemoveChild"
            , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::RemoveChild)
            , (void ( UIButton_wrapper::* )( ::IUIObject * ) )(&UIButton_wrapper::default_RemoveChild)
            , ( bp::arg("node") ) )    
        .def( 
            "SetAlpha"
            , (void ( ::IUIObject::* )( ::irr::f32 ) )(&::IUIObject::SetAlpha)
            , (void ( UIButton_wrapper::* )( ::irr::f32 ) )(&UIButton_wrapper::default_SetAlpha)
            , ( bp::arg("alpha") ) )    
        .def( 
            "SetOrder"
            , (void ( ::IUIObject::* )( ::irr::s32 ) )(&::IUIObject::SetOrder)
            , (void ( UIButton_wrapper::* )( ::irr::s32 ) )(&UIButton_wrapper::default_SetOrder)
            , ( bp::arg("order") ) )    
        .def( 
            "SetParent"
            , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::SetParent)
            , (void ( UIButton_wrapper::* )( ::IUIObject * ) )(&UIButton_wrapper::default_SetParent)
            , ( bp::arg("parent") ) )    
        .def( 
            "SetPosition"
            , (void ( ::IUIObject::* )( ::irr::core::vector2d< float > const & ) )(&::IUIObject::SetPosition)
            , (void ( UIButton_wrapper::* )( ::irr::core::vector2d< float > const & ) )(&UIButton_wrapper::default_SetPosition)
            , ( bp::arg("pos") ) )    
        .def( 
            "SetRotation"
            , (void ( ::IUIObject::* )( ::irr::f32 ) )(&::IUIObject::SetRotation)
            , (void ( UIButton_wrapper::* )( ::irr::f32 ) )(&UIButton_wrapper::default_SetRotation)
            , ( bp::arg("rotdeg") ) )    
        .def( 
            "SetScale"
            , (void ( ::IUIObject::* )( ::irr::core::vector2d< float > const & ) )(&::IUIObject::SetScale)
            , (void ( UIButton_wrapper::* )( ::irr::core::vector2d< float > const & ) )(&UIButton_wrapper::default_SetScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "SetVisible"
            , (void ( ::IUIObject::* )( bool ) )(&::IUIObject::SetVisible)
            , (void ( UIButton_wrapper::* )( bool ) )(&UIButton_wrapper::default_SetVisible)
            , ( bp::arg("isvisible") ) )    
        .def( 
            "UpdateAbsolutePosition"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::UpdateAbsolutePosition)
            , (void ( UIButton_wrapper::* )(  ) )(&UIButton_wrapper::default_UpdateAbsolutePosition) )    
        .def( 
            "remove"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::remove)
            , (void ( UIButton_wrapper::* )(  ) )(&UIButton_wrapper::default_remove) );

    bp::class_< UIImage_wrapper, bp::bases< IUIObject > >( "UIImage", bp::init< IUIObject *, irr::s32, irr::s32, bp::optional< irr::s32, int, irr::core::vector2d< float > const &, irr::f32, irr::core::vector2d< float > const & > >(( bp::arg("parent"), bp::arg("width"), bp::arg("height"), bp::arg("order")=(::irr::s32)(0), bp::arg("shape")=int(::SQUARE), bp::arg("position")=irr::core::vector2d<float>(0.0f, 0.0f), bp::arg("rotdeg")=0, bp::arg("scale")=irr::core::vector2d<float>(1.0e+0f, 1.0e+0f) )) )    
        .def( 
            "Draw"
            , (void ( ::UIImage::* )(  ) )(&::UIImage::Draw)
            , (void ( UIImage_wrapper::* )(  ) )(&UIImage_wrapper::default_Draw) )    
        .def( 
            "AddAnimator"
            , (void ( ::IUIObject::* )( ::IUIAnimator * ) )(&::IUIObject::AddAnimator)
            , (void ( UIImage_wrapper::* )( ::IUIAnimator * ) )(&UIImage_wrapper::default_AddAnimator)
            , ( bp::arg("ani") ) )    
        .def( 
            "AddChild"
            , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::AddChild)
            , (void ( UIImage_wrapper::* )( ::IUIObject * ) )(&UIImage_wrapper::default_AddChild)
            , ( bp::arg("child") ) )    
        .def( 
            "DrawTree"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::DrawTree)
            , (void ( UIImage_wrapper::* )(  ) )(&UIImage_wrapper::default_DrawTree) )    
        .def( 
            "GetAbsoluteAlpha"
            , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAbsoluteAlpha)
            , (::irr::f32 ( UIImage_wrapper::* )(  ) const)(&UIImage_wrapper::default_GetAbsoluteAlpha) )    
        .def( 
            "GetAbsolutePosition"
            , (::irr::core::vector2d< float > ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAbsolutePosition)
            , (::irr::core::vector2d< float > ( UIImage_wrapper::* )(  ) const)(&UIImage_wrapper::default_GetAbsolutePosition) )    
        .def( 
            "GetAlpha"
            , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAlpha)
            , (::irr::f32 ( UIImage_wrapper::* )(  ) const)(&UIImage_wrapper::default_GetAlpha) )    
        .def( 
            "GetAnimators"
            , (::std::vector< IUIAnimator* > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAnimators)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetChildren"
            , (::std::vector< IUIObject* > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetOrder"
            , (::irr::s32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetOrder)
            , (::irr::s32 ( UIImage_wrapper::* )(  ) const)(&UIImage_wrapper::default_GetOrder) )    
        .def( 
            "GetPosition"
            , (::irr::core::vector2d< float > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetRotation"
            , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetRotation)
            , (::irr::f32 ( UIImage_wrapper::* )(  ) const)(&UIImage_wrapper::default_GetRotation) )    
        .def( 
            "GetScale"
            , (::irr::core::vector2d< float > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetVisible"
            , (bool ( ::IUIObject::* )(  ) )(&::IUIObject::GetVisible)
            , (bool ( UIImage_wrapper::* )(  ) )(&UIImage_wrapper::default_GetVisible) )    
        .def( 
            "HitTest"
            , (::IUIObject * ( ::IUIObject::* )( ::irr::s32,::irr::s32 ) )(&::IUIObject::HitTest)
            , (::IUIObject * ( UIImage_wrapper::* )( ::irr::s32,::irr::s32 ) )(&UIImage_wrapper::default_HitTest)
            , ( bp::arg("x"), bp::arg("y") )
                , bp::return_value_policy< bp::reference_existing_object >()
			)    
        .def( 
            "IsPointIn"
            , (bool ( ::IUIObject::* )( ::irr::s32,::irr::s32 ) )(&::IUIObject::IsPointIn)
            , (bool ( UIImage_wrapper::* )( ::irr::s32,::irr::s32 ) )(&UIImage_wrapper::default_IsPointIn)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "IsPointInCircle"
            , (bool ( UIImage_wrapper::* )( ::irr::s32,::irr::s32 ) )(&UIImage_wrapper::IsPointInCircle)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "IsPointInSquare"
            , (bool ( UIImage_wrapper::* )( ::irr::s32,::irr::s32 ) )(&UIImage_wrapper::IsPointInSquare)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "OnAnimate"
            , (void ( ::IUIObject::* )( ::irr::u32 ) )(&::IUIObject::OnAnimate)
            , (void ( UIImage_wrapper::* )( ::irr::u32 ) )(&UIImage_wrapper::default_OnAnimate)
            , ( bp::arg("time") ) )    
        .def( 
            "OnEvent"
            , (void ( ::IUIObject::* )( ::irr::SEvent const & ) )(&::IUIObject::OnEvent)
            , (void ( UIImage_wrapper::* )( ::irr::SEvent const & ) )(&UIImage_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnKeyDown"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SKeyInput const & ) )(&::IUIObject::OnKeyDown)
            , (void ( UIImage_wrapper::* )( ::irr::SEvent::SKeyInput const & ) )(&UIImage_wrapper::default_OnKeyDown)
            , ( bp::arg("event") ) )    
        .def( 
            "OnKeyUp"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SKeyInput const & ) )(&::IUIObject::OnKeyUp)
            , (void ( UIImage_wrapper::* )( ::irr::SEvent::SKeyInput const & ) )(&UIImage_wrapper::default_OnKeyUp)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseLeftButtonDown"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnMouseLeftButtonDown)
            , (void ( UIImage_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&UIImage_wrapper::default_OnMouseLeftButtonDown)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseLeftButtonUp"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnMouseLeftButtonUp)
            , (void ( UIImage_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&UIImage_wrapper::default_OnMouseLeftButtonUp)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseMove"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnMouseMove)
            , (void ( UIImage_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&UIImage_wrapper::default_OnMouseMove)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseRightButtonDown"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnMouseRightButtonDown)
            , (void ( UIImage_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&UIImage_wrapper::default_OnMouseRightButtonDown)
            , ( bp::arg("event") ) )    
        .def( 
            "OnMouseRightButtonUp"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnMouseRightButtonUp)
            , (void ( UIImage_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&UIImage_wrapper::default_OnMouseRightButtonUp)
            , ( bp::arg("event") ) )    
        .def( 
            "OnWheel"
            , (void ( ::IUIObject::* )( ::irr::SEvent::SMouseInput const & ) )(&::IUIObject::OnWheel)
            , (void ( UIImage_wrapper::* )( ::irr::SEvent::SMouseInput const & ) )(&UIImage_wrapper::default_OnWheel)
            , ( bp::arg("event") ) )    
        .def( 
            "RemoveAll"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::RemoveAll)
            , (void ( UIImage_wrapper::* )(  ) )(&UIImage_wrapper::default_RemoveAll) )    
        .def( 
            "RemoveAnimator"
            , (void ( ::IUIObject::* )( ::IUIAnimator * ) )(&::IUIObject::RemoveAnimator)
            , (void ( UIImage_wrapper::* )( ::IUIAnimator * ) )(&UIImage_wrapper::default_RemoveAnimator)
            , ( bp::arg("ani") ) )    
        .def( 
            "RemoveAnimators"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::RemoveAnimators)
            , (void ( UIImage_wrapper::* )(  ) )(&UIImage_wrapper::default_RemoveAnimators) )    
        .def( 
            "RemoveChild"
            , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::RemoveChild)
            , (void ( UIImage_wrapper::* )( ::IUIObject * ) )(&UIImage_wrapper::default_RemoveChild)
            , ( bp::arg("node") ) )    
        .def( 
            "SetAlpha"
            , (void ( ::IUIObject::* )( ::irr::f32 ) )(&::IUIObject::SetAlpha)
            , (void ( UIImage_wrapper::* )( ::irr::f32 ) )(&UIImage_wrapper::default_SetAlpha)
            , ( bp::arg("alpha") ) )    
        .def( 
            "SetOrder"
            , (void ( ::IUIObject::* )( ::irr::s32 ) )(&::IUIObject::SetOrder)
            , (void ( UIImage_wrapper::* )( ::irr::s32 ) )(&UIImage_wrapper::default_SetOrder)
            , ( bp::arg("order") ) )    
        .def( 
            "SetParent"
            , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::SetParent)
            , (void ( UIImage_wrapper::* )( ::IUIObject * ) )(&UIImage_wrapper::default_SetParent)
            , ( bp::arg("parent") ) )    
        .def( 
            "SetPosition"
            , (void ( ::IUIObject::* )( ::irr::core::vector2d< float > const & ) )(&::IUIObject::SetPosition)
            , (void ( UIImage_wrapper::* )( ::irr::core::vector2d< float > const & ) )(&UIImage_wrapper::default_SetPosition)
            , ( bp::arg("pos") ) )    
        .def( 
            "SetRotation"
            , (void ( ::IUIObject::* )( ::irr::f32 ) )(&::IUIObject::SetRotation)
            , (void ( UIImage_wrapper::* )( ::irr::f32 ) )(&UIImage_wrapper::default_SetRotation)
            , ( bp::arg("rotdeg") ) )    
        .def( 
            "SetScale"
            , (void ( ::IUIObject::* )( ::irr::core::vector2d< float > const & ) )(&::IUIObject::SetScale)
            , (void ( UIImage_wrapper::* )( ::irr::core::vector2d< float > const & ) )(&UIImage_wrapper::default_SetScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "SetVisible"
            , (void ( ::IUIObject::* )( bool ) )(&::IUIObject::SetVisible)
            , (void ( UIImage_wrapper::* )( bool ) )(&UIImage_wrapper::default_SetVisible)
            , ( bp::arg("isvisible") ) )    
        .def( 
            "UpdateAbsolutePosition"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::UpdateAbsolutePosition)
            , (void ( UIImage_wrapper::* )(  ) )(&UIImage_wrapper::default_UpdateAbsolutePosition) )    
        .def( 
            "remove"
            , (void ( ::IUIObject::* )(  ) )(&::IUIObject::remove)
            , (void ( UIImage_wrapper::* )(  ) )(&UIImage_wrapper::default_remove) );

    bp::class_< IGUIButton_wrapper, boost::noncopyable >( "IGUIButton", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "isAlphaChannelUsed"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIButton::* )(  ) const)(&::irr::gui::IGUIButton::isAlphaChannelUsed) ) )    
        .def( 
            "isDrawingBorder"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIButton::* )(  ) const)(&::irr::gui::IGUIButton::isDrawingBorder) ) )    
        .def( 
            "isPressed"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIButton::* )(  ) const)(&::irr::gui::IGUIButton::isPressed) ) )    
        .def( 
            "isPushButton"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIButton::* )(  ) const)(&::irr::gui::IGUIButton::isPushButton) ) )    
        .def( 
            "isScalingImage"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIButton::* )(  ) const)(&::irr::gui::IGUIButton::isScalingImage) ) )    
        .def( 
            "setDrawBorder"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( bool ) )(&::irr::gui::IGUIButton::setDrawBorder) )
            , ( bp::arg("border")=(bool)(true) ) )    
        .def( 
            "setImage"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( ::irr::video::ITexture * ) )(&::irr::gui::IGUIButton::setImage) )
            , ( bp::arg("image")=bp::object() ) )    
        .def( 
            "setImage"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( ::irr::video::ITexture *,::irr::core::rect< int > const & ) )(&::irr::gui::IGUIButton::setImage) )
            , ( bp::arg("image"), bp::arg("pos") ) )    
        .def( 
            "setIsPushButton"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( bool ) )(&::irr::gui::IGUIButton::setIsPushButton) )
            , ( bp::arg("isPushButton")=(bool)(true) ) )    
        .def( 
            "setOverrideFont"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( ::irr::gui::IGUIFont * ) )(&::irr::gui::IGUIButton::setOverrideFont) )
            , ( bp::arg("font")=bp::object() ) )    
        .def( 
            "setPressed"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( bool ) )(&::irr::gui::IGUIButton::setPressed) )
            , ( bp::arg("pressed")=(bool)(true) ) )    
        .def( 
            "setPressedImage"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( ::irr::video::ITexture * ) )(&::irr::gui::IGUIButton::setPressedImage) )
            , ( bp::arg("image")=bp::object() ) )    
        .def( 
            "setPressedImage"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( ::irr::video::ITexture *,::irr::core::rect< int > const & ) )(&::irr::gui::IGUIButton::setPressedImage) )
            , ( bp::arg("image"), bp::arg("pos") ) )    
        .def( 
            "setScaleImage"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( bool ) )(&::irr::gui::IGUIButton::setScaleImage) )
            , ( bp::arg("scaleImage")=(bool)(true) ) )    
        .def( 
            "setSprite"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( ::irr::gui::EGUI_BUTTON_STATE,::irr::s32,::irr::video::SColor,bool ) )(&::irr::gui::IGUIButton::setSprite) )
            , ( bp::arg("state"), bp::arg("index"), bp::arg("color")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("loop")=(bool)(false) ) )    
        .def( 
            "setSpriteBank"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( ::irr::gui::IGUISpriteBank * ) )(&::irr::gui::IGUIButton::setSpriteBank) )
            , ( bp::arg("bank")=bp::object() ) )    
        .def( 
            "setUseAlphaChannel"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( bool ) )(&::irr::gui::IGUIButton::setUseAlphaChannel) )
            , ( bp::arg("useAlphaChannel")=(bool)(true) ) );

    bp::class_< IGUIImage_wrapper, boost::noncopyable >( "IGUIImage", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "isAlphaChannelUsed"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIImage::* )(  ) const)(&::irr::gui::IGUIImage::isAlphaChannelUsed) ) )    
        .def( 
            "isImageScaled"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIImage::* )(  ) const)(&::irr::gui::IGUIImage::isImageScaled) ) )    
        .def( 
            "setColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIImage::* )( ::irr::video::SColor ) )(&::irr::gui::IGUIImage::setColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setImage"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIImage::* )( ::irr::video::ITexture * ) )(&::irr::gui::IGUIImage::setImage) )
            , ( bp::arg("image") ) )    
        .def( 
            "setScaleImage"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIImage::* )( bool ) )(&::irr::gui::IGUIImage::setScaleImage) )
            , ( bp::arg("scale") ) )    
        .def( 
            "setUseAlphaChannel"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIImage::* )( bool ) )(&::irr::gui::IGUIImage::setUseAlphaChannel) )
            , ( bp::arg("use") ) );
}
