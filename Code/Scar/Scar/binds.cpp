//// This file has been generated by Py++.
//
//#include "def.h"
//
//#include "AllAnimators.h"
//
//#include "AlphaChangeUIAnimator.h"
//
//#include "BlinkUIAnimator.h"
//
//#include "DeletionUIAnimator.h"
//
//#include "IUIAnimator.h"
//
//#include "IUIObject.h"
//
//#include "MyIReferenceCounted.h"
//
//#include "RotateUIAnimator.h"
//
//#include "ScaleUIAnimator.h"
//
//#include "TranslateUIAnimator.h"
//
//#include "UIAnimators.h"
//
//#include "UIManager.h"
//
//#include "UIObject.h"
//
//namespace bp = boost::python;
//
//struct IUIAnimator_wrapper : IUIAnimator, bp::wrapper< IUIAnimator > {
//
//    IUIAnimator_wrapper()
//    : IUIAnimator()
//      , bp::wrapper< IUIAnimator >(){
//        // null constructor
//        
//    }
//
//    virtual ::IUIAnimator * Clone(  ){
//        bp::override func_Clone = this->get_override( "Clone" );
//        return func_Clone(  );
//    }
//
//    virtual bool animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ){
//        bp::override func_animateUIObject = this->get_override( "animateUIObject" );
//        return func_animateUIObject( boost::python::ptr(node), timeMS );
//    }
//
//};
//
//struct AlphaChangeUIAnimator_wrapper : AlphaChangeUIAnimator, bp::wrapper< AlphaChangeUIAnimator > {
//
//    AlphaChangeUIAnimator_wrapper(AlphaChangeUIAnimator const & arg )
//    : AlphaChangeUIAnimator( arg )
//      , bp::wrapper< AlphaChangeUIAnimator >(){
//        // copy constructor
//        
//    }
//
//    AlphaChangeUIAnimator_wrapper(::irr::u32 begin, ::irr::u32 duration, ::irr::f32 srcalpha, ::irr::f32 taralpha, bool loop=false )
//    : AlphaChangeUIAnimator( begin, duration, srcalpha, taralpha, loop )
//      , bp::wrapper< AlphaChangeUIAnimator >(){
//        // constructor
//    
//    }
//
//    virtual ::AlphaChangeUIAnimator * Clone(  ) {
//        if( bp::override func_Clone = this->get_override( "Clone" ) )
//            return func_Clone(  );
//        else{
//            return this->AlphaChangeUIAnimator::Clone(  );
//        }
//    }
//    
//    ::AlphaChangeUIAnimator * default_Clone(  ) {
//        return AlphaChangeUIAnimator::Clone( );
//    }
//
//    virtual bool animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
//        if( bp::override func_animateUIObject = this->get_override( "animateUIObject" ) )
//            return func_animateUIObject( boost::python::ptr(node), timeMS );
//        else{
//            return this->AlphaChangeUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
//        }
//    }
//    
//    bool default_animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
//        return AlphaChangeUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
//    }
//
//};
//
//struct BlinkUIAnimator_wrapper : BlinkUIAnimator, bp::wrapper< BlinkUIAnimator > {
//
//    BlinkUIAnimator_wrapper(BlinkUIAnimator const & arg )
//    : BlinkUIAnimator( arg )
//      , bp::wrapper< BlinkUIAnimator >(){
//        // copy constructor
//        
//    }
//
//    BlinkUIAnimator_wrapper(::irr::core::vector2d< float > const & offset )
//    : BlinkUIAnimator( boost::ref(offset) )
//      , bp::wrapper< BlinkUIAnimator >(){
//        // constructor
//    
//    }
//
//    virtual ::BlinkUIAnimator * Clone(  ) {
//        if( bp::override func_Clone = this->get_override( "Clone" ) )
//            return func_Clone(  );
//        else{
//            return this->BlinkUIAnimator::Clone(  );
//        }
//    }
//    
//    ::BlinkUIAnimator * default_Clone(  ) {
//        return BlinkUIAnimator::Clone( );
//    }
//
//    virtual bool animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
//        if( bp::override func_animateUIObject = this->get_override( "animateUIObject" ) )
//            return func_animateUIObject( boost::python::ptr(node), timeMS );
//        else{
//            return this->BlinkUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
//        }
//    }
//    
//    bool default_animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
//        return BlinkUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
//    }
//
//};
//
//struct DeletionAnimator_wrapper : DeletionAnimator, bp::wrapper< DeletionAnimator > {
//
//    DeletionAnimator_wrapper(DeletionAnimator const & arg )
//    : DeletionAnimator( arg )
//      , bp::wrapper< DeletionAnimator >(){
//        // copy constructor
//        
//    }
//
//    DeletionAnimator_wrapper(::irr::u32 now, ::irr::u32 time )
//    : DeletionAnimator( now, time )
//      , bp::wrapper< DeletionAnimator >(){
//        // constructor
//    
//    }
//
//    virtual ::IUIAnimator * Clone(  ) {
//        if( bp::override func_Clone = this->get_override( "Clone" ) )
//            return func_Clone(  );
//        else{
//            return this->DeletionAnimator::Clone(  );
//        }
//    }
//    
//    ::IUIAnimator * default_Clone(  ) {
//        return DeletionAnimator::Clone( );
//    }
//
//    virtual bool animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
//        if( bp::override func_animateUIObject = this->get_override( "animateUIObject" ) )
//            return func_animateUIObject( boost::python::ptr(node), timeMS );
//        else{
//            return this->DeletionAnimator::animateUIObject( boost::python::ptr(node), timeMS );
//        }
//    }
//    
//    bool default_animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
//        return DeletionAnimator::animateUIObject( boost::python::ptr(node), timeMS );
//    }
//
//};
//
//struct IUIObject_wrapper : IUIObject, bp::wrapper< IUIObject > {
//
//    IUIObject_wrapper(::IUIObject * parent, ::irr::video::IVideoDriver * driver, ::irr::s32 width, ::irr::s32 height, ::irr::s32 order=0, ::irr::core::vector2d< float > const & position=irr::core::vector2d<float>(0.0f, 0.0f), ::irr::f32 rotdeg=0, ::irr::core::vector2d< float > const & scale=irr::core::vector2d<float>(1.0e+0f, 1.0e+0f) )
//    : IUIObject( boost::python::ptr(parent), boost::python::ptr(driver), width, height, order, boost::ref(position), rotdeg, boost::ref(scale) )
//      , bp::wrapper< IUIObject >(){
//        // constructor
//    
//    }
//
//    virtual void AddAnimator( ::IUIAnimator * ani ) {
//        if( bp::override func_AddAnimator = this->get_override( "AddAnimator" ) )
//            func_AddAnimator( boost::python::ptr(ani) );
//        else{
//            this->IUIObject::AddAnimator( boost::python::ptr(ani) );
//        }
//    }
//    
//    void default_AddAnimator( ::IUIAnimator * ani ) {
//        IUIObject::AddAnimator( boost::python::ptr(ani) );
//    }
//
//    virtual void AddChild( ::IUIObject * child ) {
//        if( bp::override func_AddChild = this->get_override( "AddChild" ) )
//            func_AddChild( boost::python::ptr(child) );
//        else{
//            this->IUIObject::AddChild( boost::python::ptr(child) );
//        }
//    }
//    
//    void default_AddChild( ::IUIObject * child ) {
//        IUIObject::AddChild( boost::python::ptr(child) );
//    }
//
//    virtual void Draw(  ){
//        bp::override func_Draw = this->get_override( "Draw" );
//        func_Draw(  );
//    }
//
//    virtual void DrawTree(  ) {
//        if( bp::override func_DrawTree = this->get_override( "DrawTree" ) )
//            func_DrawTree(  );
//        else{
//            this->IUIObject::DrawTree(  );
//        }
//    }
//    
//    void default_DrawTree(  ) {
//        IUIObject::DrawTree( );
//    }
//
//    virtual ::irr::f32 GetAbsoluteAlpha(  ) const  {
//        if( bp::override func_GetAbsoluteAlpha = this->get_override( "GetAbsoluteAlpha" ) )
//            return func_GetAbsoluteAlpha(  );
//        else{
//            return this->IUIObject::GetAbsoluteAlpha(  );
//        }
//    }
//    
//    ::irr::f32 default_GetAbsoluteAlpha(  ) const  {
//        return IUIObject::GetAbsoluteAlpha( );
//    }
//
//    virtual ::irr::core::vector2d< float > GetAbsolutePosition(  ) const  {
//        if( bp::override func_GetAbsolutePosition = this->get_override( "GetAbsolutePosition" ) )
//            return func_GetAbsolutePosition(  );
//        else{
//            return this->IUIObject::GetAbsolutePosition(  );
//        }
//    }
//    
//    ::irr::core::vector2d< float > default_GetAbsolutePosition(  ) const  {
//        return IUIObject::GetAbsolutePosition( );
//    }
//
//    virtual ::irr::f32 GetAlpha(  ) const  {
//        if( bp::override func_GetAlpha = this->get_override( "GetAlpha" ) )
//            return func_GetAlpha(  );
//        else{
//            return this->IUIObject::GetAlpha(  );
//        }
//    }
//    
//    ::irr::f32 default_GetAlpha(  ) const  {
//        return IUIObject::GetAlpha( );
//    }
//
//    virtual ::irr::s32 GetOrder(  ) const  {
//        if( bp::override func_GetOrder = this->get_override( "GetOrder" ) )
//            return func_GetOrder(  );
//        else{
//            return this->IUIObject::GetOrder(  );
//        }
//    }
//    
//    ::irr::s32 default_GetOrder(  ) const  {
//        return IUIObject::GetOrder( );
//    }
//    
//    virtual ::irr::f32 GetRotation(  ) const  {
//        if( bp::override func_GetRotation = this->get_override( "GetRotation" ) )
//            return func_GetRotation(  );
//        else{
//            return this->IUIObject::GetRotation(  );
//        }
//    }
//    
//    ::irr::f32 default_GetRotation(  ) const  {
//        return IUIObject::GetRotation( );
//    }
//
//    virtual bool GetVisible(  ) {
//        if( bp::override func_GetVisible = this->get_override( "GetVisible" ) )
//            return func_GetVisible(  );
//        else{
//            return this->IUIObject::GetVisible(  );
//        }
//    }
//    
//    bool default_GetVisible(  ) {
//        return IUIObject::GetVisible( );
//    }
//
//    virtual ::IUIObject * HitTest( ::irr::s32 x, ::irr::s32 y ) {
//        if( bp::override func_HitTest = this->get_override( "HitTest" ) )
//            return func_HitTest( x, y );
//        else{
//            return this->IUIObject::HitTest( x, y );
//        }
//    }
//    
//    ::IUIObject * default_HitTest( ::irr::s32 x, ::irr::s32 y ) {
//        return IUIObject::HitTest( x, y );
//    }
//
//    virtual void OnAnimate( ::irr::u32 time ) {
//        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
//            func_OnAnimate( time );
//        else{
//            this->IUIObject::OnAnimate( time );
//        }
//    }
//    
//    void default_OnAnimate( ::irr::u32 time ) {
//        IUIObject::OnAnimate( time );
//    }
//
//    virtual void RemoveAll(  ) {
//        if( bp::override func_RemoveAll = this->get_override( "RemoveAll" ) )
//            func_RemoveAll(  );
//        else{
//            this->IUIObject::RemoveAll(  );
//        }
//    }
//    
//    void default_RemoveAll(  ) {
//        IUIObject::RemoveAll( );
//    }
//
//    virtual void RemoveAnimator( ::IUIAnimator * ani ) {
//        if( bp::override func_RemoveAnimator = this->get_override( "RemoveAnimator" ) )
//            func_RemoveAnimator( boost::python::ptr(ani) );
//        else{
//            this->IUIObject::RemoveAnimator( boost::python::ptr(ani) );
//        }
//    }
//    
//    void default_RemoveAnimator( ::IUIAnimator * ani ) {
//        IUIObject::RemoveAnimator( boost::python::ptr(ani) );
//    }
//
//    virtual void RemoveAnimators(  ) {
//        if( bp::override func_RemoveAnimators = this->get_override( "RemoveAnimators" ) )
//            func_RemoveAnimators(  );
//        else{
//            this->IUIObject::RemoveAnimators(  );
//        }
//    }
//    
//    void default_RemoveAnimators(  ) {
//        IUIObject::RemoveAnimators( );
//    }
//
//    virtual void RemoveChild( ::IUIObject * node ) {
//        if( bp::override func_RemoveChild = this->get_override( "RemoveChild" ) )
//            func_RemoveChild( boost::python::ptr(node) );
//        else{
//            this->IUIObject::RemoveChild( boost::python::ptr(node) );
//        }
//    }
//    
//    void default_RemoveChild( ::IUIObject * node ) {
//        IUIObject::RemoveChild( boost::python::ptr(node) );
//    }
//
//    virtual void SetAlpha( ::irr::f32 alpha ) {
//        if( bp::override func_SetAlpha = this->get_override( "SetAlpha" ) )
//            func_SetAlpha( alpha );
//        else{
//            this->IUIObject::SetAlpha( alpha );
//        }
//    }
//    
//    void default_SetAlpha( ::irr::f32 alpha ) {
//        IUIObject::SetAlpha( alpha );
//    }
//
//    virtual void SetOrder( ::irr::s32 order ) {
//        if( bp::override func_SetOrder = this->get_override( "SetOrder" ) )
//            func_SetOrder( order );
//        else{
//            this->IUIObject::SetOrder( order );
//        }
//    }
//    
//    void default_SetOrder( ::irr::s32 order ) {
//        IUIObject::SetOrder( order );
//    }
//
//    virtual void SetParent( ::IUIObject * parent ) {
//        if( bp::override func_SetParent = this->get_override( "SetParent" ) )
//            func_SetParent( boost::python::ptr(parent) );
//        else{
//            this->IUIObject::SetParent( boost::python::ptr(parent) );
//        }
//    }
//    
//    void default_SetParent( ::IUIObject * parent ) {
//        IUIObject::SetParent( boost::python::ptr(parent) );
//    }
//
//    virtual void SetPosition( ::irr::core::vector2d< float > const & pos ) {
//        if( bp::override func_SetPosition = this->get_override( "SetPosition" ) )
//            func_SetPosition( boost::ref(pos) );
//        else{
//            this->IUIObject::SetPosition( boost::ref(pos) );
//        }
//    }
//    
//    void default_SetPosition( ::irr::core::vector2d< float > const & pos ) {
//        IUIObject::SetPosition( boost::ref(pos) );
//    }
//
//    virtual void SetRotation( ::irr::f32 rotdeg ) {
//        if( bp::override func_SetRotation = this->get_override( "SetRotation" ) )
//            func_SetRotation( rotdeg );
//        else{
//            this->IUIObject::SetRotation( rotdeg );
//        }
//    }
//    
//    void default_SetRotation( ::irr::f32 rotdeg ) {
//        IUIObject::SetRotation( rotdeg );
//    }
//
//    virtual void SetScale( ::irr::core::vector2d< float > const & scale ) {
//        if( bp::override func_SetScale = this->get_override( "SetScale" ) )
//            func_SetScale( boost::ref(scale) );
//        else{
//            this->IUIObject::SetScale( boost::ref(scale) );
//        }
//    }
//    
//    void default_SetScale( ::irr::core::vector2d< float > const & scale ) {
//        IUIObject::SetScale( boost::ref(scale) );
//    }
//
//    virtual void SetVisible( bool isvisible ) {
//        if( bp::override func_SetVisible = this->get_override( "SetVisible" ) )
//            func_SetVisible( isvisible );
//        else{
//            this->IUIObject::SetVisible( isvisible );
//        }
//    }
//    
//    void default_SetVisible( bool isvisible ) {
//        IUIObject::SetVisible( isvisible );
//    }
//
//    virtual void UpdateAbsolutePosition(  ) {
//        if( bp::override func_UpdateAbsolutePosition = this->get_override( "UpdateAbsolutePosition" ) )
//            func_UpdateAbsolutePosition(  );
//        else{
//            this->IUIObject::UpdateAbsolutePosition(  );
//        }
//    }
//    
//    void default_UpdateAbsolutePosition(  ) {
//        IUIObject::UpdateAbsolutePosition( );
//    }
//
//    virtual void remove(  ) {
//        if( bp::override func_remove = this->get_override( "remove" ) )
//            func_remove(  );
//        else{
//            this->IUIObject::remove(  );
//        }
//    }
//    
//    void default_remove(  ) {
//        IUIObject::remove( );
//    }
//
//};
//
//struct RotateUIAnimator_wrapper : RotateUIAnimator, bp::wrapper< RotateUIAnimator > {
//
//    RotateUIAnimator_wrapper(RotateUIAnimator const & arg )
//    : RotateUIAnimator( arg )
//      , bp::wrapper< RotateUIAnimator >(){
//        // copy constructor
//        
//    }
//
//    RotateUIAnimator_wrapper(::irr::u32 begin, ::irr::u32 duration, ::irr::f32 angle, bool loop=false )
//    : RotateUIAnimator( begin, duration, angle, loop )
//      , bp::wrapper< RotateUIAnimator >(){
//        // constructor
//    
//    }
//
//    virtual ::RotateUIAnimator * Clone(  ) {
//        if( bp::override func_Clone = this->get_override( "Clone" ) )
//            return func_Clone(  );
//        else{
//            return this->RotateUIAnimator::Clone(  );
//        }
//    }
//    
//    ::RotateUIAnimator * default_Clone(  ) {
//        return RotateUIAnimator::Clone( );
//    }
//
//    virtual bool animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
//        if( bp::override func_animateUIObject = this->get_override( "animateUIObject" ) )
//            return func_animateUIObject( boost::python::ptr(node), timeMS );
//        else{
//            return this->RotateUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
//        }
//    }
//    
//    bool default_animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
//        return RotateUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
//    }
//
//};
//
//struct ScaleUIAnimator_wrapper : ScaleUIAnimator, bp::wrapper< ScaleUIAnimator > {
//
//    ScaleUIAnimator_wrapper(ScaleUIAnimator const & arg )
//    : ScaleUIAnimator( arg )
//      , bp::wrapper< ScaleUIAnimator >(){
//        // copy constructor
//        
//    }
//
//    ScaleUIAnimator_wrapper(::irr::u32 begin, ::irr::u32 duration, ::irr::core::vector2d< float > scale, bool loop=false )
//    : ScaleUIAnimator( begin, duration, scale, loop )
//      , bp::wrapper< ScaleUIAnimator >(){
//        // constructor
//    
//    }
//
//    virtual ::ScaleUIAnimator * Clone(  ) {
//        if( bp::override func_Clone = this->get_override( "Clone" ) )
//            return func_Clone(  );
//        else{
//            return this->ScaleUIAnimator::Clone(  );
//        }
//    }
//    
//    ::ScaleUIAnimator * default_Clone(  ) {
//        return ScaleUIAnimator::Clone( );
//    }
//
//    virtual bool animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
//        if( bp::override func_animateUIObject = this->get_override( "animateUIObject" ) )
//            return func_animateUIObject( boost::python::ptr(node), timeMS );
//        else{
//            return this->ScaleUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
//        }
//    }
//    
//    bool default_animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
//        return ScaleUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
//    }
//
//};
//
//struct TranslateUIAnimator_wrapper : TranslateUIAnimator, bp::wrapper< TranslateUIAnimator > {
//
//    TranslateUIAnimator_wrapper(TranslateUIAnimator const & arg )
//    : TranslateUIAnimator( arg )
//      , bp::wrapper< TranslateUIAnimator >(){
//        // copy constructor
//        
//    }
//
//    TranslateUIAnimator_wrapper(::irr::u32 begin, ::irr::u32 duration, ::irr::core::vector2d< int > const & offset, bool loop=false )
//    : TranslateUIAnimator( begin, duration, boost::ref(offset), loop )
//      , bp::wrapper< TranslateUIAnimator >(){
//        // constructor
//    
//    }
//
//    virtual ::TranslateUIAnimator * Clone(  ) {
//        if( bp::override func_Clone = this->get_override( "Clone" ) )
//            return func_Clone(  );
//        else{
//            return this->TranslateUIAnimator::Clone(  );
//        }
//    }
//    
//    ::TranslateUIAnimator * default_Clone(  ) {
//        return TranslateUIAnimator::Clone( );
//    }
//
//    virtual bool animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
//        if( bp::override func_animateUIObject = this->get_override( "animateUIObject" ) )
//            return func_animateUIObject( boost::python::ptr(node), timeMS );
//        else{
//            return this->TranslateUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
//        }
//    }
//    
//    bool default_animateUIObject( ::IUIObject * node, ::irr::u32 timeMS ) {
//        return TranslateUIAnimator::animateUIObject( boost::python::ptr(node), timeMS );
//    }
//
//};
//
//struct UIImage_wrapper : UIImage, bp::wrapper< UIImage > {
//
//    UIImage_wrapper(UIImage const & arg )
//    : UIImage( arg )
//      , bp::wrapper< UIImage >(){
//        // copy constructor
//        
//    }
//
//    UIImage_wrapper(::IUIObject * parent, ::irr::video::IVideoDriver * driver, ::irr::s32 width, ::irr::s32 height, ::irr::s32 order=0, ::irr::core::vector2d< float > const & position=irr::core::vector2d<float>(0.0f, 0.0f), ::irr::f32 rotdeg=0, ::irr::core::vector2d< float > const & scale=irr::core::vector2d<float>(1.0e+0f, 1.0e+0f) )
//    : UIImage( boost::python::ptr(parent), boost::python::ptr(driver), width, height, order, boost::ref(position), rotdeg, boost::ref(scale) )
//      , bp::wrapper< UIImage >(){
//        // constructor
//    
//    }
//
//    virtual void Draw(  ) {
//        if( bp::override func_Draw = this->get_override( "Draw" ) )
//            func_Draw(  );
//        else{
//            this->UIImage::Draw(  );
//        }
//    }
//    
//    void default_Draw(  ) {
//        UIImage::Draw( );
//    }
//
//    virtual void AddAnimator( ::IUIAnimator * ani ) {
//        if( bp::override func_AddAnimator = this->get_override( "AddAnimator" ) )
//            func_AddAnimator( boost::python::ptr(ani) );
//        else{
//            this->IUIObject::AddAnimator( boost::python::ptr(ani) );
//        }
//    }
//    
//    void default_AddAnimator( ::IUIAnimator * ani ) {
//        IUIObject::AddAnimator( boost::python::ptr(ani) );
//    }
//
//    virtual void AddChild( ::IUIObject * child ) {
//        if( bp::override func_AddChild = this->get_override( "AddChild" ) )
//            func_AddChild( boost::python::ptr(child) );
//        else{
//            this->IUIObject::AddChild( boost::python::ptr(child) );
//        }
//    }
//    
//    void default_AddChild( ::IUIObject * child ) {
//        IUIObject::AddChild( boost::python::ptr(child) );
//    }
//
//    virtual void DrawTree(  ) {
//        if( bp::override func_DrawTree = this->get_override( "DrawTree" ) )
//            func_DrawTree(  );
//        else{
//            this->IUIObject::DrawTree(  );
//        }
//    }
//    
//    void default_DrawTree(  ) {
//        IUIObject::DrawTree( );
//    }
//
//    virtual ::irr::f32 GetAbsoluteAlpha(  ) const  {
//        if( bp::override func_GetAbsoluteAlpha = this->get_override( "GetAbsoluteAlpha" ) )
//            return func_GetAbsoluteAlpha(  );
//        else{
//            return this->IUIObject::GetAbsoluteAlpha(  );
//        }
//    }
//    
//    ::irr::f32 default_GetAbsoluteAlpha(  ) const  {
//        return IUIObject::GetAbsoluteAlpha( );
//    }
//
//    virtual ::irr::core::vector2d< float > GetAbsolutePosition(  ) const  {
//        if( bp::override func_GetAbsolutePosition = this->get_override( "GetAbsolutePosition" ) )
//            return func_GetAbsolutePosition(  );
//        else{
//            return this->IUIObject::GetAbsolutePosition(  );
//        }
//    }
//    
//    ::irr::core::vector2d< float > default_GetAbsolutePosition(  ) const  {
//        return IUIObject::GetAbsolutePosition( );
//    }
//
//    virtual ::irr::f32 GetAlpha(  ) const  {
//        if( bp::override func_GetAlpha = this->get_override( "GetAlpha" ) )
//            return func_GetAlpha(  );
//        else{
//            return this->IUIObject::GetAlpha(  );
//        }
//    }
//    
//    ::irr::f32 default_GetAlpha(  ) const  {
//        return IUIObject::GetAlpha( );
//    }
//
//    virtual ::irr::s32 GetOrder(  ) const  {
//        if( bp::override func_GetOrder = this->get_override( "GetOrder" ) )
//            return func_GetOrder(  );
//        else{
//            return this->IUIObject::GetOrder(  );
//        }
//    }
//    
//    ::irr::s32 default_GetOrder(  ) const  {
//        return IUIObject::GetOrder( );
//    }
//
//  
//    virtual ::irr::f32 GetRotation(  ) const  {
//        if( bp::override func_GetRotation = this->get_override( "GetRotation" ) )
//            return func_GetRotation(  );
//        else{
//            return this->IUIObject::GetRotation(  );
//        }
//    }
//    
//    ::irr::f32 default_GetRotation(  ) const  {
//        return IUIObject::GetRotation( );
//    }
//
//    virtual bool GetVisible(  ) {
//        if( bp::override func_GetVisible = this->get_override( "GetVisible" ) )
//            return func_GetVisible(  );
//        else{
//            return this->IUIObject::GetVisible(  );
//        }
//    }
//    
//    bool default_GetVisible(  ) {
//        return IUIObject::GetVisible( );
//    }
//
//    virtual ::IUIObject * HitTest( ::irr::s32 x, ::irr::s32 y ) {
//        if( bp::override func_HitTest = this->get_override( "HitTest" ) )
//            return func_HitTest( x, y );
//        else{
//            return this->IUIObject::HitTest( x, y );
//        }
//    }
//    
//    ::IUIObject * default_HitTest( ::irr::s32 x, ::irr::s32 y ) {
//        return IUIObject::HitTest( x, y );
//    }
//
//    virtual void OnAnimate( ::irr::u32 time ) {
//        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
//            func_OnAnimate( time );
//        else{
//            this->IUIObject::OnAnimate( time );
//        }
//    }
//    
//    void default_OnAnimate( ::irr::u32 time ) {
//        IUIObject::OnAnimate( time );
//    }
//
//    virtual void RemoveAll(  ) {
//        if( bp::override func_RemoveAll = this->get_override( "RemoveAll" ) )
//            func_RemoveAll(  );
//        else{
//            this->IUIObject::RemoveAll(  );
//        }
//    }
//    
//    void default_RemoveAll(  ) {
//        IUIObject::RemoveAll( );
//    }
//
//    virtual void RemoveAnimator( ::IUIAnimator * ani ) {
//        if( bp::override func_RemoveAnimator = this->get_override( "RemoveAnimator" ) )
//            func_RemoveAnimator( boost::python::ptr(ani) );
//        else{
//            this->IUIObject::RemoveAnimator( boost::python::ptr(ani) );
//        }
//    }
//    
//    void default_RemoveAnimator( ::IUIAnimator * ani ) {
//        IUIObject::RemoveAnimator( boost::python::ptr(ani) );
//    }
//
//    virtual void RemoveAnimators(  ) {
//        if( bp::override func_RemoveAnimators = this->get_override( "RemoveAnimators" ) )
//            func_RemoveAnimators(  );
//        else{
//            this->IUIObject::RemoveAnimators(  );
//        }
//    }
//    
//    void default_RemoveAnimators(  ) {
//        IUIObject::RemoveAnimators( );
//    }
//
//    virtual void RemoveChild( ::IUIObject * node ) {
//        if( bp::override func_RemoveChild = this->get_override( "RemoveChild" ) )
//            func_RemoveChild( boost::python::ptr(node) );
//        else{
//            this->IUIObject::RemoveChild( boost::python::ptr(node) );
//        }
//    }
//    
//    void default_RemoveChild( ::IUIObject * node ) {
//        IUIObject::RemoveChild( boost::python::ptr(node) );
//    }
//
//    virtual void SetAlpha( ::irr::f32 alpha ) {
//        if( bp::override func_SetAlpha = this->get_override( "SetAlpha" ) )
//            func_SetAlpha( alpha );
//        else{
//            this->IUIObject::SetAlpha( alpha );
//        }
//    }
//    
//    void default_SetAlpha( ::irr::f32 alpha ) {
//        IUIObject::SetAlpha( alpha );
//    }
//
//    virtual void SetOrder( ::irr::s32 order ) {
//        if( bp::override func_SetOrder = this->get_override( "SetOrder" ) )
//            func_SetOrder( order );
//        else{
//            this->IUIObject::SetOrder( order );
//        }
//    }
//    
//    void default_SetOrder( ::irr::s32 order ) {
//        IUIObject::SetOrder( order );
//    }
//
//    virtual void SetParent( ::IUIObject * parent ) {
//        if( bp::override func_SetParent = this->get_override( "SetParent" ) )
//            func_SetParent( boost::python::ptr(parent) );
//        else{
//            this->IUIObject::SetParent( boost::python::ptr(parent) );
//        }
//    }
//    
//    void default_SetParent( ::IUIObject * parent ) {
//        IUIObject::SetParent( boost::python::ptr(parent) );
//    }
//
//    virtual void SetPosition( ::irr::core::vector2d< float > const & pos ) {
//        if( bp::override func_SetPosition = this->get_override( "SetPosition" ) )
//            func_SetPosition( boost::ref(pos) );
//        else{
//            this->IUIObject::SetPosition( boost::ref(pos) );
//        }
//    }
//    
//    void default_SetPosition( ::irr::core::vector2d< float > const & pos ) {
//        IUIObject::SetPosition( boost::ref(pos) );
//    }
//
//    virtual void SetRotation( ::irr::f32 rotdeg ) {
//        if( bp::override func_SetRotation = this->get_override( "SetRotation" ) )
//            func_SetRotation( rotdeg );
//        else{
//            this->IUIObject::SetRotation( rotdeg );
//        }
//    }
//    
//    void default_SetRotation( ::irr::f32 rotdeg ) {
//        IUIObject::SetRotation( rotdeg );
//    }
//
//    virtual void SetScale( ::irr::core::vector2d< float > const & scale ) {
//        if( bp::override func_SetScale = this->get_override( "SetScale" ) )
//            func_SetScale( boost::ref(scale) );
//        else{
//            this->IUIObject::SetScale( boost::ref(scale) );
//        }
//    }
//    
//    void default_SetScale( ::irr::core::vector2d< float > const & scale ) {
//        IUIObject::SetScale( boost::ref(scale) );
//    }
//
//    virtual void SetVisible( bool isvisible ) {
//        if( bp::override func_SetVisible = this->get_override( "SetVisible" ) )
//            func_SetVisible( isvisible );
//        else{
//            this->IUIObject::SetVisible( isvisible );
//        }
//    }
//    
//    void default_SetVisible( bool isvisible ) {
//        IUIObject::SetVisible( isvisible );
//    }
//
//    virtual void UpdateAbsolutePosition(  ) {
//        if( bp::override func_UpdateAbsolutePosition = this->get_override( "UpdateAbsolutePosition" ) )
//            func_UpdateAbsolutePosition(  );
//        else{
//            this->IUIObject::UpdateAbsolutePosition(  );
//        }
//    }
//    
//    void default_UpdateAbsolutePosition(  ) {
//        IUIObject::UpdateAbsolutePosition( );
//    }
//
//    virtual void remove(  ) {
//        if( bp::override func_remove = this->get_override( "remove" ) )
//            func_remove(  );
//        else{
//            this->IUIObject::remove(  );
//        }
//    }
//    
//    void default_remove(  ) {
//        IUIObject::remove( );
//    }
//
//};
//
//BOOST_PYTHON_MODULE(pyplusplus){
//    bp::class_< Scar::IReferenceCounted >( "IReferenceCounted", bp::init< >() )    
//        .def( 
//            "drop"
//            , (bool ( ::Scar::IReferenceCounted::* )(  ) const)( &::Scar::IReferenceCounted::drop ) )    
//        .def( 
//            "getReferenceCount"
//            , (::irr::s32 ( ::Scar::IReferenceCounted::* )(  ) const)( &::Scar::IReferenceCounted::getReferenceCount ) )    
//        .def( 
//            "grab"
//            , (void ( ::Scar::IReferenceCounted::* )(  ) const)( &::Scar::IReferenceCounted::grab ) );
//
//    bp::class_< IUIAnimator_wrapper, bp::bases< Scar::IReferenceCounted >, boost::noncopyable >( "IUIAnimator" )    
//        .def( 
//            "Clone"
//            , bp::pure_virtual( (::IUIAnimator * ( ::IUIAnimator::* )(  ) )(&::IUIAnimator::Clone) )
//			, bp::return_value_policy< bp::reference_existing_object >()
//                /* undefined call policies */ )    
//        .def( 
//            "animateUIObject"
//            , bp::pure_virtual( (bool ( ::IUIAnimator::* )( ::IUIObject *,::irr::u32 ) )(&::IUIAnimator::animateUIObject) )
//            , ( bp::arg("node"), bp::arg("timeMS") ) );
//
//    bp::class_< AlphaChangeUIAnimator_wrapper, bp::bases< IUIAnimator > >( "AlphaChangeUIAnimator", bp::init< irr::u32, irr::u32, irr::f32, irr::f32, bp::optional< bool > >(( bp::arg("begin"), bp::arg("duration"), bp::arg("srcalpha"), bp::arg("taralpha"), bp::arg("loop")=(bool)(false) )) )    
//        .def( 
//            "Clone"
//            , (::AlphaChangeUIAnimator * ( ::AlphaChangeUIAnimator::* )(  ) )(&::AlphaChangeUIAnimator::Clone)
//            , (::AlphaChangeUIAnimator * ( AlphaChangeUIAnimator_wrapper::* )(  ) )(&AlphaChangeUIAnimator_wrapper::default_Clone)
//			, bp::return_value_policy< bp::reference_existing_object >()
//                /* undefined call policies */ )    
//        .def( 
//            "animateUIObject"
//            , (bool ( ::AlphaChangeUIAnimator::* )( ::IUIObject *,::irr::u32 ) )(&::AlphaChangeUIAnimator::animateUIObject)
//            , (bool ( AlphaChangeUIAnimator_wrapper::* )( ::IUIObject *,::irr::u32 ) )(&AlphaChangeUIAnimator_wrapper::default_animateUIObject)
//            , ( bp::arg("node"), bp::arg("timeMS") ) );
//
//    { //::BlinkUIAnimator
//        typedef bp::class_< BlinkUIAnimator_wrapper, bp::bases< IUIAnimator > > BlinkUIAnimator_exposer_t;
//        BlinkUIAnimator_exposer_t BlinkUIAnimator_exposer = BlinkUIAnimator_exposer_t( "BlinkUIAnimator", bp::init< irr::core::vector2d< float > const & >(( bp::arg("offset") )) );
//        bp::scope BlinkUIAnimator_scope( BlinkUIAnimator_exposer );
//        bp::implicitly_convertible< irr::core::vector2d< float > const &, BlinkUIAnimator >();
//        { //::BlinkUIAnimator::Clone
//        
//            typedef ::BlinkUIAnimator * ( ::BlinkUIAnimator::*Clone_function_type )(  ) ;
//            typedef ::BlinkUIAnimator * ( BlinkUIAnimator_wrapper::*default_Clone_function_type )(  ) ;
//            
//            BlinkUIAnimator_exposer.def( 
//                "Clone"
//                , Clone_function_type(&::BlinkUIAnimator::Clone)
//                , default_Clone_function_type(&BlinkUIAnimator_wrapper::default_Clone)
//				, bp::return_value_policy< bp::reference_existing_object >()
//                    /* undefined call policies */ );
//        
//        }
//        { //::BlinkUIAnimator::animateUIObject
//        
//            typedef bool ( ::BlinkUIAnimator::*animateUIObject_function_type )( ::IUIObject *,::irr::u32 ) ;
//            typedef bool ( BlinkUIAnimator_wrapper::*default_animateUIObject_function_type )( ::IUIObject *,::irr::u32 ) ;
//            
//            BlinkUIAnimator_exposer.def( 
//                "animateUIObject"
//                , animateUIObject_function_type(&::BlinkUIAnimator::animateUIObject)
//                , default_animateUIObject_function_type(&BlinkUIAnimator_wrapper::default_animateUIObject)
//                , ( bp::arg("node"), bp::arg("timeMS") ) );
//        
//        }
//    }
//
//    bp::class_< DeletionAnimator_wrapper, bp::bases< IUIAnimator > >( "DeletionAnimator", bp::init< irr::u32, irr::u32 >(( bp::arg("now"), bp::arg("time") )) )    
//        .def( 
//            "Clone"
//            , (::IUIAnimator * ( ::DeletionAnimator::* )(  ) )(&::DeletionAnimator::Clone)
//            , (::IUIAnimator * ( DeletionAnimator_wrapper::* )(  ) )(&DeletionAnimator_wrapper::default_Clone)
//			, bp::return_value_policy< bp::reference_existing_object >()
//                /* undefined call policies */ )    
//        .def( 
//            "animateUIObject"
//            , (bool ( ::DeletionAnimator::* )( ::IUIObject *,::irr::u32 ) )(&::DeletionAnimator::animateUIObject)
//            , (bool ( DeletionAnimator_wrapper::* )( ::IUIObject *,::irr::u32 ) )(&DeletionAnimator_wrapper::default_animateUIObject)
//            , ( bp::arg("node"), bp::arg("timeMS") ) );
//
//   // bp::class_< IUIObject_wrapper, bp::bases< Scar::IReferenceCounted >, boost::noncopyable >( "IUIObject", bp::init< IUIObject *, irr::video::IVideoDriver *, irr::s32, irr::s32, bp::optional< irr::s32, irr::core::vector2d< float > const &, irr::f32, irr::core::vector2d< float > const & > >(( bp::arg("parent"), bp::arg("driver"), bp::arg("width"), bp::arg("height"), bp::arg("order")=(::irr::s32)(0), bp::arg("position")=irr::core::vector2d<float>(0.0f, 0.0f), bp::arg("rotdeg")=0, bp::arg("scale")=irr::core::vector2d<float>(1.0e+0f, 1.0e+0f) )) )    
//        //.def( 
//        //    "AddAnimator"
//        //    , (void ( ::IUIObject::* )( ::IUIAnimator * ) )(&::IUIObject::AddAnimator)
//        //    , (void ( IUIObject_wrapper::* )( ::IUIAnimator * ) )(&IUIObject_wrapper::default_AddAnimator)
//        //    , ( bp::arg("ani") ) )    
//        //.def( 
//        //    "AddChild"
//        //    , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::AddChild)
//        //    , (void ( IUIObject_wrapper::* )( ::IUIObject * ) )(&IUIObject_wrapper::default_AddChild)
//        //    , ( bp::arg("child") ) )    
//        //.def( 
//        //    "Draw"
//        //    , bp::pure_virtual( (void ( ::IUIObject::* )(  ) )(&::IUIObject::Draw) ) )    
//        //.def( 
//        //    "DrawTree"
//        //    , (void ( ::IUIObject::* )(  ) )(&::IUIObject::DrawTree)
//        //    , (void ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_DrawTree) )    
//        //.def( 
//        //    "GetAbsoluteAlpha"
//        //    , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAbsoluteAlpha)
//        //    , (::irr::f32 ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetAbsoluteAlpha) )    
//        //.def( 
//        //    "GetAbsolutePosition"
//        //    , (::irr::core::vector2d< float > ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAbsolutePosition)
//        //    , (::irr::core::vector2d< float > ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetAbsolutePosition) )    
//        //.def( 
//        //    "GetAlpha"
//        //    , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAlpha)
//        //    , (::irr::f32 ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetAlpha) )    
//        //.def( 
//        //    "GetAnimators"
//        //    , (::std::list< IUIAnimator* > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAnimators)
//        //    , bp::return_value_policy< bp::copy_const_reference >() )    
//        //.def( 
//        //    "GetChildren"
//        //    , (::std::list< IUIObject* > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetChildren)
//        //    , bp::return_value_policy< bp::copy_const_reference >() )    
//        //.def( 
//        //    "GetOrder"
//        //    , (::irr::s32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetOrder)
//        //    , (::irr::s32 ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetOrder) )    
//        //.def( 
//        //    "GetPosition"
//        //    , (::irr::core::vector2d< float > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetPosition)
//        //    , bp::return_value_policy< bp::copy_const_reference >() )   
//        //.def( 
//        //    "GetRotation"
//        //    , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetRotation)
//        //    , (::irr::f32 ( IUIObject_wrapper::* )(  ) const)(&IUIObject_wrapper::default_GetRotation) )    
//        //.def( 
//        //    "GetScale"
//        //    , (::irr::core::vector2d< float > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetScale)
//        //    , bp::return_value_policy< bp::copy_const_reference >() )    
//        //.def( 
//        //    "GetVisible"
//        //    , (bool ( ::IUIObject::* )(  ) )(&::IUIObject::GetVisible)
//        //    , (bool ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_GetVisible) )    
//        //.def( 
//        //    "HitTest"
//        //    , (::IUIObject * ( ::IUIObject::* )( ::irr::s32,::irr::s32 ) )(&::IUIObject::HitTest)
//        //    , (::IUIObject * ( IUIObject_wrapper::* )( ::irr::s32,::irr::s32 ) )(&IUIObject_wrapper::default_HitTest)
//        //    , ( bp::arg("x"), bp::arg("y") )
//        //        /* undefined call policies */ )    
//        //.def( 
//        //    "LoadImage"
//        //    , (void ( ::IUIObject::* )( char * ) )( &::IUIObject::LoadImage )
//        //    , ( bp::arg("arg0") ) )    
//        //.def( 
//        //    "OnAnimate"
//        //    , (void ( ::IUIObject::* )( ::irr::u32 ) )(&::IUIObject::OnAnimate)
//        //    , (void ( IUIObject_wrapper::* )( ::irr::u32 ) )(&IUIObject_wrapper::default_OnAnimate)
//        //    , ( bp::arg("time") ) )    
//        //.def( 
//        //    "RemoveAll"
//        //    , (void ( ::IUIObject::* )(  ) )(&::IUIObject::RemoveAll)
//        //    , (void ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_RemoveAll) )    
//        //.def( 
//        //    "RemoveAnimator"
//        //    , (void ( ::IUIObject::* )( ::IUIAnimator * ) )(&::IUIObject::RemoveAnimator)
//        //    , (void ( IUIObject_wrapper::* )( ::IUIAnimator * ) )(&IUIObject_wrapper::default_RemoveAnimator)
//        //    , ( bp::arg("ani") ) )    
//        //.def( 
//        //    "RemoveAnimators"
//        //    , (void ( ::IUIObject::* )(  ) )(&::IUIObject::RemoveAnimators)
//        //    , (void ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_RemoveAnimators) )    
//        //.def( 
//        //    "RemoveChild"
//        //    , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::RemoveChild)
//        //    , (void ( IUIObject_wrapper::* )( ::IUIObject * ) )(&IUIObject_wrapper::default_RemoveChild)
//        //    , ( bp::arg("node") ) )    
//        //.def( 
//        //    "SetAlpha"
//        //    , (void ( ::IUIObject::* )( ::irr::f32 ) )(&::IUIObject::SetAlpha)
//        //    , (void ( IUIObject_wrapper::* )( ::irr::f32 ) )(&IUIObject_wrapper::default_SetAlpha)
//        //    , ( bp::arg("alpha") ) )    
//        //.def( 
//        //    "SetOrder"
//        //    , (void ( ::IUIObject::* )( ::irr::s32 ) )(&::IUIObject::SetOrder)
//        //    , (void ( IUIObject_wrapper::* )( ::irr::s32 ) )(&IUIObject_wrapper::default_SetOrder)
//        //    , ( bp::arg("order") ) )    
//        //.def( 
//        //    "SetParent"
//        //    , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::SetParent)
//        //    , (void ( IUIObject_wrapper::* )( ::IUIObject * ) )(&IUIObject_wrapper::default_SetParent)
//        //    , ( bp::arg("parent") ) )    
//        //.def( 
//        //    "SetPosition"
//        //    , (void ( ::IUIObject::* )( ::irr::core::vector2d< float > const & ) )(&::IUIObject::SetPosition)
//        //    , (void ( IUIObject_wrapper::* )( ::irr::core::vector2d< float > const & ) )(&IUIObject_wrapper::default_SetPosition)
//        //    , ( bp::arg("pos") ) )    
//        //.def( 
//        //    "SetRotation"
//        //    , (void ( ::IUIObject::* )( ::irr::f32 ) )(&::IUIObject::SetRotation)
//        //    , (void ( IUIObject_wrapper::* )( ::irr::f32 ) )(&IUIObject_wrapper::default_SetRotation)
//        //    , ( bp::arg("rotdeg") ) )    
//        //.def( 
//        //    "SetScale"
//        //    , (void ( ::IUIObject::* )( ::irr::core::vector2d< float > const & ) )(&::IUIObject::SetScale)
//        //    , (void ( IUIObject_wrapper::* )( ::irr::core::vector2d< float > const & ) )(&IUIObject_wrapper::default_SetScale)
//        //    , ( bp::arg("scale") ) )    
//        //.def( 
//        //    "SetVisible"
//        //    , (void ( ::IUIObject::* )( bool ) )(&::IUIObject::SetVisible)
//        //    , (void ( IUIObject_wrapper::* )( bool ) )(&IUIObject_wrapper::default_SetVisible)
//        //    , ( bp::arg("isvisible") ) )    
//        //.def( 
//        //    "UpdateAbsolutePosition"
//        //    , (void ( ::IUIObject::* )(  ) )(&::IUIObject::UpdateAbsolutePosition)
//        //    , (void ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_UpdateAbsolutePosition) )    
//        //.def( 
//        //    "remove"
//        //    , (void ( ::IUIObject::* )(  ) )(&::IUIObject::remove)
//        //    , (void ( IUIObject_wrapper::* )(  ) )(&IUIObject_wrapper::default_remove) );
//;
//
//    bp::class_< RotateUIAnimator_wrapper, bp::bases< IUIAnimator > >( "RotateUIAnimator", bp::init< irr::u32, irr::u32, irr::f32, bp::optional< bool > >(( bp::arg("begin"), bp::arg("duration"), bp::arg("angle"), bp::arg("loop")=(bool)(false) )) )    
//        .def( 
//            "Clone"
//            , (::RotateUIAnimator * ( ::RotateUIAnimator::* )(  ) )(&::RotateUIAnimator::Clone)
//            , (::RotateUIAnimator * ( RotateUIAnimator_wrapper::* )(  ) )(&RotateUIAnimator_wrapper::default_Clone)
//			, bp::return_value_policy< bp::reference_existing_object >()
//                /* undefined call policies */ )    
//        .def( 
//            "animateUIObject"
//            , (bool ( ::RotateUIAnimator::* )( ::IUIObject *,::irr::u32 ) )(&::RotateUIAnimator::animateUIObject)
//            , (bool ( RotateUIAnimator_wrapper::* )( ::IUIObject *,::irr::u32 ) )(&RotateUIAnimator_wrapper::default_animateUIObject)
//            , ( bp::arg("node"), bp::arg("timeMS") ) );
//
//    bp::class_< ScaleUIAnimator_wrapper, bp::bases< IUIAnimator > >( "ScaleUIAnimator", bp::init< irr::u32, irr::u32, irr::core::vector2d< float >, bp::optional< bool > >(( bp::arg("begin"), bp::arg("duration"), bp::arg("scale"), bp::arg("loop")=(bool)(false) )) )    
//        .def( 
//            "Clone"
//            , (::ScaleUIAnimator * ( ::ScaleUIAnimator::* )(  ) )(&::ScaleUIAnimator::Clone)
//            , (::ScaleUIAnimator * ( ScaleUIAnimator_wrapper::* )(  ) )(&ScaleUIAnimator_wrapper::default_Clone)
//			, bp::return_value_policy< bp::reference_existing_object >()
//                /* undefined call policies */ )    
//        .def( 
//            "animateUIObject"
//            , (bool ( ::ScaleUIAnimator::* )( ::IUIObject *,::irr::u32 ) )(&::ScaleUIAnimator::animateUIObject)
//            , (bool ( ScaleUIAnimator_wrapper::* )( ::IUIObject *,::irr::u32 ) )(&ScaleUIAnimator_wrapper::default_animateUIObject)
//            , ( bp::arg("node"), bp::arg("timeMS") ) );
//
//    bp::class_< TranslateUIAnimator_wrapper, bp::bases< IUIAnimator > >( "TranslateUIAnimator", bp::init< irr::u32, irr::u32, irr::core::vector2d< int > const &, bp::optional< bool > >(( bp::arg("begin"), bp::arg("duration"), bp::arg("offset"), bp::arg("loop")=(bool)(false) )) )    
//        .def( 
//            "Clone"
//            , (::TranslateUIAnimator * ( ::TranslateUIAnimator::* )(  ) )(&::TranslateUIAnimator::Clone)
//            , (::TranslateUIAnimator * ( TranslateUIAnimator_wrapper::* )(  ) )(&TranslateUIAnimator_wrapper::default_Clone)
//			, bp::return_value_policy< bp::reference_existing_object >()
//                /* undefined call policies */ )    
//        .def( 
//            "animateUIObject"
//            , (bool ( ::TranslateUIAnimator::* )( ::IUIObject *,::irr::u32 ) )(&::TranslateUIAnimator::animateUIObject)
//            , (bool ( TranslateUIAnimator_wrapper::* )( ::IUIObject *,::irr::u32 ) )(&TranslateUIAnimator_wrapper::default_animateUIObject)
//            , ( bp::arg("node"), bp::arg("timeMS") ) );
//
//    //bp::class_< UIImage_wrapper, bp::bases< IUIObject > >( "UIImage", bp::init< IUIObject *, irr::video::IVideoDriver *, irr::s32, irr::s32, bp::optional< irr::s32, irr::core::vector2d< float > const &, irr::f32, irr::core::vector2d< float > const & > >(( bp::arg("parent"), bp::arg("driver"), bp::arg("width"), bp::arg("height"), bp::arg("order")=(::irr::s32)(0), bp::arg("position")=irr::core::vector2d<float>(0.0f, 0.0f), bp::arg("rotdeg")=0, bp::arg("scale")=irr::core::vector2d<float>(1.0e+0f, 1.0e+0f) )) )    
//    //    .def( 
//    //        "Draw"
//    //        , (void ( ::UIImage::* )(  ) )(&::UIImage::Draw)
//    //        , (void ( UIImage_wrapper::* )(  ) )(&UIImage_wrapper::default_Draw) )    
//    //    .def( 
//    //        "AddAnimator"
//    //        , (void ( ::IUIObject::* )( ::IUIAnimator * ) )(&::IUIObject::AddAnimator)
//    //        , (void ( UIImage_wrapper::* )( ::IUIAnimator * ) )(&UIImage_wrapper::default_AddAnimator)
//    //        , ( bp::arg("ani") ) )    
//    //    .def( 
//    //        "AddChild"
//    //        , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::AddChild)
//    //        , (void ( UIImage_wrapper::* )( ::IUIObject * ) )(&UIImage_wrapper::default_AddChild)
//    //        , ( bp::arg("child") ) )    
//    //    .def( 
//    //        "DrawTree"
//    //        , (void ( ::IUIObject::* )(  ) )(&::IUIObject::DrawTree)
//    //        , (void ( UIImage_wrapper::* )(  ) )(&UIImage_wrapper::default_DrawTree) )    
//    //    .def( 
//    //        "GetAbsoluteAlpha"
//    //        , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAbsoluteAlpha)
//    //        , (::irr::f32 ( UIImage_wrapper::* )(  ) const)(&UIImage_wrapper::default_GetAbsoluteAlpha) )    
//    //    .def( 
//    //        "GetAbsolutePosition"
//    //        , (::irr::core::vector2d< float > ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAbsolutePosition)
//    //        , (::irr::core::vector2d< float > ( UIImage_wrapper::* )(  ) const)(&UIImage_wrapper::default_GetAbsolutePosition) )    
//    //    .def( 
//    //        "GetAlpha"
//    //        , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAlpha)
//    //        , (::irr::f32 ( UIImage_wrapper::* )(  ) const)(&UIImage_wrapper::default_GetAlpha) )    
//    //    .def( 
//    //        "GetAnimators"
//    //        , (::std::list< IUIAnimator* > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetAnimators)
//    //        , bp::return_value_policy< bp::copy_const_reference >() )    
//    //    .def( 
//    //        "GetChildren"
//    //        , (::std::list< IUIObject* > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetChildren)
//    //        , bp::return_value_policy< bp::copy_const_reference >() )    
//    //    .def( 
//    //        "GetOrder"
//    //        , (::irr::s32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetOrder)
//    //        , (::irr::s32 ( UIImage_wrapper::* )(  ) const)(&UIImage_wrapper::default_GetOrder) )    
//    //    .def( 
//    //        "GetPosition"
//    //        , (::irr::core::vector2d< float > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetPosition)
//    //        , bp::return_value_policy< bp::copy_const_reference >() )    
//    //    .def( 
//    //        "GetRotation"
//    //        , (::irr::f32 ( ::IUIObject::* )(  ) const)(&::IUIObject::GetRotation)
//    //        , (::irr::f32 ( UIImage_wrapper::* )(  ) const)(&UIImage_wrapper::default_GetRotation) )    
//    //    .def( 
//    //        "GetScale"
//    //        , (::irr::core::vector2d< float > const & ( ::IUIObject::* )(  ) const)(&::IUIObject::GetScale)
//    //        , bp::return_value_policy< bp::copy_const_reference >() )    
//    //    .def( 
//    //        "GetVisible"
//    //        , (bool ( ::IUIObject::* )(  ) )(&::IUIObject::GetVisible)
//    //        , (bool ( UIImage_wrapper::* )(  ) )(&UIImage_wrapper::default_GetVisible) )    
//    //    .def( 
//    //        "HitTest"
//    //        , (::IUIObject * ( ::IUIObject::* )( ::irr::s32,::irr::s32 ) )(&::IUIObject::HitTest)
//    //        , (::IUIObject * ( UIImage_wrapper::* )( ::irr::s32,::irr::s32 ) )(&UIImage_wrapper::default_HitTest)
//    //        , ( bp::arg("x"), bp::arg("y") )
//    //            /* undefined call policies */ )    
//    //    .def( 
//    //        "OnAnimate"
//    //        , (void ( ::IUIObject::* )( ::irr::u32 ) )(&::IUIObject::OnAnimate)
//    //        , (void ( UIImage_wrapper::* )( ::irr::u32 ) )(&UIImage_wrapper::default_OnAnimate)
//    //        , ( bp::arg("time") ) )    
//    //    .def( 
//    //        "RemoveAll"
//    //        , (void ( ::IUIObject::* )(  ) )(&::IUIObject::RemoveAll)
//    //        , (void ( UIImage_wrapper::* )(  ) )(&UIImage_wrapper::default_RemoveAll) )    
//    //    .def( 
//    //        "RemoveAnimator"
//    //        , (void ( ::IUIObject::* )( ::IUIAnimator * ) )(&::IUIObject::RemoveAnimator)
//    //        , (void ( UIImage_wrapper::* )( ::IUIAnimator * ) )(&UIImage_wrapper::default_RemoveAnimator)
//    //        , ( bp::arg("ani") ) )    
//    //    .def( 
//    //        "RemoveAnimators"
//    //        , (void ( ::IUIObject::* )(  ) )(&::IUIObject::RemoveAnimators)
//    //        , (void ( UIImage_wrapper::* )(  ) )(&UIImage_wrapper::default_RemoveAnimators) )    
//    //    .def( 
//    //        "RemoveChild"
//    //        , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::RemoveChild)
//    //        , (void ( UIImage_wrapper::* )( ::IUIObject * ) )(&UIImage_wrapper::default_RemoveChild)
//    //        , ( bp::arg("node") ) )    
//    //    .def( 
//    //        "SetAlpha"
//    //        , (void ( ::IUIObject::* )( ::irr::f32 ) )(&::IUIObject::SetAlpha)
//    //        , (void ( UIImage_wrapper::* )( ::irr::f32 ) )(&UIImage_wrapper::default_SetAlpha)
//    //        , ( bp::arg("alpha") ) )    
//    //    .def( 
//    //        "SetOrder"
//    //        , (void ( ::IUIObject::* )( ::irr::s32 ) )(&::IUIObject::SetOrder)
//    //        , (void ( UIImage_wrapper::* )( ::irr::s32 ) )(&UIImage_wrapper::default_SetOrder)
//    //        , ( bp::arg("order") ) )    
//    //    .def( 
//    //        "SetParent"
//    //        , (void ( ::IUIObject::* )( ::IUIObject * ) )(&::IUIObject::SetParent)
//    //        , (void ( UIImage_wrapper::* )( ::IUIObject * ) )(&UIImage_wrapper::default_SetParent)
//    //        , ( bp::arg("parent") ) )    
//    //    .def( 
//    //        "SetPosition"
//    //        , (void ( ::IUIObject::* )( ::irr::core::vector2d< float > const & ) )(&::IUIObject::SetPosition)
//    //        , (void ( UIImage_wrapper::* )( ::irr::core::vector2d< float > const & ) )(&UIImage_wrapper::default_SetPosition)
//    //        , ( bp::arg("pos") ) )    
//    //    .def( 
//    //        "SetRotation"
//    //        , (void ( ::IUIObject::* )( ::irr::f32 ) )(&::IUIObject::SetRotation)
//    //        , (void ( UIImage_wrapper::* )( ::irr::f32 ) )(&UIImage_wrapper::default_SetRotation)
//    //        , ( bp::arg("rotdeg") ) )    
//    //    .def( 
//    //        "SetScale"
//    //        , (void ( ::IUIObject::* )( ::irr::core::vector2d< float > const & ) )(&::IUIObject::SetScale)
//    //        , (void ( UIImage_wrapper::* )( ::irr::core::vector2d< float > const & ) )(&UIImage_wrapper::default_SetScale)
//    //        , ( bp::arg("scale") ) )    
//    //    .def( 
//    //        "SetVisible"
//    //        , (void ( ::IUIObject::* )( bool ) )(&::IUIObject::SetVisible)
//    //        , (void ( UIImage_wrapper::* )( bool ) )(&UIImage_wrapper::default_SetVisible)
//    //        , ( bp::arg("isvisible") ) )    
//    //    .def( 
//    //        "UpdateAbsolutePosition"
//    //        , (void ( ::IUIObject::* )(  ) )(&::IUIObject::UpdateAbsolutePosition)
//    //        , (void ( UIImage_wrapper::* )(  ) )(&UIImage_wrapper::default_UpdateAbsolutePosition) )    
//    //    .def( 
//    //        "remove"
//    //        , (void ( ::IUIObject::* )(  ) )(&::IUIObject::remove)
//    //        , (void ( UIImage_wrapper::* )(  ) )(&UIImage_wrapper::default_remove) );
//
//    { //::UIManager
//        typedef bp::class_< UIManager > UIManager_exposer_t;
//        UIManager_exposer_t UIManager_exposer = UIManager_exposer_t( "UIManager", bp::init< irr::ITimer * >(( bp::arg("timer") )) );
//        bp::scope UIManager_scope( UIManager_exposer );
//        bp::implicitly_convertible< irr::ITimer *, UIManager >();
//        { //::UIManager::AddUINode
//        
//            typedef bool ( ::UIManager::*AddUINode_function_type )( ::IUIObject *,::IUIObject * ) ;
//            
//            UIManager_exposer.def( 
//                "AddUINode"
//                , AddUINode_function_type( &::UIManager::AddUINode )
//                , ( bp::arg("node"), bp::arg("parent") ) );
//        
//        }
//        { //::UIManager::GetHitUIByPos
//        
//            typedef ::IUIObject * ( ::UIManager::*GetHitUIByPos_function_type )( ::irr::s32,::irr::s32 ) ;
//            
//            UIManager_exposer.def( 
//                "GetHitUIByPos"
//                , GetHitUIByPos_function_type( &::UIManager::GetHitUIByPos )
//                , ( bp::arg("x"), bp::arg("y") )
//				, bp::return_value_policy< bp::reference_existing_object >()
//                    /* undefined call policies */ );
//        
//        }
//        { //::UIManager::GetRoot
//        
//            typedef ::IUIObject * ( ::UIManager::*GetRoot_function_type )(  ) ;
//            
//            UIManager_exposer.def( 
//                "GetRoot"
//                , GetRoot_function_type( &::UIManager::GetRoot )
//				, bp::return_value_policy< bp::reference_existing_object >()
//				, bp::return_value_policy< bp::reference_existing_object >()
//                    /* undefined call policies */ );
//        
//        }
//        { //::UIManager::HistTest
//        
//            typedef ::IUIObject * ( ::UIManager::*HistTest_function_type )( ::irr::s32,::irr::s32 ) ;
//            
//            UIManager_exposer.def( 
//                "HistTest"
//                , HistTest_function_type( &::UIManager::HistTest )
//                , ( bp::arg("x"), bp::arg("y") )
//				, bp::return_value_policy< bp::reference_existing_object >()
//                    /* undefined call policies */ );
//        
//        }
//        { //::UIManager::OnEvent
//        
//            typedef void ( ::UIManager::*OnEvent_function_type )( ::irr::SEvent const & ) ;
//            
//            UIManager_exposer.def( 
//                "OnEvent"
//                , OnEvent_function_type( &::UIManager::OnEvent )
//                , ( bp::arg("event") ) );
//        
//        }
//        { //::UIManager::RemoveUINode
//        
//            typedef bool ( ::UIManager::*RemoveUINode_function_type )( ::IUIObject * ) ;
//            
//            UIManager_exposer.def( 
//                "RemoveUINode"
//                , RemoveUINode_function_type( &::UIManager::RemoveUINode )
//                , ( bp::arg("node") ) );
//        
//        }
//        { //::UIManager::RunTree
//        
//            typedef void ( ::UIManager::*RunTree_function_type )(  ) ;
//            
//            UIManager_exposer.def( 
//                "RunTree"
//                , RunTree_function_type( &::UIManager::RunTree ) );
//        
//        }
//        { //::UIManager::SetRoot
//        
//            typedef bool ( ::UIManager::*SetRoot_function_type )( ::IUIObject * ) ;
//            
//            UIManager_exposer.def( 
//                "SetRoot"
//                , SetRoot_function_type( &::UIManager::SetRoot )
//                , ( bp::arg("root") ) );
//        
//        }
//    }
//}
