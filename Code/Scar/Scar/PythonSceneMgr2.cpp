// This file has been generated by Py++.

#include "boost/python.hpp"

#include "__array_1.pypp.hpp"

#include "MySceneManager.h"

#include "RelateCameraAnimatorMove.h"

#include "MySceneNodeAnimatorScale.h"

#include "/media/DATA/VS 2010/OpenGL-scut/Code/include/ISceneNodeAnimator.h"

namespace bp = boost::python;

struct IReferenceCounted_wrapper : irr::IReferenceCounted, bp::wrapper< irr::IReferenceCounted > {

    IReferenceCounted_wrapper(irr::IReferenceCounted const & arg )
    : irr::IReferenceCounted( arg )
      , bp::wrapper< irr::IReferenceCounted >(){
        // copy constructor
        
    }

    IReferenceCounted_wrapper( )
    : irr::IReferenceCounted( )
      , bp::wrapper< irr::IReferenceCounted >(){
        // null constructor
    
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IAttributeExchangingObject_wrapper : irr::io::IAttributeExchangingObject, bp::wrapper< irr::io::IAttributeExchangingObject > {

    IAttributeExchangingObject_wrapper(irr::io::IAttributeExchangingObject const & arg )
    : irr::io::IAttributeExchangingObject( arg )
      , bp::wrapper< irr::io::IAttributeExchangingObject >(){
        // copy constructor
        
    }

    IAttributeExchangingObject_wrapper()
    : irr::io::IAttributeExchangingObject()
      , bp::wrapper< irr::io::IAttributeExchangingObject >(){
        // null constructor
        
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct ISceneUserDataSerializer_wrapper : irr::scene::ISceneUserDataSerializer, bp::wrapper< irr::scene::ISceneUserDataSerializer > {

    ISceneUserDataSerializer_wrapper()
    : irr::scene::ISceneUserDataSerializer()
      , bp::wrapper< irr::scene::ISceneUserDataSerializer >(){
        // null constructor
        
    }

    virtual void OnCreateNode( ::irr::scene::ISceneNode * node ){
        bp::override func_OnCreateNode = this->get_override( "OnCreateNode" );
        func_OnCreateNode( boost::python::ptr(node) );
    }

    virtual void OnReadUserData( ::irr::scene::ISceneNode * forSceneNode, ::irr::io::IAttributes * userData ){
        bp::override func_OnReadUserData = this->get_override( "OnReadUserData" );
        func_OnReadUserData( boost::python::ptr(forSceneNode), boost::python::ptr(userData) );
    }

    virtual ::irr::io::IAttributes * createUserData( ::irr::scene::ISceneNode * forSceneNode ){
        bp::override func_createUserData = this->get_override( "createUserData" );
        return func_createUserData( boost::python::ptr(forSceneNode) );
    }

};

struct SMaterial_wrapper : irr::video::SMaterial, bp::wrapper< irr::video::SMaterial > {

    SMaterial_wrapper( )
    : irr::video::SMaterial( )
      , bp::wrapper< irr::video::SMaterial >(){
        // null constructor
    
    }

    SMaterial_wrapper(::irr::video::SMaterial const & other )
    : irr::video::SMaterial( boost::ref(other) )
      , bp::wrapper< irr::video::SMaterial >(){
        // copy constructor
    
    }

    static bool get_BackfaceCulling(irr::video::SMaterial const & inst ){
        return inst.BackfaceCulling;
    }
    
    static void set_BackfaceCulling( irr::video::SMaterial & inst, bool new_value ){ 
        inst.BackfaceCulling = new_value;
    }

    static ::irr::u8 get_ColorMask(irr::video::SMaterial const & inst ){
        return inst.ColorMask;
    }
    
    static void set_ColorMask( irr::video::SMaterial & inst, ::irr::u8 new_value ){ 
        inst.ColorMask = new_value;
    }

    static ::irr::u8 get_ColorMaterial(irr::video::SMaterial const & inst ){
        return inst.ColorMaterial;
    }
    
    static void set_ColorMaterial( irr::video::SMaterial & inst, ::irr::u8 new_value ){ 
        inst.ColorMaterial = new_value;
    }

    static bool get_FogEnable(irr::video::SMaterial const & inst ){
        return inst.FogEnable;
    }
    
    static void set_FogEnable( irr::video::SMaterial & inst, bool new_value ){ 
        inst.FogEnable = new_value;
    }

    static bool get_FrontfaceCulling(irr::video::SMaterial const & inst ){
        return inst.FrontfaceCulling;
    }
    
    static void set_FrontfaceCulling( irr::video::SMaterial & inst, bool new_value ){ 
        inst.FrontfaceCulling = new_value;
    }

    static bool get_GouraudShading(irr::video::SMaterial const & inst ){
        return inst.GouraudShading;
    }
    
    static void set_GouraudShading( irr::video::SMaterial & inst, bool new_value ){ 
        inst.GouraudShading = new_value;
    }

    static bool get_Lighting(irr::video::SMaterial const & inst ){
        return inst.Lighting;
    }
    
    static void set_Lighting( irr::video::SMaterial & inst, bool new_value ){ 
        inst.Lighting = new_value;
    }

    static bool get_NormalizeNormals(irr::video::SMaterial const & inst ){
        return inst.NormalizeNormals;
    }
    
    static void set_NormalizeNormals( irr::video::SMaterial & inst, bool new_value ){ 
        inst.NormalizeNormals = new_value;
    }

    static bool get_PointCloud(irr::video::SMaterial const & inst ){
        return inst.PointCloud;
    }
    
    static void set_PointCloud( irr::video::SMaterial & inst, bool new_value ){ 
        inst.PointCloud = new_value;
    }

    static pyplusplus::containers::static_sized::array_1_t< ::irr::video::SMaterialLayer, 4>
    pyplusplus_TextureLayer_wrapper( ::irr::video::SMaterial & inst ){
        return pyplusplus::containers::static_sized::array_1_t< ::irr::video::SMaterialLayer, 4>( inst.TextureLayer );
    }

    static bool get_Wireframe(irr::video::SMaterial const & inst ){
        return inst.Wireframe;
    }
    
    static void set_Wireframe( irr::video::SMaterial & inst, bool new_value ){ 
        inst.Wireframe = new_value;
    }

    static bool get_ZWriteEnable(irr::video::SMaterial const & inst ){
        return inst.ZWriteEnable;
    }
    
    static void set_ZWriteEnable( irr::video::SMaterial & inst, bool new_value ){ 
        inst.ZWriteEnable = new_value;
    }

};

struct ISceneManager_wrapper : irr::scene::ISceneManager, bp::wrapper< irr::scene::ISceneManager > {

    ISceneManager_wrapper()
    : irr::scene::ISceneManager()
      , bp::wrapper< irr::scene::ISceneManager >(){
        // null constructor
        
    }

    virtual ::irr::scene::IAnimatedMeshSceneNode * addAnimatedMeshSceneNode( ::irr::scene::IAnimatedMesh * mesh, ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & rotation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & scale=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f), bool alsoAddIfMeshPointerZero=false ){
        bp::override func_addAnimatedMeshSceneNode = this->get_override( "addAnimatedMeshSceneNode" );
        return func_addAnimatedMeshSceneNode( boost::python::ptr(mesh), boost::python::ptr(parent), id, boost::ref(position), boost::ref(rotation), boost::ref(scale), alsoAddIfMeshPointerZero );
    }

    virtual ::irr::scene::IAnimatedMesh * addArrowMesh( ::irr::io::path const & name, ::irr::video::SColor vtxColor0=4294967295u, ::irr::video::SColor vtxColor1=4294967295u, ::irr::u32 tesselationCylinder=4, ::irr::u32 tesselationCone=8, ::irr::f32 height=1.0e+0f, ::irr::f32 cylinderHeight=6.0000002384185791015625e-1f, ::irr::f32 width0=5.00000007450580596923828125e-2f, ::irr::f32 width1=3.00000011920928955078125e-1f ){
        bp::override func_addArrowMesh = this->get_override( "addArrowMesh" );
        return func_addArrowMesh( boost::ref(name), vtxColor0, vtxColor1, tesselationCylinder, tesselationCone, height, cylinderHeight, width0, width1 );
    }

    virtual ::irr::scene::IBillboardSceneNode * addBillboardSceneNode( ::irr::scene::ISceneNode * parent=0, ::irr::core::dimension2d< float > const & size=irr::core::dimension2d<float>(((const float&)((const float*)(&1.0e+1f))), ((const float&)((const float*)(&1.0e+1f)))), ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::s32 id=-0x00000000000000001, ::irr::video::SColor colorTop=4294967295u, ::irr::video::SColor colorBottom=4294967295u ){
        bp::override func_addBillboardSceneNode = this->get_override( "addBillboardSceneNode" );
        return func_addBillboardSceneNode( boost::python::ptr(parent), boost::ref(size), boost::ref(position), id, colorTop, colorBottom );
    }

    virtual ::irr::scene::IBillboardTextSceneNode * addBillboardTextSceneNode( ::irr::gui::IGUIFont * font, wchar_t const * text, ::irr::scene::ISceneNode * parent=0, ::irr::core::dimension2d< float > const & size=irr::core::dimension2d<float>(((const float&)((const float*)(&1.0e+1f))), ((const float&)((const float*)(&1.0e+1f)))), ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::s32 id=-0x00000000000000001, ::irr::video::SColor colorTop=4294967295u, ::irr::video::SColor colorBottom=4294967295u ){
        bp::override func_addBillboardTextSceneNode = this->get_override( "addBillboardTextSceneNode" );
        return func_addBillboardTextSceneNode( boost::python::ptr(font), text, boost::python::ptr(parent), boost::ref(size), boost::ref(position), id, colorTop, colorBottom );
    }

    virtual ::irr::scene::ICameraSceneNode * addCameraSceneNode( ::irr::scene::ISceneNode * parent=0, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & lookat=irr::core::vector3d<float>(0.0f, 0.0f, 1.0e+2f), ::irr::s32 id=-0x00000000000000001, bool makeActive=true ){
        bp::override func_addCameraSceneNode = this->get_override( "addCameraSceneNode" );
        return func_addCameraSceneNode( boost::python::ptr(parent), boost::ref(position), boost::ref(lookat), id, makeActive );
    }

    virtual ::irr::scene::ICameraSceneNode * addCameraSceneNodeFPS( ::irr::scene::ISceneNode * parent=0, ::irr::f32 rotateSpeed=1.0e+2f, ::irr::f32 moveSpeed=5.0e-1f, ::irr::s32 id=-0x00000000000000001, ::irr::SKeyMap * keyMapArray=0, ::irr::s32 keyMapSize=0, bool noVerticalMovement=false, ::irr::f32 jumpSpeed=0.0f, bool invertMouse=false, bool makeActive=true ){
        bp::override func_addCameraSceneNodeFPS = this->get_override( "addCameraSceneNodeFPS" );
        return func_addCameraSceneNodeFPS( boost::python::ptr(parent), rotateSpeed, moveSpeed, id, boost::python::ptr(keyMapArray), keyMapSize, noVerticalMovement, jumpSpeed, invertMouse, makeActive );
    }

    virtual ::irr::scene::ICameraSceneNode * addCameraSceneNodeMaya( ::irr::scene::ISceneNode * parent=0, ::irr::f32 rotateSpeed=-1.5e+3f, ::irr::f32 zoomSpeed=2.0e+2f, ::irr::f32 translationSpeed=1.5e+3f, ::irr::s32 id=-0x00000000000000001, bool makeActive=true ){
        bp::override func_addCameraSceneNodeMaya = this->get_override( "addCameraSceneNodeMaya" );
        return func_addCameraSceneNodeMaya( boost::python::ptr(parent), rotateSpeed, zoomSpeed, translationSpeed, id, makeActive );
    }

    virtual ::irr::scene::IMeshSceneNode * addCubeSceneNode( ::irr::f32 size=1.0e+1f, ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & rotation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & scale=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) ){
        bp::override func_addCubeSceneNode = this->get_override( "addCubeSceneNode" );
        return func_addCubeSceneNode( size, boost::python::ptr(parent), id, boost::ref(position), boost::ref(rotation), boost::ref(scale) );
    }

    virtual ::irr::scene::IDummyTransformationSceneNode * addDummyTransformationSceneNode( ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addDummyTransformationSceneNode = this->get_override( "addDummyTransformationSceneNode" );
        return func_addDummyTransformationSceneNode( boost::python::ptr(parent), id );
    }

    virtual ::irr::scene::ISceneNode * addEmptySceneNode( ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addEmptySceneNode = this->get_override( "addEmptySceneNode" );
        return func_addEmptySceneNode( boost::python::ptr(parent), id );
    }

    virtual void addExternalMeshLoader( ::irr::scene::IMeshLoader * externalLoader ){
        bp::override func_addExternalMeshLoader = this->get_override( "addExternalMeshLoader" );
        func_addExternalMeshLoader( boost::python::ptr(externalLoader) );
    }

    virtual ::irr::scene::IAnimatedMesh * addHillPlaneMesh( ::irr::io::path const & name, ::irr::core::dimension2d< float > const & tileSize, ::irr::core::dimension2d< unsigned int > const & tileCount, ::irr::video::SMaterial * material=0, ::irr::f32 hillHeight=0.0f, ::irr::core::dimension2d< float > const & countHills=irr::core::dimension2d<float>(((const float&)((const float*)(&0.0f))), ((const float&)((const float*)(&0.0f)))), ::irr::core::dimension2d< float > const & textureRepeatCount=irr::core::dimension2d<float>(((const float&)((const float*)(&1.0e+0f))), ((const float&)((const float*)(&1.0e+0f)))) ){
        bp::override func_addHillPlaneMesh = this->get_override( "addHillPlaneMesh" );
        return func_addHillPlaneMesh( boost::ref(name), boost::ref(tileSize), boost::ref(tileCount), boost::python::ptr(material), hillHeight, boost::ref(countHills), boost::ref(textureRepeatCount) );
    }

    virtual ::irr::scene::ILightSceneNode * addLightSceneNode( ::irr::scene::ISceneNode * parent=0, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::video::SColorf color=irr::video::SColorf(1.0e+0f, 1.0e+0f, 1.0e+0f, 1.0e+0f), ::irr::f32 radius=1.0e+2f, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addLightSceneNode = this->get_override( "addLightSceneNode" );
        return func_addLightSceneNode( boost::python::ptr(parent), boost::ref(position), color, radius, id );
    }

    virtual ::irr::scene::IMeshSceneNode * addMeshSceneNode( ::irr::scene::IMesh * mesh, ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & rotation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & scale=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f), bool alsoAddIfMeshPointerZero=false ){
        bp::override func_addMeshSceneNode = this->get_override( "addMeshSceneNode" );
        return func_addMeshSceneNode( boost::python::ptr(mesh), boost::python::ptr(parent), id, boost::ref(position), boost::ref(rotation), boost::ref(scale), alsoAddIfMeshPointerZero );
    }

    virtual ::irr::scene::IMeshSceneNode * addOctreeSceneNode( ::irr::scene::IAnimatedMesh * mesh, ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001, ::irr::s32 minimalPolysPerNode=512, bool alsoAddIfMeshPointerZero=false ){
        bp::override func_addOctreeSceneNode = this->get_override( "addOctreeSceneNode" );
        return func_addOctreeSceneNode( boost::python::ptr(mesh), boost::python::ptr(parent), id, minimalPolysPerNode, alsoAddIfMeshPointerZero );
    }

    virtual ::irr::scene::IMeshSceneNode * addOctreeSceneNode( ::irr::scene::IMesh * mesh, ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001, ::irr::s32 minimalPolysPerNode=256, bool alsoAddIfMeshPointerZero=false ){
        bp::override func_addOctreeSceneNode = this->get_override( "addOctreeSceneNode" );
        return func_addOctreeSceneNode( boost::python::ptr(mesh), boost::python::ptr(parent), id, minimalPolysPerNode, alsoAddIfMeshPointerZero );
    }

    virtual ::irr::scene::IParticleSystemSceneNode * addParticleSystemSceneNode( bool withDefaultEmitter=true, ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & rotation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & scale=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) ){
        bp::override func_addParticleSystemSceneNode = this->get_override( "addParticleSystemSceneNode" );
        return func_addParticleSystemSceneNode( withDefaultEmitter, boost::python::ptr(parent), id, boost::ref(position), boost::ref(rotation), boost::ref(scale) );
    }

    virtual ::irr::scene::IMeshSceneNode * addQuake3SceneNode( ::irr::scene::IMeshBuffer const * meshBuffer, ::irr::scene::quake3::IShader const * shader, ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addQuake3SceneNode = this->get_override( "addQuake3SceneNode" );
        return func_addQuake3SceneNode( boost::python::ptr(meshBuffer), boost::python::ptr(shader), boost::python::ptr(parent), id );
    }

    virtual ::irr::scene::ISceneNode * addSceneNode( char const * sceneNodeTypeName, ::irr::scene::ISceneNode * parent=0 ){
        bp::override func_addSceneNode = this->get_override( "addSceneNode" );
        return func_addSceneNode( sceneNodeTypeName, boost::python::ptr(parent) );
    }

    virtual ::irr::scene::ISceneNode * addSkyBoxSceneNode( ::irr::video::ITexture * top, ::irr::video::ITexture * bottom, ::irr::video::ITexture * left, ::irr::video::ITexture * right, ::irr::video::ITexture * front, ::irr::video::ITexture * back, ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addSkyBoxSceneNode = this->get_override( "addSkyBoxSceneNode" );
        return func_addSkyBoxSceneNode( boost::python::ptr(top), boost::python::ptr(bottom), boost::python::ptr(left), boost::python::ptr(right), boost::python::ptr(front), boost::python::ptr(back), boost::python::ptr(parent), id );
    }

    virtual ::irr::scene::ISceneNode * addSkyDomeSceneNode( ::irr::video::ITexture * texture, ::irr::u32 horiRes=16, ::irr::u32 vertRes=8, ::irr::f32 texturePercentage=9.0000000000000002220446049250313080847263336181640625e-1, ::irr::f32 spherePercentage=2.0e+0, ::irr::f32 radius=1.0e+3f, ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addSkyDomeSceneNode = this->get_override( "addSkyDomeSceneNode" );
        return func_addSkyDomeSceneNode( boost::python::ptr(texture), horiRes, vertRes, texturePercentage, spherePercentage, radius, boost::python::ptr(parent), id );
    }

    virtual ::irr::scene::IAnimatedMesh * addSphereMesh( ::irr::io::path const & name, ::irr::f32 radius=5.0e+0f, ::irr::u32 polyCountX=16, ::irr::u32 polyCountY=16 ){
        bp::override func_addSphereMesh = this->get_override( "addSphereMesh" );
        return func_addSphereMesh( boost::ref(name), radius, polyCountX, polyCountY );
    }

    virtual ::irr::scene::IMeshSceneNode * addSphereSceneNode( ::irr::f32 radius=5.0e+0f, ::irr::s32 polyCount=16, ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & rotation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & scale=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) ){
        bp::override func_addSphereSceneNode = this->get_override( "addSphereSceneNode" );
        return func_addSphereSceneNode( radius, polyCount, boost::python::ptr(parent), id, boost::ref(position), boost::ref(rotation), boost::ref(scale) );
    }

    virtual ::irr::scene::IAnimatedMesh * addTerrainMesh( ::irr::io::path const & meshname, ::irr::video::IImage * texture, ::irr::video::IImage * heightmap, ::irr::core::dimension2d< float > const & stretchSize=irr::core::dimension2d<float>(((const float&)((const float*)(&1.0e+1f))), ((const float&)((const float*)(&1.0e+1f)))), ::irr::f32 maxHeight=2.0e+2f, ::irr::core::dimension2d< unsigned int > const & defaultVertexBlockSize=irr::core::dimension2d<unsigned int>(((const unsigned int&)((const unsigned int*)(&64u))), ((const unsigned int&)((const unsigned int*)(&64u)))) ){
        bp::override func_addTerrainMesh = this->get_override( "addTerrainMesh" );
        return func_addTerrainMesh( boost::ref(meshname), boost::python::ptr(texture), boost::python::ptr(heightmap), boost::ref(stretchSize), maxHeight, boost::ref(defaultVertexBlockSize) );
    }

    virtual ::irr::scene::ITerrainSceneNode * addTerrainSceneNode( ::irr::io::path const & heightMapFileName, ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & rotation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & scale=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f), ::irr::video::SColor vertexColor=irr::video::SColor(255u, 255u, 255u, 255u), ::irr::s32 maxLOD=5, ::irr::scene::E_TERRAIN_PATCH_SIZE patchSize=::irr::scene::ETPS_17, ::irr::s32 smoothFactor=0, bool addAlsoIfHeightmapEmpty=false ){
        bp::override func_addTerrainSceneNode = this->get_override( "addTerrainSceneNode" );
        return func_addTerrainSceneNode( boost::ref(heightMapFileName), boost::python::ptr(parent), id, boost::ref(position), boost::ref(rotation), boost::ref(scale), vertexColor, maxLOD, patchSize, smoothFactor, addAlsoIfHeightmapEmpty );
    }

    virtual ::irr::scene::ITerrainSceneNode * addTerrainSceneNode( ::irr::io::IReadFile * heightMapFile, ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & rotation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & scale=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f), ::irr::video::SColor vertexColor=irr::video::SColor(255u, 255u, 255u, 255u), ::irr::s32 maxLOD=5, ::irr::scene::E_TERRAIN_PATCH_SIZE patchSize=::irr::scene::ETPS_17, ::irr::s32 smoothFactor=0, bool addAlsoIfHeightmapEmpty=false ){
        bp::override func_addTerrainSceneNode = this->get_override( "addTerrainSceneNode" );
        return func_addTerrainSceneNode( boost::python::ptr(heightMapFile), boost::python::ptr(parent), id, boost::ref(position), boost::ref(rotation), boost::ref(scale), vertexColor, maxLOD, patchSize, smoothFactor, addAlsoIfHeightmapEmpty );
    }

    virtual ::irr::scene::ITextSceneNode * addTextSceneNode( ::irr::gui::IGUIFont * font, wchar_t const * text, ::irr::video::SColor color=irr::video::SColor(100u, 255u, 255u, 255u), ::irr::scene::ISceneNode * parent=0, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addTextSceneNode = this->get_override( "addTextSceneNode" );
        return func_addTextSceneNode( boost::python::ptr(font), text, color, boost::python::ptr(parent), boost::ref(position), id );
    }

    virtual void addToDeletionQueue( ::irr::scene::ISceneNode * node ){
        bp::override func_addToDeletionQueue = this->get_override( "addToDeletionQueue" );
        func_addToDeletionQueue( boost::python::ptr(node) );
    }

    virtual ::irr::scene::IAnimatedMesh * addVolumeLightMesh( ::irr::io::path const & name, ::irr::u32 const SubdivideU=32, ::irr::u32 const SubdivideV=32, ::irr::video::SColor const FootColor=irr::video::SColor(51u, 0u, 230u, 180u), ::irr::video::SColor const TailColor=irr::video::SColor(0u, 0u, 0u, 0u) ){
        bp::override func_addVolumeLightMesh = this->get_override( "addVolumeLightMesh" );
        return func_addVolumeLightMesh( boost::ref(name), SubdivideU, SubdivideV, FootColor, TailColor );
    }

    virtual ::irr::scene::IVolumeLightSceneNode * addVolumeLightSceneNode( ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001, ::irr::u32 const subdivU=32, ::irr::u32 const subdivV=32, ::irr::video::SColor const foot=irr::video::SColor(51u, 0u, 230u, 180u), ::irr::video::SColor const tail=irr::video::SColor(0u, 0u, 0u, 0u), ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & rotation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & scale=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) ){
        bp::override func_addVolumeLightSceneNode = this->get_override( "addVolumeLightSceneNode" );
        return func_addVolumeLightSceneNode( boost::python::ptr(parent), id, subdivU, subdivV, foot, tail, boost::ref(position), boost::ref(rotation), boost::ref(scale) );
    }

    virtual ::irr::scene::ISceneNode * addWaterSurfaceSceneNode( ::irr::scene::IMesh * mesh, ::irr::f32 waveHeight=2.0e+0f, ::irr::f32 waveSpeed=3.0e+2f, ::irr::f32 waveLength=1.0e+1f, ::irr::scene::ISceneNode * parent=0, ::irr::s32 id=-0x00000000000000001, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & rotation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & scale=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) ){
        bp::override func_addWaterSurfaceSceneNode = this->get_override( "addWaterSurfaceSceneNode" );
        return func_addWaterSurfaceSceneNode( boost::python::ptr(mesh), waveHeight, waveSpeed, waveLength, boost::python::ptr(parent), id, boost::ref(position), boost::ref(rotation), boost::ref(scale) );
    }

    virtual void clear(  ){
        bp::override func_clear = this->get_override( "clear" );
        func_clear(  );
    }

    virtual ::irr::scene::ISceneNodeAnimatorCollisionResponse * createCollisionResponseAnimator( ::irr::scene::ITriangleSelector * world, ::irr::scene::ISceneNode * sceneNode, ::irr::core::vector3df const & ellipsoidRadius=irr::core::vector3d<float>(3.0e+1f, 6.0e+1f, 3.0e+1f), ::irr::core::vector3df const & gravityPerSecond=irr::core::vector3d<float>(0.0f, -1.0e+1f, 0.0f), ::irr::core::vector3df const & ellipsoidTranslation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::f32 slidingValue=5.000000237487256526947021484375e-4f ){
        bp::override func_createCollisionResponseAnimator = this->get_override( "createCollisionResponseAnimator" );
        return func_createCollisionResponseAnimator( boost::python::ptr(world), boost::python::ptr(sceneNode), boost::ref(ellipsoidRadius), boost::ref(gravityPerSecond), boost::ref(ellipsoidTranslation), slidingValue );
    }

    virtual ::irr::scene::ISceneNodeAnimator * createDeleteAnimator( ::irr::u32 timeMs ){
        bp::override func_createDeleteAnimator = this->get_override( "createDeleteAnimator" );
        return func_createDeleteAnimator( timeMs );
    }

    virtual ::irr::scene::ISceneNodeAnimator * createFlyCircleAnimator( ::irr::core::vector3df const & center=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::f32 radius=1.0e+2f, ::irr::f32 speed=1.000000047497451305389404296875e-3f, ::irr::core::vector3df const & direction=irr::core::vector3d<float>(0.0f, 1.0e+0f, 0.0f), ::irr::f32 startPosition=0.0f, ::irr::f32 radiusEllipsoid=0.0f ){
        bp::override func_createFlyCircleAnimator = this->get_override( "createFlyCircleAnimator" );
        return func_createFlyCircleAnimator( boost::ref(center), radius, speed, boost::ref(direction), startPosition, radiusEllipsoid );
    }

    virtual ::irr::scene::ISceneNodeAnimator * createFlyStraightAnimator( ::irr::core::vector3df const & startPoint, ::irr::core::vector3df const & endPoint, ::irr::u32 timeForWay, bool loop=false, bool pingpong=false ){
        bp::override func_createFlyStraightAnimator = this->get_override( "createFlyStraightAnimator" );
        return func_createFlyStraightAnimator( boost::ref(startPoint), boost::ref(endPoint), timeForWay, loop, pingpong );
    }

    virtual ::irr::scene::ISceneNodeAnimator * createFollowSplineAnimator( ::irr::s32 startTime, ::irr::core::array< irr::core::vector3d< float >, irr::core::irrAllocator< irr::core::vector3d< float > > > const & points, ::irr::f32 speed=1.0e+0f, ::irr::f32 tightness=5.0e-1f, bool loop=true, bool pingpong=false ){
        bp::override func_createFollowSplineAnimator = this->get_override( "createFollowSplineAnimator" );
        return func_createFollowSplineAnimator( startTime, boost::ref(points), speed, tightness, loop, pingpong );
    }

    virtual ::irr::scene::IMeshWriter * createMeshWriter( ::irr::scene::EMESH_WRITER_TYPE type ){
        bp::override func_createMeshWriter = this->get_override( "createMeshWriter" );
        return func_createMeshWriter( type );
    }

    virtual ::irr::scene::IMetaTriangleSelector * createMetaTriangleSelector(  ){
        bp::override func_createMetaTriangleSelector = this->get_override( "createMetaTriangleSelector" );
        return func_createMetaTriangleSelector(  );
    }

    virtual ::irr::scene::ISceneManager * createNewSceneManager( bool cloneContent=false ){
        bp::override func_createNewSceneManager = this->get_override( "createNewSceneManager" );
        return func_createNewSceneManager( cloneContent );
    }

    virtual ::irr::scene::ITriangleSelector * createOctreeTriangleSelector( ::irr::scene::IMesh * mesh, ::irr::scene::ISceneNode * node, ::irr::s32 minimalPolysPerNode=32 ){
        bp::override func_createOctreeTriangleSelector = this->get_override( "createOctreeTriangleSelector" );
        return func_createOctreeTriangleSelector( boost::python::ptr(mesh), boost::python::ptr(node), minimalPolysPerNode );
    }

    virtual ::irr::scene::ISceneNodeAnimator * createRotationAnimator( ::irr::core::vector3df const & rotationSpeed ){
        bp::override func_createRotationAnimator = this->get_override( "createRotationAnimator" );
        return func_createRotationAnimator( boost::ref(rotationSpeed) );
    }

    virtual ::irr::scene::ISkinnedMesh * createSkinnedMesh(  ){
        bp::override func_createSkinnedMesh = this->get_override( "createSkinnedMesh" );
        return func_createSkinnedMesh(  );
    }

    virtual ::irr::scene::ITriangleSelector * createTerrainTriangleSelector( ::irr::scene::ITerrainSceneNode * node, ::irr::s32 LOD=0 ){
        bp::override func_createTerrainTriangleSelector = this->get_override( "createTerrainTriangleSelector" );
        return func_createTerrainTriangleSelector( boost::python::ptr(node), LOD );
    }

    virtual ::irr::scene::ISceneNodeAnimator * createTextureAnimator( ::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > const & textures, ::irr::s32 timePerFrame, bool loop=true ){
        bp::override func_createTextureAnimator = this->get_override( "createTextureAnimator" );
        return func_createTextureAnimator( boost::ref(textures), timePerFrame, loop );
    }

    virtual ::irr::scene::ITriangleSelector * createTriangleSelector( ::irr::scene::IMesh * mesh, ::irr::scene::ISceneNode * node ){
        bp::override func_createTriangleSelector = this->get_override( "createTriangleSelector" );
        return func_createTriangleSelector( boost::python::ptr(mesh), boost::python::ptr(node) );
    }

    virtual ::irr::scene::ITriangleSelector * createTriangleSelector( ::irr::scene::IAnimatedMeshSceneNode * node ){
        bp::override func_createTriangleSelector = this->get_override( "createTriangleSelector" );
        return func_createTriangleSelector( boost::python::ptr(node) );
    }

    virtual ::irr::scene::ITriangleSelector * createTriangleSelectorFromBoundingBox( ::irr::scene::ISceneNode * node ){
        bp::override func_createTriangleSelectorFromBoundingBox = this->get_override( "createTriangleSelectorFromBoundingBox" );
        return func_createTriangleSelectorFromBoundingBox( boost::python::ptr(node) );
    }

    virtual void drawAll(  ){
        bp::override func_drawAll = this->get_override( "drawAll" );
        func_drawAll(  );
    }

    virtual ::irr::scene::ICameraSceneNode * getActiveCamera(  ) const {
        bp::override func_getActiveCamera = this->get_override( "getActiveCamera" );
        return func_getActiveCamera(  );
    }

    virtual ::irr::video::SColorf const & getAmbientLight(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::c8 const * getAnimatorTypeName( ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE type ){
        bp::override func_getAnimatorTypeName = this->get_override( "getAnimatorTypeName" );
        return func_getAnimatorTypeName( type );
    }

    virtual ::irr::scene::ISceneNodeAnimatorFactory * getDefaultSceneNodeAnimatorFactory(  ){
        bp::override func_getDefaultSceneNodeAnimatorFactory = this->get_override( "getDefaultSceneNodeAnimatorFactory" );
        return func_getDefaultSceneNodeAnimatorFactory(  );
    }

    virtual ::irr::scene::ISceneNodeFactory * getDefaultSceneNodeFactory(  ){
        bp::override func_getDefaultSceneNodeFactory = this->get_override( "getDefaultSceneNodeFactory" );
        return func_getDefaultSceneNodeFactory(  );
    }

    virtual ::irr::io::IFileSystem * getFileSystem(  ){
        bp::override func_getFileSystem = this->get_override( "getFileSystem" );
        return func_getFileSystem(  );
    }

    virtual ::irr::gui::IGUIEnvironment * getGUIEnvironment(  ){
        bp::override func_getGUIEnvironment = this->get_override( "getGUIEnvironment" );
        return func_getGUIEnvironment(  );
    }

    virtual ::irr::scene::IGeometryCreator const * getGeometryCreator(  ) const {
        bp::override func_getGeometryCreator = this->get_override( "getGeometryCreator" );
        return func_getGeometryCreator(  );
    }

    virtual ::irr::scene::IAnimatedMesh * getMesh( ::irr::io::path const & filename ){
        bp::override func_getMesh = this->get_override( "getMesh" );
        return func_getMesh( boost::ref(filename) );
    }

    virtual ::irr::scene::IAnimatedMesh * getMesh( ::irr::io::IReadFile * file ){
        bp::override func_getMesh = this->get_override( "getMesh" );
        return func_getMesh( boost::python::ptr(file) );
    }

    virtual ::irr::scene::IMeshCache * getMeshCache(  ){
        bp::override func_getMeshCache = this->get_override( "getMeshCache" );
        return func_getMeshCache(  );
    }

    virtual ::irr::scene::IMeshManipulator * getMeshManipulator(  ){
        bp::override func_getMeshManipulator = this->get_override( "getMeshManipulator" );
        return func_getMeshManipulator(  );
    }

    virtual ::irr::io::IAttributes * getParameters(  ){
        bp::override func_getParameters = this->get_override( "getParameters" );
        return func_getParameters(  );
    }

    virtual ::irr::u32 getRegisteredSceneNodeAnimatorFactoryCount(  ) const {
        bp::override func_getRegisteredSceneNodeAnimatorFactoryCount = this->get_override( "getRegisteredSceneNodeAnimatorFactoryCount" );
        return func_getRegisteredSceneNodeAnimatorFactoryCount(  );
    }

    virtual ::irr::u32 getRegisteredSceneNodeFactoryCount(  ) const {
        bp::override func_getRegisteredSceneNodeFactoryCount = this->get_override( "getRegisteredSceneNodeFactoryCount" );
        return func_getRegisteredSceneNodeFactoryCount(  );
    }

    virtual ::irr::scene::ISceneNode * getRootSceneNode(  ){
        bp::override func_getRootSceneNode = this->get_override( "getRootSceneNode" );
        return func_getRootSceneNode(  );
    }

    virtual ::irr::scene::ISceneCollisionManager * getSceneCollisionManager(  ){
        bp::override func_getSceneCollisionManager = this->get_override( "getSceneCollisionManager" );
        return func_getSceneCollisionManager(  );
    }

    virtual ::irr::scene::ISceneNodeAnimatorFactory * getSceneNodeAnimatorFactory( ::irr::u32 index ){
        bp::override func_getSceneNodeAnimatorFactory = this->get_override( "getSceneNodeAnimatorFactory" );
        return func_getSceneNodeAnimatorFactory( index );
    }

    virtual ::irr::scene::ISceneNodeFactory * getSceneNodeFactory( ::irr::u32 index ){
        bp::override func_getSceneNodeFactory = this->get_override( "getSceneNodeFactory" );
        return func_getSceneNodeFactory( index );
    }

    virtual ::irr::scene::ISceneNode * getSceneNodeFromId( ::irr::s32 id, ::irr::scene::ISceneNode * start=0 ){
        bp::override func_getSceneNodeFromId = this->get_override( "getSceneNodeFromId" );
        return func_getSceneNodeFromId( id, boost::python::ptr(start) );
    }

    virtual ::irr::scene::ISceneNode * getSceneNodeFromName( ::irr::c8 const * name, ::irr::scene::ISceneNode * start=0 ){
        bp::override func_getSceneNodeFromName = this->get_override( "getSceneNodeFromName" );
        return func_getSceneNodeFromName( name, boost::python::ptr(start) );
    }

    virtual ::irr::scene::ISceneNode * getSceneNodeFromType( ::irr::scene::ESCENE_NODE_TYPE type, ::irr::scene::ISceneNode * start=0 ){
        bp::override func_getSceneNodeFromType = this->get_override( "getSceneNodeFromType" );
        return func_getSceneNodeFromType( type, boost::python::ptr(start) );
    }

    virtual ::irr::scene::E_SCENE_NODE_RENDER_PASS getSceneNodeRenderPass(  ) const {
        bp::override func_getSceneNodeRenderPass = this->get_override( "getSceneNodeRenderPass" );
        return func_getSceneNodeRenderPass(  );
    }

    virtual ::irr::c8 const * getSceneNodeTypeName( ::irr::scene::ESCENE_NODE_TYPE type ){
        bp::override func_getSceneNodeTypeName = this->get_override( "getSceneNodeTypeName" );
        return func_getSceneNodeTypeName( type );
    }

    virtual void getSceneNodesFromType( ::irr::scene::ESCENE_NODE_TYPE type, ::irr::core::array< irr::scene::ISceneNode*, irr::core::irrAllocator< irr::scene::ISceneNode* > > & outNodes, ::irr::scene::ISceneNode * start=0 ){
        bp::override func_getSceneNodesFromType = this->get_override( "getSceneNodesFromType" );
        func_getSceneNodesFromType( type, boost::ref(outNodes), boost::python::ptr(start) );
    }

    virtual ::irr::video::SColor getShadowColor(  ) const {
        bp::override func_getShadowColor = this->get_override( "getShadowColor" );
        return func_getShadowColor(  );
    }

    virtual ::irr::video::IVideoDriver * getVideoDriver(  ){
        bp::override func_getVideoDriver = this->get_override( "getVideoDriver" );
        return func_getVideoDriver(  );
    }

    virtual bool isCulled( ::irr::scene::ISceneNode const * node ) const {
        bp::override func_isCulled = this->get_override( "isCulled" );
        return func_isCulled( boost::python::ptr(node) );
    }

    virtual bool loadScene( ::irr::io::path const & filename, ::irr::scene::ISceneUserDataSerializer * userDataSerializer=0 ){
        bp::override func_loadScene = this->get_override( "loadScene" );
        return func_loadScene( boost::ref(filename), boost::python::ptr(userDataSerializer) );
    }

    virtual bool loadScene( ::irr::io::IReadFile * file, ::irr::scene::ISceneUserDataSerializer * userDataSerializer=0 ){
        bp::override func_loadScene = this->get_override( "loadScene" );
        return func_loadScene( boost::python::ptr(file), boost::python::ptr(userDataSerializer) );
    }

    virtual bool postEventFromUser( ::irr::SEvent const & event ){
        bp::override func_postEventFromUser = this->get_override( "postEventFromUser" );
        return func_postEventFromUser( boost::ref(event) );
    }

    virtual ::irr::u32 registerNodeForRendering( ::irr::scene::ISceneNode * node, ::irr::scene::E_SCENE_NODE_RENDER_PASS pass=::irr::scene::ESNRP_AUTOMATIC ){
        bp::override func_registerNodeForRendering = this->get_override( "registerNodeForRendering" );
        return func_registerNodeForRendering( boost::python::ptr(node), pass );
    }

    virtual void registerSceneNodeAnimatorFactory( ::irr::scene::ISceneNodeAnimatorFactory * factoryToAdd ){
        bp::override func_registerSceneNodeAnimatorFactory = this->get_override( "registerSceneNodeAnimatorFactory" );
        func_registerSceneNodeAnimatorFactory( boost::python::ptr(factoryToAdd) );
    }

    virtual void registerSceneNodeFactory( ::irr::scene::ISceneNodeFactory * factoryToAdd ){
        bp::override func_registerSceneNodeFactory = this->get_override( "registerSceneNodeFactory" );
        func_registerSceneNodeFactory( boost::python::ptr(factoryToAdd) );
    }

    virtual bool saveScene( ::irr::io::path const & filename, ::irr::scene::ISceneUserDataSerializer * userDataSerializer=0 ){
        bp::override func_saveScene = this->get_override( "saveScene" );
        return func_saveScene( boost::ref(filename), boost::python::ptr(userDataSerializer) );
    }

    virtual bool saveScene( ::irr::io::IWriteFile * file, ::irr::scene::ISceneUserDataSerializer * userDataSerializer=0 ){
        bp::override func_saveScene = this->get_override( "saveScene" );
        return func_saveScene( boost::python::ptr(file), boost::python::ptr(userDataSerializer) );
    }

    virtual void setActiveCamera( ::irr::scene::ICameraSceneNode * camera ){
        bp::override func_setActiveCamera = this->get_override( "setActiveCamera" );
        func_setActiveCamera( boost::python::ptr(camera) );
    }

    virtual void setAmbientLight( ::irr::video::SColorf const & ambientColor ){
        bp::override func_setAmbientLight = this->get_override( "setAmbientLight" );
        func_setAmbientLight( boost::ref(ambientColor) );
    }

    virtual void setLightManager( ::irr::scene::ILightManager * lightManager ){
        bp::override func_setLightManager = this->get_override( "setLightManager" );
        func_setLightManager( boost::python::ptr(lightManager) );
    }

    virtual void setShadowColor( ::irr::video::SColor color=irr::video::SColor(150u, 0u, 0u, 0u) ){
        bp::override func_setShadowColor = this->get_override( "setShadowColor" );
        func_setShadowColor( color );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct ISceneNode_wrapper : irr::scene::ISceneNode, bp::wrapper< irr::scene::ISceneNode > {

    ISceneNode_wrapper(::irr::scene::ISceneNode * parent, ::irr::scene::ISceneManager * mgr, ::irr::s32 id=-0x00000000000000001, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & rotation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & scale=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )
    : irr::scene::ISceneNode( boost::python::ptr(parent), boost::python::ptr(mgr), id, boost::ref(position), boost::ref(rotation), boost::ref(scale) )
      , bp::wrapper< irr::scene::ISceneNode >(){
        // constructor
    
    }

    virtual void OnAnimate( ::irr::u32 timeMs ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( timeMs );
        else{
            this->irr::scene::ISceneNode::OnAnimate( timeMs );
        }
    }
    
    void default_OnAnimate( ::irr::u32 timeMs ) {
        irr::scene::ISceneNode::OnAnimate( timeMs );
    }

    virtual void OnRegisterSceneNode(  ) {
        if( bp::override func_OnRegisterSceneNode = this->get_override( "OnRegisterSceneNode" ) )
            func_OnRegisterSceneNode(  );
        else{
            this->irr::scene::ISceneNode::OnRegisterSceneNode(  );
        }
    }
    
    void default_OnRegisterSceneNode(  ) {
        irr::scene::ISceneNode::OnRegisterSceneNode( );
    }

    virtual void addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_addAnimator = this->get_override( "addAnimator" ) )
            func_addAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
    }

    virtual void addChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::scene::ISceneNode * child ) {
        irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
    }

    virtual ::irr::scene::ISceneNode * clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        else{
            return this->irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        }
    }
    
    ::irr::scene::ISceneNode * default_clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        return irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
    }

    void cloneMembers( ::irr::scene::ISceneNode * toCopyFrom, ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::cloneMembers( boost::python::ptr(toCopyFrom), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::core::vector3df getAbsolutePosition(  ) const  {
        if( bp::override func_getAbsolutePosition = this->get_override( "getAbsolutePosition" ) )
            return func_getAbsolutePosition(  );
        else{
            return this->irr::scene::ISceneNode::getAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector3df default_getAbsolutePosition(  ) const  {
        return irr::scene::ISceneNode::getAbsolutePosition( );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::scene::ISceneNode::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::scene::ISceneNode::getID( );
    }

    virtual ::irr::u32 getMaterialCount(  ) const  {
        if( bp::override func_getMaterialCount = this->get_override( "getMaterialCount" ) )
            return func_getMaterialCount(  );
        else{
            return this->irr::scene::ISceneNode::getMaterialCount(  );
        }
    }
    
    ::irr::u32 default_getMaterialCount(  ) const  {
        return irr::scene::ISceneNode::getMaterialCount( );
    }

    virtual ::irr::c8 const * getName(  ) const  {
        if( bp::override func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            return this->irr::scene::ISceneNode::getName(  );
        }
    }
    
    ::irr::c8 const * default_getName(  ) const  {
        return irr::scene::ISceneNode::getName( );
    }

    virtual ::irr::core::matrix4 getRelativeTransformation(  ) const  {
        if( bp::override func_getRelativeTransformation = this->get_override( "getRelativeTransformation" ) )
            return func_getRelativeTransformation(  );
        else{
            return this->irr::scene::ISceneNode::getRelativeTransformation(  );
        }
    }
    
    ::irr::core::matrix4 default_getRelativeTransformation(  ) const  {
        return irr::scene::ISceneNode::getRelativeTransformation( );
    }

    virtual ::irr::scene::ISceneManager * getSceneManager(  ) const  {
        if( bp::override func_getSceneManager = this->get_override( "getSceneManager" ) )
            return func_getSceneManager(  );
        else{
            return this->irr::scene::ISceneNode::getSceneManager(  );
        }
    }
    
    ::irr::scene::ISceneManager * default_getSceneManager(  ) const  {
        return irr::scene::ISceneNode::getSceneManager( );
    }

    virtual ::irr::core::aabbox3d< float > const getTransformedBoundingBox(  ) const  {
        if( bp::override func_getTransformedBoundingBox = this->get_override( "getTransformedBoundingBox" ) )
            return func_getTransformedBoundingBox(  );
        else{
            return this->irr::scene::ISceneNode::getTransformedBoundingBox(  );
        }
    }
    
    ::irr::core::aabbox3d< float > const default_getTransformedBoundingBox(  ) const  {
        return irr::scene::ISceneNode::getTransformedBoundingBox( );
    }

    virtual ::irr::scene::ITriangleSelector * getTriangleSelector(  ) const  {
        if( bp::override func_getTriangleSelector = this->get_override( "getTriangleSelector" ) )
            return func_getTriangleSelector(  );
        else{
            return this->irr::scene::ISceneNode::getTriangleSelector(  );
        }
    }
    
    ::irr::scene::ITriangleSelector * default_getTriangleSelector(  ) const  {
        return irr::scene::ISceneNode::getTriangleSelector( );
    }

    virtual ::irr::scene::ESCENE_NODE_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNode::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNode::getType( );
    }

    virtual bool isTrulyVisible(  ) const  {
        if( bp::override func_isTrulyVisible = this->get_override( "isTrulyVisible" ) )
            return func_isTrulyVisible(  );
        else{
            return this->irr::scene::ISceneNode::isTrulyVisible(  );
        }
    }
    
    bool default_isTrulyVisible(  ) const  {
        return irr::scene::ISceneNode::isTrulyVisible( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::scene::ISceneNode::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::scene::ISceneNode::isVisible( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::scene::ISceneNode::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::scene::ISceneNode::remove( );
    }

    virtual void removeAll(  ) {
        if( bp::override func_removeAll = this->get_override( "removeAll" ) )
            func_removeAll(  );
        else{
            this->irr::scene::ISceneNode::removeAll(  );
        }
    }
    
    void default_removeAll(  ) {
        irr::scene::ISceneNode::removeAll( );
    }

    virtual void removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_removeAnimator = this->get_override( "removeAnimator" ) )
            func_removeAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
    }

    virtual void removeAnimators(  ) {
        if( bp::override func_removeAnimators = this->get_override( "removeAnimators" ) )
            func_removeAnimators(  );
        else{
            this->irr::scene::ISceneNode::removeAnimators(  );
        }
    }
    
    void default_removeAnimators(  ) {
        irr::scene::ISceneNode::removeAnimators( );
    }

    virtual bool removeChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            return func_removeChild( boost::python::ptr(child) );
        else{
            return this->irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
        }
    }
    
    bool default_removeChild( ::irr::scene::ISceneNode * child ) {
        return irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
    }

    virtual void render(  ){
        bp::override func_render = this->get_override( "render" );
        func_render(  );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual void setDebugDataVisible( ::irr::s32 state ) {
        if( bp::override func_setDebugDataVisible = this->get_override( "setDebugDataVisible" ) )
            func_setDebugDataVisible( state );
        else{
            this->irr::scene::ISceneNode::setDebugDataVisible( state );
        }
    }
    
    void default_setDebugDataVisible( ::irr::s32 state ) {
        irr::scene::ISceneNode::setDebugDataVisible( state );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::scene::ISceneNode::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::scene::ISceneNode::setID( id );
    }

    virtual void setName( ::irr::c8 const * name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->irr::scene::ISceneNode::setName( name );
        }
    }
    
    void default_setName( ::irr::c8 const * name ) {
        irr::scene::ISceneNode::setName( name );
    }

    virtual void setName( ::irr::core::stringc const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->irr::scene::ISceneNode::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::irr::core::stringc const & name ) {
        irr::scene::ISceneNode::setName( boost::ref(name) );
    }

    virtual void setParent( ::irr::scene::ISceneNode * newParent ) {
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(newParent) );
        else{
            this->irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
        }
    }
    
    void default_setParent( ::irr::scene::ISceneNode * newParent ) {
        irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
    }

    virtual void setPosition( ::irr::core::vector3df const & newpos ) {
        if( bp::override func_setPosition = this->get_override( "setPosition" ) )
            func_setPosition( boost::ref(newpos) );
        else{
            this->irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
        }
    }
    
    void default_setPosition( ::irr::core::vector3df const & newpos ) {
        irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
    }

    virtual void setRotation( ::irr::core::vector3df const & rotation ) {
        if( bp::override func_setRotation = this->get_override( "setRotation" ) )
            func_setRotation( boost::ref(rotation) );
        else{
            this->irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
        }
    }
    
    void default_setRotation( ::irr::core::vector3df const & rotation ) {
        irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
    }

    virtual void setScale( ::irr::core::vector3df const & scale ) {
        if( bp::override func_setScale = this->get_override( "setScale" ) )
            func_setScale( boost::ref(scale) );
        else{
            this->irr::scene::ISceneNode::setScale( boost::ref(scale) );
        }
    }
    
    void default_setScale( ::irr::core::vector3df const & scale ) {
        irr::scene::ISceneNode::setScale( boost::ref(scale) );
    }

    void setSceneManager( ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::setSceneManager( boost::python::ptr(newManager) );
    }

    virtual void setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        if( bp::override func_setTriangleSelector = this->get_override( "setTriangleSelector" ) )
            func_setTriangleSelector( boost::python::ptr(selector) );
        else{
            this->irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
        }
    }
    
    void default_setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
    }

    virtual void setVisible( bool isVisible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( isVisible );
        else{
            this->irr::scene::ISceneNode::setVisible( isVisible );
        }
    }
    
    void default_setVisible( bool isVisible ) {
        irr::scene::ISceneNode::setVisible( isVisible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::scene::ISceneNode::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::scene::ISceneNode::updateAbsolutePosition( );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IEventReceiver_wrapper : irr::IEventReceiver, bp::wrapper< irr::IEventReceiver > {

    IEventReceiver_wrapper()
    : irr::IEventReceiver()
      , bp::wrapper< irr::IEventReceiver >(){
        // null constructor
        
    }

    virtual bool OnEvent( ::irr::SEvent const & event ){
        bp::override func_OnEvent = this->get_override( "OnEvent" );
        return func_OnEvent( boost::ref(event) );
    }

};

struct ISceneNodeAnimator_wrapper : irr::scene::ISceneNodeAnimator, bp::wrapper< irr::scene::ISceneNodeAnimator > {

    ISceneNodeAnimator_wrapper()
    : irr::scene::ISceneNodeAnimator()
      , bp::wrapper< irr::scene::ISceneNodeAnimator >(){
        // null constructor
        
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::scene::ISceneNodeAnimator::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::scene::ISceneNodeAnimator::OnEvent( boost::ref(event) );
    }

    virtual void animateNode( ::irr::scene::ISceneNode * node, ::irr::u32 timeMs ){
        bp::override func_animateNode = this->get_override( "animateNode" );
        func_animateNode( boost::python::ptr(node), timeMs );
    }

    virtual ::irr::scene::ISceneNodeAnimator * createClone( ::irr::scene::ISceneNode * node, ::irr::scene::ISceneManager * newManager=0 ){
        bp::override func_createClone = this->get_override( "createClone" );
        return func_createClone( boost::python::ptr(node), boost::python::ptr(newManager) );
    }

    virtual ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNodeAnimator::getType( );
    }

    virtual bool hasFinished(  ) const  {
        if( bp::override func_hasFinished = this->get_override( "hasFinished" ) )
            return func_hasFinished(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::hasFinished(  );
        }
    }
    
    bool default_hasFinished(  ) const  {
        return irr::scene::ISceneNodeAnimator::hasFinished( );
    }

    virtual bool isEventReceiverEnabled(  ) const  {
        if( bp::override func_isEventReceiverEnabled = this->get_override( "isEventReceiverEnabled" ) )
            return func_isEventReceiverEnabled(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::isEventReceiverEnabled(  );
        }
    }
    
    bool default_isEventReceiverEnabled(  ) const  {
        return irr::scene::ISceneNodeAnimator::isEventReceiverEnabled( );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct MySceneNodeAnimatorScale_wrapper : MySceneNodeAnimatorScale, bp::wrapper< MySceneNodeAnimatorScale > {

    MySceneNodeAnimatorScale_wrapper(MySceneNodeAnimatorScale const & arg )
    : MySceneNodeAnimatorScale( arg )
      , bp::wrapper< MySceneNodeAnimatorScale >(){
        // copy constructor
        
    }

    MySceneNodeAnimatorScale_wrapper(::irr::u32 delay, ::irr::u32 duration, ::irr::core::vector3df scale, ::AS_MOVE_TYPE type=::AS_MT_LINER, ::irr::f32 factor=0 )
    : MySceneNodeAnimatorScale( delay, duration, scale, type, factor )
      , bp::wrapper< MySceneNodeAnimatorScale >(){
        // constructor
    
    }

    virtual void animateNode( ::irr::scene::ISceneNode * node, ::irr::u32 timeMs ) {
        if( bp::override func_animateNode = this->get_override( "animateNode" ) )
            func_animateNode( boost::python::ptr(node), timeMs );
        else{
            this->MySceneNodeAnimatorScale::animateNode( boost::python::ptr(node), timeMs );
        }
    }
    
    void default_animateNode( ::irr::scene::ISceneNode * node, ::irr::u32 timeMs ) {
        MySceneNodeAnimatorScale::animateNode( boost::python::ptr(node), timeMs );
    }

    virtual ::irr::scene::ISceneNodeAnimator * createClone( ::irr::scene::ISceneNode * node, ::irr::scene::ISceneManager * newManager=0 ) {
        if( bp::override func_createClone = this->get_override( "createClone" ) )
            return func_createClone( boost::python::ptr(node), boost::python::ptr(newManager) );
        else{
            return this->MySceneNodeAnimatorScale::createClone( boost::python::ptr(node), boost::python::ptr(newManager) );
        }
    }
    
    ::irr::scene::ISceneNodeAnimator * default_createClone( ::irr::scene::ISceneNode * node, ::irr::scene::ISceneManager * newManager=0 ) {
        return MySceneNodeAnimatorScale::createClone( boost::python::ptr(node), boost::python::ptr(newManager) );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::scene::ISceneNodeAnimator::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::scene::ISceneNodeAnimator::OnEvent( boost::ref(event) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNodeAnimator::getType( );
    }

    virtual bool hasFinished(  ) const  {
        if( bp::override func_hasFinished = this->get_override( "hasFinished" ) )
            return func_hasFinished(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::hasFinished(  );
        }
    }
    
    bool default_hasFinished(  ) const  {
        return irr::scene::ISceneNodeAnimator::hasFinished( );
    }

    virtual bool isEventReceiverEnabled(  ) const  {
        if( bp::override func_isEventReceiverEnabled = this->get_override( "isEventReceiverEnabled" ) )
            return func_isEventReceiverEnabled(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::isEventReceiverEnabled(  );
        }
    }
    
    bool default_isEventReceiverEnabled(  ) const  {
        return irr::scene::ISceneNodeAnimator::isEventReceiverEnabled( );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct RelateCameraAnimatorMove_wrapper : RelateCameraAnimatorMove, bp::wrapper< RelateCameraAnimatorMove > {

    RelateCameraAnimatorMove_wrapper(RelateCameraAnimatorMove const & arg )
    : RelateCameraAnimatorMove( arg )
      , bp::wrapper< RelateCameraAnimatorMove >(){
        // copy constructor
        
    }

    RelateCameraAnimatorMove_wrapper(::irr::u32 delay, ::irr::u32 duration, ::irr::scene::ICameraSceneNode * camera, ::irr::core::vector3df start, ::irr::core::vector3df end, ::RM_MOVE_TYPE moveType=::RM_MT_LINER, ::irr::f32 factor=0 )
    : RelateCameraAnimatorMove( delay, duration, boost::python::ptr(camera), start, end, moveType, factor )
      , bp::wrapper< RelateCameraAnimatorMove >(){
        // constructor
    
    }

    virtual void animateNode( ::irr::scene::ISceneNode * node, ::irr::u32 timeMs ) {
        if( bp::override func_animateNode = this->get_override( "animateNode" ) )
            func_animateNode( boost::python::ptr(node), timeMs );
        else{
            this->RelateCameraAnimatorMove::animateNode( boost::python::ptr(node), timeMs );
        }
    }
    
    void default_animateNode( ::irr::scene::ISceneNode * node, ::irr::u32 timeMs ) {
        RelateCameraAnimatorMove::animateNode( boost::python::ptr(node), timeMs );
    }

    virtual ::irr::scene::ISceneNodeAnimator * createClone( ::irr::scene::ISceneNode * node, ::irr::scene::ISceneManager * newManager=0 ) {
        if( bp::override func_createClone = this->get_override( "createClone" ) )
            return func_createClone( boost::python::ptr(node), boost::python::ptr(newManager) );
        else{
            return this->RelateCameraAnimatorMove::createClone( boost::python::ptr(node), boost::python::ptr(newManager) );
        }
    }
    
    ::irr::scene::ISceneNodeAnimator * default_createClone( ::irr::scene::ISceneNode * node, ::irr::scene::ISceneManager * newManager=0 ) {
        return RelateCameraAnimatorMove::createClone( boost::python::ptr(node), boost::python::ptr(newManager) );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::scene::ISceneNodeAnimator::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::scene::ISceneNodeAnimator::OnEvent( boost::ref(event) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNodeAnimator::getType( );
    }

    virtual bool hasFinished(  ) const  {
        if( bp::override func_hasFinished = this->get_override( "hasFinished" ) )
            return func_hasFinished(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::hasFinished(  );
        }
    }
    
    bool default_hasFinished(  ) const  {
        return irr::scene::ISceneNodeAnimator::hasFinished( );
    }

    virtual bool isEventReceiverEnabled(  ) const  {
        if( bp::override func_isEventReceiverEnabled = this->get_override( "isEventReceiverEnabled" ) )
            return func_isEventReceiverEnabled(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::isEventReceiverEnabled(  );
        }
    }
    
    bool default_isEventReceiverEnabled(  ) const  {
        return irr::scene::ISceneNodeAnimator::isEventReceiverEnabled( );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct ILogger_wrapper : irr::ILogger, bp::wrapper< irr::ILogger > {

    ILogger_wrapper()
    : irr::ILogger()
      , bp::wrapper< irr::ILogger >(){
        // null constructor
        
    }

    virtual ::irr::ELOG_LEVEL getLogLevel(  ) const {
        bp::override func_getLogLevel = this->get_override( "getLogLevel" );
        return func_getLogLevel(  );
    }

    virtual void log( ::irr::c8 const * text, ::irr::ELOG_LEVEL ll=::irr::ELL_INFORMATION ){
        bp::override func_log = this->get_override( "log" );
        func_log( text, ll );
    }

    virtual void log( ::irr::c8 const * text, ::irr::c8 const * hint, ::irr::ELOG_LEVEL ll=::irr::ELL_INFORMATION ){
        bp::override func_log = this->get_override( "log" );
        func_log( text, hint, ll );
    }

    virtual void log( ::irr::c8 const * text, wchar_t const * hint, ::irr::ELOG_LEVEL ll=::irr::ELL_INFORMATION ){
        bp::override func_log = this->get_override( "log" );
        func_log( text, hint, ll );
    }

    virtual void log( wchar_t const * text, wchar_t const * hint, ::irr::ELOG_LEVEL ll=::irr::ELL_INFORMATION ){
        bp::override func_log = this->get_override( "log" );
        func_log( text, hint, ll );
    }

    virtual void log( wchar_t const * text, ::irr::ELOG_LEVEL ll=::irr::ELL_INFORMATION ){
        bp::override func_log = this->get_override( "log" );
        func_log( text, ll );
    }

    virtual void setLogLevel( ::irr::ELOG_LEVEL ll ){
        bp::override func_setLogLevel = this->get_override( "setLogLevel" );
        func_setLogLevel( ll );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IOSOperator_wrapper : irr::IOSOperator, bp::wrapper< irr::IOSOperator > {

    IOSOperator_wrapper()
    : irr::IOSOperator()
      , bp::wrapper< irr::IOSOperator >(){
        // null constructor
        
    }

    virtual void copyToClipboard( ::irr::c8 const * text ) const {
        bp::override func_copyToClipboard = this->get_override( "copyToClipboard" );
        func_copyToClipboard( text );
    }

    virtual wchar_t const * getOperationSystemVersion(  ) const {
        bp::override func_getOperationSystemVersion = this->get_override( "getOperationSystemVersion" );
        return func_getOperationSystemVersion(  );
    }

    virtual bool getProcessorSpeedMHz( ::irr::u32 * MHz ) const {
        bp::override func_getProcessorSpeedMHz = this->get_override( "getProcessorSpeedMHz" );
        return func_getProcessorSpeedMHz( MHz );
    }

    virtual bool getSystemMemory( ::irr::u32 * Total, ::irr::u32 * Avail ) const {
        bp::override func_getSystemMemory = this->get_override( "getSystemMemory" );
        return func_getSystemMemory( Total, Avail );
    }

    virtual ::irr::c8 const * getTextFromClipboard(  ) const {
        bp::override func_getTextFromClipboard = this->get_override( "getTextFromClipboard" );
        return func_getTextFromClipboard(  );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct ITimer_wrapper : irr::ITimer, bp::wrapper< irr::ITimer > {

    ITimer_wrapper()
    : irr::ITimer()
      , bp::wrapper< irr::ITimer >(){
        // null constructor
        
    }

    virtual ::irr::u32 getRealTime(  ) const {
        bp::override func_getRealTime = this->get_override( "getRealTime" );
        return func_getRealTime(  );
    }

    virtual ::irr::f32 getSpeed(  ) const {
        bp::override func_getSpeed = this->get_override( "getSpeed" );
        return func_getSpeed(  );
    }

    virtual ::irr::u32 getTime(  ) const {
        bp::override func_getTime = this->get_override( "getTime" );
        return func_getTime(  );
    }

    virtual bool isStopped(  ) const {
        bp::override func_isStopped = this->get_override( "isStopped" );
        return func_isStopped(  );
    }

    virtual void setSpeed( ::irr::f32 speed=1.0e+0f ){
        bp::override func_setSpeed = this->get_override( "setSpeed" );
        func_setSpeed( speed );
    }

    virtual void setTime( ::irr::u32 time ){
        bp::override func_setTime = this->get_override( "setTime" );
        func_setTime( time );
    }

    virtual void start(  ){
        bp::override func_start = this->get_override( "start" );
        func_start(  );
    }

    virtual void stop(  ){
        bp::override func_stop = this->get_override( "stop" );
        func_stop(  );
    }

    virtual void tick(  ){
        bp::override func_tick = this->get_override( "tick" );
        func_tick(  );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IrrlichtDevice_wrapper : irr::IrrlichtDevice, bp::wrapper< irr::IrrlichtDevice > {

    IrrlichtDevice_wrapper()
    : irr::IrrlichtDevice()
      , bp::wrapper< irr::IrrlichtDevice >(){
        // null constructor
        
    }

    virtual bool activateJoysticks( ::irr::core::array< irr::SJoystickInfo, irr::core::irrAllocator< irr::SJoystickInfo > > & joystickInfo ){
        bp::override func_activateJoysticks = this->get_override( "activateJoysticks" );
        return func_activateJoysticks( boost::ref(joystickInfo) );
    }

    virtual void clearSystemMessages(  ){
        bp::override func_clearSystemMessages = this->get_override( "clearSystemMessages" );
        func_clearSystemMessages(  );
    }

    virtual void closeDevice(  ){
        bp::override func_closeDevice = this->get_override( "closeDevice" );
        func_closeDevice(  );
    }

    virtual ::irr::video::ECOLOR_FORMAT getColorFormat(  ) const {
        bp::override func_getColorFormat = this->get_override( "getColorFormat" );
        return func_getColorFormat(  );
    }

    virtual ::irr::gui::ICursorControl * getCursorControl(  ){
        bp::override func_getCursorControl = this->get_override( "getCursorControl" );
        return func_getCursorControl(  );
    }

    virtual ::irr::IEventReceiver * getEventReceiver(  ){
        bp::override func_getEventReceiver = this->get_override( "getEventReceiver" );
        return func_getEventReceiver(  );
    }

    virtual ::irr::io::IFileSystem * getFileSystem(  ){
        bp::override func_getFileSystem = this->get_override( "getFileSystem" );
        return func_getFileSystem(  );
    }

    virtual ::irr::gui::IGUIEnvironment * getGUIEnvironment(  ){
        bp::override func_getGUIEnvironment = this->get_override( "getGUIEnvironment" );
        return func_getGUIEnvironment(  );
    }

    virtual bool getGammaRamp( ::irr::f32 & red, ::irr::f32 & green, ::irr::f32 & blue, ::irr::f32 & brightness, ::irr::f32 & contrast ){
        bp::override func_getGammaRamp = this->get_override( "getGammaRamp" );
        return func_getGammaRamp( red, green, blue, brightness, contrast );
    }

    virtual ::irr::ILogger * getLogger(  ){
        bp::override func_getLogger = this->get_override( "getLogger" );
        return func_getLogger(  );
    }

    virtual ::irr::IOSOperator * getOSOperator(  ){
        bp::override func_getOSOperator = this->get_override( "getOSOperator" );
        return func_getOSOperator(  );
    }

    virtual ::irr::scene::ISceneManager * getSceneManager(  ){
        bp::override func_getSceneManager = this->get_override( "getSceneManager" );
        return func_getSceneManager(  );
    }

    virtual ::irr::ITimer * getTimer(  ){
        bp::override func_getTimer = this->get_override( "getTimer" );
        return func_getTimer(  );
    }

    virtual ::irr::E_DEVICE_TYPE getType(  ) const {
        bp::override func_getType = this->get_override( "getType" );
        return func_getType(  );
    }

    virtual ::irr::c8 const * getVersion(  ) const {
        bp::override func_getVersion = this->get_override( "getVersion" );
        return func_getVersion(  );
    }

    virtual ::irr::video::IVideoDriver * getVideoDriver(  ){
        bp::override func_getVideoDriver = this->get_override( "getVideoDriver" );
        return func_getVideoDriver(  );
    }

    virtual ::irr::video::IVideoModeList * getVideoModeList(  ){
        bp::override func_getVideoModeList = this->get_override( "getVideoModeList" );
        return func_getVideoModeList(  );
    }

    virtual bool isFullscreen(  ) const {
        bp::override func_isFullscreen = this->get_override( "isFullscreen" );
        return func_isFullscreen(  );
    }

    virtual bool isWindowActive(  ) const {
        bp::override func_isWindowActive = this->get_override( "isWindowActive" );
        return func_isWindowActive(  );
    }

    virtual bool isWindowFocused(  ) const {
        bp::override func_isWindowFocused = this->get_override( "isWindowFocused" );
        return func_isWindowFocused(  );
    }

    virtual bool isWindowMinimized(  ) const {
        bp::override func_isWindowMinimized = this->get_override( "isWindowMinimized" );
        return func_isWindowMinimized(  );
    }

    virtual void maximizeWindow(  ){
        bp::override func_maximizeWindow = this->get_override( "maximizeWindow" );
        func_maximizeWindow(  );
    }

    virtual void minimizeWindow(  ){
        bp::override func_minimizeWindow = this->get_override( "minimizeWindow" );
        func_minimizeWindow(  );
    }

    virtual bool postEventFromUser( ::irr::SEvent const & event ){
        bp::override func_postEventFromUser = this->get_override( "postEventFromUser" );
        return func_postEventFromUser( boost::ref(event) );
    }

    virtual void restoreWindow(  ){
        bp::override func_restoreWindow = this->get_override( "restoreWindow" );
        func_restoreWindow(  );
    }

    virtual bool run(  ){
        bp::override func_run = this->get_override( "run" );
        return func_run(  );
    }

    virtual void setEventReceiver( ::irr::IEventReceiver * receiver ){
        bp::override func_setEventReceiver = this->get_override( "setEventReceiver" );
        func_setEventReceiver( boost::python::ptr(receiver) );
    }

    virtual bool setGammaRamp( ::irr::f32 red, ::irr::f32 green, ::irr::f32 blue, ::irr::f32 relativebrightness, ::irr::f32 relativecontrast ){
        bp::override func_setGammaRamp = this->get_override( "setGammaRamp" );
        return func_setGammaRamp( red, green, blue, relativebrightness, relativecontrast );
    }

    virtual void setInputReceivingSceneManager( ::irr::scene::ISceneManager * sceneManager ){
        bp::override func_setInputReceivingSceneManager = this->get_override( "setInputReceivingSceneManager" );
        func_setInputReceivingSceneManager( boost::python::ptr(sceneManager) );
    }

    virtual void setResizable( bool resize=false ){
        bp::override func_setResizable = this->get_override( "setResizable" );
        func_setResizable( resize );
    }

    virtual void setWindowCaption( wchar_t const * text ){
        bp::override func_setWindowCaption = this->get_override( "setWindowCaption" );
        func_setWindowCaption( text );
    }

    virtual void sleep( ::irr::u32 timeMs, bool pauseTimer=false ){
        bp::override func_sleep = this->get_override( "sleep" );
        func_sleep( timeMs, pauseTimer );
    }

    virtual void yield(  ){
        bp::override func_yield = this->get_override( "yield" );
        func_yield(  );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct SEvent_wrapper : irr::SEvent, bp::wrapper< irr::SEvent > {

    SEvent_wrapper(irr::SEvent const & arg )
    : irr::SEvent( arg )
      , bp::wrapper< irr::SEvent >(){
        // copy constructor
        
    }

    SEvent_wrapper()
    : irr::SEvent()
      , bp::wrapper< irr::SEvent >(){
        // null constructor
        
    }

    struct SGUIEvent_wrapper : irr::SEvent::SGUIEvent, bp::wrapper< irr::SEvent::SGUIEvent > {
    
        SGUIEvent_wrapper(irr::SEvent::SGUIEvent const & arg )
        : irr::SEvent::SGUIEvent( arg )
          , bp::wrapper< irr::SEvent::SGUIEvent >(){
            // copy constructor
            
        }
    
        SGUIEvent_wrapper()
        : irr::SEvent::SGUIEvent()
          , bp::wrapper< irr::SEvent::SGUIEvent >(){
            // null constructor
            
        }
    
        static ::irr::gui::IGUIElement * get_Caller(irr::SEvent::SGUIEvent const & inst ){
            return inst.Caller;
        }
        
        static void set_Caller( irr::SEvent::SGUIEvent & inst, ::irr::gui::IGUIElement * new_value ){ 
            inst.Caller = new_value;
        }
    
        static ::irr::gui::IGUIElement * get_Element(irr::SEvent::SGUIEvent const & inst ){
            return inst.Element;
        }
        
        static void set_Element( irr::SEvent::SGUIEvent & inst, ::irr::gui::IGUIElement * new_value ){ 
            inst.Element = new_value;
        }
    
    };

    struct SJoystickEvent_wrapper : irr::SEvent::SJoystickEvent, bp::wrapper< irr::SEvent::SJoystickEvent > {
    
        SJoystickEvent_wrapper(irr::SEvent::SJoystickEvent const & arg )
        : irr::SEvent::SJoystickEvent( arg )
          , bp::wrapper< irr::SEvent::SJoystickEvent >(){
            // copy constructor
            
        }
    
        SJoystickEvent_wrapper()
        : irr::SEvent::SJoystickEvent()
          , bp::wrapper< irr::SEvent::SJoystickEvent >(){
            // null constructor
            
        }
    
        static pyplusplus::containers::static_sized::array_1_t< short int, 6>
        pyplusplus_Axis_wrapper( ::irr::SEvent::SJoystickEvent & inst ){
            return pyplusplus::containers::static_sized::array_1_t< short int, 6>( inst.Axis );
        }
    
    };

    struct SKeyInput_wrapper : irr::SEvent::SKeyInput, bp::wrapper< irr::SEvent::SKeyInput > {
    
        SKeyInput_wrapper(irr::SEvent::SKeyInput const & arg )
        : irr::SEvent::SKeyInput( arg )
          , bp::wrapper< irr::SEvent::SKeyInput >(){
            // copy constructor
            
        }
    
        SKeyInput_wrapper()
        : irr::SEvent::SKeyInput()
          , bp::wrapper< irr::SEvent::SKeyInput >(){
            // null constructor
            
        }
    
        static bool get_Control(irr::SEvent::SKeyInput const & inst ){
            return inst.Control;
        }
        
        static void set_Control( irr::SEvent::SKeyInput & inst, bool new_value ){ 
            inst.Control = new_value;
        }
    
        static bool get_PressedDown(irr::SEvent::SKeyInput const & inst ){
            return inst.PressedDown;
        }
        
        static void set_PressedDown( irr::SEvent::SKeyInput & inst, bool new_value ){ 
            inst.PressedDown = new_value;
        }
    
        static bool get_Shift(irr::SEvent::SKeyInput const & inst ){
            return inst.Shift;
        }
        
        static void set_Shift( irr::SEvent::SKeyInput & inst, bool new_value ){ 
            inst.Shift = new_value;
        }
    
    };

    struct SMouseInput_wrapper : irr::SEvent::SMouseInput, bp::wrapper< irr::SEvent::SMouseInput > {
    
        SMouseInput_wrapper(irr::SEvent::SMouseInput const & arg )
        : irr::SEvent::SMouseInput( arg )
          , bp::wrapper< irr::SEvent::SMouseInput >(){
            // copy constructor
            
        }
    
        SMouseInput_wrapper()
        : irr::SEvent::SMouseInput()
          , bp::wrapper< irr::SEvent::SMouseInput >(){
            // null constructor
            
        }
    
        static bool get_Control(irr::SEvent::SMouseInput const & inst ){
            return inst.Control;
        }
        
        static void set_Control( irr::SEvent::SMouseInput & inst, bool new_value ){ 
            inst.Control = new_value;
        }
    
        static bool get_Shift(irr::SEvent::SMouseInput const & inst ){
            return inst.Shift;
        }
        
        static void set_Shift( irr::SEvent::SMouseInput & inst, bool new_value ){ 
            inst.Shift = new_value;
        }
    
    };

};

struct SIrrlichtCreationParameters_wrapper : irr::SIrrlichtCreationParameters, bp::wrapper< irr::SIrrlichtCreationParameters > {

    SIrrlichtCreationParameters_wrapper( )
    : irr::SIrrlichtCreationParameters( )
      , bp::wrapper< irr::SIrrlichtCreationParameters >(){
        // null constructor
    
    }

    SIrrlichtCreationParameters_wrapper(::irr::SIrrlichtCreationParameters const & other )
    : irr::SIrrlichtCreationParameters( boost::ref(other) )
      , bp::wrapper< irr::SIrrlichtCreationParameters >(){
        // copy constructor
    
    }

    static ::irr::IEventReceiver * get_EventReceiver(irr::SIrrlichtCreationParameters const & inst ){
        return inst.EventReceiver;
    }
    
    static void set_EventReceiver( irr::SIrrlichtCreationParameters & inst, ::irr::IEventReceiver * new_value ){ 
        inst.EventReceiver = new_value;
    }

};

struct irrAllocator_less__char__greater__wrapper : irr::core::irrAllocator< char >, bp::wrapper< irr::core::irrAllocator< char > > {

    irrAllocator_less__char__greater__wrapper(irr::core::irrAllocator<char> const & arg )
    : irr::core::irrAllocator<char>( arg )
      , bp::wrapper< irr::core::irrAllocator< char > >(){
        // copy constructor
        
    }

    irrAllocator_less__char__greater__wrapper()
    : irr::core::irrAllocator<char>()
      , bp::wrapper< irr::core::irrAllocator< char > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< char >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< char >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< char >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< char >::internal_new( cnt );
    }

};

struct irrAllocator_less__int__greater__wrapper : irr::core::irrAllocator< int >, bp::wrapper< irr::core::irrAllocator< int > > {

    irrAllocator_less__int__greater__wrapper(irr::core::irrAllocator<int> const & arg )
    : irr::core::irrAllocator<int>( arg )
      , bp::wrapper< irr::core::irrAllocator< int > >(){
        // copy constructor
        
    }

    irrAllocator_less__int__greater__wrapper()
    : irr::core::irrAllocator<int>()
      , bp::wrapper< irr::core::irrAllocator< int > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< int >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< int >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< int >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< int >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater__wrapper : irr::core::irrAllocator< irr::core::CMatrix4< float > >, bp::wrapper< irr::core::irrAllocator< irr::core::CMatrix4< float > > > {

    irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater__wrapper(irr::core::irrAllocator<irr::core::CMatrix4<float> > const & arg )
    : irr::core::irrAllocator<irr::core::CMatrix4<float> >( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::core::CMatrix4< float > > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater__wrapper()
    : irr::core::irrAllocator<irr::core::CMatrix4<float> >()
      , bp::wrapper< irr::core::irrAllocator< irr::core::CMatrix4< float > > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::core::CMatrix4< float > >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::core::CMatrix4< float > >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::core::CMatrix4< float > >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::core::CMatrix4< float > >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__scope_SKListNode__greater__wrapper : irr::core::irrAllocator< irr::core::list<irr::gui::IGUIElement*>::SKListNode >, bp::wrapper< irr::core::irrAllocator< irr::core::list<irr::gui::IGUIElement*>::SKListNode > > {

    irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__scope_SKListNode__greater__wrapper(irr::core::irrAllocator<irr::core::list<irr::gui::IGUIElement*>::SKListNode> const & arg )
    : irr::core::irrAllocator<irr::core::list<irr::gui::IGUIElement*>::SKListNode>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::core::list<irr::gui::IGUIElement*>::SKListNode > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__scope_SKListNode__greater__wrapper()
    : irr::core::irrAllocator<irr::core::list<irr::gui::IGUIElement*>::SKListNode>()
      , bp::wrapper< irr::core::irrAllocator< irr::core::list<irr::gui::IGUIElement*>::SKListNode > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::core::list<irr::gui::IGUIElement*>::SKListNode >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::core::list<irr::gui::IGUIElement*>::SKListNode >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::core::list<irr::gui::IGUIElement*>::SKListNode >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::core::list<irr::gui::IGUIElement*>::SKListNode >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNode_ptr__greater__scope_SKListNode__greater__wrapper : irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNode*>::SKListNode >, bp::wrapper< irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNode*>::SKListNode > > {

    irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNode_ptr__greater__scope_SKListNode__greater__wrapper(irr::core::irrAllocator<irr::core::list<irr::scene::ISceneNode*>::SKListNode> const & arg )
    : irr::core::irrAllocator<irr::core::list<irr::scene::ISceneNode*>::SKListNode>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNode*>::SKListNode > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNode_ptr__greater__scope_SKListNode__greater__wrapper()
    : irr::core::irrAllocator<irr::core::list<irr::scene::ISceneNode*>::SKListNode>()
      , bp::wrapper< irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNode*>::SKListNode > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNode*>::SKListNode >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNode*>::SKListNode >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNode*>::SKListNode >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNode*>::SKListNode >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNodeAnimator_ptr__greater__scope_SKListNode__greater__wrapper : irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNodeAnimator*>::SKListNode >, bp::wrapper< irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNodeAnimator*>::SKListNode > > {

    irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNodeAnimator_ptr__greater__scope_SKListNode__greater__wrapper(irr::core::irrAllocator<irr::core::list<irr::scene::ISceneNodeAnimator*>::SKListNode> const & arg )
    : irr::core::irrAllocator<irr::core::list<irr::scene::ISceneNodeAnimator*>::SKListNode>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNodeAnimator*>::SKListNode > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNodeAnimator_ptr__greater__scope_SKListNode__greater__wrapper()
    : irr::core::irrAllocator<irr::core::list<irr::scene::ISceneNodeAnimator*>::SKListNode>()
      , bp::wrapper< irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNodeAnimator*>::SKListNode > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNodeAnimator*>::SKListNode >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNodeAnimator*>::SKListNode >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNodeAnimator*>::SKListNode >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::core::list<irr::scene::ISceneNodeAnimator*>::SKListNode >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_core_scope_string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater___greater__wrapper : irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > >, bp::wrapper< irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > {

    irrAllocator_less__irr_scope_core_scope_string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater___greater__wrapper(irr::core::irrAllocator<irr::core::string<char, irr::core::irrAllocator<char> > > const & arg )
    : irr::core::irrAllocator<irr::core::string<char, irr::core::irrAllocator<char> > >( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_core_scope_string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater___greater__wrapper()
    : irr::core::irrAllocator<irr::core::string<char, irr::core::irrAllocator<char> > >()
      , bp::wrapper< irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater__wrapper : irr::core::irrAllocator< irr::gui::SGUISpriteFrame >, bp::wrapper< irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > {

    irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater__wrapper(irr::core::irrAllocator<irr::gui::SGUISpriteFrame> const & arg )
    : irr::core::irrAllocator<irr::gui::SGUISpriteFrame>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater__wrapper()
    : irr::core::irrAllocator<irr::gui::SGUISpriteFrame>()
      , bp::wrapper< irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::gui::SGUISpriteFrame >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::gui::SGUISpriteFrame >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::gui::SGUISpriteFrame >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::gui::SGUISpriteFrame >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater__wrapper : irr::core::irrAllocator< irr::scene::IBoneSceneNode* >, bp::wrapper< irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > {

    irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater__wrapper(irr::core::irrAllocator<irr::scene::IBoneSceneNode*> const & arg )
    : irr::core::irrAllocator<irr::scene::IBoneSceneNode*>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater__wrapper()
    : irr::core::irrAllocator<irr::scene::IBoneSceneNode*>()
      , bp::wrapper< irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::scene::IBoneSceneNode* >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::scene::IBoneSceneNode* >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::scene::IBoneSceneNode* >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::scene::IBoneSceneNode* >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater__wrapper : irr::core::irrAllocator< irr::scene::IMesh* >, bp::wrapper< irr::core::irrAllocator< irr::scene::IMesh* > > {

    irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater__wrapper(irr::core::irrAllocator<irr::scene::IMesh*> const & arg )
    : irr::core::irrAllocator<irr::scene::IMesh*>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::scene::IMesh* > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater__wrapper()
    : irr::core::irrAllocator<irr::scene::IMesh*>()
      , bp::wrapper< irr::core::irrAllocator< irr::scene::IMesh* > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::scene::IMesh* >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::scene::IMesh* >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::scene::IMesh* >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::scene::IMesh* >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater__wrapper : irr::core::irrAllocator< irr::scene::IMeshBuffer* >, bp::wrapper< irr::core::irrAllocator< irr::scene::IMeshBuffer* > > {

    irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater__wrapper(irr::core::irrAllocator<irr::scene::IMeshBuffer*> const & arg )
    : irr::core::irrAllocator<irr::scene::IMeshBuffer*>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::scene::IMeshBuffer* > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater__wrapper()
    : irr::core::irrAllocator<irr::scene::IMeshBuffer*>()
      , bp::wrapper< irr::core::irrAllocator< irr::scene::IMeshBuffer* > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::scene::IMeshBuffer* >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::scene::IMeshBuffer* >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::scene::IMeshBuffer* >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::scene::IMeshBuffer* >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater__wrapper : irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* >, bp::wrapper< irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > {

    irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater__wrapper(irr::core::irrAllocator<irr::scene::ISkinnedMesh::SJoint*> const & arg )
    : irr::core::irrAllocator<irr::scene::ISkinnedMesh::SJoint*>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater__wrapper()
    : irr::core::irrAllocator<irr::scene::ISkinnedMesh::SJoint*>()
      , bp::wrapper< irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater__wrapper : irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey >, bp::wrapper< irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > {

    irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater__wrapper(irr::core::irrAllocator<irr::scene::ISkinnedMesh::SPositionKey> const & arg )
    : irr::core::irrAllocator<irr::scene::ISkinnedMesh::SPositionKey>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater__wrapper()
    : irr::core::irrAllocator<irr::scene::ISkinnedMesh::SPositionKey>()
      , bp::wrapper< irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater__wrapper : irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey >, bp::wrapper< irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > {

    irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater__wrapper(irr::core::irrAllocator<irr::scene::ISkinnedMesh::SRotationKey> const & arg )
    : irr::core::irrAllocator<irr::scene::ISkinnedMesh::SRotationKey>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater__wrapper()
    : irr::core::irrAllocator<irr::scene::ISkinnedMesh::SRotationKey>()
      , bp::wrapper< irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater__wrapper : irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey >, bp::wrapper< irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > {

    irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater__wrapper(irr::core::irrAllocator<irr::scene::ISkinnedMesh::SScaleKey> const & arg )
    : irr::core::irrAllocator<irr::scene::ISkinnedMesh::SScaleKey>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater__wrapper()
    : irr::core::irrAllocator<irr::scene::ISkinnedMesh::SScaleKey>()
      , bp::wrapper< irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater__wrapper : irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight >, bp::wrapper< irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > {

    irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater__wrapper(irr::core::irrAllocator<irr::scene::ISkinnedMesh::SWeight> const & arg )
    : irr::core::irrAllocator<irr::scene::ISkinnedMesh::SWeight>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater__wrapper()
    : irr::core::irrAllocator<irr::scene::ISkinnedMesh::SWeight>()
      , bp::wrapper< irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater__wrapper : irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* >, bp::wrapper< irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > {

    irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater__wrapper(irr::core::irrAllocator<irr::scene::SMD3MeshBuffer*> const & arg )
    : irr::core::irrAllocator<irr::scene::SMD3MeshBuffer*>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater__wrapper()
    : irr::core::irrAllocator<irr::scene::SMD3MeshBuffer*>()
      , bp::wrapper< irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater__wrapper : irr::core::irrAllocator< irr::scene::SMD3QuaternionTag >, bp::wrapper< irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > {

    irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater__wrapper(irr::core::irrAllocator<irr::scene::SMD3QuaternionTag> const & arg )
    : irr::core::irrAllocator<irr::scene::SMD3QuaternionTag>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater__wrapper()
    : irr::core::irrAllocator<irr::scene::SMD3QuaternionTag>()
      , bp::wrapper< irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::scene::SMD3QuaternionTag >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::scene::SMD3QuaternionTag >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::scene::SMD3QuaternionTag >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::scene::SMD3QuaternionTag >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater__wrapper : irr::core::irrAllocator< irr::scene::SMD3TexCoord >, bp::wrapper< irr::core::irrAllocator< irr::scene::SMD3TexCoord > > {

    irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater__wrapper(irr::core::irrAllocator<irr::scene::SMD3TexCoord> const & arg )
    : irr::core::irrAllocator<irr::scene::SMD3TexCoord>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::scene::SMD3TexCoord > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater__wrapper()
    : irr::core::irrAllocator<irr::scene::SMD3TexCoord>()
      , bp::wrapper< irr::core::irrAllocator< irr::scene::SMD3TexCoord > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::scene::SMD3TexCoord >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::scene::SMD3TexCoord >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::scene::SMD3TexCoord >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::scene::SMD3TexCoord >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater__wrapper : irr::core::irrAllocator< irr::scene::SMD3Vertex >, bp::wrapper< irr::core::irrAllocator< irr::scene::SMD3Vertex > > {

    irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater__wrapper(irr::core::irrAllocator<irr::scene::SMD3Vertex> const & arg )
    : irr::core::irrAllocator<irr::scene::SMD3Vertex>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::scene::SMD3Vertex > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater__wrapper()
    : irr::core::irrAllocator<irr::scene::SMD3Vertex>()
      , bp::wrapper< irr::core::irrAllocator< irr::scene::SMD3Vertex > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::scene::SMD3Vertex >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::scene::SMD3Vertex >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::scene::SMD3Vertex >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::scene::SMD3Vertex >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater__wrapper : irr::core::irrAllocator< irr::scene::quake3::SVarGroup >, bp::wrapper< irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > {

    irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater__wrapper(irr::core::irrAllocator<irr::scene::quake3::SVarGroup> const & arg )
    : irr::core::irrAllocator<irr::scene::quake3::SVarGroup>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater__wrapper()
    : irr::core::irrAllocator<irr::scene::quake3::SVarGroup>()
      , bp::wrapper< irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::scene::quake3::SVarGroup >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::scene::quake3::SVarGroup >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::scene::quake3::SVarGroup >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::scene::quake3::SVarGroup >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater__wrapper : irr::core::irrAllocator< irr::scene::quake3::SVariable >, bp::wrapper< irr::core::irrAllocator< irr::scene::quake3::SVariable > > {

    irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater__wrapper(irr::core::irrAllocator<irr::scene::quake3::SVariable> const & arg )
    : irr::core::irrAllocator<irr::scene::quake3::SVariable>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::scene::quake3::SVariable > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater__wrapper()
    : irr::core::irrAllocator<irr::scene::quake3::SVariable>()
      , bp::wrapper< irr::core::irrAllocator< irr::scene::quake3::SVariable > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::scene::quake3::SVariable >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::scene::quake3::SVariable >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::scene::quake3::SVariable >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::scene::quake3::SVariable >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_video_scope_ITexture_ptr___greater__wrapper : irr::core::irrAllocator< irr::video::ITexture* >, bp::wrapper< irr::core::irrAllocator< irr::video::ITexture* > > {

    irrAllocator_less__irr_scope_video_scope_ITexture_ptr___greater__wrapper(irr::core::irrAllocator<irr::video::ITexture*> const & arg )
    : irr::core::irrAllocator<irr::video::ITexture*>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::video::ITexture* > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_video_scope_ITexture_ptr___greater__wrapper()
    : irr::core::irrAllocator<irr::video::ITexture*>()
      , bp::wrapper< irr::core::irrAllocator< irr::video::ITexture* > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::video::ITexture* >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::video::ITexture* >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::video::ITexture* >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::video::ITexture* >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater__wrapper : irr::core::irrAllocator< irr::video::S3DVertex2TCoords >, bp::wrapper< irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > {

    irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater__wrapper(irr::core::irrAllocator<irr::video::S3DVertex2TCoords> const & arg )
    : irr::core::irrAllocator<irr::video::S3DVertex2TCoords>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater__wrapper()
    : irr::core::irrAllocator<irr::video::S3DVertex2TCoords>()
      , bp::wrapper< irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::video::S3DVertex2TCoords >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::video::S3DVertex2TCoords >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::video::S3DVertex2TCoords >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::video::S3DVertex2TCoords >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_video_scope_S3DVertex__greater__wrapper : irr::core::irrAllocator< irr::video::S3DVertex >, bp::wrapper< irr::core::irrAllocator< irr::video::S3DVertex > > {

    irrAllocator_less__irr_scope_video_scope_S3DVertex__greater__wrapper(irr::core::irrAllocator<irr::video::S3DVertex> const & arg )
    : irr::core::irrAllocator<irr::video::S3DVertex>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::video::S3DVertex > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_video_scope_S3DVertex__greater__wrapper()
    : irr::core::irrAllocator<irr::video::S3DVertex>()
      , bp::wrapper< irr::core::irrAllocator< irr::video::S3DVertex > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::video::S3DVertex >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::video::S3DVertex >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::video::S3DVertex >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::video::S3DVertex >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater__wrapper : irr::core::irrAllocator< irr::video::S3DVertexTangents >, bp::wrapper< irr::core::irrAllocator< irr::video::S3DVertexTangents > > {

    irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater__wrapper(irr::core::irrAllocator<irr::video::S3DVertexTangents> const & arg )
    : irr::core::irrAllocator<irr::video::S3DVertexTangents>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::video::S3DVertexTangents > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater__wrapper()
    : irr::core::irrAllocator<irr::video::S3DVertexTangents>()
      , bp::wrapper< irr::core::irrAllocator< irr::video::S3DVertexTangents > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::video::S3DVertexTangents >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::video::S3DVertexTangents >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::video::S3DVertexTangents >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::video::S3DVertexTangents >::internal_new( cnt );
    }

};

struct irrAllocator_less__irr_scope_video_scope_SMaterial__greater__wrapper : irr::core::irrAllocator< irr::video::SMaterial >, bp::wrapper< irr::core::irrAllocator< irr::video::SMaterial > > {

    irrAllocator_less__irr_scope_video_scope_SMaterial__greater__wrapper(irr::core::irrAllocator<irr::video::SMaterial> const & arg )
    : irr::core::irrAllocator<irr::video::SMaterial>( arg )
      , bp::wrapper< irr::core::irrAllocator< irr::video::SMaterial > >(){
        // copy constructor
        
    }

    irrAllocator_less__irr_scope_video_scope_SMaterial__greater__wrapper()
    : irr::core::irrAllocator<irr::video::SMaterial>()
      , bp::wrapper< irr::core::irrAllocator< irr::video::SMaterial > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< irr::video::SMaterial >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< irr::video::SMaterial >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< irr::video::SMaterial >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< irr::video::SMaterial >::internal_new( cnt );
    }

};

struct irrAllocator_less__unsigned_int__greater__wrapper : irr::core::irrAllocator< unsigned int >, bp::wrapper< irr::core::irrAllocator< unsigned int > > {

    irrAllocator_less__unsigned_int__greater__wrapper(irr::core::irrAllocator<unsigned int> const & arg )
    : irr::core::irrAllocator<unsigned int>( arg )
      , bp::wrapper< irr::core::irrAllocator< unsigned int > >(){
        // copy constructor
        
    }

    irrAllocator_less__unsigned_int__greater__wrapper()
    : irr::core::irrAllocator<unsigned int>()
      , bp::wrapper< irr::core::irrAllocator< unsigned int > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< unsigned int >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< unsigned int >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< unsigned int >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< unsigned int >::internal_new( cnt );
    }

};

struct irrAllocator_less__unsigned_short__greater__wrapper : irr::core::irrAllocator< unsigned short >, bp::wrapper< irr::core::irrAllocator< unsigned short > > {

    irrAllocator_less__unsigned_short__greater__wrapper(irr::core::irrAllocator<unsigned short> const & arg )
    : irr::core::irrAllocator<unsigned short>( arg )
      , bp::wrapper< irr::core::irrAllocator< unsigned short > >(){
        // copy constructor
        
    }

    irrAllocator_less__unsigned_short__greater__wrapper()
    : irr::core::irrAllocator<unsigned short>()
      , bp::wrapper< irr::core::irrAllocator< unsigned short > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< unsigned short >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< unsigned short >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< unsigned short >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< unsigned short >::internal_new( cnt );
    }

};

struct irrAllocator_less__wchar_t__greater__wrapper : irr::core::irrAllocator< wchar_t >, bp::wrapper< irr::core::irrAllocator< wchar_t > > {

    irrAllocator_less__wchar_t__greater__wrapper(irr::core::irrAllocator<wchar_t> const & arg )
    : irr::core::irrAllocator<wchar_t>( arg )
      , bp::wrapper< irr::core::irrAllocator< wchar_t > >(){
        // copy constructor
        
    }

    irrAllocator_less__wchar_t__greater__wrapper()
    : irr::core::irrAllocator<wchar_t>()
      , bp::wrapper< irr::core::irrAllocator< wchar_t > >(){
        // null constructor
        
    }

    virtual void internal_delete( void * ptr ){
        if( bp::override func_internal_delete = this->get_override( "internal_delete" ) )
            func_internal_delete( ptr );
        else{
            this->irr::core::irrAllocator< wchar_t >::internal_delete( ptr );
        }
    }
    
    virtual void default_internal_delete( void * ptr ){
        irr::core::irrAllocator< wchar_t >::internal_delete( ptr );
    }

    virtual void * internal_new( ::size_t cnt ){
        if( bp::override func_internal_new = this->get_override( "internal_new" ) )
            return func_internal_new( cnt );
        else{
            return this->irr::core::irrAllocator< wchar_t >::internal_new( cnt );
        }
    }
    
    virtual void * default_internal_new( ::size_t cnt ){
        return irr::core::irrAllocator< wchar_t >::internal_new( cnt );
    }

};

struct ICursorControl_wrapper : irr::gui::ICursorControl, bp::wrapper< irr::gui::ICursorControl > {

    ICursorControl_wrapper()
    : irr::gui::ICursorControl()
      , bp::wrapper< irr::gui::ICursorControl >(){
        // null constructor
        
    }

    virtual ::irr::core::vector2d< int > const & getPosition(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector2d< float > getRelativePosition(  ){
        bp::override func_getRelativePosition = this->get_override( "getRelativePosition" );
        return func_getRelativePosition(  );
    }

    virtual bool isVisible(  ) const {
        bp::override func_isVisible = this->get_override( "isVisible" );
        return func_isVisible(  );
    }

    virtual void setPosition( ::irr::core::vector2d< float > const & pos ){
        bp::override func_setPosition = this->get_override( "setPosition" );
        func_setPosition( boost::ref(pos) );
    }

    virtual void setPosition( ::irr::f32 x, ::irr::f32 y ){
        bp::override func_setPosition = this->get_override( "setPosition" );
        func_setPosition( x, y );
    }

    virtual void setPosition( ::irr::core::vector2d< int > const & pos ){
        bp::override func_setPosition = this->get_override( "setPosition" );
        func_setPosition( boost::ref(pos) );
    }

    virtual void setPosition( ::irr::s32 x, ::irr::s32 y ){
        bp::override func_setPosition = this->get_override( "setPosition" );
        func_setPosition( x, y );
    }

    virtual void setReferenceRect( ::irr::core::rect< int > * rect=0 ){
        bp::override func_setReferenceRect = this->get_override( "setReferenceRect" );
        func_setReferenceRect( boost::python::ptr(rect) );
    }

    virtual void setVisible( bool visible ){
        bp::override func_setVisible = this->get_override( "setVisible" );
        func_setVisible( visible );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IGUIElement_wrapper : irr::gui::IGUIElement, bp::wrapper< irr::gui::IGUIElement > {

    IGUIElement_wrapper(irr::gui::IGUIElement const & arg )
    : irr::gui::IGUIElement( arg )
      , bp::wrapper< irr::gui::IGUIElement >(){
        // copy constructor
        
    }

    IGUIElement_wrapper(::irr::gui::EGUI_ELEMENT_TYPE type, ::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > const & rectangle )
    : irr::gui::IGUIElement( type, boost::python::ptr(environment), boost::python::ptr(parent), id, boost::ref(rectangle) )
      , bp::wrapper< irr::gui::IGUIElement >(){
        // constructor
    
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IGUIFont_wrapper : irr::gui::IGUIFont, bp::wrapper< irr::gui::IGUIFont > {

    IGUIFont_wrapper()
    : irr::gui::IGUIFont()
      , bp::wrapper< irr::gui::IGUIFont >(){
        // null constructor
        
    }

    virtual void draw( ::irr::core::stringw const & text, ::irr::core::rect< int > const & position, ::irr::video::SColor color, bool hcenter=false, bool vcenter=false, ::irr::core::rect< int > const * clip=0 ){
        bp::override func_draw = this->get_override( "draw" );
        func_draw( boost::ref(text), boost::ref(position), color, hcenter, vcenter, boost::python::ptr(clip) );
    }

    virtual ::irr::s32 getCharacterFromPos( wchar_t const * text, ::irr::s32 pixel_x ) const {
        bp::override func_getCharacterFromPos = this->get_override( "getCharacterFromPos" );
        return func_getCharacterFromPos( text, pixel_x );
    }

    virtual ::irr::core::dimension2d< unsigned int > getDimension( wchar_t const * text ) const {
        bp::override func_getDimension = this->get_override( "getDimension" );
        return func_getDimension( text );
    }

    virtual ::irr::s32 getKerningHeight(  ) const {
        bp::override func_getKerningHeight = this->get_override( "getKerningHeight" );
        return func_getKerningHeight(  );
    }

    virtual ::irr::s32 getKerningWidth( wchar_t const * thisLetter=0, wchar_t const * previousLetter=0 ) const {
        bp::override func_getKerningWidth = this->get_override( "getKerningWidth" );
        return func_getKerningWidth( thisLetter, previousLetter );
    }

    virtual ::irr::gui::EGUI_FONT_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::gui::IGUIFont::getType(  );
        }
    }
    
    ::irr::gui::EGUI_FONT_TYPE default_getType(  ) const  {
        return irr::gui::IGUIFont::getType( );
    }

    virtual void setInvisibleCharacters( wchar_t const * s ){
        bp::override func_setInvisibleCharacters = this->get_override( "setInvisibleCharacters" );
        func_setInvisibleCharacters( s );
    }

    virtual void setKerningHeight( ::irr::s32 kerning ){
        bp::override func_setKerningHeight = this->get_override( "setKerningHeight" );
        func_setKerningHeight( kerning );
    }

    virtual void setKerningWidth( ::irr::s32 kerning ){
        bp::override func_setKerningWidth = this->get_override( "setKerningWidth" );
        func_setKerningWidth( kerning );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IGUISpriteBank_wrapper : irr::gui::IGUISpriteBank, bp::wrapper< irr::gui::IGUISpriteBank > {

    IGUISpriteBank_wrapper()
    : irr::gui::IGUISpriteBank()
      , bp::wrapper< irr::gui::IGUISpriteBank >(){
        // null constructor
        
    }

    virtual void addTexture( ::irr::video::ITexture * texture ){
        bp::override func_addTexture = this->get_override( "addTexture" );
        func_addTexture( boost::python::ptr(texture) );
    }

    virtual ::irr::s32 addTextureAsSprite( ::irr::video::ITexture * texture ){
        bp::override func_addTextureAsSprite = this->get_override( "addTextureAsSprite" );
        return func_addTextureAsSprite( boost::python::ptr(texture) );
    }

    virtual void clear(  ){
        bp::override func_clear = this->get_override( "clear" );
        func_clear(  );
    }

    virtual void draw2DSprite( ::irr::u32 index, ::irr::core::position2di const & pos, ::irr::core::rect< int > const * clip=0, ::irr::video::SColor const & color=irr::video::SColor(255u, 255u, 255u, 255u), ::irr::u32 starttime=0, ::irr::u32 currenttime=0, bool loop=true, bool center=false ){
        bp::override func_draw2DSprite = this->get_override( "draw2DSprite" );
        func_draw2DSprite( index, boost::ref(pos), boost::python::ptr(clip), boost::ref(color), starttime, currenttime, loop, center );
    }

    virtual void draw2DSpriteBatch( ::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > const & indices, ::irr::core::array< irr::core::vector2d< int >, irr::core::irrAllocator< irr::core::vector2d< int > > > const & pos, ::irr::core::rect< int > const * clip=0, ::irr::video::SColor const & color=irr::video::SColor(255u, 255u, 255u, 255u), ::irr::u32 starttime=0, ::irr::u32 currenttime=0, bool loop=true, bool center=false ){
        bp::override func_draw2DSpriteBatch = this->get_override( "draw2DSpriteBatch" );
        func_draw2DSpriteBatch( boost::ref(indices), boost::ref(pos), boost::python::ptr(clip), boost::ref(color), starttime, currenttime, loop, center );
    }

    virtual ::irr::core::array< irr::core::rect< int >, irr::core::irrAllocator< irr::core::rect< int > > > & getPositions(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::array< irr::gui::SGUISprite, irr::core::irrAllocator< irr::gui::SGUISprite > > & getSprites(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::video::ITexture * getTexture( ::irr::u32 index ) const {
        bp::override func_getTexture = this->get_override( "getTexture" );
        return func_getTexture( index );
    }

    virtual ::irr::u32 getTextureCount(  ) const {
        bp::override func_getTextureCount = this->get_override( "getTextureCount" );
        return func_getTextureCount(  );
    }

    virtual void setTexture( ::irr::u32 index, ::irr::video::ITexture * texture ){
        bp::override func_setTexture = this->get_override( "setTexture" );
        func_setTexture( index, boost::python::ptr(texture) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct ITexture_wrapper : irr::video::ITexture, bp::wrapper< irr::video::ITexture > {

    ITexture_wrapper(::irr::io::path const & name )
    : irr::video::ITexture( boost::ref(name) )
      , bp::wrapper< irr::video::ITexture >(){
        // constructor
    
    }

    virtual ::irr::video::ECOLOR_FORMAT getColorFormat(  ) const {
        bp::override func_getColorFormat = this->get_override( "getColorFormat" );
        return func_getColorFormat(  );
    }

    virtual ::irr::video::E_DRIVER_TYPE getDriverType(  ) const {
        bp::override func_getDriverType = this->get_override( "getDriverType" );
        return func_getDriverType(  );
    }

    virtual ::irr::core::dimension2d< unsigned int > const & getOriginalSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getPitch(  ) const {
        bp::override func_getPitch = this->get_override( "getPitch" );
        return func_getPitch(  );
    }

    virtual ::irr::core::dimension2d< unsigned int > const & getSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    ::irr::video::E_TEXTURE_CREATION_FLAG getTextureFormatFromFlags( ::irr::u32 flags ){
        return irr::video::ITexture::getTextureFormatFromFlags( flags );
    }

    virtual bool hasAlpha(  ) const  {
        if( bp::override func_hasAlpha = this->get_override( "hasAlpha" ) )
            return func_hasAlpha(  );
        else{
            return this->irr::video::ITexture::hasAlpha(  );
        }
    }
    
    bool default_hasAlpha(  ) const  {
        return irr::video::ITexture::hasAlpha( );
    }

    virtual bool hasMipMaps(  ) const  {
        if( bp::override func_hasMipMaps = this->get_override( "hasMipMaps" ) )
            return func_hasMipMaps(  );
        else{
            return this->irr::video::ITexture::hasMipMaps(  );
        }
    }
    
    bool default_hasMipMaps(  ) const  {
        return irr::video::ITexture::hasMipMaps( );
    }

    virtual bool isRenderTarget(  ) const  {
        if( bp::override func_isRenderTarget = this->get_override( "isRenderTarget" ) )
            return func_isRenderTarget(  );
        else{
            return this->irr::video::ITexture::isRenderTarget(  );
        }
    }
    
    bool default_isRenderTarget(  ) const  {
        return irr::video::ITexture::isRenderTarget( );
    }

    virtual void * lock( bool readOnly=false, ::irr::u32 mipmapLevel=0 ){
        bp::override func_lock = this->get_override( "lock" );
        return func_lock( readOnly, mipmapLevel );
    }

    virtual void regenerateMipMapLevels( void * mipmapData=0 ){
        bp::override func_regenerateMipMapLevels = this->get_override( "regenerateMipMapLevels" );
        func_regenerateMipMapLevels( mipmapData );
    }

    virtual void unlock(  ){
        bp::override func_unlock = this->get_override( "unlock" );
        func_unlock(  );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IGUIButton_wrapper : irr::gui::IGUIButton, bp::wrapper< irr::gui::IGUIButton > {

    IGUIButton_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIButton( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIButton >(){
        // constructor
    
    }

    virtual bool isAlphaChannelUsed(  ) const {
        bp::override func_isAlphaChannelUsed = this->get_override( "isAlphaChannelUsed" );
        return func_isAlphaChannelUsed(  );
    }

    virtual bool isDrawingBorder(  ) const {
        bp::override func_isDrawingBorder = this->get_override( "isDrawingBorder" );
        return func_isDrawingBorder(  );
    }

    virtual bool isPressed(  ) const {
        bp::override func_isPressed = this->get_override( "isPressed" );
        return func_isPressed(  );
    }

    virtual bool isPushButton(  ) const {
        bp::override func_isPushButton = this->get_override( "isPushButton" );
        return func_isPushButton(  );
    }

    virtual bool isScalingImage(  ) const {
        bp::override func_isScalingImage = this->get_override( "isScalingImage" );
        return func_isScalingImage(  );
    }

    virtual void setDrawBorder( bool border=true ){
        bp::override func_setDrawBorder = this->get_override( "setDrawBorder" );
        func_setDrawBorder( border );
    }

    virtual void setImage( ::irr::video::ITexture * image=0 ){
        bp::override func_setImage = this->get_override( "setImage" );
        func_setImage( boost::python::ptr(image) );
    }

    virtual void setImage( ::irr::video::ITexture * image, ::irr::core::rect< int > const & pos ){
        bp::override func_setImage = this->get_override( "setImage" );
        func_setImage( boost::python::ptr(image), boost::ref(pos) );
    }

    virtual void setIsPushButton( bool isPushButton=true ){
        bp::override func_setIsPushButton = this->get_override( "setIsPushButton" );
        func_setIsPushButton( isPushButton );
    }

    virtual void setOverrideFont( ::irr::gui::IGUIFont * font=0 ){
        bp::override func_setOverrideFont = this->get_override( "setOverrideFont" );
        func_setOverrideFont( boost::python::ptr(font) );
    }

    virtual void setPressed( bool pressed=true ){
        bp::override func_setPressed = this->get_override( "setPressed" );
        func_setPressed( pressed );
    }

    virtual void setPressedImage( ::irr::video::ITexture * image=0 ){
        bp::override func_setPressedImage = this->get_override( "setPressedImage" );
        func_setPressedImage( boost::python::ptr(image) );
    }

    virtual void setPressedImage( ::irr::video::ITexture * image, ::irr::core::rect< int > const & pos ){
        bp::override func_setPressedImage = this->get_override( "setPressedImage" );
        func_setPressedImage( boost::python::ptr(image), boost::ref(pos) );
    }

    virtual void setScaleImage( bool scaleImage=true ){
        bp::override func_setScaleImage = this->get_override( "setScaleImage" );
        func_setScaleImage( scaleImage );
    }

    virtual void setSprite( ::irr::gui::EGUI_BUTTON_STATE state, ::irr::s32 index, ::irr::video::SColor color=irr::video::SColor(255u, 255u, 255u, 255u), bool loop=false ){
        bp::override func_setSprite = this->get_override( "setSprite" );
        func_setSprite( state, index, color, loop );
    }

    virtual void setSpriteBank( ::irr::gui::IGUISpriteBank * bank=0 ){
        bp::override func_setSpriteBank = this->get_override( "setSpriteBank" );
        func_setSpriteBank( boost::python::ptr(bank) );
    }

    virtual void setUseAlphaChannel( bool useAlphaChannel=true ){
        bp::override func_setUseAlphaChannel = this->get_override( "setUseAlphaChannel" );
        func_setUseAlphaChannel( useAlphaChannel );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUICheckBox_wrapper : irr::gui::IGUICheckBox, bp::wrapper< irr::gui::IGUICheckBox > {

    IGUICheckBox_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUICheckBox( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUICheckBox >(){
        // constructor
    
    }

    virtual bool isChecked(  ) const {
        bp::override func_isChecked = this->get_override( "isChecked" );
        return func_isChecked(  );
    }

    virtual void setChecked( bool checked ){
        bp::override func_setChecked = this->get_override( "setChecked" );
        func_setChecked( checked );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUIColorSelectDialog_wrapper : irr::gui::IGUIColorSelectDialog, bp::wrapper< irr::gui::IGUIColorSelectDialog > {

    IGUIColorSelectDialog_wrapper(irr::gui::IGUIColorSelectDialog const & arg )
    : irr::gui::IGUIColorSelectDialog( arg )
      , bp::wrapper< irr::gui::IGUIColorSelectDialog >(){
        // copy constructor
        
    }

    IGUIColorSelectDialog_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIColorSelectDialog( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIColorSelectDialog >(){
        // constructor
    
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUIComboBox_wrapper : irr::gui::IGUIComboBox, bp::wrapper< irr::gui::IGUIComboBox > {

    IGUIComboBox_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIComboBox( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIComboBox >(){
        // constructor
    
    }

    virtual ::irr::u32 addItem( wchar_t const * text, ::irr::u32 data=0 ){
        bp::override func_addItem = this->get_override( "addItem" );
        return func_addItem( text, data );
    }

    virtual void clear(  ){
        bp::override func_clear = this->get_override( "clear" );
        func_clear(  );
    }

    virtual ::irr::s32 getIndexForItemData( ::irr::u32 data ) const {
        bp::override func_getIndexForItemData = this->get_override( "getIndexForItemData" );
        return func_getIndexForItemData( data );
    }

    virtual wchar_t const * getItem( ::irr::u32 idx ) const {
        bp::override func_getItem = this->get_override( "getItem" );
        return func_getItem( idx );
    }

    virtual ::irr::u32 getItemCount(  ) const {
        bp::override func_getItemCount = this->get_override( "getItemCount" );
        return func_getItemCount(  );
    }

    virtual ::irr::u32 getItemData( ::irr::u32 idx ) const {
        bp::override func_getItemData = this->get_override( "getItemData" );
        return func_getItemData( idx );
    }

    virtual ::irr::s32 getSelected(  ) const {
        bp::override func_getSelected = this->get_override( "getSelected" );
        return func_getSelected(  );
    }

    virtual void removeItem( ::irr::u32 idx ){
        bp::override func_removeItem = this->get_override( "removeItem" );
        func_removeItem( idx );
    }

    virtual void setSelected( ::irr::s32 idx ){
        bp::override func_setSelected = this->get_override( "setSelected" );
        func_setSelected( idx );
    }

    virtual void setTextAlignment( ::irr::gui::EGUI_ALIGNMENT horizontal, ::irr::gui::EGUI_ALIGNMENT vertical ){
        bp::override func_setTextAlignment = this->get_override( "setTextAlignment" );
        func_setTextAlignment( horizontal, vertical );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUIContextMenu_wrapper : irr::gui::IGUIContextMenu, bp::wrapper< irr::gui::IGUIContextMenu > {

    IGUIContextMenu_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIContextMenu( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIContextMenu >(){
        // constructor
    
    }

    virtual ::irr::u32 addItem( wchar_t const * text, ::irr::s32 commandId=-0x00000000000000001, bool enabled=true, bool hasSubMenu=false, bool checked=false, bool autoChecking=false ){
        bp::override func_addItem = this->get_override( "addItem" );
        return func_addItem( text, commandId, enabled, hasSubMenu, checked, autoChecking );
    }

    virtual void addSeparator(  ){
        bp::override func_addSeparator = this->get_override( "addSeparator" );
        func_addSeparator(  );
    }

    virtual ::irr::s32 findItemWithCommandId( ::irr::s32 commandId, ::irr::u32 idxStartSearch=0 ) const {
        bp::override func_findItemWithCommandId = this->get_override( "findItemWithCommandId" );
        return func_findItemWithCommandId( commandId, idxStartSearch );
    }

    virtual ::irr::gui::ECONTEXT_MENU_CLOSE getCloseHandling(  ) const {
        bp::override func_getCloseHandling = this->get_override( "getCloseHandling" );
        return func_getCloseHandling(  );
    }

    virtual bool getItemAutoChecking( ::irr::u32 idx ) const {
        bp::override func_getItemAutoChecking = this->get_override( "getItemAutoChecking" );
        return func_getItemAutoChecking( idx );
    }

    virtual ::irr::s32 getItemCommandId( ::irr::u32 idx ) const {
        bp::override func_getItemCommandId = this->get_override( "getItemCommandId" );
        return func_getItemCommandId( idx );
    }

    virtual ::irr::u32 getItemCount(  ) const {
        bp::override func_getItemCount = this->get_override( "getItemCount" );
        return func_getItemCount(  );
    }

    virtual wchar_t const * getItemText( ::irr::u32 idx ) const {
        bp::override func_getItemText = this->get_override( "getItemText" );
        return func_getItemText( idx );
    }

    virtual ::irr::s32 getSelectedItem(  ) const {
        bp::override func_getSelectedItem = this->get_override( "getSelectedItem" );
        return func_getSelectedItem(  );
    }

    virtual ::irr::gui::IGUIContextMenu * getSubMenu( ::irr::u32 idx ) const {
        bp::override func_getSubMenu = this->get_override( "getSubMenu" );
        return func_getSubMenu( idx );
    }

    virtual ::irr::u32 insertItem( ::irr::u32 idx, wchar_t const * text, ::irr::s32 commandId=-0x00000000000000001, bool enabled=true, bool hasSubMenu=false, bool checked=false, bool autoChecking=false ){
        bp::override func_insertItem = this->get_override( "insertItem" );
        return func_insertItem( idx, text, commandId, enabled, hasSubMenu, checked, autoChecking );
    }

    virtual bool isItemChecked( ::irr::u32 idx ) const {
        bp::override func_isItemChecked = this->get_override( "isItemChecked" );
        return func_isItemChecked( idx );
    }

    virtual bool isItemEnabled( ::irr::u32 idx ) const {
        bp::override func_isItemEnabled = this->get_override( "isItemEnabled" );
        return func_isItemEnabled( idx );
    }

    virtual void removeAllItems(  ){
        bp::override func_removeAllItems = this->get_override( "removeAllItems" );
        func_removeAllItems(  );
    }

    virtual void removeItem( ::irr::u32 idx ){
        bp::override func_removeItem = this->get_override( "removeItem" );
        func_removeItem( idx );
    }

    virtual void setCloseHandling( ::irr::gui::ECONTEXT_MENU_CLOSE onClose ){
        bp::override func_setCloseHandling = this->get_override( "setCloseHandling" );
        func_setCloseHandling( onClose );
    }

    virtual void setEventParent( ::irr::gui::IGUIElement * parent ){
        bp::override func_setEventParent = this->get_override( "setEventParent" );
        func_setEventParent( boost::python::ptr(parent) );
    }

    virtual void setItemAutoChecking( ::irr::u32 idx, bool autoChecking ){
        bp::override func_setItemAutoChecking = this->get_override( "setItemAutoChecking" );
        func_setItemAutoChecking( idx, autoChecking );
    }

    virtual void setItemChecked( ::irr::u32 idx, bool enabled ){
        bp::override func_setItemChecked = this->get_override( "setItemChecked" );
        func_setItemChecked( idx, enabled );
    }

    virtual void setItemCommandId( ::irr::u32 idx, ::irr::s32 id ){
        bp::override func_setItemCommandId = this->get_override( "setItemCommandId" );
        func_setItemCommandId( idx, id );
    }

    virtual void setItemEnabled( ::irr::u32 idx, bool enabled ){
        bp::override func_setItemEnabled = this->get_override( "setItemEnabled" );
        func_setItemEnabled( idx, enabled );
    }

    virtual void setItemText( ::irr::u32 idx, wchar_t const * text ){
        bp::override func_setItemText = this->get_override( "setItemText" );
        func_setItemText( idx, text );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUIEditBox_wrapper : irr::gui::IGUIEditBox, bp::wrapper< irr::gui::IGUIEditBox > {

    IGUIEditBox_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIEditBox( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIEditBox >(){
        // constructor
    
    }

    virtual void enableOverrideColor( bool enable ){
        bp::override func_enableOverrideColor = this->get_override( "enableOverrideColor" );
        func_enableOverrideColor( enable );
    }

    virtual ::irr::u32 getMax(  ) const {
        bp::override func_getMax = this->get_override( "getMax" );
        return func_getMax(  );
    }

    virtual ::irr::core::dimension2du getTextDimension(  ){
        bp::override func_getTextDimension = this->get_override( "getTextDimension" );
        return func_getTextDimension(  );
    }

    virtual bool isAutoScrollEnabled(  ) const {
        bp::override func_isAutoScrollEnabled = this->get_override( "isAutoScrollEnabled" );
        return func_isAutoScrollEnabled(  );
    }

    virtual bool isMultiLineEnabled(  ) const {
        bp::override func_isMultiLineEnabled = this->get_override( "isMultiLineEnabled" );
        return func_isMultiLineEnabled(  );
    }

    virtual bool isPasswordBox(  ) const {
        bp::override func_isPasswordBox = this->get_override( "isPasswordBox" );
        return func_isPasswordBox(  );
    }

    virtual bool isWordWrapEnabled(  ) const {
        bp::override func_isWordWrapEnabled = this->get_override( "isWordWrapEnabled" );
        return func_isWordWrapEnabled(  );
    }

    virtual void setAutoScroll( bool enable ){
        bp::override func_setAutoScroll = this->get_override( "setAutoScroll" );
        func_setAutoScroll( enable );
    }

    virtual void setDrawBorder( bool border ){
        bp::override func_setDrawBorder = this->get_override( "setDrawBorder" );
        func_setDrawBorder( border );
    }

    virtual void setMax( ::irr::u32 max ){
        bp::override func_setMax = this->get_override( "setMax" );
        func_setMax( max );
    }

    virtual void setMultiLine( bool enable ){
        bp::override func_setMultiLine = this->get_override( "setMultiLine" );
        func_setMultiLine( enable );
    }

    virtual void setOverrideColor( ::irr::video::SColor color ){
        bp::override func_setOverrideColor = this->get_override( "setOverrideColor" );
        func_setOverrideColor( color );
    }

    virtual void setOverrideFont( ::irr::gui::IGUIFont * font=0 ){
        bp::override func_setOverrideFont = this->get_override( "setOverrideFont" );
        func_setOverrideFont( boost::python::ptr(font) );
    }

    virtual void setPasswordBox( bool passwordBox, wchar_t passwordChar=42 ){
        bp::override func_setPasswordBox = this->get_override( "setPasswordBox" );
        func_setPasswordBox( passwordBox, passwordChar );
    }

    virtual void setTextAlignment( ::irr::gui::EGUI_ALIGNMENT horizontal, ::irr::gui::EGUI_ALIGNMENT vertical ){
        bp::override func_setTextAlignment = this->get_override( "setTextAlignment" );
        func_setTextAlignment( horizontal, vertical );
    }

    virtual void setWordWrap( bool enable ){
        bp::override func_setWordWrap = this->get_override( "setWordWrap" );
        func_setWordWrap( enable );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUIElementFactory_wrapper : irr::gui::IGUIElementFactory, bp::wrapper< irr::gui::IGUIElementFactory > {

    IGUIElementFactory_wrapper()
    : irr::gui::IGUIElementFactory()
      , bp::wrapper< irr::gui::IGUIElementFactory >(){
        // null constructor
        
    }

    virtual ::irr::gui::IGUIElement * addGUIElement( ::irr::gui::EGUI_ELEMENT_TYPE type, ::irr::gui::IGUIElement * parent=0 ){
        bp::override func_addGUIElement = this->get_override( "addGUIElement" );
        return func_addGUIElement( type, boost::python::ptr(parent) );
    }

    virtual ::irr::gui::IGUIElement * addGUIElement( ::irr::c8 const * typeName, ::irr::gui::IGUIElement * parent=0 ){
        bp::override func_addGUIElement = this->get_override( "addGUIElement" );
        return func_addGUIElement( typeName, boost::python::ptr(parent) );
    }

    virtual ::irr::s32 getCreatableGUIElementTypeCount(  ) const {
        bp::override func_getCreatableGUIElementTypeCount = this->get_override( "getCreatableGUIElementTypeCount" );
        return func_getCreatableGUIElementTypeCount(  );
    }

    virtual ::irr::gui::EGUI_ELEMENT_TYPE getCreateableGUIElementType( ::irr::s32 idx ) const {
        bp::override func_getCreateableGUIElementType = this->get_override( "getCreateableGUIElementType" );
        return func_getCreateableGUIElementType( idx );
    }

    virtual ::irr::c8 const * getCreateableGUIElementTypeName( ::irr::s32 idx ) const {
        bp::override func_getCreateableGUIElementTypeName = this->get_override( "getCreateableGUIElementTypeName" );
        return func_getCreateableGUIElementTypeName( idx );
    }

    virtual ::irr::c8 const * getCreateableGUIElementTypeName( ::irr::gui::EGUI_ELEMENT_TYPE type ) const {
        bp::override func_getCreateableGUIElementTypeName = this->get_override( "getCreateableGUIElementTypeName" );
        return func_getCreateableGUIElementTypeName( type );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IGUIEnvironment_wrapper : irr::gui::IGUIEnvironment, bp::wrapper< irr::gui::IGUIEnvironment > {

    IGUIEnvironment_wrapper()
    : irr::gui::IGUIEnvironment()
      , bp::wrapper< irr::gui::IGUIEnvironment >(){
        // null constructor
        
    }

    virtual ::irr::gui::IGUIButton * addButton( ::irr::core::rect< int > const & rectangle, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001, wchar_t const * text=0, wchar_t const * tooltiptext=0 ){
        bp::override func_addButton = this->get_override( "addButton" );
        return func_addButton( boost::ref(rectangle), boost::python::ptr(parent), id, text, tooltiptext );
    }

    virtual ::irr::gui::IGUICheckBox * addCheckBox( bool checked, ::irr::core::rect< int > const & rectangle, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001, wchar_t const * text=0 ){
        bp::override func_addCheckBox = this->get_override( "addCheckBox" );
        return func_addCheckBox( checked, boost::ref(rectangle), boost::python::ptr(parent), id, text );
    }

    virtual ::irr::gui::IGUIColorSelectDialog * addColorSelectDialog( wchar_t const * title=0, bool modal=true, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addColorSelectDialog = this->get_override( "addColorSelectDialog" );
        return func_addColorSelectDialog( title, modal, boost::python::ptr(parent), id );
    }

    virtual ::irr::gui::IGUIComboBox * addComboBox( ::irr::core::rect< int > const & rectangle, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addComboBox = this->get_override( "addComboBox" );
        return func_addComboBox( boost::ref(rectangle), boost::python::ptr(parent), id );
    }

    virtual ::irr::gui::IGUIContextMenu * addContextMenu( ::irr::core::rect< int > const & rectangle, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addContextMenu = this->get_override( "addContextMenu" );
        return func_addContextMenu( boost::ref(rectangle), boost::python::ptr(parent), id );
    }

    virtual ::irr::gui::IGUIEditBox * addEditBox( wchar_t const * text, ::irr::core::rect< int > const & rectangle, bool border=true, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addEditBox = this->get_override( "addEditBox" );
        return func_addEditBox( text, boost::ref(rectangle), border, boost::python::ptr(parent), id );
    }

    virtual ::irr::gui::IGUISpriteBank * addEmptySpriteBank( ::irr::io::path const & name ){
        bp::override func_addEmptySpriteBank = this->get_override( "addEmptySpriteBank" );
        return func_addEmptySpriteBank( boost::ref(name) );
    }

    virtual ::irr::gui::IGUIFileOpenDialog * addFileOpenDialog( wchar_t const * title=0, bool modal=true, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addFileOpenDialog = this->get_override( "addFileOpenDialog" );
        return func_addFileOpenDialog( title, modal, boost::python::ptr(parent), id );
    }

    virtual ::irr::gui::IGUIFont * addFont( ::irr::io::path const & name, ::irr::gui::IGUIFont * font ){
        bp::override func_addFont = this->get_override( "addFont" );
        return func_addFont( boost::ref(name), boost::python::ptr(font) );
    }

    virtual ::irr::gui::IGUIElement * addGUIElement( ::irr::c8 const * elementName, ::irr::gui::IGUIElement * parent=0 ){
        bp::override func_addGUIElement = this->get_override( "addGUIElement" );
        return func_addGUIElement( elementName, boost::python::ptr(parent) );
    }

    virtual ::irr::gui::IGUIImage * addImage( ::irr::video::ITexture * image, ::irr::core::vector2d< int > pos, bool useAlphaChannel=true, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001, wchar_t const * text=0 ){
        bp::override func_addImage = this->get_override( "addImage" );
        return func_addImage( boost::python::ptr(image), pos, useAlphaChannel, boost::python::ptr(parent), id, text );
    }

    virtual ::irr::gui::IGUIImage * addImage( ::irr::core::rect< int > const & rectangle, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001, wchar_t const * text=0 ){
        bp::override func_addImage = this->get_override( "addImage" );
        return func_addImage( boost::ref(rectangle), boost::python::ptr(parent), id, text );
    }

    virtual ::irr::gui::IGUIInOutFader * addInOutFader( ::irr::core::rect< int > const * rectangle=0, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addInOutFader = this->get_override( "addInOutFader" );
        return func_addInOutFader( boost::python::ptr(rectangle), boost::python::ptr(parent), id );
    }

    virtual ::irr::gui::IGUIListBox * addListBox( ::irr::core::rect< int > const & rectangle, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001, bool drawBackground=false ){
        bp::override func_addListBox = this->get_override( "addListBox" );
        return func_addListBox( boost::ref(rectangle), boost::python::ptr(parent), id, drawBackground );
    }

    virtual ::irr::gui::IGUIContextMenu * addMenu( ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addMenu = this->get_override( "addMenu" );
        return func_addMenu( boost::python::ptr(parent), id );
    }

    virtual ::irr::gui::IGUIMeshViewer * addMeshViewer( ::irr::core::rect< int > const & rectangle, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001, wchar_t const * text=0 ){
        bp::override func_addMeshViewer = this->get_override( "addMeshViewer" );
        return func_addMeshViewer( boost::ref(rectangle), boost::python::ptr(parent), id, text );
    }

    virtual ::irr::gui::IGUIWindow * addMessageBox( wchar_t const * caption, wchar_t const * text=0, bool modal=true, ::irr::s32 flags=::irr::s32(::irr::gui::EMBF_OK), ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001, ::irr::video::ITexture * image=0 ){
        bp::override func_addMessageBox = this->get_override( "addMessageBox" );
        return func_addMessageBox( caption, text, modal, flags, boost::python::ptr(parent), id, boost::python::ptr(image) );
    }

    virtual ::irr::gui::IGUIElement * addModalScreen( ::irr::gui::IGUIElement * parent ){
        bp::override func_addModalScreen = this->get_override( "addModalScreen" );
        return func_addModalScreen( boost::python::ptr(parent) );
    }

    virtual ::irr::gui::IGUIScrollBar * addScrollBar( bool horizontal, ::irr::core::rect< int > const & rectangle, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addScrollBar = this->get_override( "addScrollBar" );
        return func_addScrollBar( horizontal, boost::ref(rectangle), boost::python::ptr(parent), id );
    }

    virtual ::irr::gui::IGUISpinBox * addSpinBox( wchar_t const * text, ::irr::core::rect< int > const & rectangle, bool border=true, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addSpinBox = this->get_override( "addSpinBox" );
        return func_addSpinBox( text, boost::ref(rectangle), border, boost::python::ptr(parent), id );
    }

    virtual ::irr::gui::IGUIStaticText * addStaticText( wchar_t const * text, ::irr::core::rect< int > const & rectangle, bool border=false, bool wordWrap=true, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001, bool fillBackground=false ){
        bp::override func_addStaticText = this->get_override( "addStaticText" );
        return func_addStaticText( text, boost::ref(rectangle), border, wordWrap, boost::python::ptr(parent), id, fillBackground );
    }

    virtual ::irr::gui::IGUITab * addTab( ::irr::core::rect< int > const & rectangle, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addTab = this->get_override( "addTab" );
        return func_addTab( boost::ref(rectangle), boost::python::ptr(parent), id );
    }

    virtual ::irr::gui::IGUITabControl * addTabControl( ::irr::core::rect< int > const & rectangle, ::irr::gui::IGUIElement * parent=0, bool fillbackground=false, bool border=true, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addTabControl = this->get_override( "addTabControl" );
        return func_addTabControl( boost::ref(rectangle), boost::python::ptr(parent), fillbackground, border, id );
    }

    virtual ::irr::gui::IGUITable * addTable( ::irr::core::rect< int > const & rectangle, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001, bool drawBackground=false ){
        bp::override func_addTable = this->get_override( "addTable" );
        return func_addTable( boost::ref(rectangle), boost::python::ptr(parent), id, drawBackground );
    }

    virtual ::irr::gui::IGUIToolBar * addToolBar( ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addToolBar = this->get_override( "addToolBar" );
        return func_addToolBar( boost::python::ptr(parent), id );
    }

    virtual ::irr::gui::IGUITreeView * addTreeView( ::irr::core::rect< int > const & rectangle, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001, bool drawBackground=false, bool scrollBarVertical=true, bool scrollBarHorizontal=false ){
        bp::override func_addTreeView = this->get_override( "addTreeView" );
        return func_addTreeView( boost::ref(rectangle), boost::python::ptr(parent), id, drawBackground, scrollBarVertical, scrollBarHorizontal );
    }

    virtual ::irr::gui::IGUIWindow * addWindow( ::irr::core::rect< int > const & rectangle, bool modal=false, wchar_t const * text=0, ::irr::gui::IGUIElement * parent=0, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addWindow = this->get_override( "addWindow" );
        return func_addWindow( boost::ref(rectangle), modal, text, boost::python::ptr(parent), id );
    }

    virtual void clear(  ){
        bp::override func_clear = this->get_override( "clear" );
        func_clear(  );
    }

    virtual ::irr::gui::IGUIImageList * createImageList( ::irr::video::ITexture * texture, ::irr::core::dimension2d< int > imageSize, bool useAlphaChannel ){
        bp::override func_createImageList = this->get_override( "createImageList" );
        return func_createImageList( boost::python::ptr(texture), imageSize, useAlphaChannel );
    }

    virtual ::irr::gui::IGUISkin * createSkin( ::irr::gui::EGUI_SKIN_TYPE type ){
        bp::override func_createSkin = this->get_override( "createSkin" );
        return func_createSkin( type );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ){
        bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" );
        func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void drawAll(  ){
        bp::override func_drawAll = this->get_override( "drawAll" );
        func_drawAll(  );
    }

    virtual ::irr::gui::IGUIFont * getBuiltInFont(  ) const {
        bp::override func_getBuiltInFont = this->get_override( "getBuiltInFont" );
        return func_getBuiltInFont(  );
    }

    virtual ::irr::gui::IGUIElementFactory * getDefaultGUIElementFactory(  ) const {
        bp::override func_getDefaultGUIElementFactory = this->get_override( "getDefaultGUIElementFactory" );
        return func_getDefaultGUIElementFactory(  );
    }

    virtual ::irr::io::IFileSystem * getFileSystem(  ) const {
        bp::override func_getFileSystem = this->get_override( "getFileSystem" );
        return func_getFileSystem(  );
    }

    virtual ::irr::gui::IGUIElement * getFocus(  ) const {
        bp::override func_getFocus = this->get_override( "getFocus" );
        return func_getFocus(  );
    }

    virtual ::irr::gui::IGUIFont * getFont( ::irr::io::path const & filename ){
        bp::override func_getFont = this->get_override( "getFont" );
        return func_getFont( boost::ref(filename) );
    }

    virtual ::irr::gui::IGUIElementFactory * getGUIElementFactory( ::irr::u32 index ) const {
        bp::override func_getGUIElementFactory = this->get_override( "getGUIElementFactory" );
        return func_getGUIElementFactory( index );
    }

    virtual ::irr::IOSOperator * getOSOperator(  ) const {
        bp::override func_getOSOperator = this->get_override( "getOSOperator" );
        return func_getOSOperator(  );
    }

    virtual ::irr::u32 getRegisteredGUIElementFactoryCount(  ) const {
        bp::override func_getRegisteredGUIElementFactoryCount = this->get_override( "getRegisteredGUIElementFactoryCount" );
        return func_getRegisteredGUIElementFactoryCount(  );
    }

    virtual ::irr::gui::IGUIElement * getRootGUIElement(  ){
        bp::override func_getRootGUIElement = this->get_override( "getRootGUIElement" );
        return func_getRootGUIElement(  );
    }

    virtual ::irr::gui::IGUISkin * getSkin(  ) const {
        bp::override func_getSkin = this->get_override( "getSkin" );
        return func_getSkin(  );
    }

    virtual ::irr::gui::IGUISpriteBank * getSpriteBank( ::irr::io::path const & filename ){
        bp::override func_getSpriteBank = this->get_override( "getSpriteBank" );
        return func_getSpriteBank( boost::ref(filename) );
    }

    virtual ::irr::video::IVideoDriver * getVideoDriver(  ) const {
        bp::override func_getVideoDriver = this->get_override( "getVideoDriver" );
        return func_getVideoDriver(  );
    }

    virtual bool hasFocus( ::irr::gui::IGUIElement * element ) const {
        bp::override func_hasFocus = this->get_override( "hasFocus" );
        return func_hasFocus( boost::python::ptr(element) );
    }

    virtual bool loadGUI( ::irr::io::path const & filename, ::irr::gui::IGUIElement * parent=0 ){
        bp::override func_loadGUI = this->get_override( "loadGUI" );
        return func_loadGUI( boost::ref(filename), boost::python::ptr(parent) );
    }

    virtual bool loadGUI( ::irr::io::IReadFile * file, ::irr::gui::IGUIElement * parent=0 ){
        bp::override func_loadGUI = this->get_override( "loadGUI" );
        return func_loadGUI( boost::python::ptr(file), boost::python::ptr(parent) );
    }

    virtual bool postEventFromUser( ::irr::SEvent const & event ){
        bp::override func_postEventFromUser = this->get_override( "postEventFromUser" );
        return func_postEventFromUser( boost::ref(event) );
    }

    virtual void readGUIElement( ::irr::io::IXMLReader * reader, ::irr::gui::IGUIElement * node ){
        bp::override func_readGUIElement = this->get_override( "readGUIElement" );
        func_readGUIElement( boost::python::ptr(reader), boost::python::ptr(node) );
    }

    virtual void registerGUIElementFactory( ::irr::gui::IGUIElementFactory * factoryToAdd ){
        bp::override func_registerGUIElementFactory = this->get_override( "registerGUIElementFactory" );
        func_registerGUIElementFactory( boost::python::ptr(factoryToAdd) );
    }

    virtual bool removeFocus( ::irr::gui::IGUIElement * element ){
        bp::override func_removeFocus = this->get_override( "removeFocus" );
        return func_removeFocus( boost::python::ptr(element) );
    }

    virtual bool saveGUI( ::irr::io::path const & filename, ::irr::gui::IGUIElement * start=0 ){
        bp::override func_saveGUI = this->get_override( "saveGUI" );
        return func_saveGUI( boost::ref(filename), boost::python::ptr(start) );
    }

    virtual bool saveGUI( ::irr::io::IWriteFile * file, ::irr::gui::IGUIElement * start=0 ){
        bp::override func_saveGUI = this->get_override( "saveGUI" );
        return func_saveGUI( boost::python::ptr(file), boost::python::ptr(start) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const {
        bp::override func_serializeAttributes = this->get_override( "serializeAttributes" );
        func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual bool setFocus( ::irr::gui::IGUIElement * element ){
        bp::override func_setFocus = this->get_override( "setFocus" );
        return func_setFocus( boost::python::ptr(element) );
    }

    virtual void setSkin( ::irr::gui::IGUISkin * skin ){
        bp::override func_setSkin = this->get_override( "setSkin" );
        func_setSkin( boost::python::ptr(skin) );
    }

    virtual void setUserEventReceiver( ::irr::IEventReceiver * evr ){
        bp::override func_setUserEventReceiver = this->get_override( "setUserEventReceiver" );
        func_setUserEventReceiver( boost::python::ptr(evr) );
    }

    virtual void writeGUIElement( ::irr::io::IXMLWriter * writer, ::irr::gui::IGUIElement * node ){
        bp::override func_writeGUIElement = this->get_override( "writeGUIElement" );
        func_writeGUIElement( boost::python::ptr(writer), boost::python::ptr(node) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IGUIFileOpenDialog_wrapper : irr::gui::IGUIFileOpenDialog, bp::wrapper< irr::gui::IGUIFileOpenDialog > {

    IGUIFileOpenDialog_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIFileOpenDialog( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIFileOpenDialog >(){
        // constructor
    
    }

    virtual ::irr::io::path const & getDirectoryName(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual wchar_t const * getFileName(  ) const {
        bp::override func_getFileName = this->get_override( "getFileName" );
        return func_getFileName(  );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUIFontBitmap_wrapper : irr::gui::IGUIFontBitmap, bp::wrapper< irr::gui::IGUIFontBitmap > {

    IGUIFontBitmap_wrapper()
    : irr::gui::IGUIFontBitmap()
      , bp::wrapper< irr::gui::IGUIFontBitmap >(){
        // null constructor
        
    }

    virtual ::irr::s32 getKerningWidth( wchar_t const * thisLetter=0, wchar_t const * previousLetter=0 ) const {
        bp::override func_getKerningWidth = this->get_override( "getKerningWidth" );
        return func_getKerningWidth( thisLetter, previousLetter );
    }

    virtual ::irr::gui::IGUISpriteBank * getSpriteBank(  ) const {
        bp::override func_getSpriteBank = this->get_override( "getSpriteBank" );
        return func_getSpriteBank(  );
    }

    virtual ::irr::u32 getSpriteNoFromChar( wchar_t const * c ) const {
        bp::override func_getSpriteNoFromChar = this->get_override( "getSpriteNoFromChar" );
        return func_getSpriteNoFromChar( c );
    }

    virtual ::irr::gui::EGUI_FONT_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::gui::IGUIFontBitmap::getType(  );
        }
    }
    
    ::irr::gui::EGUI_FONT_TYPE default_getType(  ) const  {
        return irr::gui::IGUIFontBitmap::getType( );
    }

    virtual void draw( ::irr::core::stringw const & text, ::irr::core::rect< int > const & position, ::irr::video::SColor color, bool hcenter=false, bool vcenter=false, ::irr::core::rect< int > const * clip=0 ){
        bp::override func_draw = this->get_override( "draw" );
        func_draw( boost::ref(text), boost::ref(position), color, hcenter, vcenter, boost::python::ptr(clip) );
    }

    virtual ::irr::s32 getCharacterFromPos( wchar_t const * text, ::irr::s32 pixel_x ) const {
        bp::override func_getCharacterFromPos = this->get_override( "getCharacterFromPos" );
        return func_getCharacterFromPos( text, pixel_x );
    }

    virtual ::irr::core::dimension2d< unsigned int > getDimension( wchar_t const * text ) const {
        bp::override func_getDimension = this->get_override( "getDimension" );
        return func_getDimension( text );
    }

    virtual ::irr::s32 getKerningHeight(  ) const {
        bp::override func_getKerningHeight = this->get_override( "getKerningHeight" );
        return func_getKerningHeight(  );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setInvisibleCharacters( wchar_t const * s ){
        bp::override func_setInvisibleCharacters = this->get_override( "setInvisibleCharacters" );
        func_setInvisibleCharacters( s );
    }

    virtual void setKerningHeight( ::irr::s32 kerning ){
        bp::override func_setKerningHeight = this->get_override( "setKerningHeight" );
        func_setKerningHeight( kerning );
    }

    virtual void setKerningWidth( ::irr::s32 kerning ){
        bp::override func_setKerningWidth = this->get_override( "setKerningWidth" );
        func_setKerningWidth( kerning );
    }

};

struct IGUIImage_wrapper : irr::gui::IGUIImage, bp::wrapper< irr::gui::IGUIImage > {

    IGUIImage_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIImage( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIImage >(){
        // constructor
    
    }

    virtual bool isAlphaChannelUsed(  ) const {
        bp::override func_isAlphaChannelUsed = this->get_override( "isAlphaChannelUsed" );
        return func_isAlphaChannelUsed(  );
    }

    virtual bool isImageScaled(  ) const {
        bp::override func_isImageScaled = this->get_override( "isImageScaled" );
        return func_isImageScaled(  );
    }

    virtual void setColor( ::irr::video::SColor color ){
        bp::override func_setColor = this->get_override( "setColor" );
        func_setColor( color );
    }

    virtual void setImage( ::irr::video::ITexture * image ){
        bp::override func_setImage = this->get_override( "setImage" );
        func_setImage( boost::python::ptr(image) );
    }

    virtual void setScaleImage( bool scale ){
        bp::override func_setScaleImage = this->get_override( "setScaleImage" );
        func_setScaleImage( scale );
    }

    virtual void setUseAlphaChannel( bool use ){
        bp::override func_setUseAlphaChannel = this->get_override( "setUseAlphaChannel" );
        func_setUseAlphaChannel( use );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUIImageList_wrapper : irr::gui::IGUIImageList, bp::wrapper< irr::gui::IGUIImageList > {

    IGUIImageList_wrapper()
    : irr::gui::IGUIImageList()
      , bp::wrapper< irr::gui::IGUIImageList >(){
        // null constructor
        
    }

    virtual void draw( ::irr::s32 index, ::irr::core::vector2d< int > const & destPos, ::irr::core::rect< int > const * clip=0 ){
        bp::override func_draw = this->get_override( "draw" );
        func_draw( index, boost::ref(destPos), boost::python::ptr(clip) );
    }

    virtual ::irr::s32 getImageCount(  ) const {
        bp::override func_getImageCount = this->get_override( "getImageCount" );
        return func_getImageCount(  );
    }

    virtual ::irr::core::dimension2d< int > getImageSize(  ) const {
        bp::override func_getImageSize = this->get_override( "getImageSize" );
        return func_getImageSize(  );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IGUIInOutFader_wrapper : irr::gui::IGUIInOutFader, bp::wrapper< irr::gui::IGUIInOutFader > {

    IGUIInOutFader_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIInOutFader( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIInOutFader >(){
        // constructor
    
    }

    virtual void fadeIn( ::irr::u32 time ){
        bp::override func_fadeIn = this->get_override( "fadeIn" );
        func_fadeIn( time );
    }

    virtual void fadeOut( ::irr::u32 time ){
        bp::override func_fadeOut = this->get_override( "fadeOut" );
        func_fadeOut( time );
    }

    virtual ::irr::video::SColor getColor(  ) const {
        bp::override func_getColor = this->get_override( "getColor" );
        return func_getColor(  );
    }

    virtual bool isReady(  ) const {
        bp::override func_isReady = this->get_override( "isReady" );
        return func_isReady(  );
    }

    virtual void setColor( ::irr::video::SColor color ){
        bp::override func_setColor = this->get_override( "setColor" );
        func_setColor( color );
    }

    virtual void setColor( ::irr::video::SColor source, ::irr::video::SColor dest ){
        bp::override func_setColor = this->get_override( "setColor" );
        func_setColor( source, dest );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUIListBox_wrapper : irr::gui::IGUIListBox, bp::wrapper< irr::gui::IGUIListBox > {

    IGUIListBox_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIListBox( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIListBox >(){
        // constructor
    
    }

    virtual ::irr::u32 addItem( wchar_t const * text ){
        bp::override func_addItem = this->get_override( "addItem" );
        return func_addItem( text );
    }

    virtual ::irr::u32 addItem( wchar_t const * text, ::irr::s32 icon ){
        bp::override func_addItem = this->get_override( "addItem" );
        return func_addItem( text, icon );
    }

    virtual void clear(  ){
        bp::override func_clear = this->get_override( "clear" );
        func_clear(  );
    }

    virtual void clearItemOverrideColor( ::irr::u32 index ){
        bp::override func_clearItemOverrideColor = this->get_override( "clearItemOverrideColor" );
        func_clearItemOverrideColor( index );
    }

    virtual void clearItemOverrideColor( ::irr::u32 index, ::irr::gui::EGUI_LISTBOX_COLOR colorType ){
        bp::override func_clearItemOverrideColor = this->get_override( "clearItemOverrideColor" );
        func_clearItemOverrideColor( index, colorType );
    }

    virtual ::irr::s32 getIcon( ::irr::u32 index ) const {
        bp::override func_getIcon = this->get_override( "getIcon" );
        return func_getIcon( index );
    }

    virtual ::irr::u32 getItemCount(  ) const {
        bp::override func_getItemCount = this->get_override( "getItemCount" );
        return func_getItemCount(  );
    }

    virtual ::irr::video::SColor getItemDefaultColor( ::irr::gui::EGUI_LISTBOX_COLOR colorType ) const {
        bp::override func_getItemDefaultColor = this->get_override( "getItemDefaultColor" );
        return func_getItemDefaultColor( colorType );
    }

    virtual ::irr::video::SColor getItemOverrideColor( ::irr::u32 index, ::irr::gui::EGUI_LISTBOX_COLOR colorType ) const {
        bp::override func_getItemOverrideColor = this->get_override( "getItemOverrideColor" );
        return func_getItemOverrideColor( index, colorType );
    }

    virtual wchar_t const * getListItem( ::irr::u32 id ) const {
        bp::override func_getListItem = this->get_override( "getListItem" );
        return func_getListItem( id );
    }

    virtual ::irr::s32 getSelected(  ) const {
        bp::override func_getSelected = this->get_override( "getSelected" );
        return func_getSelected(  );
    }

    virtual bool hasItemOverrideColor( ::irr::u32 index, ::irr::gui::EGUI_LISTBOX_COLOR colorType ) const {
        bp::override func_hasItemOverrideColor = this->get_override( "hasItemOverrideColor" );
        return func_hasItemOverrideColor( index, colorType );
    }

    virtual ::irr::s32 insertItem( ::irr::u32 index, wchar_t const * text, ::irr::s32 icon ){
        bp::override func_insertItem = this->get_override( "insertItem" );
        return func_insertItem( index, text, icon );
    }

    virtual bool isAutoScrollEnabled(  ) const {
        bp::override func_isAutoScrollEnabled = this->get_override( "isAutoScrollEnabled" );
        return func_isAutoScrollEnabled(  );
    }

    virtual void removeItem( ::irr::u32 index ){
        bp::override func_removeItem = this->get_override( "removeItem" );
        func_removeItem( index );
    }

    virtual void setAutoScrollEnabled( bool scroll ){
        bp::override func_setAutoScrollEnabled = this->get_override( "setAutoScrollEnabled" );
        func_setAutoScrollEnabled( scroll );
    }

    virtual void setDrawBackground( bool draw ){
        bp::override func_setDrawBackground = this->get_override( "setDrawBackground" );
        func_setDrawBackground( draw );
    }

    virtual void setItem( ::irr::u32 index, wchar_t const * text, ::irr::s32 icon ){
        bp::override func_setItem = this->get_override( "setItem" );
        func_setItem( index, text, icon );
    }

    virtual void setItemHeight( ::irr::s32 height ){
        bp::override func_setItemHeight = this->get_override( "setItemHeight" );
        func_setItemHeight( height );
    }

    virtual void setItemOverrideColor( ::irr::u32 index, ::irr::video::SColor const & color ){
        bp::override func_setItemOverrideColor = this->get_override( "setItemOverrideColor" );
        func_setItemOverrideColor( index, boost::ref(color) );
    }

    virtual void setItemOverrideColor( ::irr::u32 index, ::irr::gui::EGUI_LISTBOX_COLOR colorType, ::irr::video::SColor const & color ){
        bp::override func_setItemOverrideColor = this->get_override( "setItemOverrideColor" );
        func_setItemOverrideColor( index, colorType, boost::ref(color) );
    }

    virtual void setSelected( ::irr::s32 index ){
        bp::override func_setSelected = this->get_override( "setSelected" );
        func_setSelected( index );
    }

    virtual void setSelected( wchar_t const * item ){
        bp::override func_setSelected = this->get_override( "setSelected" );
        func_setSelected( item );
    }

    virtual void setSpriteBank( ::irr::gui::IGUISpriteBank * bank ){
        bp::override func_setSpriteBank = this->get_override( "setSpriteBank" );
        func_setSpriteBank( boost::python::ptr(bank) );
    }

    virtual void swapItems( ::irr::u32 index1, ::irr::u32 index2 ){
        bp::override func_swapItems = this->get_override( "swapItems" );
        func_swapItems( index1, index2 );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUIMeshViewer_wrapper : irr::gui::IGUIMeshViewer, bp::wrapper< irr::gui::IGUIMeshViewer > {

    IGUIMeshViewer_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIMeshViewer( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIMeshViewer >(){
        // constructor
    
    }

    virtual ::irr::video::SMaterial const & getMaterial(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::scene::IAnimatedMesh * getMesh(  ) const {
        bp::override func_getMesh = this->get_override( "getMesh" );
        return func_getMesh(  );
    }

    virtual void setMaterial( ::irr::video::SMaterial const & material ){
        bp::override func_setMaterial = this->get_override( "setMaterial" );
        func_setMaterial( boost::ref(material) );
    }

    virtual void setMesh( ::irr::scene::IAnimatedMesh * mesh ){
        bp::override func_setMesh = this->get_override( "setMesh" );
        func_setMesh( boost::python::ptr(mesh) );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUIScrollBar_wrapper : irr::gui::IGUIScrollBar, bp::wrapper< irr::gui::IGUIScrollBar > {

    IGUIScrollBar_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIScrollBar( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIScrollBar >(){
        // constructor
    
    }

    virtual ::irr::s32 getLargeStep(  ) const {
        bp::override func_getLargeStep = this->get_override( "getLargeStep" );
        return func_getLargeStep(  );
    }

    virtual ::irr::s32 getMax(  ) const {
        bp::override func_getMax = this->get_override( "getMax" );
        return func_getMax(  );
    }

    virtual ::irr::s32 getMin(  ) const {
        bp::override func_getMin = this->get_override( "getMin" );
        return func_getMin(  );
    }

    virtual ::irr::s32 getPos(  ) const {
        bp::override func_getPos = this->get_override( "getPos" );
        return func_getPos(  );
    }

    virtual ::irr::s32 getSmallStep(  ) const {
        bp::override func_getSmallStep = this->get_override( "getSmallStep" );
        return func_getSmallStep(  );
    }

    virtual void setLargeStep( ::irr::s32 step ){
        bp::override func_setLargeStep = this->get_override( "setLargeStep" );
        func_setLargeStep( step );
    }

    virtual void setMax( ::irr::s32 max ){
        bp::override func_setMax = this->get_override( "setMax" );
        func_setMax( max );
    }

    virtual void setMin( ::irr::s32 min ){
        bp::override func_setMin = this->get_override( "setMin" );
        func_setMin( min );
    }

    virtual void setPos( ::irr::s32 pos ){
        bp::override func_setPos = this->get_override( "setPos" );
        func_setPos( pos );
    }

    virtual void setSmallStep( ::irr::s32 step ){
        bp::override func_setSmallStep = this->get_override( "setSmallStep" );
        func_setSmallStep( step );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUISkin_wrapper : irr::gui::IGUISkin, bp::wrapper< irr::gui::IGUISkin > {

    IGUISkin_wrapper()
    : irr::gui::IGUISkin()
      , bp::wrapper< irr::gui::IGUISkin >(){
        // null constructor
        
    }

    virtual void draw2DRectangle( ::irr::gui::IGUIElement * element, ::irr::video::SColor const & color, ::irr::core::rect< int > const & pos, ::irr::core::rect< int > const * clip=0 ){
        bp::override func_draw2DRectangle = this->get_override( "draw2DRectangle" );
        func_draw2DRectangle( boost::python::ptr(element), boost::ref(color), boost::ref(pos), boost::python::ptr(clip) );
    }

    virtual void draw3DButtonPanePressed( ::irr::gui::IGUIElement * element, ::irr::core::rect< int > const & rect, ::irr::core::rect< int > const * clip=0 ){
        bp::override func_draw3DButtonPanePressed = this->get_override( "draw3DButtonPanePressed" );
        func_draw3DButtonPanePressed( boost::python::ptr(element), boost::ref(rect), boost::python::ptr(clip) );
    }

    virtual void draw3DButtonPaneStandard( ::irr::gui::IGUIElement * element, ::irr::core::rect< int > const & rect, ::irr::core::rect< int > const * clip=0 ){
        bp::override func_draw3DButtonPaneStandard = this->get_override( "draw3DButtonPaneStandard" );
        func_draw3DButtonPaneStandard( boost::python::ptr(element), boost::ref(rect), boost::python::ptr(clip) );
    }

    virtual void draw3DMenuPane( ::irr::gui::IGUIElement * element, ::irr::core::rect< int > const & rect, ::irr::core::rect< int > const * clip=0 ){
        bp::override func_draw3DMenuPane = this->get_override( "draw3DMenuPane" );
        func_draw3DMenuPane( boost::python::ptr(element), boost::ref(rect), boost::python::ptr(clip) );
    }

    virtual void draw3DSunkenPane( ::irr::gui::IGUIElement * element, ::irr::video::SColor bgcolor, bool flat, bool fillBackGround, ::irr::core::rect< int > const & rect, ::irr::core::rect< int > const * clip=0 ){
        bp::override func_draw3DSunkenPane = this->get_override( "draw3DSunkenPane" );
        func_draw3DSunkenPane( boost::python::ptr(element), bgcolor, flat, fillBackGround, boost::ref(rect), boost::python::ptr(clip) );
    }

    virtual void draw3DTabBody( ::irr::gui::IGUIElement * element, bool border, bool background, ::irr::core::rect< int > const & rect, ::irr::core::rect< int > const * clip=0, ::irr::s32 tabHeight=-0x00000000000000001, ::irr::gui::EGUI_ALIGNMENT alignment=::irr::gui::EGUIA_UPPERLEFT ){
        bp::override func_draw3DTabBody = this->get_override( "draw3DTabBody" );
        func_draw3DTabBody( boost::python::ptr(element), border, background, boost::ref(rect), boost::python::ptr(clip), tabHeight, alignment );
    }

    virtual void draw3DTabButton( ::irr::gui::IGUIElement * element, bool active, ::irr::core::rect< int > const & rect, ::irr::core::rect< int > const * clip=0, ::irr::gui::EGUI_ALIGNMENT alignment=::irr::gui::EGUIA_UPPERLEFT ){
        bp::override func_draw3DTabButton = this->get_override( "draw3DTabButton" );
        func_draw3DTabButton( boost::python::ptr(element), active, boost::ref(rect), boost::python::ptr(clip), alignment );
    }

    virtual void draw3DToolBar( ::irr::gui::IGUIElement * element, ::irr::core::rect< int > const & rect, ::irr::core::rect< int > const * clip=0 ){
        bp::override func_draw3DToolBar = this->get_override( "draw3DToolBar" );
        func_draw3DToolBar( boost::python::ptr(element), boost::ref(rect), boost::python::ptr(clip) );
    }

    virtual ::irr::core::rect< int > draw3DWindowBackground( ::irr::gui::IGUIElement * element, bool drawTitleBar, ::irr::video::SColor titleBarColor, ::irr::core::rect< int > const & rect, ::irr::core::rect< int > const * clip=0, ::irr::core::rect< int > * checkClientArea=0 ){
        bp::override func_draw3DWindowBackground = this->get_override( "draw3DWindowBackground" );
        return func_draw3DWindowBackground( boost::python::ptr(element), drawTitleBar, titleBarColor, boost::ref(rect), boost::python::ptr(clip), boost::python::ptr(checkClientArea) );
    }

    virtual void drawIcon( ::irr::gui::IGUIElement * element, ::irr::gui::EGUI_DEFAULT_ICON icon, ::irr::core::position2di const position, ::irr::u32 starttime=0, ::irr::u32 currenttime=0, bool loop=false, ::irr::core::rect< int > const * clip=0 ){
        bp::override func_drawIcon = this->get_override( "drawIcon" );
        func_drawIcon( boost::python::ptr(element), icon, position, starttime, currenttime, loop, boost::python::ptr(clip) );
    }

    virtual ::irr::video::SColor getColor( ::irr::gui::EGUI_DEFAULT_COLOR color ) const {
        bp::override func_getColor = this->get_override( "getColor" );
        return func_getColor( color );
    }

    virtual wchar_t const * getDefaultText( ::irr::gui::EGUI_DEFAULT_TEXT text ) const {
        bp::override func_getDefaultText = this->get_override( "getDefaultText" );
        return func_getDefaultText( text );
    }

    virtual ::irr::gui::IGUIFont * getFont( ::irr::gui::EGUI_DEFAULT_FONT which=::irr::gui::EGDF_DEFAULT ) const {
        bp::override func_getFont = this->get_override( "getFont" );
        return func_getFont( which );
    }

    virtual ::irr::u32 getIcon( ::irr::gui::EGUI_DEFAULT_ICON icon ) const {
        bp::override func_getIcon = this->get_override( "getIcon" );
        return func_getIcon( icon );
    }

    virtual ::irr::s32 getSize( ::irr::gui::EGUI_DEFAULT_SIZE size ) const {
        bp::override func_getSize = this->get_override( "getSize" );
        return func_getSize( size );
    }

    virtual ::irr::gui::IGUISpriteBank * getSpriteBank(  ) const {
        bp::override func_getSpriteBank = this->get_override( "getSpriteBank" );
        return func_getSpriteBank(  );
    }

    virtual ::irr::gui::EGUI_SKIN_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::gui::IGUISkin::getType(  );
        }
    }
    
    ::irr::gui::EGUI_SKIN_TYPE default_getType(  ) const  {
        return irr::gui::IGUISkin::getType( );
    }

    virtual void setColor( ::irr::gui::EGUI_DEFAULT_COLOR which, ::irr::video::SColor newColor ){
        bp::override func_setColor = this->get_override( "setColor" );
        func_setColor( which, newColor );
    }

    virtual void setDefaultText( ::irr::gui::EGUI_DEFAULT_TEXT which, wchar_t const * newText ){
        bp::override func_setDefaultText = this->get_override( "setDefaultText" );
        func_setDefaultText( which, newText );
    }

    virtual void setFont( ::irr::gui::IGUIFont * font, ::irr::gui::EGUI_DEFAULT_FONT which=::irr::gui::EGDF_DEFAULT ){
        bp::override func_setFont = this->get_override( "setFont" );
        func_setFont( boost::python::ptr(font), which );
    }

    virtual void setIcon( ::irr::gui::EGUI_DEFAULT_ICON icon, ::irr::u32 index ){
        bp::override func_setIcon = this->get_override( "setIcon" );
        func_setIcon( icon, index );
    }

    virtual void setSize( ::irr::gui::EGUI_DEFAULT_SIZE which, ::irr::s32 size ){
        bp::override func_setSize = this->get_override( "setSize" );
        func_setSize( which, size );
    }

    virtual void setSpriteBank( ::irr::gui::IGUISpriteBank * bank ){
        bp::override func_setSpriteBank = this->get_override( "setSpriteBank" );
        func_setSpriteBank( boost::python::ptr(bank) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IGUISpinBox_wrapper : irr::gui::IGUISpinBox, bp::wrapper< irr::gui::IGUISpinBox > {

    IGUISpinBox_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUISpinBox( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUISpinBox >(){
        // constructor
    
    }

    virtual ::irr::gui::IGUIEditBox * getEditBox(  ) const {
        bp::override func_getEditBox = this->get_override( "getEditBox" );
        return func_getEditBox(  );
    }

    virtual ::irr::f32 getMax(  ) const {
        bp::override func_getMax = this->get_override( "getMax" );
        return func_getMax(  );
    }

    virtual ::irr::f32 getMin(  ) const {
        bp::override func_getMin = this->get_override( "getMin" );
        return func_getMin(  );
    }

    virtual ::irr::f32 getStepSize(  ) const {
        bp::override func_getStepSize = this->get_override( "getStepSize" );
        return func_getStepSize(  );
    }

    virtual ::irr::f32 getValue(  ) const {
        bp::override func_getValue = this->get_override( "getValue" );
        return func_getValue(  );
    }

    virtual void setDecimalPlaces( ::irr::s32 places ){
        bp::override func_setDecimalPlaces = this->get_override( "setDecimalPlaces" );
        func_setDecimalPlaces( places );
    }

    virtual void setRange( ::irr::f32 min, ::irr::f32 max ){
        bp::override func_setRange = this->get_override( "setRange" );
        func_setRange( min, max );
    }

    virtual void setStepSize( ::irr::f32 step=1.0e+0f ){
        bp::override func_setStepSize = this->get_override( "setStepSize" );
        func_setStepSize( step );
    }

    virtual void setValue( ::irr::f32 val ){
        bp::override func_setValue = this->get_override( "setValue" );
        func_setValue( val );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUIStaticText_wrapper : irr::gui::IGUIStaticText, bp::wrapper< irr::gui::IGUIStaticText > {

    IGUIStaticText_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIStaticText( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIStaticText >(){
        // constructor
    
    }

    virtual void enableOverrideColor( bool enable ){
        bp::override func_enableOverrideColor = this->get_override( "enableOverrideColor" );
        func_enableOverrideColor( enable );
    }

    virtual ::irr::video::SColor const & getOverrideColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::gui::IGUIFont * getOverrideFont(  ) const {
        bp::override func_getOverrideFont = this->get_override( "getOverrideFont" );
        return func_getOverrideFont(  );
    }

    virtual ::irr::s32 getTextHeight(  ) const {
        bp::override func_getTextHeight = this->get_override( "getTextHeight" );
        return func_getTextHeight(  );
    }

    virtual ::irr::s32 getTextWidth(  ) const {
        bp::override func_getTextWidth = this->get_override( "getTextWidth" );
        return func_getTextWidth(  );
    }

    virtual bool isOverrideColorEnabled(  ) const {
        bp::override func_isOverrideColorEnabled = this->get_override( "isOverrideColorEnabled" );
        return func_isOverrideColorEnabled(  );
    }

    virtual bool isWordWrapEnabled(  ) const {
        bp::override func_isWordWrapEnabled = this->get_override( "isWordWrapEnabled" );
        return func_isWordWrapEnabled(  );
    }

    virtual void setBackgroundColor( ::irr::video::SColor color ){
        bp::override func_setBackgroundColor = this->get_override( "setBackgroundColor" );
        func_setBackgroundColor( color );
    }

    virtual void setDrawBackground( bool draw ){
        bp::override func_setDrawBackground = this->get_override( "setDrawBackground" );
        func_setDrawBackground( draw );
    }

    virtual void setDrawBorder( bool draw ){
        bp::override func_setDrawBorder = this->get_override( "setDrawBorder" );
        func_setDrawBorder( draw );
    }

    virtual void setOverrideColor( ::irr::video::SColor color ){
        bp::override func_setOverrideColor = this->get_override( "setOverrideColor" );
        func_setOverrideColor( color );
    }

    virtual void setOverrideFont( ::irr::gui::IGUIFont * font=0 ){
        bp::override func_setOverrideFont = this->get_override( "setOverrideFont" );
        func_setOverrideFont( boost::python::ptr(font) );
    }

    virtual void setTextAlignment( ::irr::gui::EGUI_ALIGNMENT horizontal, ::irr::gui::EGUI_ALIGNMENT vertical ){
        bp::override func_setTextAlignment = this->get_override( "setTextAlignment" );
        func_setTextAlignment( horizontal, vertical );
    }

    virtual void setWordWrap( bool enable ){
        bp::override func_setWordWrap = this->get_override( "setWordWrap" );
        func_setWordWrap( enable );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUITab_wrapper : irr::gui::IGUITab, bp::wrapper< irr::gui::IGUITab > {

    IGUITab_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUITab( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUITab >(){
        // constructor
    
    }

    virtual ::irr::video::SColor getBackgroundColor(  ) const {
        bp::override func_getBackgroundColor = this->get_override( "getBackgroundColor" );
        return func_getBackgroundColor(  );
    }

    virtual ::irr::s32 getNumber(  ) const {
        bp::override func_getNumber = this->get_override( "getNumber" );
        return func_getNumber(  );
    }

    virtual ::irr::video::SColor getTextColor(  ) const {
        bp::override func_getTextColor = this->get_override( "getTextColor" );
        return func_getTextColor(  );
    }

    virtual bool isDrawingBackground(  ) const {
        bp::override func_isDrawingBackground = this->get_override( "isDrawingBackground" );
        return func_isDrawingBackground(  );
    }

    virtual void setBackgroundColor( ::irr::video::SColor c ){
        bp::override func_setBackgroundColor = this->get_override( "setBackgroundColor" );
        func_setBackgroundColor( c );
    }

    virtual void setDrawBackground( bool draw=true ){
        bp::override func_setDrawBackground = this->get_override( "setDrawBackground" );
        func_setDrawBackground( draw );
    }

    virtual void setTextColor( ::irr::video::SColor c ){
        bp::override func_setTextColor = this->get_override( "setTextColor" );
        func_setTextColor( c );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUITabControl_wrapper : irr::gui::IGUITabControl, bp::wrapper< irr::gui::IGUITabControl > {

    IGUITabControl_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUITabControl( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUITabControl >(){
        // constructor
    
    }

    virtual ::irr::gui::IGUITab * addTab( wchar_t const * caption, ::irr::s32 id=-0x00000000000000001 ){
        bp::override func_addTab = this->get_override( "addTab" );
        return func_addTab( caption, id );
    }

    virtual ::irr::s32 getActiveTab(  ) const {
        bp::override func_getActiveTab = this->get_override( "getActiveTab" );
        return func_getActiveTab(  );
    }

    virtual ::irr::gui::IGUITab * getTab( ::irr::s32 idx ) const {
        bp::override func_getTab = this->get_override( "getTab" );
        return func_getTab( idx );
    }

    virtual ::irr::s32 getTabCount(  ) const {
        bp::override func_getTabCount = this->get_override( "getTabCount" );
        return func_getTabCount(  );
    }

    virtual ::irr::s32 getTabExtraWidth(  ) const {
        bp::override func_getTabExtraWidth = this->get_override( "getTabExtraWidth" );
        return func_getTabExtraWidth(  );
    }

    virtual ::irr::s32 getTabHeight(  ) const {
        bp::override func_getTabHeight = this->get_override( "getTabHeight" );
        return func_getTabHeight(  );
    }

    virtual ::irr::s32 getTabMaxWidth(  ) const {
        bp::override func_getTabMaxWidth = this->get_override( "getTabMaxWidth" );
        return func_getTabMaxWidth(  );
    }

    virtual ::irr::gui::EGUI_ALIGNMENT getTabVerticalAlignment(  ) const {
        bp::override func_getTabVerticalAlignment = this->get_override( "getTabVerticalAlignment" );
        return func_getTabVerticalAlignment(  );
    }

    virtual bool setActiveTab( ::irr::s32 idx ){
        bp::override func_setActiveTab = this->get_override( "setActiveTab" );
        return func_setActiveTab( idx );
    }

    virtual bool setActiveTab( ::irr::gui::IGUIElement * tab ){
        bp::override func_setActiveTab = this->get_override( "setActiveTab" );
        return func_setActiveTab( boost::python::ptr(tab) );
    }

    virtual void setTabExtraWidth( ::irr::s32 extraWidth ){
        bp::override func_setTabExtraWidth = this->get_override( "setTabExtraWidth" );
        func_setTabExtraWidth( extraWidth );
    }

    virtual void setTabHeight( ::irr::s32 height ){
        bp::override func_setTabHeight = this->get_override( "setTabHeight" );
        func_setTabHeight( height );
    }

    virtual void setTabMaxWidth( ::irr::s32 width ){
        bp::override func_setTabMaxWidth = this->get_override( "setTabMaxWidth" );
        func_setTabMaxWidth( width );
    }

    virtual void setTabVerticalAlignment( ::irr::gui::EGUI_ALIGNMENT alignment ){
        bp::override func_setTabVerticalAlignment = this->get_override( "setTabVerticalAlignment" );
        func_setTabVerticalAlignment( alignment );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUITable_wrapper : irr::gui::IGUITable, bp::wrapper< irr::gui::IGUITable > {

    IGUITable_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUITable( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUITable >(){
        // constructor
    
    }

    virtual void addColumn( wchar_t const * caption, ::irr::s32 columnIndex=-0x00000000000000001 ){
        bp::override func_addColumn = this->get_override( "addColumn" );
        func_addColumn( caption, columnIndex );
    }

    virtual ::irr::u32 addRow( ::irr::u32 rowIndex ){
        bp::override func_addRow = this->get_override( "addRow" );
        return func_addRow( rowIndex );
    }

    virtual void clear(  ){
        bp::override func_clear = this->get_override( "clear" );
        func_clear(  );
    }

    virtual void clearRows(  ){
        bp::override func_clearRows = this->get_override( "clearRows" );
        func_clearRows(  );
    }

    virtual ::irr::s32 getActiveColumn(  ) const {
        bp::override func_getActiveColumn = this->get_override( "getActiveColumn" );
        return func_getActiveColumn(  );
    }

    virtual ::irr::gui::EGUI_ORDERING_MODE getActiveColumnOrdering(  ) const {
        bp::override func_getActiveColumnOrdering = this->get_override( "getActiveColumnOrdering" );
        return func_getActiveColumnOrdering(  );
    }

    virtual void * getCellData( ::irr::u32 rowIndex, ::irr::u32 columnIndex ) const {
        bp::override func_getCellData = this->get_override( "getCellData" );
        return func_getCellData( rowIndex, columnIndex );
    }

    virtual wchar_t const * getCellText( ::irr::u32 rowIndex, ::irr::u32 columnIndex ) const {
        bp::override func_getCellText = this->get_override( "getCellText" );
        return func_getCellText( rowIndex, columnIndex );
    }

    virtual ::irr::s32 getColumnCount(  ) const {
        bp::override func_getColumnCount = this->get_override( "getColumnCount" );
        return func_getColumnCount(  );
    }

    virtual ::irr::s32 getDrawFlags(  ) const {
        bp::override func_getDrawFlags = this->get_override( "getDrawFlags" );
        return func_getDrawFlags(  );
    }

    virtual ::irr::s32 getRowCount(  ) const {
        bp::override func_getRowCount = this->get_override( "getRowCount" );
        return func_getRowCount(  );
    }

    virtual ::irr::s32 getSelected(  ) const {
        bp::override func_getSelected = this->get_override( "getSelected" );
        return func_getSelected(  );
    }

    virtual bool hasResizableColumns(  ) const {
        bp::override func_hasResizableColumns = this->get_override( "hasResizableColumns" );
        return func_hasResizableColumns(  );
    }

    virtual void orderRows( ::irr::s32 columnIndex=-0x00000000000000001, ::irr::gui::EGUI_ORDERING_MODE mode=::irr::gui::EGOM_NONE ){
        bp::override func_orderRows = this->get_override( "orderRows" );
        func_orderRows( columnIndex, mode );
    }

    virtual void removeColumn( ::irr::u32 columnIndex ){
        bp::override func_removeColumn = this->get_override( "removeColumn" );
        func_removeColumn( columnIndex );
    }

    virtual void removeRow( ::irr::u32 rowIndex ){
        bp::override func_removeRow = this->get_override( "removeRow" );
        func_removeRow( rowIndex );
    }

    virtual bool setActiveColumn( ::irr::s32 idx, bool doOrder=false ){
        bp::override func_setActiveColumn = this->get_override( "setActiveColumn" );
        return func_setActiveColumn( idx, doOrder );
    }

    virtual void setCellColor( ::irr::u32 rowIndex, ::irr::u32 columnIndex, ::irr::video::SColor color ){
        bp::override func_setCellColor = this->get_override( "setCellColor" );
        func_setCellColor( rowIndex, columnIndex, color );
    }

    virtual void setCellData( ::irr::u32 rowIndex, ::irr::u32 columnIndex, void * data ){
        bp::override func_setCellData = this->get_override( "setCellData" );
        func_setCellData( rowIndex, columnIndex, data );
    }

    virtual void setCellText( ::irr::u32 rowIndex, ::irr::u32 columnIndex, ::irr::core::stringw const & text ){
        bp::override func_setCellText = this->get_override( "setCellText" );
        func_setCellText( rowIndex, columnIndex, boost::ref(text) );
    }

    virtual void setCellText( ::irr::u32 rowIndex, ::irr::u32 columnIndex, ::irr::core::stringw const & text, ::irr::video::SColor color ){
        bp::override func_setCellText = this->get_override( "setCellText" );
        func_setCellText( rowIndex, columnIndex, boost::ref(text), color );
    }

    virtual void setColumnOrdering( ::irr::u32 columnIndex, ::irr::gui::EGUI_COLUMN_ORDERING mode ){
        bp::override func_setColumnOrdering = this->get_override( "setColumnOrdering" );
        func_setColumnOrdering( columnIndex, mode );
    }

    virtual void setColumnWidth( ::irr::u32 columnIndex, ::irr::u32 width ){
        bp::override func_setColumnWidth = this->get_override( "setColumnWidth" );
        func_setColumnWidth( columnIndex, width );
    }

    virtual void setDrawFlags( ::irr::s32 flags ){
        bp::override func_setDrawFlags = this->get_override( "setDrawFlags" );
        func_setDrawFlags( flags );
    }

    virtual void setResizableColumns( bool resizable ){
        bp::override func_setResizableColumns = this->get_override( "setResizableColumns" );
        func_setResizableColumns( resizable );
    }

    virtual void setSelected( ::irr::s32 index ){
        bp::override func_setSelected = this->get_override( "setSelected" );
        func_setSelected( index );
    }

    virtual void swapRows( ::irr::u32 rowIndexA, ::irr::u32 rowIndexB ){
        bp::override func_swapRows = this->get_override( "swapRows" );
        func_swapRows( rowIndexA, rowIndexB );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUIToolBar_wrapper : irr::gui::IGUIToolBar, bp::wrapper< irr::gui::IGUIToolBar > {

    IGUIToolBar_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIToolBar( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIToolBar >(){
        // constructor
    
    }

    virtual ::irr::gui::IGUIButton * addButton( ::irr::s32 id=-0x00000000000000001, wchar_t const * text=0, wchar_t const * tooltiptext=0, ::irr::video::ITexture * img=0, ::irr::video::ITexture * pressedimg=0, bool isPushButton=false, bool useAlphaChannel=false ){
        bp::override func_addButton = this->get_override( "addButton" );
        return func_addButton( id, text, tooltiptext, boost::python::ptr(img), boost::python::ptr(pressedimg), isPushButton, useAlphaChannel );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUITreeView_wrapper : irr::gui::IGUITreeView, bp::wrapper< irr::gui::IGUITreeView > {

    IGUITreeView_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUITreeView( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUITreeView >(){
        // constructor
    
    }

    virtual bool getImageLeftOfIcon(  ) const {
        bp::override func_getImageLeftOfIcon = this->get_override( "getImageLeftOfIcon" );
        return func_getImageLeftOfIcon(  );
    }

    virtual ::irr::gui::IGUIImageList * getImageList(  ) const {
        bp::override func_getImageList = this->get_override( "getImageList" );
        return func_getImageList(  );
    }

    virtual ::irr::gui::IGUITreeViewNode * getLastEventNode(  ) const {
        bp::override func_getLastEventNode = this->get_override( "getLastEventNode" );
        return func_getLastEventNode(  );
    }

    virtual bool getLinesVisible(  ) const {
        bp::override func_getLinesVisible = this->get_override( "getLinesVisible" );
        return func_getLinesVisible(  );
    }

    virtual ::irr::gui::IGUITreeViewNode * getRoot(  ) const {
        bp::override func_getRoot = this->get_override( "getRoot" );
        return func_getRoot(  );
    }

    virtual ::irr::gui::IGUITreeViewNode * getSelected(  ) const {
        bp::override func_getSelected = this->get_override( "getSelected" );
        return func_getSelected(  );
    }

    virtual void setIconFont( ::irr::gui::IGUIFont * font ){
        bp::override func_setIconFont = this->get_override( "setIconFont" );
        func_setIconFont( boost::python::ptr(font) );
    }

    virtual void setImageLeftOfIcon( bool bLeftOf ){
        bp::override func_setImageLeftOfIcon = this->get_override( "setImageLeftOfIcon" );
        func_setImageLeftOfIcon( bLeftOf );
    }

    virtual void setImageList( ::irr::gui::IGUIImageList * imageList ){
        bp::override func_setImageList = this->get_override( "setImageList" );
        func_setImageList( boost::python::ptr(imageList) );
    }

    virtual void setLinesVisible( bool visible ){
        bp::override func_setLinesVisible = this->get_override( "setLinesVisible" );
        func_setLinesVisible( visible );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IGUITreeViewNode_wrapper : irr::gui::IGUITreeViewNode, bp::wrapper< irr::gui::IGUITreeViewNode > {

    IGUITreeViewNode_wrapper()
    : irr::gui::IGUITreeViewNode()
      , bp::wrapper< irr::gui::IGUITreeViewNode >(){
        // null constructor
        
    }

    virtual ::irr::gui::IGUITreeViewNode * addChildBack( wchar_t const * text, wchar_t const * icon=0, ::irr::s32 imageIndex=-0x00000000000000001, ::irr::s32 selectedImageIndex=-0x00000000000000001, void * data=0, ::irr::IReferenceCounted * data2=0 ){
        bp::override func_addChildBack = this->get_override( "addChildBack" );
        return func_addChildBack( text, icon, imageIndex, selectedImageIndex, data, boost::python::ptr(data2) );
    }

    virtual ::irr::gui::IGUITreeViewNode * addChildFront( wchar_t const * text, wchar_t const * icon=0, ::irr::s32 imageIndex=-0x00000000000000001, ::irr::s32 selectedImageIndex=-0x00000000000000001, void * data=0, ::irr::IReferenceCounted * data2=0 ){
        bp::override func_addChildFront = this->get_override( "addChildFront" );
        return func_addChildFront( text, icon, imageIndex, selectedImageIndex, data, boost::python::ptr(data2) );
    }

    virtual void clearChilds(  ){
        bp::override func_clearChilds = this->get_override( "clearChilds" );
        func_clearChilds(  );
    }

    virtual bool deleteChild( ::irr::gui::IGUITreeViewNode * child ){
        bp::override func_deleteChild = this->get_override( "deleteChild" );
        return func_deleteChild( boost::python::ptr(child) );
    }

    virtual ::irr::u32 getChildCount(  ) const {
        bp::override func_getChildCount = this->get_override( "getChildCount" );
        return func_getChildCount(  );
    }

    virtual void * getData(  ) const {
        bp::override func_getData = this->get_override( "getData" );
        return func_getData(  );
    }

    virtual ::irr::IReferenceCounted * getData2(  ) const {
        bp::override func_getData2 = this->get_override( "getData2" );
        return func_getData2(  );
    }

    virtual bool getExpanded(  ) const {
        bp::override func_getExpanded = this->get_override( "getExpanded" );
        return func_getExpanded(  );
    }

    virtual ::irr::gui::IGUITreeViewNode * getFirstChild(  ) const {
        bp::override func_getFirstChild = this->get_override( "getFirstChild" );
        return func_getFirstChild(  );
    }

    virtual wchar_t const * getIcon(  ) const {
        bp::override func_getIcon = this->get_override( "getIcon" );
        return func_getIcon(  );
    }

    virtual ::irr::u32 getImageIndex(  ) const {
        bp::override func_getImageIndex = this->get_override( "getImageIndex" );
        return func_getImageIndex(  );
    }

    virtual ::irr::gui::IGUITreeViewNode * getLastChild(  ) const {
        bp::override func_getLastChild = this->get_override( "getLastChild" );
        return func_getLastChild(  );
    }

    virtual ::irr::s32 getLevel(  ) const {
        bp::override func_getLevel = this->get_override( "getLevel" );
        return func_getLevel(  );
    }

    virtual ::irr::gui::IGUITreeViewNode * getNextSibling(  ) const {
        bp::override func_getNextSibling = this->get_override( "getNextSibling" );
        return func_getNextSibling(  );
    }

    virtual ::irr::gui::IGUITreeViewNode * getNextVisible(  ) const {
        bp::override func_getNextVisible = this->get_override( "getNextVisible" );
        return func_getNextVisible(  );
    }

    virtual ::irr::gui::IGUITreeView * getOwner(  ) const {
        bp::override func_getOwner = this->get_override( "getOwner" );
        return func_getOwner(  );
    }

    virtual ::irr::gui::IGUITreeViewNode * getParent(  ) const {
        bp::override func_getParent = this->get_override( "getParent" );
        return func_getParent(  );
    }

    virtual ::irr::gui::IGUITreeViewNode * getPrevSibling(  ) const {
        bp::override func_getPrevSibling = this->get_override( "getPrevSibling" );
        return func_getPrevSibling(  );
    }

    virtual bool getSelected(  ) const {
        bp::override func_getSelected = this->get_override( "getSelected" );
        return func_getSelected(  );
    }

    virtual ::irr::u32 getSelectedImageIndex(  ) const {
        bp::override func_getSelectedImageIndex = this->get_override( "getSelectedImageIndex" );
        return func_getSelectedImageIndex(  );
    }

    virtual wchar_t const * getText(  ) const {
        bp::override func_getText = this->get_override( "getText" );
        return func_getText(  );
    }

    virtual bool hasChilds(  ) const {
        bp::override func_hasChilds = this->get_override( "hasChilds" );
        return func_hasChilds(  );
    }

    virtual ::irr::gui::IGUITreeViewNode * insertChildAfter( ::irr::gui::IGUITreeViewNode * other, wchar_t const * text, wchar_t const * icon=0, ::irr::s32 imageIndex=-0x00000000000000001, ::irr::s32 selectedImageIndex=-0x00000000000000001, void * data=0, ::irr::IReferenceCounted * data2=0 ){
        bp::override func_insertChildAfter = this->get_override( "insertChildAfter" );
        return func_insertChildAfter( boost::python::ptr(other), text, icon, imageIndex, selectedImageIndex, data, boost::python::ptr(data2) );
    }

    virtual ::irr::gui::IGUITreeViewNode * insertChildBefore( ::irr::gui::IGUITreeViewNode * other, wchar_t const * text, wchar_t const * icon=0, ::irr::s32 imageIndex=-0x00000000000000001, ::irr::s32 selectedImageIndex=-0x00000000000000001, void * data=0, ::irr::IReferenceCounted * data2=0 ){
        bp::override func_insertChildBefore = this->get_override( "insertChildBefore" );
        return func_insertChildBefore( boost::python::ptr(other), text, icon, imageIndex, selectedImageIndex, data, boost::python::ptr(data2) );
    }

    virtual bool isRoot(  ) const {
        bp::override func_isRoot = this->get_override( "isRoot" );
        return func_isRoot(  );
    }

    virtual bool isVisible(  ) const {
        bp::override func_isVisible = this->get_override( "isVisible" );
        return func_isVisible(  );
    }

    virtual bool moveChildDown( ::irr::gui::IGUITreeViewNode * child ){
        bp::override func_moveChildDown = this->get_override( "moveChildDown" );
        return func_moveChildDown( boost::python::ptr(child) );
    }

    virtual bool moveChildUp( ::irr::gui::IGUITreeViewNode * child ){
        bp::override func_moveChildUp = this->get_override( "moveChildUp" );
        return func_moveChildUp( boost::python::ptr(child) );
    }

    virtual void setData( void * data ){
        bp::override func_setData = this->get_override( "setData" );
        func_setData( data );
    }

    virtual void setData2( ::irr::IReferenceCounted * data ){
        bp::override func_setData2 = this->get_override( "setData2" );
        func_setData2( boost::python::ptr(data) );
    }

    virtual void setExpanded( bool expanded ){
        bp::override func_setExpanded = this->get_override( "setExpanded" );
        func_setExpanded( expanded );
    }

    virtual void setIcon( wchar_t const * icon ){
        bp::override func_setIcon = this->get_override( "setIcon" );
        func_setIcon( icon );
    }

    virtual void setImageIndex( ::irr::u32 imageIndex ){
        bp::override func_setImageIndex = this->get_override( "setImageIndex" );
        func_setImageIndex( imageIndex );
    }

    virtual void setSelected( bool selected ){
        bp::override func_setSelected = this->get_override( "setSelected" );
        func_setSelected( selected );
    }

    virtual void setSelectedImageIndex( ::irr::u32 imageIndex ){
        bp::override func_setSelectedImageIndex = this->get_override( "setSelectedImageIndex" );
        func_setSelectedImageIndex( imageIndex );
    }

    virtual void setText( wchar_t const * text ){
        bp::override func_setText = this->get_override( "setText" );
        func_setText( text );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IGUIWindow_wrapper : irr::gui::IGUIWindow, bp::wrapper< irr::gui::IGUIWindow > {

    IGUIWindow_wrapper(::irr::gui::IGUIEnvironment * environment, ::irr::gui::IGUIElement * parent, ::irr::s32 id, ::irr::core::rect< int > rectangle )
    : irr::gui::IGUIWindow( boost::python::ptr(environment), boost::python::ptr(parent), id, rectangle )
      , bp::wrapper< irr::gui::IGUIWindow >(){
        // constructor
    
    }

    virtual ::irr::core::rect< int > getClientRect(  ) const {
        bp::override func_getClientRect = this->get_override( "getClientRect" );
        return func_getClientRect(  );
    }

    virtual ::irr::gui::IGUIButton * getCloseButton(  ) const {
        bp::override func_getCloseButton = this->get_override( "getCloseButton" );
        return func_getCloseButton(  );
    }

    virtual bool getDrawBackground(  ) const {
        bp::override func_getDrawBackground = this->get_override( "getDrawBackground" );
        return func_getDrawBackground(  );
    }

    virtual bool getDrawTitlebar(  ) const {
        bp::override func_getDrawTitlebar = this->get_override( "getDrawTitlebar" );
        return func_getDrawTitlebar(  );
    }

    virtual ::irr::gui::IGUIButton * getMaximizeButton(  ) const {
        bp::override func_getMaximizeButton = this->get_override( "getMaximizeButton" );
        return func_getMaximizeButton(  );
    }

    virtual ::irr::gui::IGUIButton * getMinimizeButton(  ) const {
        bp::override func_getMinimizeButton = this->get_override( "getMinimizeButton" );
        return func_getMinimizeButton(  );
    }

    virtual bool isDraggable(  ) const {
        bp::override func_isDraggable = this->get_override( "isDraggable" );
        return func_isDraggable(  );
    }

    virtual void setDraggable( bool draggable ){
        bp::override func_setDraggable = this->get_override( "setDraggable" );
        func_setDraggable( draggable );
    }

    virtual void setDrawBackground( bool draw ){
        bp::override func_setDrawBackground = this->get_override( "setDrawBackground" );
        func_setDrawBackground( draw );
    }

    virtual void setDrawTitlebar( bool draw ){
        bp::override func_setDrawTitlebar = this->get_override( "setDrawTitlebar" );
        func_setDrawTitlebar( draw );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::gui::IGUIElement::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::gui::IGUIElement::OnEvent( boost::ref(event) );
    }

    virtual void OnPostRender( ::irr::u32 timeMs ) {
        if( bp::override func_OnPostRender = this->get_override( "OnPostRender" ) )
            func_OnPostRender( timeMs );
        else{
            this->irr::gui::IGUIElement::OnPostRender( timeMs );
        }
    }
    
    void default_OnPostRender( ::irr::u32 timeMs ) {
        irr::gui::IGUIElement::OnPostRender( timeMs );
    }

    virtual void addChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::addChild( boost::python::ptr(child) );
    }

    void addChildToEnd( ::irr::gui::IGUIElement * child ){
        irr::gui::IGUIElement::addChildToEnd( boost::python::ptr(child) );
    }

    virtual bool bringToFront( ::irr::gui::IGUIElement * element ) {
        if( bp::override func_bringToFront = this->get_override( "bringToFront" ) )
            return func_bringToFront( boost::python::ptr(element) );
        else{
            return this->irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
        }
    }
    
    bool default_bringToFront( ::irr::gui::IGUIElement * element ) {
        return irr::gui::IGUIElement::bringToFront( boost::python::ptr(element) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::gui::IGUIElement::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->irr::gui::IGUIElement::draw(  );
        }
    }
    
    void default_draw(  ) {
        irr::gui::IGUIElement::draw( );
    }

    virtual ::irr::gui::IGUIElement * getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        if( bp::override func_getElementFromId = this->get_override( "getElementFromId" ) )
            return func_getElementFromId( id, searchchildren );
        else{
            return this->irr::gui::IGUIElement::getElementFromId( id, searchchildren );
        }
    }
    
    ::irr::gui::IGUIElement * default_getElementFromId( ::irr::s32 id, bool searchchildren=false ) const  {
        return irr::gui::IGUIElement::getElementFromId( id, searchchildren );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::gui::IGUIElement::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::gui::IGUIElement::getID( );
    }

    virtual wchar_t const * getText(  ) const  {
        if( bp::override func_getText = this->get_override( "getText" ) )
            return func_getText(  );
        else{
            return this->irr::gui::IGUIElement::getText(  );
        }
    }
    
    wchar_t const * default_getText(  ) const  {
        return irr::gui::IGUIElement::getText( );
    }

    virtual ::irr::c8 const * getTypeName(  ) const  {
        if( bp::override func_getTypeName = this->get_override( "getTypeName" ) )
            return func_getTypeName(  );
        else{
            return this->irr::gui::IGUIElement::getTypeName(  );
        }
    }
    
    ::irr::c8 const * default_getTypeName(  ) const  {
        return irr::gui::IGUIElement::getTypeName( );
    }

    virtual bool hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        if( bp::override func_hasType = this->get_override( "hasType" ) )
            return func_hasType( type );
        else{
            return this->irr::gui::IGUIElement::hasType( type );
        }
    }
    
    bool default_hasType( ::irr::gui::EGUI_ELEMENT_TYPE type ) const  {
        return irr::gui::IGUIElement::hasType( type );
    }

    virtual bool isEnabled(  ) const  {
        if( bp::override func_isEnabled = this->get_override( "isEnabled" ) )
            return func_isEnabled(  );
        else{
            return this->irr::gui::IGUIElement::isEnabled(  );
        }
    }
    
    bool default_isEnabled(  ) const  {
        return irr::gui::IGUIElement::isEnabled( );
    }

    virtual bool isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        if( bp::override func_isPointInside = this->get_override( "isPointInside" ) )
            return func_isPointInside( boost::ref(point) );
        else{
            return this->irr::gui::IGUIElement::isPointInside( boost::ref(point) );
        }
    }
    
    bool default_isPointInside( ::irr::core::vector2d< int > const & point ) const  {
        return irr::gui::IGUIElement::isPointInside( boost::ref(point) );
    }

    virtual bool isSubElement(  ) const  {
        if( bp::override func_isSubElement = this->get_override( "isSubElement" ) )
            return func_isSubElement(  );
        else{
            return this->irr::gui::IGUIElement::isSubElement(  );
        }
    }
    
    bool default_isSubElement(  ) const  {
        return irr::gui::IGUIElement::isSubElement( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::gui::IGUIElement::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::gui::IGUIElement::isVisible( );
    }

    virtual void move( ::irr::core::vector2d< int > absoluteMovement ) {
        if( bp::override func_move = this->get_override( "move" ) )
            func_move( absoluteMovement );
        else{
            this->irr::gui::IGUIElement::move( absoluteMovement );
        }
    }
    
    void default_move( ::irr::core::vector2d< int > absoluteMovement ) {
        irr::gui::IGUIElement::move( absoluteMovement );
    }

    void recalculateAbsolutePosition( bool recursive ){
        irr::gui::IGUIElement::recalculateAbsolutePosition( recursive );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::gui::IGUIElement::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::gui::IGUIElement::remove( );
    }

    virtual void removeChild( ::irr::gui::IGUIElement * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            func_removeChild( boost::python::ptr(child) );
        else{
            this->irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
        }
    }
    
    void default_removeChild( ::irr::gui::IGUIElement * child ) {
        irr::gui::IGUIElement::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::gui::IGUIElement::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::gui::IGUIElement::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::gui::IGUIElement::setEnabled( enabled );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::gui::IGUIElement::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::gui::IGUIElement::setID( id );
    }

    virtual void setSubElement( bool subElement ) {
        if( bp::override func_setSubElement = this->get_override( "setSubElement" ) )
            func_setSubElement( subElement );
        else{
            this->irr::gui::IGUIElement::setSubElement( subElement );
        }
    }
    
    void default_setSubElement( bool subElement ) {
        irr::gui::IGUIElement::setSubElement( subElement );
    }

    virtual void setText( wchar_t const * text ) {
        if( bp::override func_setText = this->get_override( "setText" ) )
            func_setText( text );
        else{
            this->irr::gui::IGUIElement::setText( text );
        }
    }
    
    void default_setText( wchar_t const * text ) {
        irr::gui::IGUIElement::setText( text );
    }

    virtual void setToolTipText( wchar_t const * text ) {
        if( bp::override func_setToolTipText = this->get_override( "setToolTipText" ) )
            func_setToolTipText( text );
        else{
            this->irr::gui::IGUIElement::setToolTipText( text );
        }
    }
    
    void default_setToolTipText( wchar_t const * text ) {
        irr::gui::IGUIElement::setToolTipText( text );
    }

    virtual void setVisible( bool visible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( visible );
        else{
            this->irr::gui::IGUIElement::setVisible( visible );
        }
    }
    
    void default_setVisible( bool visible ) {
        irr::gui::IGUIElement::setVisible( visible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::gui::IGUIElement::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::gui::IGUIElement::updateAbsolutePosition( );
    }

};

struct IArchiveLoader_wrapper : irr::io::IArchiveLoader, bp::wrapper< irr::io::IArchiveLoader > {

    IArchiveLoader_wrapper()
    : irr::io::IArchiveLoader()
      , bp::wrapper< irr::io::IArchiveLoader >(){
        // null constructor
        
    }

    virtual ::irr::io::IFileArchive * createArchive( ::irr::io::path const & filename, bool ignoreCase, bool ignorePaths ) const {
        bp::override func_createArchive = this->get_override( "createArchive" );
        return func_createArchive( boost::ref(filename), ignoreCase, ignorePaths );
    }

    virtual ::irr::io::IFileArchive * createArchive( ::irr::io::IReadFile * file, bool ignoreCase, bool ignorePaths ) const {
        bp::override func_createArchive = this->get_override( "createArchive" );
        return func_createArchive( boost::python::ptr(file), ignoreCase, ignorePaths );
    }

    virtual bool isALoadableFileFormat( ::irr::io::path const & filename ) const {
        bp::override func_isALoadableFileFormat = this->get_override( "isALoadableFileFormat" );
        return func_isALoadableFileFormat( boost::ref(filename) );
    }

    virtual bool isALoadableFileFormat( ::irr::io::IReadFile * file ) const {
        bp::override func_isALoadableFileFormat = this->get_override( "isALoadableFileFormat" );
        return func_isALoadableFileFormat( boost::python::ptr(file) );
    }

    virtual bool isALoadableFileFormat( ::irr::io::E_FILE_ARCHIVE_TYPE fileType ) const {
        bp::override func_isALoadableFileFormat = this->get_override( "isALoadableFileFormat" );
        return func_isALoadableFileFormat( fileType );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IAttributes_wrapper : irr::io::IAttributes, bp::wrapper< irr::io::IAttributes > {

    IAttributes_wrapper()
    : irr::io::IAttributes()
      , bp::wrapper< irr::io::IAttributes >(){
        // null constructor
        
    }

    virtual void addArray( ::irr::c8 const * attributeName, ::irr::core::array< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >, irr::core::irrAllocator< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > > > const & value ){
        bp::override func_addArray = this->get_override( "addArray" );
        func_addArray( attributeName, boost::ref(value) );
    }

    virtual void addBinary( ::irr::c8 const * attributeName, void * data, ::irr::s32 dataSizeInBytes ){
        bp::override func_addBinary = this->get_override( "addBinary" );
        func_addBinary( attributeName, data, dataSizeInBytes );
    }

    virtual void addBool( ::irr::c8 const * attributeName, bool value ){
        bp::override func_addBool = this->get_override( "addBool" );
        func_addBool( attributeName, value );
    }

    virtual void addBox3d( ::irr::c8 const * attributeName, ::irr::core::aabbox3df v ){
        bp::override func_addBox3d = this->get_override( "addBox3d" );
        func_addBox3d( attributeName, v );
    }

    virtual void addColor( ::irr::c8 const * attributeName, ::irr::video::SColor value ){
        bp::override func_addColor = this->get_override( "addColor" );
        func_addColor( attributeName, value );
    }

    virtual void addColorf( ::irr::c8 const * attributeName, ::irr::video::SColorf value ){
        bp::override func_addColorf = this->get_override( "addColorf" );
        func_addColorf( attributeName, value );
    }

    virtual void addEnum( ::irr::c8 const * attributeName, ::irr::c8 const * enumValue, ::irr::c8 const * const * enumerationLiterals ){
        bp::override func_addEnum = this->get_override( "addEnum" );
        func_addEnum( attributeName, enumValue, enumerationLiterals );
    }

    virtual void addEnum( ::irr::c8 const * attributeName, ::irr::s32 enumValue, ::irr::c8 const * const * enumerationLiterals ){
        bp::override func_addEnum = this->get_override( "addEnum" );
        func_addEnum( attributeName, enumValue, enumerationLiterals );
    }

    virtual void addFloat( ::irr::c8 const * attributeName, ::irr::f32 value ){
        bp::override func_addFloat = this->get_override( "addFloat" );
        func_addFloat( attributeName, value );
    }

    virtual void addInt( ::irr::c8 const * attributeName, ::irr::s32 value ){
        bp::override func_addInt = this->get_override( "addInt" );
        func_addInt( attributeName, value );
    }

    virtual void addLine2d( ::irr::c8 const * attributeName, ::irr::core::line2df v ){
        bp::override func_addLine2d = this->get_override( "addLine2d" );
        func_addLine2d( attributeName, v );
    }

    virtual void addLine3d( ::irr::c8 const * attributeName, ::irr::core::line3df v ){
        bp::override func_addLine3d = this->get_override( "addLine3d" );
        func_addLine3d( attributeName, v );
    }

    virtual void addMatrix( ::irr::c8 const * attributeName, ::irr::core::matrix4 const & v ){
        bp::override func_addMatrix = this->get_override( "addMatrix" );
        func_addMatrix( attributeName, boost::ref(v) );
    }

    virtual void addPlane3d( ::irr::c8 const * attributeName, ::irr::core::plane3df v ){
        bp::override func_addPlane3d = this->get_override( "addPlane3d" );
        func_addPlane3d( attributeName, v );
    }

    virtual void addPosition2d( ::irr::c8 const * attributeName, ::irr::core::position2di value ){
        bp::override func_addPosition2d = this->get_override( "addPosition2d" );
        func_addPosition2d( attributeName, value );
    }

    virtual void addQuaternion( ::irr::c8 const * attributeName, ::irr::core::quaternion v ){
        bp::override func_addQuaternion = this->get_override( "addQuaternion" );
        func_addQuaternion( attributeName, v );
    }

    virtual void addRect( ::irr::c8 const * attributeName, ::irr::core::rect< int > value ){
        bp::override func_addRect = this->get_override( "addRect" );
        func_addRect( attributeName, value );
    }

    virtual void addString( ::irr::c8 const * attributeName, ::irr::c8 const * value ){
        bp::override func_addString = this->get_override( "addString" );
        func_addString( attributeName, value );
    }

    virtual void addString( ::irr::c8 const * attributeName, wchar_t const * value ){
        bp::override func_addString = this->get_override( "addString" );
        func_addString( attributeName, value );
    }

    virtual void addTexture( ::irr::c8 const * attributeName, ::irr::video::ITexture * texture ){
        bp::override func_addTexture = this->get_override( "addTexture" );
        func_addTexture( attributeName, boost::python::ptr(texture) );
    }

    virtual void addTriangle3d( ::irr::c8 const * attributeName, ::irr::core::triangle3df v ){
        bp::override func_addTriangle3d = this->get_override( "addTriangle3d" );
        func_addTriangle3d( attributeName, v );
    }

    virtual void addUserPointer( ::irr::c8 const * attributeName, void * userPointer ){
        bp::override func_addUserPointer = this->get_override( "addUserPointer" );
        func_addUserPointer( attributeName, userPointer );
    }

    virtual void addVector3d( ::irr::c8 const * attributeName, ::irr::core::vector3df value ){
        bp::override func_addVector3d = this->get_override( "addVector3d" );
        func_addVector3d( attributeName, value );
    }

    virtual void clear(  ){
        bp::override func_clear = this->get_override( "clear" );
        func_clear(  );
    }

    virtual bool existsAttribute( ::irr::c8 const * attributeName ){
        bp::override func_existsAttribute = this->get_override( "existsAttribute" );
        return func_existsAttribute( attributeName );
    }

    virtual ::irr::s32 findAttribute( ::irr::c8 const * attributeName ){
        bp::override func_findAttribute = this->get_override( "findAttribute" );
        return func_findAttribute( attributeName );
    }

    virtual ::irr::core::array< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >, irr::core::irrAllocator< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > > > getAttributeAsArray( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsArray = this->get_override( "getAttributeAsArray" );
        return func_getAttributeAsArray( attributeName );
    }

    virtual ::irr::core::array< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >, irr::core::irrAllocator< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > > > getAttributeAsArray( ::irr::s32 index ){
        bp::override func_getAttributeAsArray = this->get_override( "getAttributeAsArray" );
        return func_getAttributeAsArray( index );
    }

    virtual void getAttributeAsBinaryData( ::irr::c8 const * attributeName, void * outData, ::irr::s32 maxSizeInBytes ){
        bp::override func_getAttributeAsBinaryData = this->get_override( "getAttributeAsBinaryData" );
        func_getAttributeAsBinaryData( attributeName, outData, maxSizeInBytes );
    }

    virtual void getAttributeAsBinaryData( ::irr::s32 index, void * outData, ::irr::s32 maxSizeInBytes ){
        bp::override func_getAttributeAsBinaryData = this->get_override( "getAttributeAsBinaryData" );
        func_getAttributeAsBinaryData( index, outData, maxSizeInBytes );
    }

    virtual bool getAttributeAsBool( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsBool = this->get_override( "getAttributeAsBool" );
        return func_getAttributeAsBool( attributeName );
    }

    virtual bool getAttributeAsBool( ::irr::s32 index ){
        bp::override func_getAttributeAsBool = this->get_override( "getAttributeAsBool" );
        return func_getAttributeAsBool( index );
    }

    virtual ::irr::core::aabbox3df getAttributeAsBox3d( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsBox3d = this->get_override( "getAttributeAsBox3d" );
        return func_getAttributeAsBox3d( attributeName );
    }

    virtual ::irr::core::aabbox3df getAttributeAsBox3d( ::irr::s32 index ){
        bp::override func_getAttributeAsBox3d = this->get_override( "getAttributeAsBox3d" );
        return func_getAttributeAsBox3d( index );
    }

    virtual ::irr::video::SColor getAttributeAsColor( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsColor = this->get_override( "getAttributeAsColor" );
        return func_getAttributeAsColor( attributeName );
    }

    virtual ::irr::video::SColor getAttributeAsColor( ::irr::s32 index ){
        bp::override func_getAttributeAsColor = this->get_override( "getAttributeAsColor" );
        return func_getAttributeAsColor( index );
    }

    virtual ::irr::video::SColorf getAttributeAsColorf( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsColorf = this->get_override( "getAttributeAsColorf" );
        return func_getAttributeAsColorf( attributeName );
    }

    virtual ::irr::video::SColorf getAttributeAsColorf( ::irr::s32 index ){
        bp::override func_getAttributeAsColorf = this->get_override( "getAttributeAsColorf" );
        return func_getAttributeAsColorf( index );
    }

    virtual ::irr::c8 const * getAttributeAsEnumeration( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsEnumeration = this->get_override( "getAttributeAsEnumeration" );
        return func_getAttributeAsEnumeration( attributeName );
    }

    virtual ::irr::s32 getAttributeAsEnumeration( ::irr::c8 const * attributeName, ::irr::c8 const * const * enumerationLiteralsToUse ){
        bp::override func_getAttributeAsEnumeration = this->get_override( "getAttributeAsEnumeration" );
        return func_getAttributeAsEnumeration( attributeName, enumerationLiteralsToUse );
    }

    virtual ::irr::s32 getAttributeAsEnumeration( ::irr::s32 index, ::irr::c8 const * const * enumerationLiteralsToUse ){
        bp::override func_getAttributeAsEnumeration = this->get_override( "getAttributeAsEnumeration" );
        return func_getAttributeAsEnumeration( index, enumerationLiteralsToUse );
    }

    virtual ::irr::c8 const * getAttributeAsEnumeration( ::irr::s32 index ){
        bp::override func_getAttributeAsEnumeration = this->get_override( "getAttributeAsEnumeration" );
        return func_getAttributeAsEnumeration( index );
    }

    virtual ::irr::f32 getAttributeAsFloat( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsFloat = this->get_override( "getAttributeAsFloat" );
        return func_getAttributeAsFloat( attributeName );
    }

    virtual ::irr::f32 getAttributeAsFloat( ::irr::s32 index ){
        bp::override func_getAttributeAsFloat = this->get_override( "getAttributeAsFloat" );
        return func_getAttributeAsFloat( index );
    }

    virtual ::irr::s32 getAttributeAsInt( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsInt = this->get_override( "getAttributeAsInt" );
        return func_getAttributeAsInt( attributeName );
    }

    virtual ::irr::s32 getAttributeAsInt( ::irr::s32 index ){
        bp::override func_getAttributeAsInt = this->get_override( "getAttributeAsInt" );
        return func_getAttributeAsInt( index );
    }

    virtual ::irr::core::line2df getAttributeAsLine2d( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsLine2d = this->get_override( "getAttributeAsLine2d" );
        return func_getAttributeAsLine2d( attributeName );
    }

    virtual ::irr::core::line2df getAttributeAsLine2d( ::irr::s32 index ){
        bp::override func_getAttributeAsLine2d = this->get_override( "getAttributeAsLine2d" );
        return func_getAttributeAsLine2d( index );
    }

    virtual ::irr::core::line3df getAttributeAsLine3d( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsLine3d = this->get_override( "getAttributeAsLine3d" );
        return func_getAttributeAsLine3d( attributeName );
    }

    virtual ::irr::core::line3df getAttributeAsLine3d( ::irr::s32 index ){
        bp::override func_getAttributeAsLine3d = this->get_override( "getAttributeAsLine3d" );
        return func_getAttributeAsLine3d( index );
    }

    virtual ::irr::core::matrix4 getAttributeAsMatrix( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsMatrix = this->get_override( "getAttributeAsMatrix" );
        return func_getAttributeAsMatrix( attributeName );
    }

    virtual ::irr::core::matrix4 getAttributeAsMatrix( ::irr::s32 index ){
        bp::override func_getAttributeAsMatrix = this->get_override( "getAttributeAsMatrix" );
        return func_getAttributeAsMatrix( index );
    }

    virtual ::irr::core::plane3df getAttributeAsPlane3d( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsPlane3d = this->get_override( "getAttributeAsPlane3d" );
        return func_getAttributeAsPlane3d( attributeName );
    }

    virtual ::irr::core::plane3df getAttributeAsPlane3d( ::irr::s32 index ){
        bp::override func_getAttributeAsPlane3d = this->get_override( "getAttributeAsPlane3d" );
        return func_getAttributeAsPlane3d( index );
    }

    virtual ::irr::core::position2di getAttributeAsPosition2d( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsPosition2d = this->get_override( "getAttributeAsPosition2d" );
        return func_getAttributeAsPosition2d( attributeName );
    }

    virtual ::irr::core::position2di getAttributeAsPosition2d( ::irr::s32 index ){
        bp::override func_getAttributeAsPosition2d = this->get_override( "getAttributeAsPosition2d" );
        return func_getAttributeAsPosition2d( index );
    }

    virtual ::irr::core::quaternion getAttributeAsQuaternion( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsQuaternion = this->get_override( "getAttributeAsQuaternion" );
        return func_getAttributeAsQuaternion( attributeName );
    }

    virtual ::irr::core::quaternion getAttributeAsQuaternion( ::irr::s32 index ){
        bp::override func_getAttributeAsQuaternion = this->get_override( "getAttributeAsQuaternion" );
        return func_getAttributeAsQuaternion( index );
    }

    virtual ::irr::core::rect< int > getAttributeAsRect( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsRect = this->get_override( "getAttributeAsRect" );
        return func_getAttributeAsRect( attributeName );
    }

    virtual ::irr::core::rect< int > getAttributeAsRect( ::irr::s32 index ){
        bp::override func_getAttributeAsRect = this->get_override( "getAttributeAsRect" );
        return func_getAttributeAsRect( index );
    }

    virtual ::irr::core::stringc getAttributeAsString( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsString = this->get_override( "getAttributeAsString" );
        return func_getAttributeAsString( attributeName );
    }

    virtual void getAttributeAsString( ::irr::c8 const * attributeName, ::irr::c8 * target ){
        bp::override func_getAttributeAsString = this->get_override( "getAttributeAsString" );
        func_getAttributeAsString( attributeName, target );
    }

    virtual ::irr::core::stringc getAttributeAsString( ::irr::s32 index ){
        bp::override func_getAttributeAsString = this->get_override( "getAttributeAsString" );
        return func_getAttributeAsString( index );
    }

    virtual ::irr::core::stringw getAttributeAsStringW( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsStringW = this->get_override( "getAttributeAsStringW" );
        return func_getAttributeAsStringW( attributeName );
    }

    virtual void getAttributeAsStringW( ::irr::c8 const * attributeName, wchar_t * target ){
        bp::override func_getAttributeAsStringW = this->get_override( "getAttributeAsStringW" );
        func_getAttributeAsStringW( attributeName, target );
    }

    virtual ::irr::core::stringw getAttributeAsStringW( ::irr::s32 index ){
        bp::override func_getAttributeAsStringW = this->get_override( "getAttributeAsStringW" );
        return func_getAttributeAsStringW( index );
    }

    virtual ::irr::video::ITexture * getAttributeAsTexture( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsTexture = this->get_override( "getAttributeAsTexture" );
        return func_getAttributeAsTexture( attributeName );
    }

    virtual ::irr::video::ITexture * getAttributeAsTexture( ::irr::s32 index ){
        bp::override func_getAttributeAsTexture = this->get_override( "getAttributeAsTexture" );
        return func_getAttributeAsTexture( index );
    }

    virtual ::irr::core::triangle3df getAttributeAsTriangle3d( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsTriangle3d = this->get_override( "getAttributeAsTriangle3d" );
        return func_getAttributeAsTriangle3d( attributeName );
    }

    virtual ::irr::core::triangle3df getAttributeAsTriangle3d( ::irr::s32 index ){
        bp::override func_getAttributeAsTriangle3d = this->get_override( "getAttributeAsTriangle3d" );
        return func_getAttributeAsTriangle3d( index );
    }

    virtual void * getAttributeAsUserPointer( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsUserPointer = this->get_override( "getAttributeAsUserPointer" );
        return func_getAttributeAsUserPointer( attributeName );
    }

    virtual void * getAttributeAsUserPointer( ::irr::s32 index ){
        bp::override func_getAttributeAsUserPointer = this->get_override( "getAttributeAsUserPointer" );
        return func_getAttributeAsUserPointer( index );
    }

    virtual ::irr::core::vector3df getAttributeAsVector3d( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeAsVector3d = this->get_override( "getAttributeAsVector3d" );
        return func_getAttributeAsVector3d( attributeName );
    }

    virtual ::irr::core::vector3df getAttributeAsVector3d( ::irr::s32 index ){
        bp::override func_getAttributeAsVector3d = this->get_override( "getAttributeAsVector3d" );
        return func_getAttributeAsVector3d( index );
    }

    virtual ::irr::u32 getAttributeCount(  ) const {
        bp::override func_getAttributeCount = this->get_override( "getAttributeCount" );
        return func_getAttributeCount(  );
    }

    virtual void getAttributeEnumerationLiteralsOfEnumeration( ::irr::c8 const * attributeName, ::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > & outLiterals ){
        bp::override func_getAttributeEnumerationLiteralsOfEnumeration = this->get_override( "getAttributeEnumerationLiteralsOfEnumeration" );
        func_getAttributeEnumerationLiteralsOfEnumeration( attributeName, boost::ref(outLiterals) );
    }

    virtual void getAttributeEnumerationLiteralsOfEnumeration( ::irr::s32 index, ::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > & outLiterals ){
        bp::override func_getAttributeEnumerationLiteralsOfEnumeration = this->get_override( "getAttributeEnumerationLiteralsOfEnumeration" );
        func_getAttributeEnumerationLiteralsOfEnumeration( index, boost::ref(outLiterals) );
    }

    virtual ::irr::c8 const * getAttributeName( ::irr::s32 index ){
        bp::override func_getAttributeName = this->get_override( "getAttributeName" );
        return func_getAttributeName( index );
    }

    virtual ::irr::io::E_ATTRIBUTE_TYPE getAttributeType( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeType = this->get_override( "getAttributeType" );
        return func_getAttributeType( attributeName );
    }

    virtual ::irr::io::E_ATTRIBUTE_TYPE getAttributeType( ::irr::s32 index ){
        bp::override func_getAttributeType = this->get_override( "getAttributeType" );
        return func_getAttributeType( index );
    }

    virtual wchar_t const * getAttributeTypeString( ::irr::c8 const * attributeName ){
        bp::override func_getAttributeTypeString = this->get_override( "getAttributeTypeString" );
        return func_getAttributeTypeString( attributeName );
    }

    virtual wchar_t const * getAttributeTypeString( ::irr::s32 index ){
        bp::override func_getAttributeTypeString = this->get_override( "getAttributeTypeString" );
        return func_getAttributeTypeString( index );
    }

    virtual bool read( ::irr::io::IXMLReader * reader, bool readCurrentElementOnly=false, wchar_t const * elementName=0 ){
        bp::override func_read = this->get_override( "read" );
        return func_read( boost::python::ptr(reader), readCurrentElementOnly, elementName );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::s32 value ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, value );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::s32 value ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, value );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::f32 value ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, value );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::f32 value ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, value );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::c8 const * value ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, value );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::c8 const * value ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, value );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, wchar_t const * value ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, value );
    }

    virtual void setAttribute( ::irr::s32 index, wchar_t const * value ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, value );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, void * data, ::irr::s32 dataSizeInBytes ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, data, dataSizeInBytes );
    }

    virtual void setAttribute( ::irr::s32 index, void * data, ::irr::s32 dataSizeInBytes ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, data, dataSizeInBytes );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::core::array< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >, irr::core::irrAllocator< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > > > const & value ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, boost::ref(value) );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::core::array< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >, irr::core::irrAllocator< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > > > const & value ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, boost::ref(value) );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, bool value ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, value );
    }

    virtual void setAttribute( ::irr::s32 index, bool value ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, value );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::c8 const * enumValue, ::irr::c8 const * const * enumerationLiterals ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, enumValue, enumerationLiterals );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::c8 const * enumValue, ::irr::c8 const * const * enumerationLiterals ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, enumValue, enumerationLiterals );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::video::SColor color ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, color );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::video::SColor color ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, color );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::video::SColorf color ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, color );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::video::SColorf color ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, color );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::core::vector3df v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, v );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::core::vector3df v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, v );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::core::position2di v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, v );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::core::position2di v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, v );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::core::rect< int > v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, v );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::core::rect< int > v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, v );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::core::matrix4 const & v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, boost::ref(v) );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::core::matrix4 const & v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, boost::ref(v) );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::core::quaternion v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, v );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::core::quaternion v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, v );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::core::aabbox3df v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, v );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::core::aabbox3df v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, v );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::core::plane3df v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, v );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::core::plane3df v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, v );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::core::triangle3df v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, v );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::core::triangle3df v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, v );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::core::line2df v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, v );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::core::line2df v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, v );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::core::line3df v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, v );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::core::line3df v ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, v );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, ::irr::video::ITexture * texture ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, boost::python::ptr(texture) );
    }

    virtual void setAttribute( ::irr::s32 index, ::irr::video::ITexture * texture ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, boost::python::ptr(texture) );
    }

    virtual void setAttribute( ::irr::c8 const * attributeName, void * userPointer ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( attributeName, userPointer );
    }

    virtual void setAttribute( ::irr::s32 index, void * userPointer ){
        bp::override func_setAttribute = this->get_override( "setAttribute" );
        func_setAttribute( index, userPointer );
    }

    virtual bool write( ::irr::io::IXMLWriter * writer, bool writeXMLHeader=false, wchar_t const * elementName=0 ){
        bp::override func_write = this->get_override( "write" );
        return func_write( boost::python::ptr(writer), writeXMLHeader, elementName );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IFileArchive_wrapper : irr::io::IFileArchive, bp::wrapper< irr::io::IFileArchive > {

    IFileArchive_wrapper()
    : irr::io::IFileArchive()
      , bp::wrapper< irr::io::IFileArchive >(){
        // null constructor
        
    }

    virtual ::irr::io::IReadFile * createAndOpenFile( ::irr::io::path const & filename ){
        bp::override func_createAndOpenFile = this->get_override( "createAndOpenFile" );
        return func_createAndOpenFile( boost::ref(filename) );
    }

    virtual ::irr::io::IReadFile * createAndOpenFile( ::irr::u32 index ){
        bp::override func_createAndOpenFile = this->get_override( "createAndOpenFile" );
        return func_createAndOpenFile( index );
    }

    virtual ::irr::io::IFileList const * getFileList(  ) const {
        bp::override func_getFileList = this->get_override( "getFileList" );
        return func_getFileList(  );
    }

    virtual ::irr::io::E_FILE_ARCHIVE_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::io::IFileArchive::getType(  );
        }
    }
    
    ::irr::io::E_FILE_ARCHIVE_TYPE default_getType(  ) const  {
        return irr::io::IFileArchive::getType( );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IFileList_wrapper : irr::io::IFileList, bp::wrapper< irr::io::IFileList > {

    IFileList_wrapper()
    : irr::io::IFileList()
      , bp::wrapper< irr::io::IFileList >(){
        // null constructor
        
    }

    virtual ::irr::u32 addItem( ::irr::io::path const & fullPath, ::irr::u32 size, bool isDirectory, ::irr::u32 id=0 ){
        bp::override func_addItem = this->get_override( "addItem" );
        return func_addItem( boost::ref(fullPath), size, isDirectory, id );
    }

    virtual ::irr::s32 findFile( ::irr::io::path const & filename, bool isFolder=false ) const {
        bp::override func_findFile = this->get_override( "findFile" );
        return func_findFile( boost::ref(filename), isFolder );
    }

    virtual ::irr::u32 getFileCount(  ) const {
        bp::override func_getFileCount = this->get_override( "getFileCount" );
        return func_getFileCount(  );
    }

    virtual ::irr::io::path const & getFileName( ::irr::u32 index ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getFileSize( ::irr::u32 index ) const {
        bp::override func_getFileSize = this->get_override( "getFileSize" );
        return func_getFileSize( index );
    }

    virtual ::irr::io::path const & getFullFileName( ::irr::u32 index ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getID( ::irr::u32 index ) const {
        bp::override func_getID = this->get_override( "getID" );
        return func_getID( index );
    }

    virtual ::irr::io::path const & getPath(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual bool isDirectory( ::irr::u32 index ) const {
        bp::override func_isDirectory = this->get_override( "isDirectory" );
        return func_isDirectory( index );
    }

    virtual void sort(  ){
        bp::override func_sort = this->get_override( "sort" );
        func_sort(  );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IFileReadCallBack_wrapper : irr::io::IFileReadCallBack, bp::wrapper< irr::io::IFileReadCallBack > {

    IFileReadCallBack_wrapper()
    : irr::io::IFileReadCallBack()
      , bp::wrapper< irr::io::IFileReadCallBack >(){
        // null constructor
        
    }

    virtual long int getSize(  ) const {
        bp::override func_getSize = this->get_override( "getSize" );
        return func_getSize(  );
    }

    virtual int read( void * buffer, int sizeToRead ){
        bp::override func_read = this->get_override( "read" );
        return func_read( buffer, sizeToRead );
    }

};

struct IVideoDriver_wrapper : irr::video::IVideoDriver, bp::wrapper< irr::video::IVideoDriver > {

    IVideoDriver_wrapper()
    : irr::video::IVideoDriver()
      , bp::wrapper< irr::video::IVideoDriver >(){
        // null constructor
        
    }

    virtual void OnResize( ::irr::core::dimension2d< unsigned int > const & size ){
        bp::override func_OnResize = this->get_override( "OnResize" );
        func_OnResize( boost::ref(size) );
    }

    virtual ::irr::s32 addDynamicLight( ::irr::video::SLight const & light ){
        bp::override func_addDynamicLight = this->get_override( "addDynamicLight" );
        return func_addDynamicLight( boost::ref(light) );
    }

    virtual void addExternalImageLoader( ::irr::video::IImageLoader * loader ){
        bp::override func_addExternalImageLoader = this->get_override( "addExternalImageLoader" );
        func_addExternalImageLoader( boost::python::ptr(loader) );
    }

    virtual void addExternalImageWriter( ::irr::video::IImageWriter * writer ){
        bp::override func_addExternalImageWriter = this->get_override( "addExternalImageWriter" );
        func_addExternalImageWriter( boost::python::ptr(writer) );
    }

    virtual ::irr::s32 addMaterialRenderer( ::irr::video::IMaterialRenderer * renderer, ::irr::c8 const * name=0 ){
        bp::override func_addMaterialRenderer = this->get_override( "addMaterialRenderer" );
        return func_addMaterialRenderer( boost::python::ptr(renderer), name );
    }

    virtual ::irr::video::ITexture * addRenderTargetTexture( ::irr::core::dimension2d< unsigned int > const & size, ::irr::io::path const & name="rt", ::irr::video::ECOLOR_FORMAT const format=::irr::video::ECF_UNKNOWN ){
        bp::override func_addRenderTargetTexture = this->get_override( "addRenderTargetTexture" );
        return func_addRenderTargetTexture( boost::ref(size), boost::ref(name), format );
    }

    virtual ::irr::video::ITexture * addTexture( ::irr::core::dimension2d< unsigned int > const & size, ::irr::io::path const & name, ::irr::video::ECOLOR_FORMAT format=::irr::video::ECF_A8R8G8B8 ){
        bp::override func_addTexture = this->get_override( "addTexture" );
        return func_addTexture( boost::ref(size), boost::ref(name), format );
    }

    virtual ::irr::video::ITexture * addTexture( ::irr::io::path const & name, ::irr::video::IImage * image, void * mipmapData=0 ){
        bp::override func_addTexture = this->get_override( "addTexture" );
        return func_addTexture( boost::ref(name), boost::python::ptr(image), mipmapData );
    }

    virtual bool beginScene( bool backBuffer=true, bool zBuffer=true, ::irr::video::SColor color=irr::video::SColor(255u, 0u, 0u, 0u), ::irr::video::SExposedVideoData const & videoData=irr::video::SExposedVideoData(), ::irr::core::rect< int > * sourceRect=0 ){
        bp::override func_beginScene = this->get_override( "beginScene" );
        return func_beginScene( backBuffer, zBuffer, color, boost::ref(videoData), boost::python::ptr(sourceRect) );
    }

    virtual bool checkDriverReset(  ){
        bp::override func_checkDriverReset = this->get_override( "checkDriverReset" );
        return func_checkDriverReset(  );
    }

    virtual void clearZBuffer(  ){
        bp::override func_clearZBuffer = this->get_override( "clearZBuffer" );
        func_clearZBuffer(  );
    }

    virtual ::irr::io::IAttributes * createAttributesFromMaterial( ::irr::video::SMaterial const & material ){
        bp::override func_createAttributesFromMaterial = this->get_override( "createAttributesFromMaterial" );
        return func_createAttributesFromMaterial( boost::ref(material) );
    }

    virtual ::irr::video::IImage * createImage( ::irr::video::ECOLOR_FORMAT format, ::irr::core::dimension2d< unsigned int > const & size ){
        bp::override func_createImage = this->get_override( "createImage" );
        return func_createImage( format, boost::ref(size) );
    }

    virtual ::irr::video::IImage * createImage( ::irr::video::ECOLOR_FORMAT format, ::irr::video::IImage * imageToCopy ){
        bp::override func_createImage = this->get_override( "createImage" );
        return func_createImage( format, boost::python::ptr(imageToCopy) );
    }

    virtual ::irr::video::IImage * createImage( ::irr::video::IImage * imageToCopy, ::irr::core::vector2d< int > const & pos, ::irr::core::dimension2d< unsigned int > const & size ){
        bp::override func_createImage = this->get_override( "createImage" );
        return func_createImage( boost::python::ptr(imageToCopy), boost::ref(pos), boost::ref(size) );
    }

    virtual ::irr::video::IImage * createImage( ::irr::video::ITexture * texture, ::irr::core::vector2d< int > const & pos, ::irr::core::dimension2d< unsigned int > const & size ){
        bp::override func_createImage = this->get_override( "createImage" );
        return func_createImage( boost::python::ptr(texture), boost::ref(pos), boost::ref(size) );
    }

    virtual ::irr::video::IImage * createImageFromData( ::irr::video::ECOLOR_FORMAT format, ::irr::core::dimension2d< unsigned int > const & size, void * data, bool ownForeignMemory=false, bool deleteMemory=true ){
        bp::override func_createImageFromData = this->get_override( "createImageFromData" );
        return func_createImageFromData( format, boost::ref(size), data, ownForeignMemory, deleteMemory );
    }

    virtual ::irr::video::IImage * createImageFromFile( ::irr::io::path const & filename ){
        bp::override func_createImageFromFile = this->get_override( "createImageFromFile" );
        return func_createImageFromFile( boost::ref(filename) );
    }

    virtual ::irr::video::IImage * createImageFromFile( ::irr::io::IReadFile * file ){
        bp::override func_createImageFromFile = this->get_override( "createImageFromFile" );
        return func_createImageFromFile( boost::python::ptr(file) );
    }

    virtual ::irr::video::IImage * createScreenShot(  ){
        bp::override func_createScreenShot = this->get_override( "createScreenShot" );
        return func_createScreenShot(  );
    }

    virtual void deleteAllDynamicLights(  ){
        bp::override func_deleteAllDynamicLights = this->get_override( "deleteAllDynamicLights" );
        func_deleteAllDynamicLights(  );
    }

    virtual void disableFeature( ::irr::video::E_VIDEO_DRIVER_FEATURE feature, bool flag=true ){
        bp::override func_disableFeature = this->get_override( "disableFeature" );
        func_disableFeature( feature, flag );
    }

    virtual void draw2DImage( ::irr::video::ITexture const * texture, ::irr::core::vector2d< int > const * corners, ::irr::core::rect< int > const & sourceRect, ::irr::core::rect< int > const * clipRect, ::irr::video::SColor const * const colors, bool useAlphaChannelOfTexture ) {
        if( bp::override func_draw2DImage = this->get_override( "draw2DImage" ) )
            func_draw2DImage( boost::python::ptr(texture), boost::python::ptr(corners), boost::ref(sourceRect), boost::python::ptr(clipRect), colors, useAlphaChannelOfTexture );
        else{
            this->irr::video::IVideoDriver::draw2DImage( boost::python::ptr(texture), boost::python::ptr(corners), boost::ref(sourceRect), boost::python::ptr(clipRect), colors, useAlphaChannelOfTexture );
        }
    }
    
    void default_draw2DImage( ::irr::video::ITexture const * texture, ::irr::core::vector2d< int > const * corners, ::irr::core::rect< int > const & sourceRect, ::irr::core::rect< int > const * clipRect, ::irr::video::SColor const * const colors, bool useAlphaChannelOfTexture ) {
        irr::video::IVideoDriver::draw2DImage( boost::python::ptr(texture), boost::python::ptr(corners), boost::ref(sourceRect), boost::python::ptr(clipRect), colors, useAlphaChannelOfTexture );
    }

    virtual void draw2DImage( ::irr::video::ITexture const * texture, ::irr::core::vector2d< int > const & destPos ){
        bp::override func_draw2DImage = this->get_override( "draw2DImage" );
        func_draw2DImage( boost::python::ptr(texture), boost::ref(destPos) );
    }

    virtual void draw2DImage( ::irr::video::ITexture const * texture, ::irr::core::vector2d< int > const & destPos, ::irr::core::rect< int > const & sourceRect, ::irr::core::rect< int > const * clipRect=0, ::irr::video::SColor color=irr::video::SColor(255u, 255u, 255u, 255u), bool useAlphaChannelOfTexture=false ){
        bp::override func_draw2DImage = this->get_override( "draw2DImage" );
        func_draw2DImage( boost::python::ptr(texture), boost::ref(destPos), boost::ref(sourceRect), boost::python::ptr(clipRect), color, useAlphaChannelOfTexture );
    }

    virtual void draw2DImage( ::irr::video::ITexture const * texture, ::irr::core::rect< int > const & destRect, ::irr::core::rect< int > const & sourceRect, ::irr::core::rect< int > const * clipRect=0, ::irr::video::SColor const * const colors=0, bool useAlphaChannelOfTexture=false ){
        bp::override func_draw2DImage = this->get_override( "draw2DImage" );
        func_draw2DImage( boost::python::ptr(texture), boost::ref(destRect), boost::ref(sourceRect), boost::python::ptr(clipRect), colors, useAlphaChannelOfTexture );
    }

    virtual void draw2DImageBatch( ::irr::video::ITexture const * texture, ::irr::core::vector2d< int > const & pos, ::irr::core::array< irr::core::rect< int >, irr::core::irrAllocator< irr::core::rect< int > > > const & sourceRects, ::irr::core::array< int, irr::core::irrAllocator< int > > const & indices, ::irr::s32 kerningWidth=0, ::irr::core::rect< int > const * clipRect=0, ::irr::video::SColor color=irr::video::SColor(255u, 255u, 255u, 255u), bool useAlphaChannelOfTexture=false ){
        bp::override func_draw2DImageBatch = this->get_override( "draw2DImageBatch" );
        func_draw2DImageBatch( boost::python::ptr(texture), boost::ref(pos), boost::ref(sourceRects), boost::ref(indices), kerningWidth, boost::python::ptr(clipRect), color, useAlphaChannelOfTexture );
    }

    virtual void draw2DImageBatch( ::irr::video::ITexture const * texture, ::irr::core::array< irr::core::vector2d< int >, irr::core::irrAllocator< irr::core::vector2d< int > > > const & positions, ::irr::core::array< irr::core::rect< int >, irr::core::irrAllocator< irr::core::rect< int > > > const & sourceRects, ::irr::core::rect< int > const * clipRect=0, ::irr::video::SColor color=irr::video::SColor(255u, 255u, 255u, 255u), bool useAlphaChannelOfTexture=false ){
        bp::override func_draw2DImageBatch = this->get_override( "draw2DImageBatch" );
        func_draw2DImageBatch( boost::python::ptr(texture), boost::ref(positions), boost::ref(sourceRects), boost::python::ptr(clipRect), color, useAlphaChannelOfTexture );
    }

    virtual void draw2DLine( ::irr::core::vector2d< int > const & start, ::irr::core::vector2d< int > const & end, ::irr::video::SColor color=irr::video::SColor(255u, 255u, 255u, 255u) ){
        bp::override func_draw2DLine = this->get_override( "draw2DLine" );
        func_draw2DLine( boost::ref(start), boost::ref(end), color );
    }

    virtual void draw2DPolygon( ::irr::core::vector2d< int > center, ::irr::f32 radius, ::irr::video::SColor color=irr::video::SColor(100u, 255u, 255u, 255u), ::irr::s32 vertexCount=10 ){
        bp::override func_draw2DPolygon = this->get_override( "draw2DPolygon" );
        func_draw2DPolygon( center, radius, color, vertexCount );
    }

    virtual void draw2DRectangle( ::irr::video::SColor color, ::irr::core::rect< int > const & pos, ::irr::core::rect< int > const * clip=0 ){
        bp::override func_draw2DRectangle = this->get_override( "draw2DRectangle" );
        func_draw2DRectangle( color, boost::ref(pos), boost::python::ptr(clip) );
    }

    virtual void draw2DRectangle( ::irr::core::rect< int > const & pos, ::irr::video::SColor colorLeftUp, ::irr::video::SColor colorRightUp, ::irr::video::SColor colorLeftDown, ::irr::video::SColor colorRightDown, ::irr::core::rect< int > const * clip=0 ){
        bp::override func_draw2DRectangle = this->get_override( "draw2DRectangle" );
        func_draw2DRectangle( boost::ref(pos), colorLeftUp, colorRightUp, colorLeftDown, colorRightDown, boost::python::ptr(clip) );
    }

    virtual void draw2DRectangleOutline( ::irr::core::recti const & pos, ::irr::video::SColor color=irr::video::SColor(255u, 255u, 255u, 255u) ){
        bp::override func_draw2DRectangleOutline = this->get_override( "draw2DRectangleOutline" );
        func_draw2DRectangleOutline( boost::ref(pos), color );
    }

    virtual void draw2DVertexPrimitiveList( void const * vertices, ::irr::u32 vertexCount, void const * indexList, ::irr::u32 primCount, ::irr::video::E_VERTEX_TYPE vType=::irr::video::EVT_STANDARD, ::irr::scene::E_PRIMITIVE_TYPE pType=::irr::scene::EPT_TRIANGLES, ::irr::video::E_INDEX_TYPE iType=::irr::video::EIT_16BIT ){
        bp::override func_draw2DVertexPrimitiveList = this->get_override( "draw2DVertexPrimitiveList" );
        func_draw2DVertexPrimitiveList( vertices, vertexCount, indexList, primCount, vType, pType, iType );
    }

    virtual void draw3DBox( ::irr::core::aabbox3d< float > const & box, ::irr::video::SColor color=irr::video::SColor(255u, 255u, 255u, 255u) ){
        bp::override func_draw3DBox = this->get_override( "draw3DBox" );
        func_draw3DBox( boost::ref(box), color );
    }

    virtual void draw3DLine( ::irr::core::vector3df const & start, ::irr::core::vector3df const & end, ::irr::video::SColor color=irr::video::SColor(255u, 255u, 255u, 255u) ){
        bp::override func_draw3DLine = this->get_override( "draw3DLine" );
        func_draw3DLine( boost::ref(start), boost::ref(end), color );
    }

    virtual void draw3DTriangle( ::irr::core::triangle3df const & triangle, ::irr::video::SColor color=irr::video::SColor(255u, 255u, 255u, 255u) ){
        bp::override func_draw3DTriangle = this->get_override( "draw3DTriangle" );
        func_draw3DTriangle( boost::ref(triangle), color );
    }

    virtual void drawMeshBuffer( ::irr::scene::IMeshBuffer const * mb ){
        bp::override func_drawMeshBuffer = this->get_override( "drawMeshBuffer" );
        func_drawMeshBuffer( boost::python::ptr(mb) );
    }

    virtual void drawPixel( ::irr::u32 x, ::irr::u32 y, ::irr::video::SColor const & color ){
        bp::override func_drawPixel = this->get_override( "drawPixel" );
        func_drawPixel( x, y, boost::ref(color) );
    }

    virtual void drawStencilShadow( bool clearStencilBuffer=false, ::irr::video::SColor leftUpEdge=irr::video::SColor(255u, 0u, 0u, 0u), ::irr::video::SColor rightUpEdge=irr::video::SColor(255u, 0u, 0u, 0u), ::irr::video::SColor leftDownEdge=irr::video::SColor(255u, 0u, 0u, 0u), ::irr::video::SColor rightDownEdge=irr::video::SColor(255u, 0u, 0u, 0u) ){
        bp::override func_drawStencilShadow = this->get_override( "drawStencilShadow" );
        func_drawStencilShadow( clearStencilBuffer, leftUpEdge, rightUpEdge, leftDownEdge, rightDownEdge );
    }

    virtual void drawStencilShadowVolume( ::irr::core::vector3df const * triangles, ::irr::s32 count, bool zfail=true ){
        bp::override func_drawStencilShadowVolume = this->get_override( "drawStencilShadowVolume" );
        func_drawStencilShadowVolume( boost::python::ptr(triangles), count, zfail );
    }

    virtual void drawVertexPrimitiveList( void const * vertices, ::irr::u32 vertexCount, void const * indexList, ::irr::u32 primCount, ::irr::video::E_VERTEX_TYPE vType=::irr::video::EVT_STANDARD, ::irr::scene::E_PRIMITIVE_TYPE pType=::irr::scene::EPT_TRIANGLES, ::irr::video::E_INDEX_TYPE iType=::irr::video::EIT_16BIT ){
        bp::override func_drawVertexPrimitiveList = this->get_override( "drawVertexPrimitiveList" );
        func_drawVertexPrimitiveList( vertices, vertexCount, indexList, primCount, vType, pType, iType );
    }

    virtual void enableClipPlane( ::irr::u32 index, bool enable ){
        bp::override func_enableClipPlane = this->get_override( "enableClipPlane" );
        func_enableClipPlane( index, enable );
    }

    virtual void enableMaterial2D( bool enable=true ){
        bp::override func_enableMaterial2D = this->get_override( "enableMaterial2D" );
        func_enableMaterial2D( enable );
    }

    virtual bool endScene(  ){
        bp::override func_endScene = this->get_override( "endScene" );
        return func_endScene(  );
    }

    virtual void fillMaterialStructureFromAttributes( ::irr::video::SMaterial & outMaterial, ::irr::io::IAttributes * attributes ){
        bp::override func_fillMaterialStructureFromAttributes = this->get_override( "fillMaterialStructureFromAttributes" );
        func_fillMaterialStructureFromAttributes( boost::ref(outMaterial), boost::python::ptr(attributes) );
    }

    virtual ::irr::video::ITexture * findTexture( ::irr::io::path const & filename ){
        bp::override func_findTexture = this->get_override( "findTexture" );
        return func_findTexture( boost::ref(filename) );
    }

    virtual ::irr::video::ECOLOR_FORMAT getColorFormat(  ) const {
        bp::override func_getColorFormat = this->get_override( "getColorFormat" );
        return func_getColorFormat(  );
    }

    virtual ::irr::core::dimension2d< unsigned int > const & getCurrentRenderTargetSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::video::E_DRIVER_TYPE getDriverType(  ) const {
        bp::override func_getDriverType = this->get_override( "getDriverType" );
        return func_getDriverType(  );
    }

    virtual ::irr::video::SLight const & getDynamicLight( ::irr::u32 idx ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getDynamicLightCount(  ) const {
        bp::override func_getDynamicLightCount = this->get_override( "getDynamicLightCount" );
        return func_getDynamicLightCount(  );
    }

    virtual ::irr::video::SExposedVideoData const & getExposedVideoData(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::s32 getFPS(  ) const {
        bp::override func_getFPS = this->get_override( "getFPS" );
        return func_getFPS(  );
    }

    virtual void getFog( ::irr::video::SColor & color, ::irr::video::E_FOG_TYPE & fogType, ::irr::f32 & start, ::irr::f32 & end, ::irr::f32 & density, bool & pixelFog, bool & rangeFog ){
        bp::override func_getFog = this->get_override( "getFog" );
        func_getFog( boost::ref(color), fogType, start, end, density, pixelFog, rangeFog );
    }

    virtual ::irr::video::IGPUProgrammingServices * getGPUProgrammingServices(  ){
        bp::override func_getGPUProgrammingServices = this->get_override( "getGPUProgrammingServices" );
        return func_getGPUProgrammingServices(  );
    }

    virtual ::irr::video::IImageLoader * getImageLoader( ::irr::u32 n ){
        bp::override func_getImageLoader = this->get_override( "getImageLoader" );
        return func_getImageLoader( n );
    }

    virtual ::irr::u32 getImageLoaderCount(  ) const {
        bp::override func_getImageLoaderCount = this->get_override( "getImageLoaderCount" );
        return func_getImageLoaderCount(  );
    }

    virtual ::irr::video::IImageWriter * getImageWriter( ::irr::u32 n ){
        bp::override func_getImageWriter = this->get_override( "getImageWriter" );
        return func_getImageWriter( n );
    }

    virtual ::irr::u32 getImageWriterCount(  ) const {
        bp::override func_getImageWriterCount = this->get_override( "getImageWriterCount" );
        return func_getImageWriterCount(  );
    }

    virtual ::irr::video::SMaterial & getMaterial2D(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::video::IMaterialRenderer * getMaterialRenderer( ::irr::u32 idx ){
        bp::override func_getMaterialRenderer = this->get_override( "getMaterialRenderer" );
        return func_getMaterialRenderer( idx );
    }

    virtual ::irr::u32 getMaterialRendererCount(  ) const {
        bp::override func_getMaterialRendererCount = this->get_override( "getMaterialRendererCount" );
        return func_getMaterialRendererCount(  );
    }

    virtual ::irr::c8 const * getMaterialRendererName( ::irr::u32 idx ) const {
        bp::override func_getMaterialRendererName = this->get_override( "getMaterialRendererName" );
        return func_getMaterialRendererName( idx );
    }

    virtual ::irr::core::dimension2du getMaxTextureSize(  ) const {
        bp::override func_getMaxTextureSize = this->get_override( "getMaxTextureSize" );
        return func_getMaxTextureSize(  );
    }

    virtual ::irr::u32 getMaximalDynamicLightAmount(  ) const {
        bp::override func_getMaximalDynamicLightAmount = this->get_override( "getMaximalDynamicLightAmount" );
        return func_getMaximalDynamicLightAmount(  );
    }

    virtual ::irr::u32 getMaximalPrimitiveCount(  ) const {
        bp::override func_getMaximalPrimitiveCount = this->get_override( "getMaximalPrimitiveCount" );
        return func_getMaximalPrimitiveCount(  );
    }

    virtual ::irr::scene::IMeshManipulator * getMeshManipulator(  ){
        bp::override func_getMeshManipulator = this->get_override( "getMeshManipulator" );
        return func_getMeshManipulator(  );
    }

    virtual wchar_t const * getName(  ) const {
        bp::override func_getName = this->get_override( "getName" );
        return func_getName(  );
    }

    virtual ::irr::video::SOverrideMaterial & getOverrideMaterial(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getPrimitiveCountDrawn( ::irr::u32 mode=0 ) const {
        bp::override func_getPrimitiveCountDrawn = this->get_override( "getPrimitiveCountDrawn" );
        return func_getPrimitiveCountDrawn( mode );
    }

    virtual ::irr::core::dimension2d< unsigned int > const & getScreenSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::video::ITexture * getTexture( ::irr::io::path const & filename ){
        bp::override func_getTexture = this->get_override( "getTexture" );
        return func_getTexture( boost::ref(filename) );
    }

    virtual ::irr::video::ITexture * getTexture( ::irr::io::IReadFile * file ){
        bp::override func_getTexture = this->get_override( "getTexture" );
        return func_getTexture( boost::python::ptr(file) );
    }

    virtual ::irr::video::ITexture * getTextureByIndex( ::irr::u32 index ){
        bp::override func_getTextureByIndex = this->get_override( "getTextureByIndex" );
        return func_getTextureByIndex( index );
    }

    virtual ::irr::u32 getTextureCount(  ) const {
        bp::override func_getTextureCount = this->get_override( "getTextureCount" );
        return func_getTextureCount(  );
    }

    virtual bool getTextureCreationFlag( ::irr::video::E_TEXTURE_CREATION_FLAG flag ) const {
        bp::override func_getTextureCreationFlag = this->get_override( "getTextureCreationFlag" );
        return func_getTextureCreationFlag( flag );
    }

    virtual ::irr::core::matrix4 const & getTransform( ::irr::video::E_TRANSFORMATION_STATE state ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::stringc getVendorInfo(  ){
        bp::override func_getVendorInfo = this->get_override( "getVendorInfo" );
        return func_getVendorInfo(  );
    }

    virtual ::irr::core::rect< int > const & getViewPort(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual void makeColorKeyTexture( ::irr::video::ITexture * texture, ::irr::video::SColor color, bool zeroTexels=false ) const {
        bp::override func_makeColorKeyTexture = this->get_override( "makeColorKeyTexture" );
        func_makeColorKeyTexture( boost::python::ptr(texture), color, zeroTexels );
    }

    virtual void makeColorKeyTexture( ::irr::video::ITexture * texture, ::irr::core::vector2d< int > colorKeyPixelPos, bool zeroTexels=false ) const {
        bp::override func_makeColorKeyTexture = this->get_override( "makeColorKeyTexture" );
        func_makeColorKeyTexture( boost::python::ptr(texture), colorKeyPixelPos, zeroTexels );
    }

    virtual void makeNormalMapTexture( ::irr::video::ITexture * texture, ::irr::f32 amplitude=1.0e+0f ) const {
        bp::override func_makeNormalMapTexture = this->get_override( "makeNormalMapTexture" );
        func_makeNormalMapTexture( boost::python::ptr(texture), amplitude );
    }

    virtual void mydraw2DImageBatch( ::irr::video::ITexture const * texture, ::irr::core::array< irr::core::myposition, irr::core::irrAllocator< irr::core::myposition > > const & positions, ::irr::core::array< irr::core::rect< int >, irr::core::irrAllocator< irr::core::rect< int > > > const & sourceRects, ::irr::core::rect< int > const * clipRect, ::irr::video::SColor color, bool useAlphaChannelOfTexture ) {
        if( bp::override func_mydraw2DImageBatch = this->get_override( "mydraw2DImageBatch" ) )
            func_mydraw2DImageBatch( boost::python::ptr(texture), boost::ref(positions), boost::ref(sourceRects), boost::python::ptr(clipRect), color, useAlphaChannelOfTexture );
        else{
            this->irr::video::IVideoDriver::mydraw2DImageBatch( boost::python::ptr(texture), boost::ref(positions), boost::ref(sourceRects), boost::python::ptr(clipRect), color, useAlphaChannelOfTexture );
        }
    }
    
    void default_mydraw2DImageBatch( ::irr::video::ITexture const * texture, ::irr::core::array< irr::core::myposition, irr::core::irrAllocator< irr::core::myposition > > const & positions, ::irr::core::array< irr::core::rect< int >, irr::core::irrAllocator< irr::core::rect< int > > > const & sourceRects, ::irr::core::rect< int > const * clipRect, ::irr::video::SColor color, bool useAlphaChannelOfTexture ) {
        irr::video::IVideoDriver::mydraw2DImageBatch( boost::python::ptr(texture), boost::ref(positions), boost::ref(sourceRects), boost::python::ptr(clipRect), color, useAlphaChannelOfTexture );
    }

    virtual bool queryFeature( ::irr::video::E_VIDEO_DRIVER_FEATURE feature ) const {
        bp::override func_queryFeature = this->get_override( "queryFeature" );
        return func_queryFeature( feature );
    }

    virtual void removeAllHardwareBuffers(  ){
        bp::override func_removeAllHardwareBuffers = this->get_override( "removeAllHardwareBuffers" );
        func_removeAllHardwareBuffers(  );
    }

    virtual void removeAllTextures(  ){
        bp::override func_removeAllTextures = this->get_override( "removeAllTextures" );
        func_removeAllTextures(  );
    }

    virtual void removeHardwareBuffer( ::irr::scene::IMeshBuffer const * mb ){
        bp::override func_removeHardwareBuffer = this->get_override( "removeHardwareBuffer" );
        func_removeHardwareBuffer( boost::python::ptr(mb) );
    }

    virtual void removeTexture( ::irr::video::ITexture * texture ){
        bp::override func_removeTexture = this->get_override( "removeTexture" );
        func_removeTexture( boost::python::ptr(texture) );
    }

    virtual void renameTexture( ::irr::video::ITexture * texture, ::irr::io::path const & newName ){
        bp::override func_renameTexture = this->get_override( "renameTexture" );
        func_renameTexture( boost::python::ptr(texture), boost::ref(newName) );
    }

    virtual void setAllowZWriteOnTransparent( bool flag ){
        bp::override func_setAllowZWriteOnTransparent = this->get_override( "setAllowZWriteOnTransparent" );
        func_setAllowZWriteOnTransparent( flag );
    }

    virtual void setAmbientLight( ::irr::video::SColorf const & color ){
        bp::override func_setAmbientLight = this->get_override( "setAmbientLight" );
        func_setAmbientLight( boost::ref(color) );
    }

    virtual bool setClipPlane( ::irr::u32 index, ::irr::core::plane3df const & plane, bool enable=false ){
        bp::override func_setClipPlane = this->get_override( "setClipPlane" );
        return func_setClipPlane( index, boost::ref(plane), enable );
    }

    virtual void setFog( ::irr::video::SColor color=irr::video::SColor(0u, 255u, 255u, 255u), ::irr::video::E_FOG_TYPE fogType=::irr::video::EFT_FOG_LINEAR, ::irr::f32 start=5.0e+1f, ::irr::f32 end=1.0e+2f, ::irr::f32 density=9.99999977648258209228515625e-3f, bool pixelFog=false, bool rangeFog=false ){
        bp::override func_setFog = this->get_override( "setFog" );
        func_setFog( color, fogType, start, end, density, pixelFog, rangeFog );
    }

    virtual void setMaterial( ::irr::video::SMaterial const & material ){
        bp::override func_setMaterial = this->get_override( "setMaterial" );
        func_setMaterial( boost::ref(material) );
    }

    virtual void setMaterialRendererName( ::irr::s32 idx, ::irr::c8 const * name ){
        bp::override func_setMaterialRendererName = this->get_override( "setMaterialRendererName" );
        func_setMaterialRendererName( idx, name );
    }

    virtual void setMinHardwareBufferVertexCount( ::irr::u32 count ){
        bp::override func_setMinHardwareBufferVertexCount = this->get_override( "setMinHardwareBufferVertexCount" );
        func_setMinHardwareBufferVertexCount( count );
    }

    virtual bool setRenderTarget( ::irr::video::ITexture * texture, bool clearBackBuffer=true, bool clearZBuffer=true, ::irr::video::SColor color=irr::video::SColor(0u, 0u, 0u, 0u) ){
        bp::override func_setRenderTarget = this->get_override( "setRenderTarget" );
        return func_setRenderTarget( boost::python::ptr(texture), clearBackBuffer, clearZBuffer, color );
    }

    virtual bool setRenderTarget( ::irr::video::E_RENDER_TARGET target, bool clearTarget=true, bool clearZBuffer=true, ::irr::video::SColor color=irr::video::SColor(0u, 0u, 0u, 0u) ){
        bp::override func_setRenderTarget = this->get_override( "setRenderTarget" );
        return func_setRenderTarget( target, clearTarget, clearZBuffer, color );
    }

    virtual bool setRenderTarget( ::irr::core::array< irr::video::IRenderTarget, irr::core::irrAllocator< irr::video::IRenderTarget > > const & texture, bool clearBackBuffer=true, bool clearZBuffer=true, ::irr::video::SColor color=irr::video::SColor(0u, 0u, 0u, 0u) ){
        bp::override func_setRenderTarget = this->get_override( "setRenderTarget" );
        return func_setRenderTarget( boost::ref(texture), clearBackBuffer, clearZBuffer, color );
    }

    virtual void setTextureCreationFlag( ::irr::video::E_TEXTURE_CREATION_FLAG flag, bool enabled=true ){
        bp::override func_setTextureCreationFlag = this->get_override( "setTextureCreationFlag" );
        func_setTextureCreationFlag( flag, enabled );
    }

    virtual void setTransform( ::irr::video::E_TRANSFORMATION_STATE state, ::irr::core::matrix4 const & mat ){
        bp::override func_setTransform = this->get_override( "setTransform" );
        func_setTransform( state, boost::ref(mat) );
    }

    virtual void setViewPort( ::irr::core::rect< int > const & area ){
        bp::override func_setViewPort = this->get_override( "setViewPort" );
        func_setViewPort( boost::ref(area) );
    }

    virtual void turnLightOn( ::irr::s32 lightIndex, bool turnOn ){
        bp::override func_turnLightOn = this->get_override( "turnLightOn" );
        func_turnLightOn( lightIndex, turnOn );
    }

    virtual bool writeImageToFile( ::irr::video::IImage * image, ::irr::io::path const & filename, ::irr::u32 param=0 ){
        bp::override func_writeImageToFile = this->get_override( "writeImageToFile" );
        return func_writeImageToFile( boost::python::ptr(image), boost::ref(filename), param );
    }

    virtual bool writeImageToFile( ::irr::video::IImage * image, ::irr::io::IWriteFile * file, ::irr::u32 param=0 ){
        bp::override func_writeImageToFile = this->get_override( "writeImageToFile" );
        return func_writeImageToFile( boost::python::ptr(image), boost::python::ptr(file), param );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IFileSystem_wrapper : irr::io::IFileSystem, bp::wrapper< irr::io::IFileSystem > {

    IFileSystem_wrapper()
    : irr::io::IFileSystem()
      , bp::wrapper< irr::io::IFileSystem >(){
        // null constructor
        
    }

    virtual void addArchiveLoader( ::irr::io::IArchiveLoader * loader ){
        bp::override func_addArchiveLoader = this->get_override( "addArchiveLoader" );
        func_addArchiveLoader( boost::python::ptr(loader) );
    }

    virtual bool addFileArchive( ::irr::io::path const & filename, bool ignoreCase=true, bool ignorePaths=true, ::irr::io::E_FILE_ARCHIVE_TYPE archiveType=::irr::io::EFAT_UNKNOWN, ::irr::core::stringc const & password="" ){
        bp::override func_addFileArchive = this->get_override( "addFileArchive" );
        return func_addFileArchive( boost::ref(filename), ignoreCase, ignorePaths, archiveType, boost::ref(password) );
    }

    virtual bool addFolderFileArchive( ::irr::c8 const * filename, bool ignoreCase=true, bool ignorePaths=true ) {
        if( bp::override func_addFolderFileArchive = this->get_override( "addFolderFileArchive" ) )
            return func_addFolderFileArchive( filename, ignoreCase, ignorePaths );
        else{
            return this->irr::io::IFileSystem::addFolderFileArchive( filename, ignoreCase, ignorePaths );
        }
    }
    
    bool default_addFolderFileArchive( ::irr::c8 const * filename, bool ignoreCase=true, bool ignorePaths=true ) {
        return irr::io::IFileSystem::addFolderFileArchive( filename, ignoreCase, ignorePaths );
    }

    virtual bool addPakFileArchive( ::irr::c8 const * filename, bool ignoreCase=true, bool ignorePaths=true ) {
        if( bp::override func_addPakFileArchive = this->get_override( "addPakFileArchive" ) )
            return func_addPakFileArchive( filename, ignoreCase, ignorePaths );
        else{
            return this->irr::io::IFileSystem::addPakFileArchive( filename, ignoreCase, ignorePaths );
        }
    }
    
    bool default_addPakFileArchive( ::irr::c8 const * filename, bool ignoreCase=true, bool ignorePaths=true ) {
        return irr::io::IFileSystem::addPakFileArchive( filename, ignoreCase, ignorePaths );
    }

    virtual bool addZipFileArchive( ::irr::c8 const * filename, bool ignoreCase=true, bool ignorePaths=true ) {
        if( bp::override func_addZipFileArchive = this->get_override( "addZipFileArchive" ) )
            return func_addZipFileArchive( filename, ignoreCase, ignorePaths );
        else{
            return this->irr::io::IFileSystem::addZipFileArchive( filename, ignoreCase, ignorePaths );
        }
    }
    
    bool default_addZipFileArchive( ::irr::c8 const * filename, bool ignoreCase=true, bool ignorePaths=true ) {
        return irr::io::IFileSystem::addZipFileArchive( filename, ignoreCase, ignorePaths );
    }

    virtual bool changeWorkingDirectoryTo( ::irr::io::path const & newDirectory ){
        bp::override func_changeWorkingDirectoryTo = this->get_override( "changeWorkingDirectoryTo" );
        return func_changeWorkingDirectoryTo( boost::ref(newDirectory) );
    }

    virtual ::irr::io::IReadFile * createAndOpenFile( ::irr::io::path const & filename ){
        bp::override func_createAndOpenFile = this->get_override( "createAndOpenFile" );
        return func_createAndOpenFile( boost::ref(filename) );
    }

    virtual ::irr::io::IWriteFile * createAndWriteFile( ::irr::io::path const & filename, bool append=false ){
        bp::override func_createAndWriteFile = this->get_override( "createAndWriteFile" );
        return func_createAndWriteFile( boost::ref(filename), append );
    }

    virtual ::irr::io::IAttributes * createEmptyAttributes( ::irr::video::IVideoDriver * driver=0 ){
        bp::override func_createEmptyAttributes = this->get_override( "createEmptyAttributes" );
        return func_createEmptyAttributes( boost::python::ptr(driver) );
    }

    virtual ::irr::io::IFileList * createEmptyFileList( ::irr::io::path const & path, bool ignoreCase, bool ignorePaths ){
        bp::override func_createEmptyFileList = this->get_override( "createEmptyFileList" );
        return func_createEmptyFileList( boost::ref(path), ignoreCase, ignorePaths );
    }

    virtual ::irr::io::IFileList * createFileList(  ){
        bp::override func_createFileList = this->get_override( "createFileList" );
        return func_createFileList(  );
    }

    virtual ::irr::io::IReadFile * createLimitReadFile( ::irr::io::path const & fileName, ::irr::io::IReadFile * alreadyOpenedFile, long int pos, long int areaSize ){
        bp::override func_createLimitReadFile = this->get_override( "createLimitReadFile" );
        return func_createLimitReadFile( boost::ref(fileName), boost::python::ptr(alreadyOpenedFile), pos, areaSize );
    }

    virtual ::irr::io::IReadFile * createMemoryReadFile( void * memory, ::irr::s32 len, ::irr::io::path const & fileName, bool deleteMemoryWhenDropped=false ){
        bp::override func_createMemoryReadFile = this->get_override( "createMemoryReadFile" );
        return func_createMemoryReadFile( memory, len, boost::ref(fileName), deleteMemoryWhenDropped );
    }

    virtual ::irr::io::IWriteFile * createMemoryWriteFile( void * memory, ::irr::s32 len, ::irr::io::path const & fileName, bool deleteMemoryWhenDropped=false ){
        bp::override func_createMemoryWriteFile = this->get_override( "createMemoryWriteFile" );
        return func_createMemoryWriteFile( memory, len, boost::ref(fileName), deleteMemoryWhenDropped );
    }

    virtual ::irr::io::IXMLReader * createXMLReader( ::irr::io::path const & filename ){
        bp::override func_createXMLReader = this->get_override( "createXMLReader" );
        return func_createXMLReader( boost::ref(filename) );
    }

    virtual ::irr::io::IXMLReader * createXMLReader( ::irr::io::IReadFile * file ){
        bp::override func_createXMLReader = this->get_override( "createXMLReader" );
        return func_createXMLReader( boost::python::ptr(file) );
    }

    virtual ::irr::io::IXMLReaderUTF8 * createXMLReaderUTF8( ::irr::io::path const & filename ){
        bp::override func_createXMLReaderUTF8 = this->get_override( "createXMLReaderUTF8" );
        return func_createXMLReaderUTF8( boost::ref(filename) );
    }

    virtual ::irr::io::IXMLReaderUTF8 * createXMLReaderUTF8( ::irr::io::IReadFile * file ){
        bp::override func_createXMLReaderUTF8 = this->get_override( "createXMLReaderUTF8" );
        return func_createXMLReaderUTF8( boost::python::ptr(file) );
    }

    virtual ::irr::io::IXMLWriter * createXMLWriter( ::irr::io::path const & filename ){
        bp::override func_createXMLWriter = this->get_override( "createXMLWriter" );
        return func_createXMLWriter( boost::ref(filename) );
    }

    virtual ::irr::io::IXMLWriter * createXMLWriter( ::irr::io::IWriteFile * file ){
        bp::override func_createXMLWriter = this->get_override( "createXMLWriter" );
        return func_createXMLWriter( boost::python::ptr(file) );
    }

    virtual bool existFile( ::irr::io::path const & filename ) const {
        bp::override func_existFile = this->get_override( "existFile" );
        return func_existFile( boost::ref(filename) );
    }

    virtual ::irr::io::path & flattenFilename( ::irr::io::path & directory, ::irr::io::path const & root="/" ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::io::path getAbsolutePath( ::irr::io::path const & filename ) const {
        bp::override func_getAbsolutePath = this->get_override( "getAbsolutePath" );
        return func_getAbsolutePath( boost::ref(filename) );
    }

    virtual ::irr::io::IFileArchive * getFileArchive( ::irr::u32 index ){
        bp::override func_getFileArchive = this->get_override( "getFileArchive" );
        return func_getFileArchive( index );
    }

    virtual ::irr::u32 getFileArchiveCount(  ) const {
        bp::override func_getFileArchiveCount = this->get_override( "getFileArchiveCount" );
        return func_getFileArchiveCount(  );
    }

    virtual ::irr::io::path getFileBasename( ::irr::io::path const & filename, bool keepExtension=true ) const {
        bp::override func_getFileBasename = this->get_override( "getFileBasename" );
        return func_getFileBasename( boost::ref(filename), keepExtension );
    }

    virtual ::irr::io::path getFileDir( ::irr::io::path const & filename ) const {
        bp::override func_getFileDir = this->get_override( "getFileDir" );
        return func_getFileDir( boost::ref(filename) );
    }

    virtual ::irr::io::path const & getWorkingDirectory(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual bool moveFileArchive( ::irr::u32 sourceIndex, ::irr::s32 relative ){
        bp::override func_moveFileArchive = this->get_override( "moveFileArchive" );
        return func_moveFileArchive( sourceIndex, relative );
    }

    virtual bool removeFileArchive( ::irr::u32 index ){
        bp::override func_removeFileArchive = this->get_override( "removeFileArchive" );
        return func_removeFileArchive( index );
    }

    virtual bool removeFileArchive( ::irr::io::path const & filename ){
        bp::override func_removeFileArchive = this->get_override( "removeFileArchive" );
        return func_removeFileArchive( boost::ref(filename) );
    }

    virtual ::irr::io::EFileSystemType setFileListSystem( ::irr::io::EFileSystemType listType ){
        bp::override func_setFileListSystem = this->get_override( "setFileListSystem" );
        return func_setFileListSystem( listType );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IReadFile_wrapper : irr::io::IReadFile, bp::wrapper< irr::io::IReadFile > {

    IReadFile_wrapper()
    : irr::io::IReadFile()
      , bp::wrapper< irr::io::IReadFile >(){
        // null constructor
        
    }

    virtual ::irr::io::path const & getFileName(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual long int getPos(  ) const {
        bp::override func_getPos = this->get_override( "getPos" );
        return func_getPos(  );
    }

    virtual long int getSize(  ) const {
        bp::override func_getSize = this->get_override( "getSize" );
        return func_getSize(  );
    }

    virtual ::irr::s32 read( void * buffer, ::irr::u32 sizeToRead ){
        bp::override func_read = this->get_override( "read" );
        return func_read( buffer, sizeToRead );
    }

    virtual bool seek( long int finalPos, bool relativeMovement=false ){
        bp::override func_seek = this->get_override( "seek" );
        return func_seek( finalPos, relativeMovement );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IWriteFile_wrapper : irr::io::IWriteFile, bp::wrapper< irr::io::IWriteFile > {

    IWriteFile_wrapper()
    : irr::io::IWriteFile()
      , bp::wrapper< irr::io::IWriteFile >(){
        // null constructor
        
    }

    virtual ::irr::io::path const & getFileName(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual long int getPos(  ) const {
        bp::override func_getPos = this->get_override( "getPos" );
        return func_getPos(  );
    }

    virtual bool seek( long int finalPos, bool relativeMovement=false ){
        bp::override func_seek = this->get_override( "seek" );
        return func_seek( finalPos, relativeMovement );
    }

    virtual ::irr::s32 write( void const * buffer, ::irr::u32 sizeToWrite ){
        bp::override func_write = this->get_override( "write" );
        return func_write( buffer, sizeToWrite );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IXMLWriter_wrapper : irr::io::IXMLWriter, bp::wrapper< irr::io::IXMLWriter > {

    IXMLWriter_wrapper()
    : irr::io::IXMLWriter()
      , bp::wrapper< irr::io::IXMLWriter >(){
        // null constructor
        
    }

    virtual void writeClosingTag( wchar_t const * name ){
        bp::override func_writeClosingTag = this->get_override( "writeClosingTag" );
        func_writeClosingTag( name );
    }

    virtual void writeComment( wchar_t const * comment ){
        bp::override func_writeComment = this->get_override( "writeComment" );
        func_writeComment( comment );
    }

    virtual void writeElement( wchar_t const * name, bool empty=false, wchar_t const * attr1Name=0, wchar_t const * attr1Value=0, wchar_t const * attr2Name=0, wchar_t const * attr2Value=0, wchar_t const * attr3Name=0, wchar_t const * attr3Value=0, wchar_t const * attr4Name=0, wchar_t const * attr4Value=0, wchar_t const * attr5Name=0, wchar_t const * attr5Value=0 ){
        bp::override func_writeElement = this->get_override( "writeElement" );
        func_writeElement( name, empty, attr1Name, attr1Value, attr2Name, attr2Value, attr3Name, attr3Value, attr4Name, attr4Value, attr5Name, attr5Value );
    }

    virtual void writeElement( wchar_t const * name, bool empty, ::irr::core::array< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >, irr::core::irrAllocator< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > > > & names, ::irr::core::array< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >, irr::core::irrAllocator< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > > > & values ){
        bp::override func_writeElement = this->get_override( "writeElement" );
        func_writeElement( name, empty, boost::ref(names), boost::ref(values) );
    }

    virtual void writeLineBreak(  ){
        bp::override func_writeLineBreak = this->get_override( "writeLineBreak" );
        func_writeLineBreak(  );
    }

    virtual void writeText( wchar_t const * text ){
        bp::override func_writeText = this->get_override( "writeText" );
        func_writeText( text );
    }

    virtual void writeXMLHeader(  ){
        bp::override func_writeXMLHeader = this->get_override( "writeXMLHeader" );
        func_writeXMLHeader(  );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct SNamedPath_wrapper : irr::io::SNamedPath, bp::wrapper< irr::io::SNamedPath > {

    SNamedPath_wrapper(irr::io::SNamedPath const & arg )
    : irr::io::SNamedPath( arg )
      , bp::wrapper< irr::io::SNamedPath >(){
        // copy constructor
        
    }

    SNamedPath_wrapper( )
    : irr::io::SNamedPath( )
      , bp::wrapper< irr::io::SNamedPath >(){
        // null constructor
    
    }

    SNamedPath_wrapper(::irr::io::path const & p )
    : irr::io::SNamedPath( boost::ref(p) )
      , bp::wrapper< irr::io::SNamedPath >(){
        // constructor
    
    }

    ::irr::io::path PathToName( ::irr::io::path const & p ) const {
        return irr::io::SNamedPath::PathToName( boost::ref(p) );
    }

};

struct IMeshBuffer_wrapper : irr::scene::IMeshBuffer, bp::wrapper< irr::scene::IMeshBuffer > {

    IMeshBuffer_wrapper()
    : irr::scene::IMeshBuffer()
      , bp::wrapper< irr::scene::IMeshBuffer >(){
        // null constructor
        
    }

    virtual void append( void const * const vertices, ::irr::u32 numVertices, ::irr::u16 const * const indices, ::irr::u32 numIndices ){
        bp::override func_append = this->get_override( "append" );
        func_append( vertices, numVertices, indices, numIndices );
    }

    virtual void append( ::irr::scene::IMeshBuffer const * const other ){
        bp::override func_append = this->get_override( "append" );
        func_append( other );
    }

    virtual ::irr::core::aabbox3df const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getChangedID_Index(  ) const {
        bp::override func_getChangedID_Index = this->get_override( "getChangedID_Index" );
        return func_getChangedID_Index(  );
    }

    virtual ::irr::u32 getChangedID_Vertex(  ) const {
        bp::override func_getChangedID_Vertex = this->get_override( "getChangedID_Vertex" );
        return func_getChangedID_Vertex(  );
    }

    virtual ::irr::scene::E_HARDWARE_MAPPING getHardwareMappingHint_Index(  ) const {
        bp::override func_getHardwareMappingHint_Index = this->get_override( "getHardwareMappingHint_Index" );
        return func_getHardwareMappingHint_Index(  );
    }

    virtual ::irr::scene::E_HARDWARE_MAPPING getHardwareMappingHint_Vertex(  ) const {
        bp::override func_getHardwareMappingHint_Vertex = this->get_override( "getHardwareMappingHint_Vertex" );
        return func_getHardwareMappingHint_Vertex(  );
    }

    virtual ::irr::u32 getIndexCount(  ) const {
        bp::override func_getIndexCount = this->get_override( "getIndexCount" );
        return func_getIndexCount(  );
    }

    virtual ::irr::video::E_INDEX_TYPE getIndexType(  ) const {
        bp::override func_getIndexType = this->get_override( "getIndexType" );
        return func_getIndexType(  );
    }

    virtual ::irr::u16 const * getIndices(  ) const {
        bp::override func_getIndices = this->get_override( "getIndices" );
        return func_getIndices(  );
    }

    virtual ::irr::u16 * getIndices(  ){
        bp::override func_getIndices = this->get_override( "getIndices" );
        return func_getIndices(  );
    }

    virtual ::irr::video::SMaterial & getMaterial(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::video::SMaterial const & getMaterial(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector3df const & getNormal( ::irr::u32 i ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector3df & getNormal( ::irr::u32 i ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector3df const & getPosition( ::irr::u32 i ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector3df & getPosition( ::irr::u32 i ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector2df const & getTCoords( ::irr::u32 i ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector2df & getTCoords( ::irr::u32 i ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getVertexCount(  ) const {
        bp::override func_getVertexCount = this->get_override( "getVertexCount" );
        return func_getVertexCount(  );
    }

    virtual ::irr::video::E_VERTEX_TYPE getVertexType(  ) const {
        bp::override func_getVertexType = this->get_override( "getVertexType" );
        return func_getVertexType(  );
    }

    virtual void const * getVertices(  ) const {
        bp::override func_getVertices = this->get_override( "getVertices" );
        return func_getVertices(  );
    }

    virtual void * getVertices(  ){
        bp::override func_getVertices = this->get_override( "getVertices" );
        return func_getVertices(  );
    }

    virtual void recalculateBoundingBox(  ){
        bp::override func_recalculateBoundingBox = this->get_override( "recalculateBoundingBox" );
        func_recalculateBoundingBox(  );
    }

    virtual void setBoundingBox( ::irr::core::aabbox3df const & box ){
        bp::override func_setBoundingBox = this->get_override( "setBoundingBox" );
        func_setBoundingBox( boost::ref(box) );
    }

    virtual void setDirty( ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ){
        bp::override func_setDirty = this->get_override( "setDirty" );
        func_setDirty( buffer );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING newMappingHint, ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ){
        bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" );
        func_setHardwareMappingHint( newMappingHint, buffer );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IDynamicMeshBuffer_wrapper : irr::scene::IDynamicMeshBuffer, bp::wrapper< irr::scene::IDynamicMeshBuffer > {

    IDynamicMeshBuffer_wrapper()
    : irr::scene::IDynamicMeshBuffer()
      , bp::wrapper< irr::scene::IDynamicMeshBuffer >(){
        // null constructor
        
    }

    virtual void append( void const * const vertices, ::irr::u32 numVertices, ::irr::u16 const * const indices, ::irr::u32 numIndices ) {
        if( bp::override func_append = this->get_override( "append" ) )
            func_append( vertices, numVertices, indices, numIndices );
        else{
            this->irr::scene::IDynamicMeshBuffer::append( vertices, numVertices, indices, numIndices );
        }
    }
    
    void default_append( void const * const vertices, ::irr::u32 numVertices, ::irr::u16 const * const indices, ::irr::u32 numIndices ) {
        irr::scene::IDynamicMeshBuffer::append( vertices, numVertices, indices, numIndices );
    }

    virtual void append( ::irr::scene::IMeshBuffer const * const other ) {
        if( bp::override func_append = this->get_override( "append" ) )
            func_append( other );
        else{
            this->irr::scene::IDynamicMeshBuffer::append( other );
        }
    }
    
    void default_append( ::irr::scene::IMeshBuffer const * const other ) {
        irr::scene::IDynamicMeshBuffer::append( other );
    }

    virtual ::irr::core::aabbox3df const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getChangedID_Index(  ) const  {
        if( bp::override func_getChangedID_Index = this->get_override( "getChangedID_Index" ) )
            return func_getChangedID_Index(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getChangedID_Index(  );
        }
    }
    
    ::irr::u32 default_getChangedID_Index(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getChangedID_Index( );
    }

    virtual ::irr::u32 getChangedID_Vertex(  ) const  {
        if( bp::override func_getChangedID_Vertex = this->get_override( "getChangedID_Vertex" ) )
            return func_getChangedID_Vertex(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getChangedID_Vertex(  );
        }
    }
    
    ::irr::u32 default_getChangedID_Vertex(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getChangedID_Vertex( );
    }

    virtual ::irr::scene::E_HARDWARE_MAPPING getHardwareMappingHint_Index(  ) const  {
        if( bp::override func_getHardwareMappingHint_Index = this->get_override( "getHardwareMappingHint_Index" ) )
            return func_getHardwareMappingHint_Index(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getHardwareMappingHint_Index(  );
        }
    }
    
    ::irr::scene::E_HARDWARE_MAPPING default_getHardwareMappingHint_Index(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getHardwareMappingHint_Index( );
    }

    virtual ::irr::scene::E_HARDWARE_MAPPING getHardwareMappingHint_Vertex(  ) const  {
        if( bp::override func_getHardwareMappingHint_Vertex = this->get_override( "getHardwareMappingHint_Vertex" ) )
            return func_getHardwareMappingHint_Vertex(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getHardwareMappingHint_Vertex(  );
        }
    }
    
    ::irr::scene::E_HARDWARE_MAPPING default_getHardwareMappingHint_Vertex(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getHardwareMappingHint_Vertex( );
    }

    virtual ::irr::scene::IIndexBuffer & getIndexBuffer(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getIndexCount(  ) const  {
        if( bp::override func_getIndexCount = this->get_override( "getIndexCount" ) )
            return func_getIndexCount(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getIndexCount(  );
        }
    }
    
    ::irr::u32 default_getIndexCount(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getIndexCount( );
    }

    virtual ::irr::video::E_INDEX_TYPE getIndexType(  ) const  {
        if( bp::override func_getIndexType = this->get_override( "getIndexType" ) )
            return func_getIndexType(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getIndexType(  );
        }
    }
    
    ::irr::video::E_INDEX_TYPE default_getIndexType(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getIndexType( );
    }

    virtual ::irr::u16 const * getIndices(  ) const  {
        if( bp::override func_getIndices = this->get_override( "getIndices" ) )
            return func_getIndices(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getIndices(  );
        }
    }
    
    ::irr::u16 const * default_getIndices(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getIndices( );
    }

    virtual ::irr::u16 * getIndices(  ) {
        if( bp::override func_getIndices = this->get_override( "getIndices" ) )
            return func_getIndices(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getIndices(  );
        }
    }
    
    ::irr::u16 * default_getIndices(  ) {
        return irr::scene::IDynamicMeshBuffer::getIndices( );
    }

    virtual ::irr::video::SMaterial & getMaterial(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::video::SMaterial const & getMaterial(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::scene::IVertexBuffer & getVertexBuffer(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getVertexCount(  ) const  {
        if( bp::override func_getVertexCount = this->get_override( "getVertexCount" ) )
            return func_getVertexCount(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getVertexCount(  );
        }
    }
    
    ::irr::u32 default_getVertexCount(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getVertexCount( );
    }

    virtual ::irr::video::E_VERTEX_TYPE getVertexType(  ) const  {
        if( bp::override func_getVertexType = this->get_override( "getVertexType" ) )
            return func_getVertexType(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getVertexType(  );
        }
    }
    
    ::irr::video::E_VERTEX_TYPE default_getVertexType(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getVertexType( );
    }

    virtual void const * getVertices(  ) const  {
        if( bp::override func_getVertices = this->get_override( "getVertices" ) )
            return func_getVertices(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getVertices(  );
        }
    }
    
    void const * default_getVertices(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getVertices( );
    }

    virtual void * getVertices(  ) {
        if( bp::override func_getVertices = this->get_override( "getVertices" ) )
            return func_getVertices(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getVertices(  );
        }
    }
    
    void * default_getVertices(  ) {
        return irr::scene::IDynamicMeshBuffer::getVertices( );
    }

    virtual void recalculateBoundingBox(  ){
        bp::override func_recalculateBoundingBox = this->get_override( "recalculateBoundingBox" );
        func_recalculateBoundingBox(  );
    }

    virtual void setBoundingBox( ::irr::core::aabbox3df const & box ){
        bp::override func_setBoundingBox = this->get_override( "setBoundingBox" );
        func_setBoundingBox( boost::ref(box) );
    }

    virtual void setDirty( ::irr::scene::E_BUFFER_TYPE Buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        if( bp::override func_setDirty = this->get_override( "setDirty" ) )
            func_setDirty( Buffer );
        else{
            this->irr::scene::IDynamicMeshBuffer::setDirty( Buffer );
        }
    }
    
    void default_setDirty( ::irr::scene::E_BUFFER_TYPE Buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        irr::scene::IDynamicMeshBuffer::setDirty( Buffer );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING NewMappingHint, ::irr::scene::E_BUFFER_TYPE Buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        if( bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" ) )
            func_setHardwareMappingHint( NewMappingHint, Buffer );
        else{
            this->irr::scene::IDynamicMeshBuffer::setHardwareMappingHint( NewMappingHint, Buffer );
        }
    }
    
    void default_setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING NewMappingHint, ::irr::scene::E_BUFFER_TYPE Buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        irr::scene::IDynamicMeshBuffer::setHardwareMappingHint( NewMappingHint, Buffer );
    }

    virtual void setIndexBuffer( ::irr::scene::IIndexBuffer * indexBuffer ){
        bp::override func_setIndexBuffer = this->get_override( "setIndexBuffer" );
        func_setIndexBuffer( boost::python::ptr(indexBuffer) );
    }

    virtual void setVertexBuffer( ::irr::scene::IVertexBuffer * vertexBuffer ){
        bp::override func_setVertexBuffer = this->get_override( "setVertexBuffer" );
        func_setVertexBuffer( boost::python::ptr(vertexBuffer) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct CDynamicMeshBuffer_wrapper : irr::scene::CDynamicMeshBuffer, bp::wrapper< irr::scene::CDynamicMeshBuffer > {

    CDynamicMeshBuffer_wrapper(irr::scene::CDynamicMeshBuffer const & arg )
    : irr::scene::CDynamicMeshBuffer( arg )
      , bp::wrapper< irr::scene::CDynamicMeshBuffer >(){
        // copy constructor
        
    }

    CDynamicMeshBuffer_wrapper(::irr::video::E_VERTEX_TYPE vertexType, ::irr::video::E_INDEX_TYPE indexType )
    : irr::scene::CDynamicMeshBuffer( vertexType, indexType )
      , bp::wrapper< irr::scene::CDynamicMeshBuffer >(){
        // constructor
    
    }

    virtual void recalculateBoundingBox(  ) {
        if( bp::override func_recalculateBoundingBox = this->get_override( "recalculateBoundingBox" ) )
            func_recalculateBoundingBox(  );
        else{
            this->irr::scene::CDynamicMeshBuffer::recalculateBoundingBox(  );
        }
    }
    
    void default_recalculateBoundingBox(  ) {
        irr::scene::CDynamicMeshBuffer::recalculateBoundingBox( );
    }

    virtual void setBoundingBox( ::irr::core::aabbox3df const & box ) {
        if( bp::override func_setBoundingBox = this->get_override( "setBoundingBox" ) )
            func_setBoundingBox( boost::ref(box) );
        else{
            this->irr::scene::CDynamicMeshBuffer::setBoundingBox( boost::ref(box) );
        }
    }
    
    void default_setBoundingBox( ::irr::core::aabbox3df const & box ) {
        irr::scene::CDynamicMeshBuffer::setBoundingBox( boost::ref(box) );
    }

    virtual void setIndexBuffer( ::irr::scene::IIndexBuffer * newIndexBuffer ) {
        if( bp::override func_setIndexBuffer = this->get_override( "setIndexBuffer" ) )
            func_setIndexBuffer( boost::python::ptr(newIndexBuffer) );
        else{
            this->irr::scene::CDynamicMeshBuffer::setIndexBuffer( boost::python::ptr(newIndexBuffer) );
        }
    }
    
    void default_setIndexBuffer( ::irr::scene::IIndexBuffer * newIndexBuffer ) {
        irr::scene::CDynamicMeshBuffer::setIndexBuffer( boost::python::ptr(newIndexBuffer) );
    }

    virtual void setVertexBuffer( ::irr::scene::IVertexBuffer * newVertexBuffer ) {
        if( bp::override func_setVertexBuffer = this->get_override( "setVertexBuffer" ) )
            func_setVertexBuffer( boost::python::ptr(newVertexBuffer) );
        else{
            this->irr::scene::CDynamicMeshBuffer::setVertexBuffer( boost::python::ptr(newVertexBuffer) );
        }
    }
    
    void default_setVertexBuffer( ::irr::scene::IVertexBuffer * newVertexBuffer ) {
        irr::scene::CDynamicMeshBuffer::setVertexBuffer( boost::python::ptr(newVertexBuffer) );
    }

    virtual void append( void const * const vertices, ::irr::u32 numVertices, ::irr::u16 const * const indices, ::irr::u32 numIndices ) {
        if( bp::override func_append = this->get_override( "append" ) )
            func_append( vertices, numVertices, indices, numIndices );
        else{
            this->irr::scene::IDynamicMeshBuffer::append( vertices, numVertices, indices, numIndices );
        }
    }
    
    void default_append( void const * const vertices, ::irr::u32 numVertices, ::irr::u16 const * const indices, ::irr::u32 numIndices ) {
        irr::scene::IDynamicMeshBuffer::append( vertices, numVertices, indices, numIndices );
    }

    virtual void append( ::irr::scene::IMeshBuffer const * const other ) {
        if( bp::override func_append = this->get_override( "append" ) )
            func_append( other );
        else{
            this->irr::scene::IDynamicMeshBuffer::append( other );
        }
    }
    
    void default_append( ::irr::scene::IMeshBuffer const * const other ) {
        irr::scene::IDynamicMeshBuffer::append( other );
    }

    virtual ::irr::u32 getChangedID_Index(  ) const  {
        if( bp::override func_getChangedID_Index = this->get_override( "getChangedID_Index" ) )
            return func_getChangedID_Index(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getChangedID_Index(  );
        }
    }
    
    ::irr::u32 default_getChangedID_Index(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getChangedID_Index( );
    }

    virtual ::irr::u32 getChangedID_Vertex(  ) const  {
        if( bp::override func_getChangedID_Vertex = this->get_override( "getChangedID_Vertex" ) )
            return func_getChangedID_Vertex(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getChangedID_Vertex(  );
        }
    }
    
    ::irr::u32 default_getChangedID_Vertex(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getChangedID_Vertex( );
    }

    virtual ::irr::scene::E_HARDWARE_MAPPING getHardwareMappingHint_Index(  ) const  {
        if( bp::override func_getHardwareMappingHint_Index = this->get_override( "getHardwareMappingHint_Index" ) )
            return func_getHardwareMappingHint_Index(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getHardwareMappingHint_Index(  );
        }
    }
    
    ::irr::scene::E_HARDWARE_MAPPING default_getHardwareMappingHint_Index(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getHardwareMappingHint_Index( );
    }

    virtual ::irr::scene::E_HARDWARE_MAPPING getHardwareMappingHint_Vertex(  ) const  {
        if( bp::override func_getHardwareMappingHint_Vertex = this->get_override( "getHardwareMappingHint_Vertex" ) )
            return func_getHardwareMappingHint_Vertex(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getHardwareMappingHint_Vertex(  );
        }
    }
    
    ::irr::scene::E_HARDWARE_MAPPING default_getHardwareMappingHint_Vertex(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getHardwareMappingHint_Vertex( );
    }

    virtual ::irr::u32 getIndexCount(  ) const  {
        if( bp::override func_getIndexCount = this->get_override( "getIndexCount" ) )
            return func_getIndexCount(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getIndexCount(  );
        }
    }
    
    ::irr::u32 default_getIndexCount(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getIndexCount( );
    }

    virtual ::irr::video::E_INDEX_TYPE getIndexType(  ) const  {
        if( bp::override func_getIndexType = this->get_override( "getIndexType" ) )
            return func_getIndexType(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getIndexType(  );
        }
    }
    
    ::irr::video::E_INDEX_TYPE default_getIndexType(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getIndexType( );
    }

    virtual ::irr::u16 const * getIndices(  ) const  {
        if( bp::override func_getIndices = this->get_override( "getIndices" ) )
            return func_getIndices(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getIndices(  );
        }
    }
    
    ::irr::u16 const * default_getIndices(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getIndices( );
    }

    virtual ::irr::u16 * getIndices(  ) {
        if( bp::override func_getIndices = this->get_override( "getIndices" ) )
            return func_getIndices(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getIndices(  );
        }
    }
    
    ::irr::u16 * default_getIndices(  ) {
        return irr::scene::IDynamicMeshBuffer::getIndices( );
    }

    virtual ::irr::u32 getVertexCount(  ) const  {
        if( bp::override func_getVertexCount = this->get_override( "getVertexCount" ) )
            return func_getVertexCount(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getVertexCount(  );
        }
    }
    
    ::irr::u32 default_getVertexCount(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getVertexCount( );
    }

    virtual ::irr::video::E_VERTEX_TYPE getVertexType(  ) const  {
        if( bp::override func_getVertexType = this->get_override( "getVertexType" ) )
            return func_getVertexType(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getVertexType(  );
        }
    }
    
    ::irr::video::E_VERTEX_TYPE default_getVertexType(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getVertexType( );
    }

    virtual void const * getVertices(  ) const  {
        if( bp::override func_getVertices = this->get_override( "getVertices" ) )
            return func_getVertices(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getVertices(  );
        }
    }
    
    void const * default_getVertices(  ) const  {
        return irr::scene::IDynamicMeshBuffer::getVertices( );
    }

    virtual void * getVertices(  ) {
        if( bp::override func_getVertices = this->get_override( "getVertices" ) )
            return func_getVertices(  );
        else{
            return this->irr::scene::IDynamicMeshBuffer::getVertices(  );
        }
    }
    
    void * default_getVertices(  ) {
        return irr::scene::IDynamicMeshBuffer::getVertices( );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setDirty( ::irr::scene::E_BUFFER_TYPE Buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        if( bp::override func_setDirty = this->get_override( "setDirty" ) )
            func_setDirty( Buffer );
        else{
            this->irr::scene::IDynamicMeshBuffer::setDirty( Buffer );
        }
    }
    
    void default_setDirty( ::irr::scene::E_BUFFER_TYPE Buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        irr::scene::IDynamicMeshBuffer::setDirty( Buffer );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING NewMappingHint, ::irr::scene::E_BUFFER_TYPE Buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        if( bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" ) )
            func_setHardwareMappingHint( NewMappingHint, Buffer );
        else{
            this->irr::scene::IDynamicMeshBuffer::setHardwareMappingHint( NewMappingHint, Buffer );
        }
    }
    
    void default_setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING NewMappingHint, ::irr::scene::E_BUFFER_TYPE Buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        irr::scene::IDynamicMeshBuffer::setHardwareMappingHint( NewMappingHint, Buffer );
    }

};

struct IIndexBuffer_wrapper : irr::scene::IIndexBuffer, bp::wrapper< irr::scene::IIndexBuffer > {

    IIndexBuffer_wrapper()
    : irr::scene::IIndexBuffer()
      , bp::wrapper< irr::scene::IIndexBuffer >(){
        // null constructor
        
    }

    virtual ::irr::u32 allocated_size(  ) const {
        bp::override func_allocated_size = this->get_override( "allocated_size" );
        return func_allocated_size(  );
    }

    virtual ::irr::u32 getChangedID(  ) const {
        bp::override func_getChangedID = this->get_override( "getChangedID" );
        return func_getChangedID(  );
    }

    virtual void * getData(  ){
        bp::override func_getData = this->get_override( "getData" );
        return func_getData(  );
    }

    virtual ::irr::scene::E_HARDWARE_MAPPING getHardwareMappingHint(  ) const {
        bp::override func_getHardwareMappingHint = this->get_override( "getHardwareMappingHint" );
        return func_getHardwareMappingHint(  );
    }

    virtual ::irr::u32 getLast(  ){
        bp::override func_getLast = this->get_override( "getLast" );
        return func_getLast(  );
    }

    virtual ::irr::video::E_INDEX_TYPE getType(  ) const {
        bp::override func_getType = this->get_override( "getType" );
        return func_getType(  );
    }

    virtual ::irr::u32 operator[]( ::irr::u32 index ) const {
        bp::override func___getitem__ = this->get_override( "__getitem__" );
        return func___getitem__( index );
    }

    virtual void * pointer(  ){
        bp::override func_pointer = this->get_override( "pointer" );
        return func_pointer(  );
    }

    virtual void push_back( ::irr::u32 const & element ){
        bp::override func_push_back = this->get_override( "push_back" );
        func_push_back( element );
    }

    virtual void reallocate( ::irr::u32 new_size ){
        bp::override func_reallocate = this->get_override( "reallocate" );
        func_reallocate( new_size );
    }

    virtual void setDirty(  ){
        bp::override func_setDirty = this->get_override( "setDirty" );
        func_setDirty(  );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING NewMappingHint ){
        bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" );
        func_setHardwareMappingHint( NewMappingHint );
    }

    virtual void setType( ::irr::video::E_INDEX_TYPE IndexType ){
        bp::override func_setType = this->get_override( "setType" );
        func_setType( IndexType );
    }

    virtual void setValue( ::irr::u32 index, ::irr::u32 value ){
        bp::override func_setValue = this->get_override( "setValue" );
        func_setValue( index, value );
    }

    virtual void set_used( ::irr::u32 usedNow ){
        bp::override func_set_used = this->get_override( "set_used" );
        func_set_used( usedNow );
    }

    virtual ::irr::u32 size(  ) const {
        bp::override func_size = this->get_override( "size" );
        return func_size(  );
    }

    virtual ::irr::u32 stride(  ) const {
        bp::override func_stride = this->get_override( "stride" );
        return func_stride(  );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct CIndexBuffer_wrapper : irr::scene::CIndexBuffer, bp::wrapper< irr::scene::CIndexBuffer > {

    CIndexBuffer_wrapper(irr::scene::CIndexBuffer const & arg )
    : irr::scene::CIndexBuffer( arg )
      , bp::wrapper< irr::scene::CIndexBuffer >(){
        // copy constructor
        
    }

    CIndexBuffer_wrapper(::irr::video::E_INDEX_TYPE IndexType )
    : irr::scene::CIndexBuffer( IndexType )
      , bp::wrapper< irr::scene::CIndexBuffer >(){
        // constructor
    
    }

    CIndexBuffer_wrapper(::irr::scene::IIndexBuffer const & IndexBufferCopy )
    : irr::scene::CIndexBuffer( boost::ref(IndexBufferCopy) )
      , bp::wrapper< irr::scene::CIndexBuffer >(){
        // constructor
    
    }

    virtual ::irr::u32 allocated_size(  ) const  {
        if( bp::override func_allocated_size = this->get_override( "allocated_size" ) )
            return func_allocated_size(  );
        else{
            return this->irr::scene::CIndexBuffer::allocated_size(  );
        }
    }
    
    ::irr::u32 default_allocated_size(  ) const  {
        return irr::scene::CIndexBuffer::allocated_size( );
    }

    virtual ::irr::u32 getChangedID(  ) const  {
        if( bp::override func_getChangedID = this->get_override( "getChangedID" ) )
            return func_getChangedID(  );
        else{
            return this->irr::scene::CIndexBuffer::getChangedID(  );
        }
    }
    
    ::irr::u32 default_getChangedID(  ) const  {
        return irr::scene::CIndexBuffer::getChangedID( );
    }

    virtual void * getData(  ) {
        if( bp::override func_getData = this->get_override( "getData" ) )
            return func_getData(  );
        else{
            return this->irr::scene::CIndexBuffer::getData(  );
        }
    }
    
    void * default_getData(  ) {
        return irr::scene::CIndexBuffer::getData( );
    }

    virtual ::irr::scene::E_HARDWARE_MAPPING getHardwareMappingHint(  ) const  {
        if( bp::override func_getHardwareMappingHint = this->get_override( "getHardwareMappingHint" ) )
            return func_getHardwareMappingHint(  );
        else{
            return this->irr::scene::CIndexBuffer::getHardwareMappingHint(  );
        }
    }
    
    ::irr::scene::E_HARDWARE_MAPPING default_getHardwareMappingHint(  ) const  {
        return irr::scene::CIndexBuffer::getHardwareMappingHint( );
    }

    virtual ::irr::u32 getLast(  ) {
        if( bp::override func_getLast = this->get_override( "getLast" ) )
            return func_getLast(  );
        else{
            return this->irr::scene::CIndexBuffer::getLast(  );
        }
    }
    
    ::irr::u32 default_getLast(  ) {
        return irr::scene::CIndexBuffer::getLast( );
    }

    virtual ::irr::video::E_INDEX_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::CIndexBuffer::getType(  );
        }
    }
    
    ::irr::video::E_INDEX_TYPE default_getType(  ) const  {
        return irr::scene::CIndexBuffer::getType( );
    }

    virtual ::irr::u32 operator[]( ::irr::u32 index ) const  {
        if( bp::override func___getitem__ = this->get_override( "__getitem__" ) )
            return func___getitem__( index );
        else{
            return this->irr::scene::CIndexBuffer::operator[]( index );
        }
    }
    
    ::irr::u32 default___getitem__( ::irr::u32 index ) const  {
        return irr::scene::CIndexBuffer::operator[]( index );
    }

    virtual void * pointer(  ) {
        if( bp::override func_pointer = this->get_override( "pointer" ) )
            return func_pointer(  );
        else{
            return this->irr::scene::CIndexBuffer::pointer(  );
        }
    }
    
    void * default_pointer(  ) {
        return irr::scene::CIndexBuffer::pointer( );
    }

    virtual void push_back( ::irr::u32 const & element ) {
        if( bp::override func_push_back = this->get_override( "push_back" ) )
            func_push_back( element );
        else{
            this->irr::scene::CIndexBuffer::push_back( element );
        }
    }
    
    void default_push_back( ::irr::u32 const & element ) {
        irr::scene::CIndexBuffer::push_back( element );
    }

    virtual void reallocate( ::irr::u32 new_size ) {
        if( bp::override func_reallocate = this->get_override( "reallocate" ) )
            func_reallocate( new_size );
        else{
            this->irr::scene::CIndexBuffer::reallocate( new_size );
        }
    }
    
    void default_reallocate( ::irr::u32 new_size ) {
        irr::scene::CIndexBuffer::reallocate( new_size );
    }

    virtual void setDirty(  ) {
        if( bp::override func_setDirty = this->get_override( "setDirty" ) )
            func_setDirty(  );
        else{
            this->irr::scene::CIndexBuffer::setDirty(  );
        }
    }
    
    void default_setDirty(  ) {
        irr::scene::CIndexBuffer::setDirty( );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING NewMappingHint ) {
        if( bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" ) )
            func_setHardwareMappingHint( NewMappingHint );
        else{
            this->irr::scene::CIndexBuffer::setHardwareMappingHint( NewMappingHint );
        }
    }
    
    void default_setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING NewMappingHint ) {
        irr::scene::CIndexBuffer::setHardwareMappingHint( NewMappingHint );
    }

    virtual void setType( ::irr::video::E_INDEX_TYPE IndexType ) {
        if( bp::override func_setType = this->get_override( "setType" ) )
            func_setType( IndexType );
        else{
            this->irr::scene::CIndexBuffer::setType( IndexType );
        }
    }
    
    void default_setType( ::irr::video::E_INDEX_TYPE IndexType ) {
        irr::scene::CIndexBuffer::setType( IndexType );
    }

    virtual void setValue( ::irr::u32 index, ::irr::u32 value ) {
        if( bp::override func_setValue = this->get_override( "setValue" ) )
            func_setValue( index, value );
        else{
            this->irr::scene::CIndexBuffer::setValue( index, value );
        }
    }
    
    void default_setValue( ::irr::u32 index, ::irr::u32 value ) {
        irr::scene::CIndexBuffer::setValue( index, value );
    }

    virtual void set_used( ::irr::u32 usedNow ) {
        if( bp::override func_set_used = this->get_override( "set_used" ) )
            func_set_used( usedNow );
        else{
            this->irr::scene::CIndexBuffer::set_used( usedNow );
        }
    }
    
    void default_set_used( ::irr::u32 usedNow ) {
        irr::scene::CIndexBuffer::set_used( usedNow );
    }

    virtual ::irr::u32 size(  ) const  {
        if( bp::override func_size = this->get_override( "size" ) )
            return func_size(  );
        else{
            return this->irr::scene::CIndexBuffer::size(  );
        }
    }
    
    ::irr::u32 default_size(  ) const  {
        return irr::scene::CIndexBuffer::size( );
    }

    virtual ::irr::u32 stride(  ) const  {
        if( bp::override func_stride = this->get_override( "stride" ) )
            return func_stride(  );
        else{
            return this->irr::scene::CIndexBuffer::stride(  );
        }
    }
    
    ::irr::u32 default_stride(  ) const  {
        return irr::scene::CIndexBuffer::stride( );
    }

    static ::irr::scene::CIndexBuffer::IIndexList * get_Indices(irr::scene::CIndexBuffer const & inst ){
        return inst.Indices;
    }
    
    static void set_Indices( irr::scene::CIndexBuffer & inst, ::irr::scene::CIndexBuffer::IIndexList * new_value ){ 
        inst.Indices = new_value;
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IVertexBuffer_wrapper : irr::scene::IVertexBuffer, bp::wrapper< irr::scene::IVertexBuffer > {

    IVertexBuffer_wrapper()
    : irr::scene::IVertexBuffer()
      , bp::wrapper< irr::scene::IVertexBuffer >(){
        // null constructor
        
    }

    virtual ::irr::u32 allocated_size(  ) const {
        bp::override func_allocated_size = this->get_override( "allocated_size" );
        return func_allocated_size(  );
    }

    virtual ::irr::u32 getChangedID(  ) const {
        bp::override func_getChangedID = this->get_override( "getChangedID" );
        return func_getChangedID(  );
    }

    virtual void * getData(  ){
        bp::override func_getData = this->get_override( "getData" );
        return func_getData(  );
    }

    virtual ::irr::scene::E_HARDWARE_MAPPING getHardwareMappingHint(  ) const {
        bp::override func_getHardwareMappingHint = this->get_override( "getHardwareMappingHint" );
        return func_getHardwareMappingHint(  );
    }

    virtual ::irr::video::S3DVertex & getLast(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::video::E_VERTEX_TYPE getType(  ) const {
        bp::override func_getType = this->get_override( "getType" );
        return func_getType(  );
    }

    virtual ::irr::video::S3DVertex & operator[]( ::irr::u32 const index ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::video::S3DVertex * pointer(  ){
        bp::override func_pointer = this->get_override( "pointer" );
        return func_pointer(  );
    }

    virtual void push_back( ::irr::video::S3DVertex const & element ){
        bp::override func_push_back = this->get_override( "push_back" );
        func_push_back( boost::ref(element) );
    }

    virtual void reallocate( ::irr::u32 new_size ){
        bp::override func_reallocate = this->get_override( "reallocate" );
        func_reallocate( new_size );
    }

    virtual void setDirty(  ){
        bp::override func_setDirty = this->get_override( "setDirty" );
        func_setDirty(  );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING NewMappingHint ){
        bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" );
        func_setHardwareMappingHint( NewMappingHint );
    }

    virtual void setType( ::irr::video::E_VERTEX_TYPE vertexType ){
        bp::override func_setType = this->get_override( "setType" );
        func_setType( vertexType );
    }

    virtual void set_used( ::irr::u32 usedNow ){
        bp::override func_set_used = this->get_override( "set_used" );
        func_set_used( usedNow );
    }

    virtual ::irr::u32 size(  ) const {
        bp::override func_size = this->get_override( "size" );
        return func_size(  );
    }

    virtual ::irr::u32 stride(  ) const {
        bp::override func_stride = this->get_override( "stride" );
        return func_stride(  );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct CVertexBuffer_wrapper : irr::scene::CVertexBuffer, bp::wrapper< irr::scene::CVertexBuffer > {

    CVertexBuffer_wrapper(irr::scene::CVertexBuffer const & arg )
    : irr::scene::CVertexBuffer( arg )
      , bp::wrapper< irr::scene::CVertexBuffer >(){
        // copy constructor
        
    }

    CVertexBuffer_wrapper(::irr::video::E_VERTEX_TYPE vertexType )
    : irr::scene::CVertexBuffer( vertexType )
      , bp::wrapper< irr::scene::CVertexBuffer >(){
        // constructor
    
    }

    CVertexBuffer_wrapper(::irr::scene::IVertexBuffer const & VertexBufferCopy )
    : irr::scene::CVertexBuffer( boost::ref(VertexBufferCopy) )
      , bp::wrapper< irr::scene::CVertexBuffer >(){
        // constructor
    
    }

    virtual ::irr::u32 allocated_size(  ) const  {
        if( bp::override func_allocated_size = this->get_override( "allocated_size" ) )
            return func_allocated_size(  );
        else{
            return this->irr::scene::CVertexBuffer::allocated_size(  );
        }
    }
    
    ::irr::u32 default_allocated_size(  ) const  {
        return irr::scene::CVertexBuffer::allocated_size( );
    }

    virtual ::irr::u32 getChangedID(  ) const  {
        if( bp::override func_getChangedID = this->get_override( "getChangedID" ) )
            return func_getChangedID(  );
        else{
            return this->irr::scene::CVertexBuffer::getChangedID(  );
        }
    }
    
    ::irr::u32 default_getChangedID(  ) const  {
        return irr::scene::CVertexBuffer::getChangedID( );
    }

    virtual void * getData(  ) {
        if( bp::override func_getData = this->get_override( "getData" ) )
            return func_getData(  );
        else{
            return this->irr::scene::CVertexBuffer::getData(  );
        }
    }
    
    void * default_getData(  ) {
        return irr::scene::CVertexBuffer::getData( );
    }

    virtual ::irr::scene::E_HARDWARE_MAPPING getHardwareMappingHint(  ) const  {
        if( bp::override func_getHardwareMappingHint = this->get_override( "getHardwareMappingHint" ) )
            return func_getHardwareMappingHint(  );
        else{
            return this->irr::scene::CVertexBuffer::getHardwareMappingHint(  );
        }
    }
    
    ::irr::scene::E_HARDWARE_MAPPING default_getHardwareMappingHint(  ) const  {
        return irr::scene::CVertexBuffer::getHardwareMappingHint( );
    }

    virtual ::irr::video::E_VERTEX_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::CVertexBuffer::getType(  );
        }
    }
    
    ::irr::video::E_VERTEX_TYPE default_getType(  ) const  {
        return irr::scene::CVertexBuffer::getType( );
    }

    virtual ::irr::video::S3DVertex * pointer(  ) {
        if( bp::override func_pointer = this->get_override( "pointer" ) )
            return func_pointer(  );
        else{
            return this->irr::scene::CVertexBuffer::pointer(  );
        }
    }
    
    ::irr::video::S3DVertex * default_pointer(  ) {
        return irr::scene::CVertexBuffer::pointer( );
    }

    virtual void push_back( ::irr::video::S3DVertex const & element ) {
        if( bp::override func_push_back = this->get_override( "push_back" ) )
            func_push_back( boost::ref(element) );
        else{
            this->irr::scene::CVertexBuffer::push_back( boost::ref(element) );
        }
    }
    
    void default_push_back( ::irr::video::S3DVertex const & element ) {
        irr::scene::CVertexBuffer::push_back( boost::ref(element) );
    }

    virtual void reallocate( ::irr::u32 new_size ) {
        if( bp::override func_reallocate = this->get_override( "reallocate" ) )
            func_reallocate( new_size );
        else{
            this->irr::scene::CVertexBuffer::reallocate( new_size );
        }
    }
    
    void default_reallocate( ::irr::u32 new_size ) {
        irr::scene::CVertexBuffer::reallocate( new_size );
    }

    virtual void setDirty(  ) {
        if( bp::override func_setDirty = this->get_override( "setDirty" ) )
            func_setDirty(  );
        else{
            this->irr::scene::CVertexBuffer::setDirty(  );
        }
    }
    
    void default_setDirty(  ) {
        irr::scene::CVertexBuffer::setDirty( );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING NewMappingHint ) {
        if( bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" ) )
            func_setHardwareMappingHint( NewMappingHint );
        else{
            this->irr::scene::CVertexBuffer::setHardwareMappingHint( NewMappingHint );
        }
    }
    
    void default_setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING NewMappingHint ) {
        irr::scene::CVertexBuffer::setHardwareMappingHint( NewMappingHint );
    }

    virtual void setType( ::irr::video::E_VERTEX_TYPE vertexType ) {
        if( bp::override func_setType = this->get_override( "setType" ) )
            func_setType( vertexType );
        else{
            this->irr::scene::CVertexBuffer::setType( vertexType );
        }
    }
    
    void default_setType( ::irr::video::E_VERTEX_TYPE vertexType ) {
        irr::scene::CVertexBuffer::setType( vertexType );
    }

    virtual void set_used( ::irr::u32 usedNow ) {
        if( bp::override func_set_used = this->get_override( "set_used" ) )
            func_set_used( usedNow );
        else{
            this->irr::scene::CVertexBuffer::set_used( usedNow );
        }
    }
    
    void default_set_used( ::irr::u32 usedNow ) {
        irr::scene::CVertexBuffer::set_used( usedNow );
    }

    virtual ::irr::u32 size(  ) const  {
        if( bp::override func_size = this->get_override( "size" ) )
            return func_size(  );
        else{
            return this->irr::scene::CVertexBuffer::size(  );
        }
    }
    
    ::irr::u32 default_size(  ) const  {
        return irr::scene::CVertexBuffer::size( );
    }

    virtual ::irr::u32 stride(  ) const  {
        if( bp::override func_stride = this->get_override( "stride" ) )
            return func_stride(  );
        else{
            return this->irr::scene::CVertexBuffer::stride(  );
        }
    }
    
    ::irr::u32 default_stride(  ) const  {
        return irr::scene::CVertexBuffer::stride( );
    }

    static ::irr::scene::CVertexBuffer::IVertexList * get_Vertices(irr::scene::CVertexBuffer const & inst ){
        return inst.Vertices;
    }
    
    static void set_Vertices( irr::scene::CVertexBuffer & inst, ::irr::scene::CVertexBuffer::IVertexList * new_value ){ 
        inst.Vertices = new_value;
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IMesh_wrapper : irr::scene::IMesh, bp::wrapper< irr::scene::IMesh > {

    IMesh_wrapper()
    : irr::scene::IMesh()
      , bp::wrapper< irr::scene::IMesh >(){
        // null constructor
        
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::u32 nr ) const {
        bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" );
        return func_getMeshBuffer( nr );
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::video::SMaterial const & material ) const {
        bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" );
        return func_getMeshBuffer( boost::ref(material) );
    }

    virtual ::irr::u32 getMeshBufferCount(  ) const {
        bp::override func_getMeshBufferCount = this->get_override( "getMeshBufferCount" );
        return func_getMeshBufferCount(  );
    }

    virtual void setBoundingBox( ::irr::core::aabbox3df const & box ){
        bp::override func_setBoundingBox = this->get_override( "setBoundingBox" );
        func_setBoundingBox( boost::ref(box) );
    }

    virtual void setDirty( ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ){
        bp::override func_setDirty = this->get_override( "setDirty" );
        func_setDirty( buffer );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING newMappingHint, ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ){
        bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" );
        func_setHardwareMappingHint( newMappingHint, buffer );
    }

    virtual void setMaterialFlag( ::irr::video::E_MATERIAL_FLAG flag, bool newvalue ){
        bp::override func_setMaterialFlag = this->get_override( "setMaterialFlag" );
        func_setMaterialFlag( flag, newvalue );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IAnimatedMesh_wrapper : irr::scene::IAnimatedMesh, bp::wrapper< irr::scene::IAnimatedMesh > {

    IAnimatedMesh_wrapper()
    : irr::scene::IAnimatedMesh()
      , bp::wrapper< irr::scene::IAnimatedMesh >(){
        // null constructor
        
    }

    virtual ::irr::u32 getFrameCount(  ) const {
        bp::override func_getFrameCount = this->get_override( "getFrameCount" );
        return func_getFrameCount(  );
    }

    virtual ::irr::scene::IMesh * getMesh( ::irr::s32 frame, ::irr::s32 detailLevel=255, ::irr::s32 startFrameLoop=-0x00000000000000001, ::irr::s32 endFrameLoop=-0x00000000000000001 ){
        bp::override func_getMesh = this->get_override( "getMesh" );
        return func_getMesh( frame, detailLevel, startFrameLoop, endFrameLoop );
    }

    virtual ::irr::scene::E_ANIMATED_MESH_TYPE getMeshType(  ) const  {
        if( bp::override func_getMeshType = this->get_override( "getMeshType" ) )
            return func_getMeshType(  );
        else{
            return this->irr::scene::IAnimatedMesh::getMeshType(  );
        }
    }
    
    ::irr::scene::E_ANIMATED_MESH_TYPE default_getMeshType(  ) const  {
        return irr::scene::IAnimatedMesh::getMeshType( );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::u32 nr ) const {
        bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" );
        return func_getMeshBuffer( nr );
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::video::SMaterial const & material ) const {
        bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" );
        return func_getMeshBuffer( boost::ref(material) );
    }

    virtual ::irr::u32 getMeshBufferCount(  ) const {
        bp::override func_getMeshBufferCount = this->get_override( "getMeshBufferCount" );
        return func_getMeshBufferCount(  );
    }

    virtual void setBoundingBox( ::irr::core::aabbox3df const & box ){
        bp::override func_setBoundingBox = this->get_override( "setBoundingBox" );
        func_setBoundingBox( boost::ref(box) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setDirty( ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ){
        bp::override func_setDirty = this->get_override( "setDirty" );
        func_setDirty( buffer );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING newMappingHint, ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ){
        bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" );
        func_setHardwareMappingHint( newMappingHint, buffer );
    }

    virtual void setMaterialFlag( ::irr::video::E_MATERIAL_FLAG flag, bool newvalue ){
        bp::override func_setMaterialFlag = this->get_override( "setMaterialFlag" );
        func_setMaterialFlag( flag, newvalue );
    }

};

struct IAnimatedMeshMD2_wrapper : irr::scene::IAnimatedMeshMD2, bp::wrapper< irr::scene::IAnimatedMeshMD2 > {

    IAnimatedMeshMD2_wrapper()
    : irr::scene::IAnimatedMeshMD2()
      , bp::wrapper< irr::scene::IAnimatedMeshMD2 >(){
        // null constructor
        
    }

    virtual ::irr::s32 getAnimationCount(  ) const {
        bp::override func_getAnimationCount = this->get_override( "getAnimationCount" );
        return func_getAnimationCount(  );
    }

    virtual ::irr::c8 const * getAnimationName( ::irr::s32 nr ) const {
        bp::override func_getAnimationName = this->get_override( "getAnimationName" );
        return func_getAnimationName( nr );
    }

    virtual void getFrameLoop( ::irr::scene::EMD2_ANIMATION_TYPE l, ::irr::s32 & outBegin, ::irr::s32 & outEnd, ::irr::s32 & outFPS ) const {
        bp::override func_getFrameLoop = this->get_override( "getFrameLoop" );
        func_getFrameLoop( l, outBegin, outEnd, outFPS );
    }

    virtual bool getFrameLoop( ::irr::c8 const * name, ::irr::s32 & outBegin, ::irr::s32 & outEnd, ::irr::s32 & outFPS ) const {
        bp::override func_getFrameLoop = this->get_override( "getFrameLoop" );
        return func_getFrameLoop( name, outBegin, outEnd, outFPS );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getFrameCount(  ) const {
        bp::override func_getFrameCount = this->get_override( "getFrameCount" );
        return func_getFrameCount(  );
    }

    virtual ::irr::scene::IMesh * getMesh( ::irr::s32 frame, ::irr::s32 detailLevel=255, ::irr::s32 startFrameLoop=-0x00000000000000001, ::irr::s32 endFrameLoop=-0x00000000000000001 ){
        bp::override func_getMesh = this->get_override( "getMesh" );
        return func_getMesh( frame, detailLevel, startFrameLoop, endFrameLoop );
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::u32 nr ) const {
        bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" );
        return func_getMeshBuffer( nr );
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::video::SMaterial const & material ) const {
        bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" );
        return func_getMeshBuffer( boost::ref(material) );
    }

    virtual ::irr::u32 getMeshBufferCount(  ) const {
        bp::override func_getMeshBufferCount = this->get_override( "getMeshBufferCount" );
        return func_getMeshBufferCount(  );
    }

    virtual ::irr::scene::E_ANIMATED_MESH_TYPE getMeshType(  ) const  {
        if( bp::override func_getMeshType = this->get_override( "getMeshType" ) )
            return func_getMeshType(  );
        else{
            return this->irr::scene::IAnimatedMesh::getMeshType(  );
        }
    }
    
    ::irr::scene::E_ANIMATED_MESH_TYPE default_getMeshType(  ) const  {
        return irr::scene::IAnimatedMesh::getMeshType( );
    }

    virtual void setBoundingBox( ::irr::core::aabbox3df const & box ){
        bp::override func_setBoundingBox = this->get_override( "setBoundingBox" );
        func_setBoundingBox( boost::ref(box) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setDirty( ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ){
        bp::override func_setDirty = this->get_override( "setDirty" );
        func_setDirty( buffer );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING newMappingHint, ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ){
        bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" );
        func_setHardwareMappingHint( newMappingHint, buffer );
    }

    virtual void setMaterialFlag( ::irr::video::E_MATERIAL_FLAG flag, bool newvalue ){
        bp::override func_setMaterialFlag = this->get_override( "setMaterialFlag" );
        func_setMaterialFlag( flag, newvalue );
    }

};

struct IAnimatedMeshMD3_wrapper : irr::scene::IAnimatedMeshMD3, bp::wrapper< irr::scene::IAnimatedMeshMD3 > {

    IAnimatedMeshMD3_wrapper()
    : irr::scene::IAnimatedMeshMD3()
      , bp::wrapper< irr::scene::IAnimatedMeshMD3 >(){
        // null constructor
        
    }

    virtual ::irr::scene::SMD3Mesh * getOriginalMesh(  ){
        bp::override func_getOriginalMesh = this->get_override( "getOriginalMesh" );
        return func_getOriginalMesh(  );
    }

    virtual ::irr::scene::SMD3QuaternionTagList * getTagList( ::irr::s32 frame, ::irr::s32 detailLevel, ::irr::s32 startFrameLoop, ::irr::s32 endFrameLoop ){
        bp::override func_getTagList = this->get_override( "getTagList" );
        return func_getTagList( frame, detailLevel, startFrameLoop, endFrameLoop );
    }

    virtual void setInterpolationShift( ::irr::u32 shift, ::irr::u32 loopMode ){
        bp::override func_setInterpolationShift = this->get_override( "setInterpolationShift" );
        func_setInterpolationShift( shift, loopMode );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getFrameCount(  ) const {
        bp::override func_getFrameCount = this->get_override( "getFrameCount" );
        return func_getFrameCount(  );
    }

    virtual ::irr::scene::IMesh * getMesh( ::irr::s32 frame, ::irr::s32 detailLevel=255, ::irr::s32 startFrameLoop=-0x00000000000000001, ::irr::s32 endFrameLoop=-0x00000000000000001 ){
        bp::override func_getMesh = this->get_override( "getMesh" );
        return func_getMesh( frame, detailLevel, startFrameLoop, endFrameLoop );
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::u32 nr ) const {
        bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" );
        return func_getMeshBuffer( nr );
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::video::SMaterial const & material ) const {
        bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" );
        return func_getMeshBuffer( boost::ref(material) );
    }

    virtual ::irr::u32 getMeshBufferCount(  ) const {
        bp::override func_getMeshBufferCount = this->get_override( "getMeshBufferCount" );
        return func_getMeshBufferCount(  );
    }

    virtual ::irr::scene::E_ANIMATED_MESH_TYPE getMeshType(  ) const  {
        if( bp::override func_getMeshType = this->get_override( "getMeshType" ) )
            return func_getMeshType(  );
        else{
            return this->irr::scene::IAnimatedMesh::getMeshType(  );
        }
    }
    
    ::irr::scene::E_ANIMATED_MESH_TYPE default_getMeshType(  ) const  {
        return irr::scene::IAnimatedMesh::getMeshType( );
    }

    virtual void setBoundingBox( ::irr::core::aabbox3df const & box ){
        bp::override func_setBoundingBox = this->get_override( "setBoundingBox" );
        func_setBoundingBox( boost::ref(box) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setDirty( ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ){
        bp::override func_setDirty = this->get_override( "setDirty" );
        func_setDirty( buffer );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING newMappingHint, ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ){
        bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" );
        func_setHardwareMappingHint( newMappingHint, buffer );
    }

    virtual void setMaterialFlag( ::irr::video::E_MATERIAL_FLAG flag, bool newvalue ){
        bp::override func_setMaterialFlag = this->get_override( "setMaterialFlag" );
        func_setMaterialFlag( flag, newvalue );
    }

};

struct IAnimationEndCallBack_wrapper : irr::scene::IAnimationEndCallBack, bp::wrapper< irr::scene::IAnimationEndCallBack > {

    IAnimationEndCallBack_wrapper()
    : irr::scene::IAnimationEndCallBack()
      , bp::wrapper< irr::scene::IAnimationEndCallBack >(){
        // null constructor
        
    }

    virtual void OnAnimationEnd( ::irr::scene::IAnimatedMeshSceneNode * node ){
        bp::override func_OnAnimationEnd = this->get_override( "OnAnimationEnd" );
        func_OnAnimationEnd( boost::python::ptr(node) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IAnimatedMeshSceneNode_wrapper : irr::scene::IAnimatedMeshSceneNode, bp::wrapper< irr::scene::IAnimatedMeshSceneNode > {

    IAnimatedMeshSceneNode_wrapper(::irr::scene::ISceneNode * parent, ::irr::scene::ISceneManager * mgr, ::irr::s32 id, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & rotation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & scale=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )
    : irr::scene::IAnimatedMeshSceneNode( boost::python::ptr(parent), boost::python::ptr(mgr), id, boost::ref(position), boost::ref(rotation), boost::ref(scale) )
      , bp::wrapper< irr::scene::IAnimatedMeshSceneNode >(){
        // constructor
    
    }

    virtual ::irr::scene::IShadowVolumeSceneNode * addShadowVolumeSceneNode( ::irr::scene::IMesh const * shadowMesh=0, ::irr::s32 id=-0x00000000000000001, bool zfailmethod=true, ::irr::f32 infinity=1.0e+4f ){
        bp::override func_addShadowVolumeSceneNode = this->get_override( "addShadowVolumeSceneNode" );
        return func_addShadowVolumeSceneNode( boost::python::ptr(shadowMesh), id, zfailmethod, infinity );
    }

    virtual void animateJoints( bool CalculateAbsolutePositions=true ){
        bp::override func_animateJoints = this->get_override( "animateJoints" );
        func_animateJoints( CalculateAbsolutePositions );
    }

    virtual ::irr::scene::ISceneNode * clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ){
        bp::override func_clone = this->get_override( "clone" );
        return func_clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
    }

    virtual ::irr::f32 getAnimationSpeed(  ) const {
        bp::override func_getAnimationSpeed = this->get_override( "getAnimationSpeed" );
        return func_getAnimationSpeed(  );
    }

    virtual ::irr::s32 getEndFrame(  ) const {
        bp::override func_getEndFrame = this->get_override( "getEndFrame" );
        return func_getEndFrame(  );
    }

    virtual ::irr::f32 getFrameNr(  ) const {
        bp::override func_getFrameNr = this->get_override( "getFrameNr" );
        return func_getFrameNr(  );
    }

    virtual ::irr::u32 getJointCount(  ) const {
        bp::override func_getJointCount = this->get_override( "getJointCount" );
        return func_getJointCount(  );
    }

    virtual ::irr::scene::IBoneSceneNode * getJointNode( ::irr::c8 const * jointName ){
        bp::override func_getJointNode = this->get_override( "getJointNode" );
        return func_getJointNode( jointName );
    }

    virtual ::irr::scene::IBoneSceneNode * getJointNode( ::irr::u32 jointID ){
        bp::override func_getJointNode = this->get_override( "getJointNode" );
        return func_getJointNode( jointID );
    }

    virtual ::irr::scene::SMD3QuaternionTag const * getMD3TagTransformation( ::irr::core::stringc const & tagname ){
        bp::override func_getMD3TagTransformation = this->get_override( "getMD3TagTransformation" );
        return func_getMD3TagTransformation( boost::ref(tagname) );
    }

    virtual ::irr::scene::ISceneNode * getMS3DJointNode( ::irr::c8 const * jointName ){
        bp::override func_getMS3DJointNode = this->get_override( "getMS3DJointNode" );
        return func_getMS3DJointNode( jointName );
    }

    virtual ::irr::scene::IAnimatedMesh * getMesh(  ){
        bp::override func_getMesh = this->get_override( "getMesh" );
        return func_getMesh(  );
    }

    virtual ::irr::s32 getStartFrame(  ) const {
        bp::override func_getStartFrame = this->get_override( "getStartFrame" );
        return func_getStartFrame(  );
    }

    virtual ::irr::scene::ISceneNode * getXJointNode( ::irr::c8 const * jointName ){
        bp::override func_getXJointNode = this->get_override( "getXJointNode" );
        return func_getXJointNode( jointName );
    }

    virtual bool isReadOnlyMaterials(  ) const {
        bp::override func_isReadOnlyMaterials = this->get_override( "isReadOnlyMaterials" );
        return func_isReadOnlyMaterials(  );
    }

    virtual void setAnimationEndCallback( ::irr::scene::IAnimationEndCallBack * callback=0 ){
        bp::override func_setAnimationEndCallback = this->get_override( "setAnimationEndCallback" );
        func_setAnimationEndCallback( boost::python::ptr(callback) );
    }

    virtual void setAnimationSpeed( ::irr::f32 framesPerSecond ){
        bp::override func_setAnimationSpeed = this->get_override( "setAnimationSpeed" );
        func_setAnimationSpeed( framesPerSecond );
    }

    virtual void setCurrentFrame( ::irr::f32 frame ){
        bp::override func_setCurrentFrame = this->get_override( "setCurrentFrame" );
        func_setCurrentFrame( frame );
    }

    virtual bool setFrameLoop( ::irr::s32 begin, ::irr::s32 end ){
        bp::override func_setFrameLoop = this->get_override( "setFrameLoop" );
        return func_setFrameLoop( begin, end );
    }

    virtual void setJointMode( ::irr::scene::E_JOINT_UPDATE_ON_RENDER mode ){
        bp::override func_setJointMode = this->get_override( "setJointMode" );
        func_setJointMode( mode );
    }

    virtual void setLoopMode( bool playAnimationLooped ){
        bp::override func_setLoopMode = this->get_override( "setLoopMode" );
        func_setLoopMode( playAnimationLooped );
    }

    virtual bool setMD2Animation( ::irr::scene::EMD2_ANIMATION_TYPE anim ){
        bp::override func_setMD2Animation = this->get_override( "setMD2Animation" );
        return func_setMD2Animation( anim );
    }

    virtual bool setMD2Animation( ::irr::c8 const * animationName ){
        bp::override func_setMD2Animation = this->get_override( "setMD2Animation" );
        return func_setMD2Animation( animationName );
    }

    virtual void setMesh( ::irr::scene::IAnimatedMesh * mesh ){
        bp::override func_setMesh = this->get_override( "setMesh" );
        func_setMesh( boost::python::ptr(mesh) );
    }

    virtual void setReadOnlyMaterials( bool readonly ){
        bp::override func_setReadOnlyMaterials = this->get_override( "setReadOnlyMaterials" );
        func_setReadOnlyMaterials( readonly );
    }

    virtual void setRenderFromIdentity( bool On ){
        bp::override func_setRenderFromIdentity = this->get_override( "setRenderFromIdentity" );
        func_setRenderFromIdentity( On );
    }

    virtual void setTransitionTime( ::irr::f32 Time ){
        bp::override func_setTransitionTime = this->get_override( "setTransitionTime" );
        func_setTransitionTime( Time );
    }

    virtual void OnAnimate( ::irr::u32 timeMs ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( timeMs );
        else{
            this->irr::scene::ISceneNode::OnAnimate( timeMs );
        }
    }
    
    void default_OnAnimate( ::irr::u32 timeMs ) {
        irr::scene::ISceneNode::OnAnimate( timeMs );
    }

    virtual void OnRegisterSceneNode(  ) {
        if( bp::override func_OnRegisterSceneNode = this->get_override( "OnRegisterSceneNode" ) )
            func_OnRegisterSceneNode(  );
        else{
            this->irr::scene::ISceneNode::OnRegisterSceneNode(  );
        }
    }
    
    void default_OnRegisterSceneNode(  ) {
        irr::scene::ISceneNode::OnRegisterSceneNode( );
    }

    virtual void addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_addAnimator = this->get_override( "addAnimator" ) )
            func_addAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
    }

    virtual void addChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::scene::ISceneNode * child ) {
        irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
    }

    void cloneMembers( ::irr::scene::ISceneNode * toCopyFrom, ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::cloneMembers( boost::python::ptr(toCopyFrom), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::core::vector3df getAbsolutePosition(  ) const  {
        if( bp::override func_getAbsolutePosition = this->get_override( "getAbsolutePosition" ) )
            return func_getAbsolutePosition(  );
        else{
            return this->irr::scene::ISceneNode::getAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector3df default_getAbsolutePosition(  ) const  {
        return irr::scene::ISceneNode::getAbsolutePosition( );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::scene::ISceneNode::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::scene::ISceneNode::getID( );
    }

    virtual ::irr::u32 getMaterialCount(  ) const  {
        if( bp::override func_getMaterialCount = this->get_override( "getMaterialCount" ) )
            return func_getMaterialCount(  );
        else{
            return this->irr::scene::ISceneNode::getMaterialCount(  );
        }
    }
    
    ::irr::u32 default_getMaterialCount(  ) const  {
        return irr::scene::ISceneNode::getMaterialCount( );
    }

    virtual ::irr::c8 const * getName(  ) const  {
        if( bp::override func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            return this->irr::scene::ISceneNode::getName(  );
        }
    }
    
    ::irr::c8 const * default_getName(  ) const  {
        return irr::scene::ISceneNode::getName( );
    }

    virtual ::irr::core::matrix4 getRelativeTransformation(  ) const  {
        if( bp::override func_getRelativeTransformation = this->get_override( "getRelativeTransformation" ) )
            return func_getRelativeTransformation(  );
        else{
            return this->irr::scene::ISceneNode::getRelativeTransformation(  );
        }
    }
    
    ::irr::core::matrix4 default_getRelativeTransformation(  ) const  {
        return irr::scene::ISceneNode::getRelativeTransformation( );
    }

    virtual ::irr::scene::ISceneManager * getSceneManager(  ) const  {
        if( bp::override func_getSceneManager = this->get_override( "getSceneManager" ) )
            return func_getSceneManager(  );
        else{
            return this->irr::scene::ISceneNode::getSceneManager(  );
        }
    }
    
    ::irr::scene::ISceneManager * default_getSceneManager(  ) const  {
        return irr::scene::ISceneNode::getSceneManager( );
    }

    virtual ::irr::core::aabbox3d< float > const getTransformedBoundingBox(  ) const  {
        if( bp::override func_getTransformedBoundingBox = this->get_override( "getTransformedBoundingBox" ) )
            return func_getTransformedBoundingBox(  );
        else{
            return this->irr::scene::ISceneNode::getTransformedBoundingBox(  );
        }
    }
    
    ::irr::core::aabbox3d< float > const default_getTransformedBoundingBox(  ) const  {
        return irr::scene::ISceneNode::getTransformedBoundingBox( );
    }

    virtual ::irr::scene::ITriangleSelector * getTriangleSelector(  ) const  {
        if( bp::override func_getTriangleSelector = this->get_override( "getTriangleSelector" ) )
            return func_getTriangleSelector(  );
        else{
            return this->irr::scene::ISceneNode::getTriangleSelector(  );
        }
    }
    
    ::irr::scene::ITriangleSelector * default_getTriangleSelector(  ) const  {
        return irr::scene::ISceneNode::getTriangleSelector( );
    }

    virtual ::irr::scene::ESCENE_NODE_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNode::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNode::getType( );
    }

    virtual bool isTrulyVisible(  ) const  {
        if( bp::override func_isTrulyVisible = this->get_override( "isTrulyVisible" ) )
            return func_isTrulyVisible(  );
        else{
            return this->irr::scene::ISceneNode::isTrulyVisible(  );
        }
    }
    
    bool default_isTrulyVisible(  ) const  {
        return irr::scene::ISceneNode::isTrulyVisible( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::scene::ISceneNode::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::scene::ISceneNode::isVisible( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::scene::ISceneNode::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::scene::ISceneNode::remove( );
    }

    virtual void removeAll(  ) {
        if( bp::override func_removeAll = this->get_override( "removeAll" ) )
            func_removeAll(  );
        else{
            this->irr::scene::ISceneNode::removeAll(  );
        }
    }
    
    void default_removeAll(  ) {
        irr::scene::ISceneNode::removeAll( );
    }

    virtual void removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_removeAnimator = this->get_override( "removeAnimator" ) )
            func_removeAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
    }

    virtual void removeAnimators(  ) {
        if( bp::override func_removeAnimators = this->get_override( "removeAnimators" ) )
            func_removeAnimators(  );
        else{
            this->irr::scene::ISceneNode::removeAnimators(  );
        }
    }
    
    void default_removeAnimators(  ) {
        irr::scene::ISceneNode::removeAnimators( );
    }

    virtual bool removeChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            return func_removeChild( boost::python::ptr(child) );
        else{
            return this->irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
        }
    }
    
    bool default_removeChild( ::irr::scene::ISceneNode * child ) {
        return irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
    }

    virtual void render(  ){
        bp::override func_render = this->get_override( "render" );
        func_render(  );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual void setDebugDataVisible( ::irr::s32 state ) {
        if( bp::override func_setDebugDataVisible = this->get_override( "setDebugDataVisible" ) )
            func_setDebugDataVisible( state );
        else{
            this->irr::scene::ISceneNode::setDebugDataVisible( state );
        }
    }
    
    void default_setDebugDataVisible( ::irr::s32 state ) {
        irr::scene::ISceneNode::setDebugDataVisible( state );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::scene::ISceneNode::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::scene::ISceneNode::setID( id );
    }

    virtual void setName( ::irr::c8 const * name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->irr::scene::ISceneNode::setName( name );
        }
    }
    
    void default_setName( ::irr::c8 const * name ) {
        irr::scene::ISceneNode::setName( name );
    }

    virtual void setName( ::irr::core::stringc const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->irr::scene::ISceneNode::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::irr::core::stringc const & name ) {
        irr::scene::ISceneNode::setName( boost::ref(name) );
    }

    virtual void setParent( ::irr::scene::ISceneNode * newParent ) {
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(newParent) );
        else{
            this->irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
        }
    }
    
    void default_setParent( ::irr::scene::ISceneNode * newParent ) {
        irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
    }

    virtual void setPosition( ::irr::core::vector3df const & newpos ) {
        if( bp::override func_setPosition = this->get_override( "setPosition" ) )
            func_setPosition( boost::ref(newpos) );
        else{
            this->irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
        }
    }
    
    void default_setPosition( ::irr::core::vector3df const & newpos ) {
        irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
    }

    virtual void setRotation( ::irr::core::vector3df const & rotation ) {
        if( bp::override func_setRotation = this->get_override( "setRotation" ) )
            func_setRotation( boost::ref(rotation) );
        else{
            this->irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
        }
    }
    
    void default_setRotation( ::irr::core::vector3df const & rotation ) {
        irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
    }

    virtual void setScale( ::irr::core::vector3df const & scale ) {
        if( bp::override func_setScale = this->get_override( "setScale" ) )
            func_setScale( boost::ref(scale) );
        else{
            this->irr::scene::ISceneNode::setScale( boost::ref(scale) );
        }
    }
    
    void default_setScale( ::irr::core::vector3df const & scale ) {
        irr::scene::ISceneNode::setScale( boost::ref(scale) );
    }

    void setSceneManager( ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::setSceneManager( boost::python::ptr(newManager) );
    }

    virtual void setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        if( bp::override func_setTriangleSelector = this->get_override( "setTriangleSelector" ) )
            func_setTriangleSelector( boost::python::ptr(selector) );
        else{
            this->irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
        }
    }
    
    void default_setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
    }

    virtual void setVisible( bool isVisible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( isVisible );
        else{
            this->irr::scene::ISceneNode::setVisible( isVisible );
        }
    }
    
    void default_setVisible( bool isVisible ) {
        irr::scene::ISceneNode::setVisible( isVisible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::scene::ISceneNode::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::scene::ISceneNode::updateAbsolutePosition( );
    }

};

struct IBillboardSceneNode_wrapper : irr::scene::IBillboardSceneNode, bp::wrapper< irr::scene::IBillboardSceneNode > {

    IBillboardSceneNode_wrapper(::irr::scene::ISceneNode * parent, ::irr::scene::ISceneManager * mgr, ::irr::s32 id, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f) )
    : irr::scene::IBillboardSceneNode( boost::python::ptr(parent), boost::python::ptr(mgr), id, boost::ref(position) )
      , bp::wrapper< irr::scene::IBillboardSceneNode >(){
        // constructor
    
    }

    virtual void getColor( ::irr::video::SColor & topColor, ::irr::video::SColor & bottomColor ) const {
        bp::override func_getColor = this->get_override( "getColor" );
        func_getColor( boost::ref(topColor), boost::ref(bottomColor) );
    }

    virtual ::irr::core::dimension2d< float > const & getSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual void setColor( ::irr::video::SColor const & overallColor ){
        bp::override func_setColor = this->get_override( "setColor" );
        func_setColor( boost::ref(overallColor) );
    }

    virtual void setColor( ::irr::video::SColor const & topColor, ::irr::video::SColor const & bottomColor ){
        bp::override func_setColor = this->get_override( "setColor" );
        func_setColor( boost::ref(topColor), boost::ref(bottomColor) );
    }

    virtual void setSize( ::irr::core::dimension2d< float > const & size ){
        bp::override func_setSize = this->get_override( "setSize" );
        func_setSize( boost::ref(size) );
    }

    virtual void OnAnimate( ::irr::u32 timeMs ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( timeMs );
        else{
            this->irr::scene::ISceneNode::OnAnimate( timeMs );
        }
    }
    
    void default_OnAnimate( ::irr::u32 timeMs ) {
        irr::scene::ISceneNode::OnAnimate( timeMs );
    }

    virtual void OnRegisterSceneNode(  ) {
        if( bp::override func_OnRegisterSceneNode = this->get_override( "OnRegisterSceneNode" ) )
            func_OnRegisterSceneNode(  );
        else{
            this->irr::scene::ISceneNode::OnRegisterSceneNode(  );
        }
    }
    
    void default_OnRegisterSceneNode(  ) {
        irr::scene::ISceneNode::OnRegisterSceneNode( );
    }

    virtual void addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_addAnimator = this->get_override( "addAnimator" ) )
            func_addAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
    }

    virtual void addChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::scene::ISceneNode * child ) {
        irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
    }

    virtual ::irr::scene::ISceneNode * clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        else{
            return this->irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        }
    }
    
    ::irr::scene::ISceneNode * default_clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        return irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
    }

    void cloneMembers( ::irr::scene::ISceneNode * toCopyFrom, ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::cloneMembers( boost::python::ptr(toCopyFrom), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::core::vector3df getAbsolutePosition(  ) const  {
        if( bp::override func_getAbsolutePosition = this->get_override( "getAbsolutePosition" ) )
            return func_getAbsolutePosition(  );
        else{
            return this->irr::scene::ISceneNode::getAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector3df default_getAbsolutePosition(  ) const  {
        return irr::scene::ISceneNode::getAbsolutePosition( );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::scene::ISceneNode::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::scene::ISceneNode::getID( );
    }

    virtual ::irr::u32 getMaterialCount(  ) const  {
        if( bp::override func_getMaterialCount = this->get_override( "getMaterialCount" ) )
            return func_getMaterialCount(  );
        else{
            return this->irr::scene::ISceneNode::getMaterialCount(  );
        }
    }
    
    ::irr::u32 default_getMaterialCount(  ) const  {
        return irr::scene::ISceneNode::getMaterialCount( );
    }

    virtual ::irr::c8 const * getName(  ) const  {
        if( bp::override func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            return this->irr::scene::ISceneNode::getName(  );
        }
    }
    
    ::irr::c8 const * default_getName(  ) const  {
        return irr::scene::ISceneNode::getName( );
    }

    virtual ::irr::core::matrix4 getRelativeTransformation(  ) const  {
        if( bp::override func_getRelativeTransformation = this->get_override( "getRelativeTransformation" ) )
            return func_getRelativeTransformation(  );
        else{
            return this->irr::scene::ISceneNode::getRelativeTransformation(  );
        }
    }
    
    ::irr::core::matrix4 default_getRelativeTransformation(  ) const  {
        return irr::scene::ISceneNode::getRelativeTransformation( );
    }

    virtual ::irr::scene::ISceneManager * getSceneManager(  ) const  {
        if( bp::override func_getSceneManager = this->get_override( "getSceneManager" ) )
            return func_getSceneManager(  );
        else{
            return this->irr::scene::ISceneNode::getSceneManager(  );
        }
    }
    
    ::irr::scene::ISceneManager * default_getSceneManager(  ) const  {
        return irr::scene::ISceneNode::getSceneManager( );
    }

    virtual ::irr::core::aabbox3d< float > const getTransformedBoundingBox(  ) const  {
        if( bp::override func_getTransformedBoundingBox = this->get_override( "getTransformedBoundingBox" ) )
            return func_getTransformedBoundingBox(  );
        else{
            return this->irr::scene::ISceneNode::getTransformedBoundingBox(  );
        }
    }
    
    ::irr::core::aabbox3d< float > const default_getTransformedBoundingBox(  ) const  {
        return irr::scene::ISceneNode::getTransformedBoundingBox( );
    }

    virtual ::irr::scene::ITriangleSelector * getTriangleSelector(  ) const  {
        if( bp::override func_getTriangleSelector = this->get_override( "getTriangleSelector" ) )
            return func_getTriangleSelector(  );
        else{
            return this->irr::scene::ISceneNode::getTriangleSelector(  );
        }
    }
    
    ::irr::scene::ITriangleSelector * default_getTriangleSelector(  ) const  {
        return irr::scene::ISceneNode::getTriangleSelector( );
    }

    virtual ::irr::scene::ESCENE_NODE_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNode::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNode::getType( );
    }

    virtual bool isTrulyVisible(  ) const  {
        if( bp::override func_isTrulyVisible = this->get_override( "isTrulyVisible" ) )
            return func_isTrulyVisible(  );
        else{
            return this->irr::scene::ISceneNode::isTrulyVisible(  );
        }
    }
    
    bool default_isTrulyVisible(  ) const  {
        return irr::scene::ISceneNode::isTrulyVisible( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::scene::ISceneNode::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::scene::ISceneNode::isVisible( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::scene::ISceneNode::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::scene::ISceneNode::remove( );
    }

    virtual void removeAll(  ) {
        if( bp::override func_removeAll = this->get_override( "removeAll" ) )
            func_removeAll(  );
        else{
            this->irr::scene::ISceneNode::removeAll(  );
        }
    }
    
    void default_removeAll(  ) {
        irr::scene::ISceneNode::removeAll( );
    }

    virtual void removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_removeAnimator = this->get_override( "removeAnimator" ) )
            func_removeAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
    }

    virtual void removeAnimators(  ) {
        if( bp::override func_removeAnimators = this->get_override( "removeAnimators" ) )
            func_removeAnimators(  );
        else{
            this->irr::scene::ISceneNode::removeAnimators(  );
        }
    }
    
    void default_removeAnimators(  ) {
        irr::scene::ISceneNode::removeAnimators( );
    }

    virtual bool removeChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            return func_removeChild( boost::python::ptr(child) );
        else{
            return this->irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
        }
    }
    
    bool default_removeChild( ::irr::scene::ISceneNode * child ) {
        return irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
    }

    virtual void render(  ){
        bp::override func_render = this->get_override( "render" );
        func_render(  );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual void setDebugDataVisible( ::irr::s32 state ) {
        if( bp::override func_setDebugDataVisible = this->get_override( "setDebugDataVisible" ) )
            func_setDebugDataVisible( state );
        else{
            this->irr::scene::ISceneNode::setDebugDataVisible( state );
        }
    }
    
    void default_setDebugDataVisible( ::irr::s32 state ) {
        irr::scene::ISceneNode::setDebugDataVisible( state );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::scene::ISceneNode::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::scene::ISceneNode::setID( id );
    }

    virtual void setName( ::irr::c8 const * name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->irr::scene::ISceneNode::setName( name );
        }
    }
    
    void default_setName( ::irr::c8 const * name ) {
        irr::scene::ISceneNode::setName( name );
    }

    virtual void setName( ::irr::core::stringc const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->irr::scene::ISceneNode::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::irr::core::stringc const & name ) {
        irr::scene::ISceneNode::setName( boost::ref(name) );
    }

    virtual void setParent( ::irr::scene::ISceneNode * newParent ) {
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(newParent) );
        else{
            this->irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
        }
    }
    
    void default_setParent( ::irr::scene::ISceneNode * newParent ) {
        irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
    }

    virtual void setPosition( ::irr::core::vector3df const & newpos ) {
        if( bp::override func_setPosition = this->get_override( "setPosition" ) )
            func_setPosition( boost::ref(newpos) );
        else{
            this->irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
        }
    }
    
    void default_setPosition( ::irr::core::vector3df const & newpos ) {
        irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
    }

    virtual void setRotation( ::irr::core::vector3df const & rotation ) {
        if( bp::override func_setRotation = this->get_override( "setRotation" ) )
            func_setRotation( boost::ref(rotation) );
        else{
            this->irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
        }
    }
    
    void default_setRotation( ::irr::core::vector3df const & rotation ) {
        irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
    }

    virtual void setScale( ::irr::core::vector3df const & scale ) {
        if( bp::override func_setScale = this->get_override( "setScale" ) )
            func_setScale( boost::ref(scale) );
        else{
            this->irr::scene::ISceneNode::setScale( boost::ref(scale) );
        }
    }
    
    void default_setScale( ::irr::core::vector3df const & scale ) {
        irr::scene::ISceneNode::setScale( boost::ref(scale) );
    }

    void setSceneManager( ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::setSceneManager( boost::python::ptr(newManager) );
    }

    virtual void setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        if( bp::override func_setTriangleSelector = this->get_override( "setTriangleSelector" ) )
            func_setTriangleSelector( boost::python::ptr(selector) );
        else{
            this->irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
        }
    }
    
    void default_setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
    }

    virtual void setVisible( bool isVisible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( isVisible );
        else{
            this->irr::scene::ISceneNode::setVisible( isVisible );
        }
    }
    
    void default_setVisible( bool isVisible ) {
        irr::scene::ISceneNode::setVisible( isVisible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::scene::ISceneNode::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::scene::ISceneNode::updateAbsolutePosition( );
    }

};

struct IBillboardTextSceneNode_wrapper : irr::scene::IBillboardTextSceneNode, bp::wrapper< irr::scene::IBillboardTextSceneNode > {

    IBillboardTextSceneNode_wrapper(::irr::scene::ISceneNode * parent, ::irr::scene::ISceneManager * mgr, ::irr::s32 id, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f) )
    : irr::scene::IBillboardTextSceneNode( boost::python::ptr(parent), boost::python::ptr(mgr), id, boost::ref(position) )
      , bp::wrapper< irr::scene::IBillboardTextSceneNode >(){
        // constructor
    
    }

    virtual void getColor( ::irr::video::SColor & topColor, ::irr::video::SColor & bottomColor ) const {
        bp::override func_getColor = this->get_override( "getColor" );
        func_getColor( boost::ref(topColor), boost::ref(bottomColor) );
    }

    virtual ::irr::core::dimension2d< float > const & getSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual void setColor( ::irr::video::SColor const & overallColor ){
        bp::override func_setColor = this->get_override( "setColor" );
        func_setColor( boost::ref(overallColor) );
    }

    virtual void setColor( ::irr::video::SColor const & topColor, ::irr::video::SColor const & bottomColor ){
        bp::override func_setColor = this->get_override( "setColor" );
        func_setColor( boost::ref(topColor), boost::ref(bottomColor) );
    }

    virtual void setSize( ::irr::core::dimension2d< float > const & size ){
        bp::override func_setSize = this->get_override( "setSize" );
        func_setSize( boost::ref(size) );
    }

    virtual void setText( wchar_t const * text ){
        bp::override func_setText = this->get_override( "setText" );
        func_setText( text );
    }

    virtual void setTextColor( ::irr::video::SColor color ){
        bp::override func_setTextColor = this->get_override( "setTextColor" );
        func_setTextColor( color );
    }

    virtual void OnAnimate( ::irr::u32 timeMs ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( timeMs );
        else{
            this->irr::scene::ISceneNode::OnAnimate( timeMs );
        }
    }
    
    void default_OnAnimate( ::irr::u32 timeMs ) {
        irr::scene::ISceneNode::OnAnimate( timeMs );
    }

    virtual void OnRegisterSceneNode(  ) {
        if( bp::override func_OnRegisterSceneNode = this->get_override( "OnRegisterSceneNode" ) )
            func_OnRegisterSceneNode(  );
        else{
            this->irr::scene::ISceneNode::OnRegisterSceneNode(  );
        }
    }
    
    void default_OnRegisterSceneNode(  ) {
        irr::scene::ISceneNode::OnRegisterSceneNode( );
    }

    virtual void addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_addAnimator = this->get_override( "addAnimator" ) )
            func_addAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
    }

    virtual void addChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::scene::ISceneNode * child ) {
        irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
    }

    virtual ::irr::scene::ISceneNode * clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        else{
            return this->irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        }
    }
    
    ::irr::scene::ISceneNode * default_clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        return irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
    }

    void cloneMembers( ::irr::scene::ISceneNode * toCopyFrom, ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::cloneMembers( boost::python::ptr(toCopyFrom), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::core::vector3df getAbsolutePosition(  ) const  {
        if( bp::override func_getAbsolutePosition = this->get_override( "getAbsolutePosition" ) )
            return func_getAbsolutePosition(  );
        else{
            return this->irr::scene::ISceneNode::getAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector3df default_getAbsolutePosition(  ) const  {
        return irr::scene::ISceneNode::getAbsolutePosition( );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::scene::ISceneNode::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::scene::ISceneNode::getID( );
    }

    virtual ::irr::u32 getMaterialCount(  ) const  {
        if( bp::override func_getMaterialCount = this->get_override( "getMaterialCount" ) )
            return func_getMaterialCount(  );
        else{
            return this->irr::scene::ISceneNode::getMaterialCount(  );
        }
    }
    
    ::irr::u32 default_getMaterialCount(  ) const  {
        return irr::scene::ISceneNode::getMaterialCount( );
    }

    virtual ::irr::c8 const * getName(  ) const  {
        if( bp::override func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            return this->irr::scene::ISceneNode::getName(  );
        }
    }
    
    ::irr::c8 const * default_getName(  ) const  {
        return irr::scene::ISceneNode::getName( );
    }

    virtual ::irr::core::matrix4 getRelativeTransformation(  ) const  {
        if( bp::override func_getRelativeTransformation = this->get_override( "getRelativeTransformation" ) )
            return func_getRelativeTransformation(  );
        else{
            return this->irr::scene::ISceneNode::getRelativeTransformation(  );
        }
    }
    
    ::irr::core::matrix4 default_getRelativeTransformation(  ) const  {
        return irr::scene::ISceneNode::getRelativeTransformation( );
    }

    virtual ::irr::scene::ISceneManager * getSceneManager(  ) const  {
        if( bp::override func_getSceneManager = this->get_override( "getSceneManager" ) )
            return func_getSceneManager(  );
        else{
            return this->irr::scene::ISceneNode::getSceneManager(  );
        }
    }
    
    ::irr::scene::ISceneManager * default_getSceneManager(  ) const  {
        return irr::scene::ISceneNode::getSceneManager( );
    }

    virtual ::irr::core::aabbox3d< float > const getTransformedBoundingBox(  ) const  {
        if( bp::override func_getTransformedBoundingBox = this->get_override( "getTransformedBoundingBox" ) )
            return func_getTransformedBoundingBox(  );
        else{
            return this->irr::scene::ISceneNode::getTransformedBoundingBox(  );
        }
    }
    
    ::irr::core::aabbox3d< float > const default_getTransformedBoundingBox(  ) const  {
        return irr::scene::ISceneNode::getTransformedBoundingBox( );
    }

    virtual ::irr::scene::ITriangleSelector * getTriangleSelector(  ) const  {
        if( bp::override func_getTriangleSelector = this->get_override( "getTriangleSelector" ) )
            return func_getTriangleSelector(  );
        else{
            return this->irr::scene::ISceneNode::getTriangleSelector(  );
        }
    }
    
    ::irr::scene::ITriangleSelector * default_getTriangleSelector(  ) const  {
        return irr::scene::ISceneNode::getTriangleSelector( );
    }

    virtual ::irr::scene::ESCENE_NODE_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNode::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNode::getType( );
    }

    virtual bool isTrulyVisible(  ) const  {
        if( bp::override func_isTrulyVisible = this->get_override( "isTrulyVisible" ) )
            return func_isTrulyVisible(  );
        else{
            return this->irr::scene::ISceneNode::isTrulyVisible(  );
        }
    }
    
    bool default_isTrulyVisible(  ) const  {
        return irr::scene::ISceneNode::isTrulyVisible( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::scene::ISceneNode::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::scene::ISceneNode::isVisible( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::scene::ISceneNode::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::scene::ISceneNode::remove( );
    }

    virtual void removeAll(  ) {
        if( bp::override func_removeAll = this->get_override( "removeAll" ) )
            func_removeAll(  );
        else{
            this->irr::scene::ISceneNode::removeAll(  );
        }
    }
    
    void default_removeAll(  ) {
        irr::scene::ISceneNode::removeAll( );
    }

    virtual void removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_removeAnimator = this->get_override( "removeAnimator" ) )
            func_removeAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
    }

    virtual void removeAnimators(  ) {
        if( bp::override func_removeAnimators = this->get_override( "removeAnimators" ) )
            func_removeAnimators(  );
        else{
            this->irr::scene::ISceneNode::removeAnimators(  );
        }
    }
    
    void default_removeAnimators(  ) {
        irr::scene::ISceneNode::removeAnimators( );
    }

    virtual bool removeChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            return func_removeChild( boost::python::ptr(child) );
        else{
            return this->irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
        }
    }
    
    bool default_removeChild( ::irr::scene::ISceneNode * child ) {
        return irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
    }

    virtual void render(  ){
        bp::override func_render = this->get_override( "render" );
        func_render(  );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual void setDebugDataVisible( ::irr::s32 state ) {
        if( bp::override func_setDebugDataVisible = this->get_override( "setDebugDataVisible" ) )
            func_setDebugDataVisible( state );
        else{
            this->irr::scene::ISceneNode::setDebugDataVisible( state );
        }
    }
    
    void default_setDebugDataVisible( ::irr::s32 state ) {
        irr::scene::ISceneNode::setDebugDataVisible( state );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::scene::ISceneNode::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::scene::ISceneNode::setID( id );
    }

    virtual void setName( ::irr::c8 const * name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->irr::scene::ISceneNode::setName( name );
        }
    }
    
    void default_setName( ::irr::c8 const * name ) {
        irr::scene::ISceneNode::setName( name );
    }

    virtual void setName( ::irr::core::stringc const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->irr::scene::ISceneNode::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::irr::core::stringc const & name ) {
        irr::scene::ISceneNode::setName( boost::ref(name) );
    }

    virtual void setParent( ::irr::scene::ISceneNode * newParent ) {
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(newParent) );
        else{
            this->irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
        }
    }
    
    void default_setParent( ::irr::scene::ISceneNode * newParent ) {
        irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
    }

    virtual void setPosition( ::irr::core::vector3df const & newpos ) {
        if( bp::override func_setPosition = this->get_override( "setPosition" ) )
            func_setPosition( boost::ref(newpos) );
        else{
            this->irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
        }
    }
    
    void default_setPosition( ::irr::core::vector3df const & newpos ) {
        irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
    }

    virtual void setRotation( ::irr::core::vector3df const & rotation ) {
        if( bp::override func_setRotation = this->get_override( "setRotation" ) )
            func_setRotation( boost::ref(rotation) );
        else{
            this->irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
        }
    }
    
    void default_setRotation( ::irr::core::vector3df const & rotation ) {
        irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
    }

    virtual void setScale( ::irr::core::vector3df const & scale ) {
        if( bp::override func_setScale = this->get_override( "setScale" ) )
            func_setScale( boost::ref(scale) );
        else{
            this->irr::scene::ISceneNode::setScale( boost::ref(scale) );
        }
    }
    
    void default_setScale( ::irr::core::vector3df const & scale ) {
        irr::scene::ISceneNode::setScale( boost::ref(scale) );
    }

    void setSceneManager( ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::setSceneManager( boost::python::ptr(newManager) );
    }

    virtual void setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        if( bp::override func_setTriangleSelector = this->get_override( "setTriangleSelector" ) )
            func_setTriangleSelector( boost::python::ptr(selector) );
        else{
            this->irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
        }
    }
    
    void default_setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
    }

    virtual void setVisible( bool isVisible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( isVisible );
        else{
            this->irr::scene::ISceneNode::setVisible( isVisible );
        }
    }
    
    void default_setVisible( bool isVisible ) {
        irr::scene::ISceneNode::setVisible( isVisible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::scene::ISceneNode::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::scene::ISceneNode::updateAbsolutePosition( );
    }

};

struct IBoneSceneNode_wrapper : irr::scene::IBoneSceneNode, bp::wrapper< irr::scene::IBoneSceneNode > {

    IBoneSceneNode_wrapper(::irr::scene::ISceneNode * parent, ::irr::scene::ISceneManager * mgr, ::irr::s32 id=-0x00000000000000001 )
    : irr::scene::IBoneSceneNode( boost::python::ptr(parent), boost::python::ptr(mgr), id )
      , bp::wrapper< irr::scene::IBoneSceneNode >(){
        // constructor
    
    }

    virtual void OnAnimate( ::irr::u32 timeMs ){
        bp::override func_OnAnimate = this->get_override( "OnAnimate" );
        func_OnAnimate( timeMs );
    }

    virtual ::irr::scene::E_BONE_ANIMATION_MODE getAnimationMode(  ) const {
        bp::override func_getAnimationMode = this->get_override( "getAnimationMode" );
        return func_getAnimationMode(  );
    }

    virtual ::irr::u32 getBoneIndex(  ) const {
        bp::override func_getBoneIndex = this->get_override( "getBoneIndex" );
        return func_getBoneIndex(  );
    }

    virtual ::irr::c8 const * getBoneName(  ) const  {
        if( bp::override func_getBoneName = this->get_override( "getBoneName" ) )
            return func_getBoneName(  );
        else{
            return this->irr::scene::IBoneSceneNode::getBoneName(  );
        }
    }
    
    ::irr::c8 const * default_getBoneName(  ) const  {
        return irr::scene::IBoneSceneNode::getBoneName( );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::scene::E_BONE_SKINNING_SPACE getSkinningSpace(  ) const {
        bp::override func_getSkinningSpace = this->get_override( "getSkinningSpace" );
        return func_getSkinningSpace(  );
    }

    virtual void render(  ) {
        if( bp::override func_render = this->get_override( "render" ) )
            func_render(  );
        else{
            this->irr::scene::IBoneSceneNode::render(  );
        }
    }
    
    void default_render(  ) {
        irr::scene::IBoneSceneNode::render( );
    }

    virtual bool setAnimationMode( ::irr::scene::E_BONE_ANIMATION_MODE mode ){
        bp::override func_setAnimationMode = this->get_override( "setAnimationMode" );
        return func_setAnimationMode( mode );
    }

    virtual void setSkinningSpace( ::irr::scene::E_BONE_SKINNING_SPACE space ){
        bp::override func_setSkinningSpace = this->get_override( "setSkinningSpace" );
        func_setSkinningSpace( space );
    }

    virtual void updateAbsolutePositionOfAllChildren(  ){
        bp::override func_updateAbsolutePositionOfAllChildren = this->get_override( "updateAbsolutePositionOfAllChildren" );
        func_updateAbsolutePositionOfAllChildren(  );
    }

    virtual void OnRegisterSceneNode(  ) {
        if( bp::override func_OnRegisterSceneNode = this->get_override( "OnRegisterSceneNode" ) )
            func_OnRegisterSceneNode(  );
        else{
            this->irr::scene::ISceneNode::OnRegisterSceneNode(  );
        }
    }
    
    void default_OnRegisterSceneNode(  ) {
        irr::scene::ISceneNode::OnRegisterSceneNode( );
    }

    virtual void addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_addAnimator = this->get_override( "addAnimator" ) )
            func_addAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
    }

    virtual void addChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::scene::ISceneNode * child ) {
        irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
    }

    virtual ::irr::scene::ISceneNode * clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        else{
            return this->irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        }
    }
    
    ::irr::scene::ISceneNode * default_clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        return irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
    }

    void cloneMembers( ::irr::scene::ISceneNode * toCopyFrom, ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::cloneMembers( boost::python::ptr(toCopyFrom), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::core::vector3df getAbsolutePosition(  ) const  {
        if( bp::override func_getAbsolutePosition = this->get_override( "getAbsolutePosition" ) )
            return func_getAbsolutePosition(  );
        else{
            return this->irr::scene::ISceneNode::getAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector3df default_getAbsolutePosition(  ) const  {
        return irr::scene::ISceneNode::getAbsolutePosition( );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::scene::ISceneNode::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::scene::ISceneNode::getID( );
    }

    virtual ::irr::u32 getMaterialCount(  ) const  {
        if( bp::override func_getMaterialCount = this->get_override( "getMaterialCount" ) )
            return func_getMaterialCount(  );
        else{
            return this->irr::scene::ISceneNode::getMaterialCount(  );
        }
    }
    
    ::irr::u32 default_getMaterialCount(  ) const  {
        return irr::scene::ISceneNode::getMaterialCount( );
    }

    virtual ::irr::c8 const * getName(  ) const  {
        if( bp::override func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            return this->irr::scene::ISceneNode::getName(  );
        }
    }
    
    ::irr::c8 const * default_getName(  ) const  {
        return irr::scene::ISceneNode::getName( );
    }

    virtual ::irr::core::matrix4 getRelativeTransformation(  ) const  {
        if( bp::override func_getRelativeTransformation = this->get_override( "getRelativeTransformation" ) )
            return func_getRelativeTransformation(  );
        else{
            return this->irr::scene::ISceneNode::getRelativeTransformation(  );
        }
    }
    
    ::irr::core::matrix4 default_getRelativeTransformation(  ) const  {
        return irr::scene::ISceneNode::getRelativeTransformation( );
    }

    virtual ::irr::scene::ISceneManager * getSceneManager(  ) const  {
        if( bp::override func_getSceneManager = this->get_override( "getSceneManager" ) )
            return func_getSceneManager(  );
        else{
            return this->irr::scene::ISceneNode::getSceneManager(  );
        }
    }
    
    ::irr::scene::ISceneManager * default_getSceneManager(  ) const  {
        return irr::scene::ISceneNode::getSceneManager( );
    }

    virtual ::irr::core::aabbox3d< float > const getTransformedBoundingBox(  ) const  {
        if( bp::override func_getTransformedBoundingBox = this->get_override( "getTransformedBoundingBox" ) )
            return func_getTransformedBoundingBox(  );
        else{
            return this->irr::scene::ISceneNode::getTransformedBoundingBox(  );
        }
    }
    
    ::irr::core::aabbox3d< float > const default_getTransformedBoundingBox(  ) const  {
        return irr::scene::ISceneNode::getTransformedBoundingBox( );
    }

    virtual ::irr::scene::ITriangleSelector * getTriangleSelector(  ) const  {
        if( bp::override func_getTriangleSelector = this->get_override( "getTriangleSelector" ) )
            return func_getTriangleSelector(  );
        else{
            return this->irr::scene::ISceneNode::getTriangleSelector(  );
        }
    }
    
    ::irr::scene::ITriangleSelector * default_getTriangleSelector(  ) const  {
        return irr::scene::ISceneNode::getTriangleSelector( );
    }

    virtual ::irr::scene::ESCENE_NODE_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNode::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNode::getType( );
    }

    virtual bool isTrulyVisible(  ) const  {
        if( bp::override func_isTrulyVisible = this->get_override( "isTrulyVisible" ) )
            return func_isTrulyVisible(  );
        else{
            return this->irr::scene::ISceneNode::isTrulyVisible(  );
        }
    }
    
    bool default_isTrulyVisible(  ) const  {
        return irr::scene::ISceneNode::isTrulyVisible( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::scene::ISceneNode::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::scene::ISceneNode::isVisible( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::scene::ISceneNode::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::scene::ISceneNode::remove( );
    }

    virtual void removeAll(  ) {
        if( bp::override func_removeAll = this->get_override( "removeAll" ) )
            func_removeAll(  );
        else{
            this->irr::scene::ISceneNode::removeAll(  );
        }
    }
    
    void default_removeAll(  ) {
        irr::scene::ISceneNode::removeAll( );
    }

    virtual void removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_removeAnimator = this->get_override( "removeAnimator" ) )
            func_removeAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
    }

    virtual void removeAnimators(  ) {
        if( bp::override func_removeAnimators = this->get_override( "removeAnimators" ) )
            func_removeAnimators(  );
        else{
            this->irr::scene::ISceneNode::removeAnimators(  );
        }
    }
    
    void default_removeAnimators(  ) {
        irr::scene::ISceneNode::removeAnimators( );
    }

    virtual bool removeChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            return func_removeChild( boost::python::ptr(child) );
        else{
            return this->irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
        }
    }
    
    bool default_removeChild( ::irr::scene::ISceneNode * child ) {
        return irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual void setDebugDataVisible( ::irr::s32 state ) {
        if( bp::override func_setDebugDataVisible = this->get_override( "setDebugDataVisible" ) )
            func_setDebugDataVisible( state );
        else{
            this->irr::scene::ISceneNode::setDebugDataVisible( state );
        }
    }
    
    void default_setDebugDataVisible( ::irr::s32 state ) {
        irr::scene::ISceneNode::setDebugDataVisible( state );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::scene::ISceneNode::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::scene::ISceneNode::setID( id );
    }

    virtual void setName( ::irr::c8 const * name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->irr::scene::ISceneNode::setName( name );
        }
    }
    
    void default_setName( ::irr::c8 const * name ) {
        irr::scene::ISceneNode::setName( name );
    }

    virtual void setName( ::irr::core::stringc const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->irr::scene::ISceneNode::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::irr::core::stringc const & name ) {
        irr::scene::ISceneNode::setName( boost::ref(name) );
    }

    virtual void setParent( ::irr::scene::ISceneNode * newParent ) {
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(newParent) );
        else{
            this->irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
        }
    }
    
    void default_setParent( ::irr::scene::ISceneNode * newParent ) {
        irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
    }

    virtual void setPosition( ::irr::core::vector3df const & newpos ) {
        if( bp::override func_setPosition = this->get_override( "setPosition" ) )
            func_setPosition( boost::ref(newpos) );
        else{
            this->irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
        }
    }
    
    void default_setPosition( ::irr::core::vector3df const & newpos ) {
        irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
    }

    virtual void setRotation( ::irr::core::vector3df const & rotation ) {
        if( bp::override func_setRotation = this->get_override( "setRotation" ) )
            func_setRotation( boost::ref(rotation) );
        else{
            this->irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
        }
    }
    
    void default_setRotation( ::irr::core::vector3df const & rotation ) {
        irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
    }

    virtual void setScale( ::irr::core::vector3df const & scale ) {
        if( bp::override func_setScale = this->get_override( "setScale" ) )
            func_setScale( boost::ref(scale) );
        else{
            this->irr::scene::ISceneNode::setScale( boost::ref(scale) );
        }
    }
    
    void default_setScale( ::irr::core::vector3df const & scale ) {
        irr::scene::ISceneNode::setScale( boost::ref(scale) );
    }

    void setSceneManager( ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::setSceneManager( boost::python::ptr(newManager) );
    }

    virtual void setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        if( bp::override func_setTriangleSelector = this->get_override( "setTriangleSelector" ) )
            func_setTriangleSelector( boost::python::ptr(selector) );
        else{
            this->irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
        }
    }
    
    void default_setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
    }

    virtual void setVisible( bool isVisible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( isVisible );
        else{
            this->irr::scene::ISceneNode::setVisible( isVisible );
        }
    }
    
    void default_setVisible( bool isVisible ) {
        irr::scene::ISceneNode::setVisible( isVisible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::scene::ISceneNode::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::scene::ISceneNode::updateAbsolutePosition( );
    }

};

struct ICameraSceneNode_wrapper : irr::scene::ICameraSceneNode, bp::wrapper< irr::scene::ICameraSceneNode > {

    ICameraSceneNode_wrapper(::irr::scene::ISceneNode * parent, ::irr::scene::ISceneManager * mgr, ::irr::s32 id, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & rotation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & scale=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )
    : irr::scene::ICameraSceneNode( boost::python::ptr(parent), boost::python::ptr(mgr), id, boost::ref(position), boost::ref(rotation), boost::ref(scale) )
      , bp::wrapper< irr::scene::ICameraSceneNode >(){
        // constructor
    
    }

    virtual bool OnEvent( ::irr::SEvent const & event ){
        bp::override func_OnEvent = this->get_override( "OnEvent" );
        return func_OnEvent( boost::ref(event) );
    }

    virtual void bindTargetAndRotation( bool bound ){
        bp::override func_bindTargetAndRotation = this->get_override( "bindTargetAndRotation" );
        func_bindTargetAndRotation( bound );
    }

    virtual ::irr::f32 getAspectRatio(  ) const {
        bp::override func_getAspectRatio = this->get_override( "getAspectRatio" );
        return func_getAspectRatio(  );
    }

    virtual ::irr::f32 getFOV(  ) const {
        bp::override func_getFOV = this->get_override( "getFOV" );
        return func_getFOV(  );
    }

    virtual ::irr::f32 getFarValue(  ) const {
        bp::override func_getFarValue = this->get_override( "getFarValue" );
        return func_getFarValue(  );
    }

    virtual ::irr::f32 getNearValue(  ) const {
        bp::override func_getNearValue = this->get_override( "getNearValue" );
        return func_getNearValue(  );
    }

    virtual ::irr::core::matrix4 const & getProjectionMatrix(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector3df const & getTarget(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual bool getTargetAndRotationBinding(  ) const {
        bp::override func_getTargetAndRotationBinding = this->get_override( "getTargetAndRotationBinding" );
        return func_getTargetAndRotationBinding(  );
    }

    virtual ::irr::core::vector3df const & getUpVector(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::scene::SViewFrustum const * getViewFrustum(  ) const {
        bp::override func_getViewFrustum = this->get_override( "getViewFrustum" );
        return func_getViewFrustum(  );
    }

    virtual ::irr::core::matrix4 const & getViewMatrix(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::matrix4 const & getViewMatrixAffector(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual bool isInputReceiverEnabled(  ) const {
        bp::override func_isInputReceiverEnabled = this->get_override( "isInputReceiverEnabled" );
        return func_isInputReceiverEnabled(  );
    }

    virtual bool isOrthogonal(  ) const  {
        if( bp::override func_isOrthogonal = this->get_override( "isOrthogonal" ) )
            return func_isOrthogonal(  );
        else{
            return this->irr::scene::ICameraSceneNode::isOrthogonal(  );
        }
    }
    
    bool default_isOrthogonal(  ) const  {
        return irr::scene::ICameraSceneNode::isOrthogonal( );
    }

    virtual void setAspectRatio( ::irr::f32 aspect ){
        bp::override func_setAspectRatio = this->get_override( "setAspectRatio" );
        func_setAspectRatio( aspect );
    }

    virtual void setFOV( ::irr::f32 fovy ){
        bp::override func_setFOV = this->get_override( "setFOV" );
        func_setFOV( fovy );
    }

    virtual void setFarValue( ::irr::f32 zf ){
        bp::override func_setFarValue = this->get_override( "setFarValue" );
        func_setFarValue( zf );
    }

    virtual void setInputReceiverEnabled( bool enabled ){
        bp::override func_setInputReceiverEnabled = this->get_override( "setInputReceiverEnabled" );
        func_setInputReceiverEnabled( enabled );
    }

    virtual void setNearValue( ::irr::f32 zn ){
        bp::override func_setNearValue = this->get_override( "setNearValue" );
        func_setNearValue( zn );
    }

    virtual void setProjectionMatrix( ::irr::core::matrix4 const & projection, bool isOrthogonal=false ){
        bp::override func_setProjectionMatrix = this->get_override( "setProjectionMatrix" );
        func_setProjectionMatrix( boost::ref(projection), isOrthogonal );
    }

    virtual void setRotation( ::irr::core::vector3df const & rotation ){
        bp::override func_setRotation = this->get_override( "setRotation" );
        func_setRotation( boost::ref(rotation) );
    }

    virtual void setTarget( ::irr::core::vector3df const & pos ){
        bp::override func_setTarget = this->get_override( "setTarget" );
        func_setTarget( boost::ref(pos) );
    }

    virtual void setUpVector( ::irr::core::vector3df const & pos ){
        bp::override func_setUpVector = this->get_override( "setUpVector" );
        func_setUpVector( boost::ref(pos) );
    }

    virtual void setViewMatrixAffector( ::irr::core::matrix4 const & affector ){
        bp::override func_setViewMatrixAffector = this->get_override( "setViewMatrixAffector" );
        func_setViewMatrixAffector( boost::ref(affector) );
    }

    virtual void OnAnimate( ::irr::u32 timeMs ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( timeMs );
        else{
            this->irr::scene::ISceneNode::OnAnimate( timeMs );
        }
    }
    
    void default_OnAnimate( ::irr::u32 timeMs ) {
        irr::scene::ISceneNode::OnAnimate( timeMs );
    }

    virtual void OnRegisterSceneNode(  ) {
        if( bp::override func_OnRegisterSceneNode = this->get_override( "OnRegisterSceneNode" ) )
            func_OnRegisterSceneNode(  );
        else{
            this->irr::scene::ISceneNode::OnRegisterSceneNode(  );
        }
    }
    
    void default_OnRegisterSceneNode(  ) {
        irr::scene::ISceneNode::OnRegisterSceneNode( );
    }

    virtual void addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_addAnimator = this->get_override( "addAnimator" ) )
            func_addAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
    }

    virtual void addChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::scene::ISceneNode * child ) {
        irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
    }

    virtual ::irr::scene::ISceneNode * clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        else{
            return this->irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        }
    }
    
    ::irr::scene::ISceneNode * default_clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        return irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
    }

    void cloneMembers( ::irr::scene::ISceneNode * toCopyFrom, ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::cloneMembers( boost::python::ptr(toCopyFrom), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::core::vector3df getAbsolutePosition(  ) const  {
        if( bp::override func_getAbsolutePosition = this->get_override( "getAbsolutePosition" ) )
            return func_getAbsolutePosition(  );
        else{
            return this->irr::scene::ISceneNode::getAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector3df default_getAbsolutePosition(  ) const  {
        return irr::scene::ISceneNode::getAbsolutePosition( );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::scene::ISceneNode::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::scene::ISceneNode::getID( );
    }

    virtual ::irr::u32 getMaterialCount(  ) const  {
        if( bp::override func_getMaterialCount = this->get_override( "getMaterialCount" ) )
            return func_getMaterialCount(  );
        else{
            return this->irr::scene::ISceneNode::getMaterialCount(  );
        }
    }
    
    ::irr::u32 default_getMaterialCount(  ) const  {
        return irr::scene::ISceneNode::getMaterialCount( );
    }

    virtual ::irr::c8 const * getName(  ) const  {
        if( bp::override func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            return this->irr::scene::ISceneNode::getName(  );
        }
    }
    
    ::irr::c8 const * default_getName(  ) const  {
        return irr::scene::ISceneNode::getName( );
    }

    virtual ::irr::core::matrix4 getRelativeTransformation(  ) const  {
        if( bp::override func_getRelativeTransformation = this->get_override( "getRelativeTransformation" ) )
            return func_getRelativeTransformation(  );
        else{
            return this->irr::scene::ISceneNode::getRelativeTransformation(  );
        }
    }
    
    ::irr::core::matrix4 default_getRelativeTransformation(  ) const  {
        return irr::scene::ISceneNode::getRelativeTransformation( );
    }

    virtual ::irr::scene::ISceneManager * getSceneManager(  ) const  {
        if( bp::override func_getSceneManager = this->get_override( "getSceneManager" ) )
            return func_getSceneManager(  );
        else{
            return this->irr::scene::ISceneNode::getSceneManager(  );
        }
    }
    
    ::irr::scene::ISceneManager * default_getSceneManager(  ) const  {
        return irr::scene::ISceneNode::getSceneManager( );
    }

    virtual ::irr::core::aabbox3d< float > const getTransformedBoundingBox(  ) const  {
        if( bp::override func_getTransformedBoundingBox = this->get_override( "getTransformedBoundingBox" ) )
            return func_getTransformedBoundingBox(  );
        else{
            return this->irr::scene::ISceneNode::getTransformedBoundingBox(  );
        }
    }
    
    ::irr::core::aabbox3d< float > const default_getTransformedBoundingBox(  ) const  {
        return irr::scene::ISceneNode::getTransformedBoundingBox( );
    }

    virtual ::irr::scene::ITriangleSelector * getTriangleSelector(  ) const  {
        if( bp::override func_getTriangleSelector = this->get_override( "getTriangleSelector" ) )
            return func_getTriangleSelector(  );
        else{
            return this->irr::scene::ISceneNode::getTriangleSelector(  );
        }
    }
    
    ::irr::scene::ITriangleSelector * default_getTriangleSelector(  ) const  {
        return irr::scene::ISceneNode::getTriangleSelector( );
    }

    virtual ::irr::scene::ESCENE_NODE_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNode::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNode::getType( );
    }

    virtual bool isTrulyVisible(  ) const  {
        if( bp::override func_isTrulyVisible = this->get_override( "isTrulyVisible" ) )
            return func_isTrulyVisible(  );
        else{
            return this->irr::scene::ISceneNode::isTrulyVisible(  );
        }
    }
    
    bool default_isTrulyVisible(  ) const  {
        return irr::scene::ISceneNode::isTrulyVisible( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::scene::ISceneNode::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::scene::ISceneNode::isVisible( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::scene::ISceneNode::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::scene::ISceneNode::remove( );
    }

    virtual void removeAll(  ) {
        if( bp::override func_removeAll = this->get_override( "removeAll" ) )
            func_removeAll(  );
        else{
            this->irr::scene::ISceneNode::removeAll(  );
        }
    }
    
    void default_removeAll(  ) {
        irr::scene::ISceneNode::removeAll( );
    }

    virtual void removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_removeAnimator = this->get_override( "removeAnimator" ) )
            func_removeAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
    }

    virtual void removeAnimators(  ) {
        if( bp::override func_removeAnimators = this->get_override( "removeAnimators" ) )
            func_removeAnimators(  );
        else{
            this->irr::scene::ISceneNode::removeAnimators(  );
        }
    }
    
    void default_removeAnimators(  ) {
        irr::scene::ISceneNode::removeAnimators( );
    }

    virtual bool removeChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            return func_removeChild( boost::python::ptr(child) );
        else{
            return this->irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
        }
    }
    
    bool default_removeChild( ::irr::scene::ISceneNode * child ) {
        return irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
    }

    virtual void render(  ){
        bp::override func_render = this->get_override( "render" );
        func_render(  );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual void setDebugDataVisible( ::irr::s32 state ) {
        if( bp::override func_setDebugDataVisible = this->get_override( "setDebugDataVisible" ) )
            func_setDebugDataVisible( state );
        else{
            this->irr::scene::ISceneNode::setDebugDataVisible( state );
        }
    }
    
    void default_setDebugDataVisible( ::irr::s32 state ) {
        irr::scene::ISceneNode::setDebugDataVisible( state );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::scene::ISceneNode::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::scene::ISceneNode::setID( id );
    }

    virtual void setName( ::irr::c8 const * name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->irr::scene::ISceneNode::setName( name );
        }
    }
    
    void default_setName( ::irr::c8 const * name ) {
        irr::scene::ISceneNode::setName( name );
    }

    virtual void setName( ::irr::core::stringc const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->irr::scene::ISceneNode::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::irr::core::stringc const & name ) {
        irr::scene::ISceneNode::setName( boost::ref(name) );
    }

    virtual void setParent( ::irr::scene::ISceneNode * newParent ) {
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(newParent) );
        else{
            this->irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
        }
    }
    
    void default_setParent( ::irr::scene::ISceneNode * newParent ) {
        irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
    }

    virtual void setPosition( ::irr::core::vector3df const & newpos ) {
        if( bp::override func_setPosition = this->get_override( "setPosition" ) )
            func_setPosition( boost::ref(newpos) );
        else{
            this->irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
        }
    }
    
    void default_setPosition( ::irr::core::vector3df const & newpos ) {
        irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
    }

    virtual void setScale( ::irr::core::vector3df const & scale ) {
        if( bp::override func_setScale = this->get_override( "setScale" ) )
            func_setScale( boost::ref(scale) );
        else{
            this->irr::scene::ISceneNode::setScale( boost::ref(scale) );
        }
    }
    
    void default_setScale( ::irr::core::vector3df const & scale ) {
        irr::scene::ISceneNode::setScale( boost::ref(scale) );
    }

    void setSceneManager( ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::setSceneManager( boost::python::ptr(newManager) );
    }

    virtual void setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        if( bp::override func_setTriangleSelector = this->get_override( "setTriangleSelector" ) )
            func_setTriangleSelector( boost::python::ptr(selector) );
        else{
            this->irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
        }
    }
    
    void default_setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
    }

    virtual void setVisible( bool isVisible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( isVisible );
        else{
            this->irr::scene::ISceneNode::setVisible( isVisible );
        }
    }
    
    void default_setVisible( bool isVisible ) {
        irr::scene::ISceneNode::setVisible( isVisible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::scene::ISceneNode::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::scene::ISceneNode::updateAbsolutePosition( );
    }

};

struct ICollisionCallback_wrapper : irr::scene::ICollisionCallback, bp::wrapper< irr::scene::ICollisionCallback > {

    ICollisionCallback_wrapper()
    : irr::scene::ICollisionCallback()
      , bp::wrapper< irr::scene::ICollisionCallback >(){
        // null constructor
        
    }

    virtual bool onCollision( ::irr::scene::ISceneNodeAnimatorCollisionResponse const & animator ){
        bp::override func_onCollision = this->get_override( "onCollision" );
        return func_onCollision( boost::ref(animator) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IDummyTransformationSceneNode_wrapper : irr::scene::IDummyTransformationSceneNode, bp::wrapper< irr::scene::IDummyTransformationSceneNode > {

    IDummyTransformationSceneNode_wrapper(::irr::scene::ISceneNode * parent, ::irr::scene::ISceneManager * mgr, ::irr::s32 id )
    : irr::scene::IDummyTransformationSceneNode( boost::python::ptr(parent), boost::python::ptr(mgr), id )
      , bp::wrapper< irr::scene::IDummyTransformationSceneNode >(){
        // constructor
    
    }

    virtual ::irr::core::matrix4 & getRelativeTransformationMatrix(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual void OnAnimate( ::irr::u32 timeMs ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( timeMs );
        else{
            this->irr::scene::ISceneNode::OnAnimate( timeMs );
        }
    }
    
    void default_OnAnimate( ::irr::u32 timeMs ) {
        irr::scene::ISceneNode::OnAnimate( timeMs );
    }

    virtual void OnRegisterSceneNode(  ) {
        if( bp::override func_OnRegisterSceneNode = this->get_override( "OnRegisterSceneNode" ) )
            func_OnRegisterSceneNode(  );
        else{
            this->irr::scene::ISceneNode::OnRegisterSceneNode(  );
        }
    }
    
    void default_OnRegisterSceneNode(  ) {
        irr::scene::ISceneNode::OnRegisterSceneNode( );
    }

    virtual void addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_addAnimator = this->get_override( "addAnimator" ) )
            func_addAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
    }

    virtual void addChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::scene::ISceneNode * child ) {
        irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
    }

    virtual ::irr::scene::ISceneNode * clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        else{
            return this->irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        }
    }
    
    ::irr::scene::ISceneNode * default_clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        return irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
    }

    void cloneMembers( ::irr::scene::ISceneNode * toCopyFrom, ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::cloneMembers( boost::python::ptr(toCopyFrom), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::core::vector3df getAbsolutePosition(  ) const  {
        if( bp::override func_getAbsolutePosition = this->get_override( "getAbsolutePosition" ) )
            return func_getAbsolutePosition(  );
        else{
            return this->irr::scene::ISceneNode::getAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector3df default_getAbsolutePosition(  ) const  {
        return irr::scene::ISceneNode::getAbsolutePosition( );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::scene::ISceneNode::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::scene::ISceneNode::getID( );
    }

    virtual ::irr::u32 getMaterialCount(  ) const  {
        if( bp::override func_getMaterialCount = this->get_override( "getMaterialCount" ) )
            return func_getMaterialCount(  );
        else{
            return this->irr::scene::ISceneNode::getMaterialCount(  );
        }
    }
    
    ::irr::u32 default_getMaterialCount(  ) const  {
        return irr::scene::ISceneNode::getMaterialCount( );
    }

    virtual ::irr::c8 const * getName(  ) const  {
        if( bp::override func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            return this->irr::scene::ISceneNode::getName(  );
        }
    }
    
    ::irr::c8 const * default_getName(  ) const  {
        return irr::scene::ISceneNode::getName( );
    }

    virtual ::irr::core::matrix4 getRelativeTransformation(  ) const  {
        if( bp::override func_getRelativeTransformation = this->get_override( "getRelativeTransformation" ) )
            return func_getRelativeTransformation(  );
        else{
            return this->irr::scene::ISceneNode::getRelativeTransformation(  );
        }
    }
    
    ::irr::core::matrix4 default_getRelativeTransformation(  ) const  {
        return irr::scene::ISceneNode::getRelativeTransformation( );
    }

    virtual ::irr::scene::ISceneManager * getSceneManager(  ) const  {
        if( bp::override func_getSceneManager = this->get_override( "getSceneManager" ) )
            return func_getSceneManager(  );
        else{
            return this->irr::scene::ISceneNode::getSceneManager(  );
        }
    }
    
    ::irr::scene::ISceneManager * default_getSceneManager(  ) const  {
        return irr::scene::ISceneNode::getSceneManager( );
    }

    virtual ::irr::core::aabbox3d< float > const getTransformedBoundingBox(  ) const  {
        if( bp::override func_getTransformedBoundingBox = this->get_override( "getTransformedBoundingBox" ) )
            return func_getTransformedBoundingBox(  );
        else{
            return this->irr::scene::ISceneNode::getTransformedBoundingBox(  );
        }
    }
    
    ::irr::core::aabbox3d< float > const default_getTransformedBoundingBox(  ) const  {
        return irr::scene::ISceneNode::getTransformedBoundingBox( );
    }

    virtual ::irr::scene::ITriangleSelector * getTriangleSelector(  ) const  {
        if( bp::override func_getTriangleSelector = this->get_override( "getTriangleSelector" ) )
            return func_getTriangleSelector(  );
        else{
            return this->irr::scene::ISceneNode::getTriangleSelector(  );
        }
    }
    
    ::irr::scene::ITriangleSelector * default_getTriangleSelector(  ) const  {
        return irr::scene::ISceneNode::getTriangleSelector( );
    }

    virtual ::irr::scene::ESCENE_NODE_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNode::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNode::getType( );
    }

    virtual bool isTrulyVisible(  ) const  {
        if( bp::override func_isTrulyVisible = this->get_override( "isTrulyVisible" ) )
            return func_isTrulyVisible(  );
        else{
            return this->irr::scene::ISceneNode::isTrulyVisible(  );
        }
    }
    
    bool default_isTrulyVisible(  ) const  {
        return irr::scene::ISceneNode::isTrulyVisible( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::scene::ISceneNode::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::scene::ISceneNode::isVisible( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::scene::ISceneNode::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::scene::ISceneNode::remove( );
    }

    virtual void removeAll(  ) {
        if( bp::override func_removeAll = this->get_override( "removeAll" ) )
            func_removeAll(  );
        else{
            this->irr::scene::ISceneNode::removeAll(  );
        }
    }
    
    void default_removeAll(  ) {
        irr::scene::ISceneNode::removeAll( );
    }

    virtual void removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_removeAnimator = this->get_override( "removeAnimator" ) )
            func_removeAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
    }

    virtual void removeAnimators(  ) {
        if( bp::override func_removeAnimators = this->get_override( "removeAnimators" ) )
            func_removeAnimators(  );
        else{
            this->irr::scene::ISceneNode::removeAnimators(  );
        }
    }
    
    void default_removeAnimators(  ) {
        irr::scene::ISceneNode::removeAnimators( );
    }

    virtual bool removeChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            return func_removeChild( boost::python::ptr(child) );
        else{
            return this->irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
        }
    }
    
    bool default_removeChild( ::irr::scene::ISceneNode * child ) {
        return irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
    }

    virtual void render(  ){
        bp::override func_render = this->get_override( "render" );
        func_render(  );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual void setDebugDataVisible( ::irr::s32 state ) {
        if( bp::override func_setDebugDataVisible = this->get_override( "setDebugDataVisible" ) )
            func_setDebugDataVisible( state );
        else{
            this->irr::scene::ISceneNode::setDebugDataVisible( state );
        }
    }
    
    void default_setDebugDataVisible( ::irr::s32 state ) {
        irr::scene::ISceneNode::setDebugDataVisible( state );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::scene::ISceneNode::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::scene::ISceneNode::setID( id );
    }

    virtual void setName( ::irr::c8 const * name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->irr::scene::ISceneNode::setName( name );
        }
    }
    
    void default_setName( ::irr::c8 const * name ) {
        irr::scene::ISceneNode::setName( name );
    }

    virtual void setName( ::irr::core::stringc const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->irr::scene::ISceneNode::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::irr::core::stringc const & name ) {
        irr::scene::ISceneNode::setName( boost::ref(name) );
    }

    virtual void setParent( ::irr::scene::ISceneNode * newParent ) {
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(newParent) );
        else{
            this->irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
        }
    }
    
    void default_setParent( ::irr::scene::ISceneNode * newParent ) {
        irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
    }

    virtual void setPosition( ::irr::core::vector3df const & newpos ) {
        if( bp::override func_setPosition = this->get_override( "setPosition" ) )
            func_setPosition( boost::ref(newpos) );
        else{
            this->irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
        }
    }
    
    void default_setPosition( ::irr::core::vector3df const & newpos ) {
        irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
    }

    virtual void setRotation( ::irr::core::vector3df const & rotation ) {
        if( bp::override func_setRotation = this->get_override( "setRotation" ) )
            func_setRotation( boost::ref(rotation) );
        else{
            this->irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
        }
    }
    
    void default_setRotation( ::irr::core::vector3df const & rotation ) {
        irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
    }

    virtual void setScale( ::irr::core::vector3df const & scale ) {
        if( bp::override func_setScale = this->get_override( "setScale" ) )
            func_setScale( boost::ref(scale) );
        else{
            this->irr::scene::ISceneNode::setScale( boost::ref(scale) );
        }
    }
    
    void default_setScale( ::irr::core::vector3df const & scale ) {
        irr::scene::ISceneNode::setScale( boost::ref(scale) );
    }

    void setSceneManager( ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::setSceneManager( boost::python::ptr(newManager) );
    }

    virtual void setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        if( bp::override func_setTriangleSelector = this->get_override( "setTriangleSelector" ) )
            func_setTriangleSelector( boost::python::ptr(selector) );
        else{
            this->irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
        }
    }
    
    void default_setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
    }

    virtual void setVisible( bool isVisible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( isVisible );
        else{
            this->irr::scene::ISceneNode::setVisible( isVisible );
        }
    }
    
    void default_setVisible( bool isVisible ) {
        irr::scene::ISceneNode::setVisible( isVisible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::scene::ISceneNode::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::scene::ISceneNode::updateAbsolutePosition( );
    }

};

struct IGeometryCreator_wrapper : irr::scene::IGeometryCreator, bp::wrapper< irr::scene::IGeometryCreator > {

    IGeometryCreator_wrapper()
    : irr::scene::IGeometryCreator()
      , bp::wrapper< irr::scene::IGeometryCreator >(){
        // null constructor
        
    }

    virtual ::irr::scene::IMesh * createArrowMesh( ::irr::u32 const tesselationCylinder=4, ::irr::u32 const tesselationCone=8, ::irr::f32 const height=1.0e+0f, ::irr::f32 const cylinderHeight=6.0000002384185791015625e-1f, ::irr::f32 const widthCylinder=5.00000007450580596923828125e-2f, ::irr::f32 const widthCone=3.00000011920928955078125e-1f, ::irr::video::SColor const colorCylinder=4294967295u, ::irr::video::SColor const colorCone=4294967295u ) const {
        bp::override func_createArrowMesh = this->get_override( "createArrowMesh" );
        return func_createArrowMesh( tesselationCylinder, tesselationCone, height, cylinderHeight, widthCylinder, widthCone, colorCylinder, colorCone );
    }

    virtual ::irr::scene::IMesh * createConeMesh( ::irr::f32 radius, ::irr::f32 length, ::irr::u32 tesselation, ::irr::video::SColor const & colorTop=irr::video::SColor(4294967295u), ::irr::video::SColor const & colorBottom=irr::video::SColor(4294967295u), ::irr::f32 oblique=0.0f ) const {
        bp::override func_createConeMesh = this->get_override( "createConeMesh" );
        return func_createConeMesh( radius, length, tesselation, boost::ref(colorTop), boost::ref(colorBottom), oblique );
    }

    virtual ::irr::scene::IMesh * createCubeMesh( ::irr::core::vector3df const & size=irr::core::vector3d<float>(5.0e+0f, 5.0e+0f, 5.0e+0f) ) const {
        bp::override func_createCubeMesh = this->get_override( "createCubeMesh" );
        return func_createCubeMesh( boost::ref(size) );
    }

    virtual ::irr::scene::IMesh * createCylinderMesh( ::irr::f32 radius, ::irr::f32 length, ::irr::u32 tesselation, ::irr::video::SColor const & color=irr::video::SColor(4294967295u), bool closeTop=true, ::irr::f32 oblique=0.0f ) const {
        bp::override func_createCylinderMesh = this->get_override( "createCylinderMesh" );
        return func_createCylinderMesh( radius, length, tesselation, boost::ref(color), closeTop, oblique );
    }

    virtual ::irr::scene::IMesh * createHillPlaneMesh( ::irr::core::dimension2d< float > const & tileSize, ::irr::core::dimension2d< unsigned int > const & tileCount, ::irr::video::SMaterial * material, ::irr::f32 hillHeight, ::irr::core::dimension2d< float > const & countHills, ::irr::core::dimension2d< float > const & textureRepeatCount ) const {
        bp::override func_createHillPlaneMesh = this->get_override( "createHillPlaneMesh" );
        return func_createHillPlaneMesh( boost::ref(tileSize), boost::ref(tileCount), boost::python::ptr(material), hillHeight, boost::ref(countHills), boost::ref(textureRepeatCount) );
    }

    virtual ::irr::scene::IMesh * createSphereMesh( ::irr::f32 radius=5.0e+0f, ::irr::u32 polyCountX=16, ::irr::u32 polyCountY=16 ) const {
        bp::override func_createSphereMesh = this->get_override( "createSphereMesh" );
        return func_createSphereMesh( radius, polyCountX, polyCountY );
    }

    virtual ::irr::scene::IMesh * createTerrainMesh( ::irr::video::IImage * texture, ::irr::video::IImage * heightmap, ::irr::core::dimension2d< float > const & stretchSize, ::irr::f32 maxHeight, ::irr::video::IVideoDriver * driver, ::irr::core::dimension2d< unsigned int > const & defaultVertexBlockSize, bool debugBorders=false ) const {
        bp::override func_createTerrainMesh = this->get_override( "createTerrainMesh" );
        return func_createTerrainMesh( boost::python::ptr(texture), boost::python::ptr(heightmap), boost::ref(stretchSize), maxHeight, boost::python::ptr(driver), boost::ref(defaultVertexBlockSize), debugBorders );
    }

    virtual ::irr::scene::IMesh * createVolumeLightMesh( ::irr::u32 const subdivideU=32, ::irr::u32 const subdivideV=32, ::irr::video::SColor const footColor=4294967295u, ::irr::video::SColor const tailColor=4294967295u, ::irr::f32 const lpDistance=8.0e+0f, ::irr::core::vector3df const & lightDim=irr::core::vector3d<float>(1.0e+0f, 1.2000000476837158203125e+0f, 1.0e+0f) ) const {
        bp::override func_createVolumeLightMesh = this->get_override( "createVolumeLightMesh" );
        return func_createVolumeLightMesh( subdivideU, subdivideV, footColor, tailColor, lpDistance, boost::ref(lightDim) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct ILightManager_wrapper : irr::scene::ILightManager, bp::wrapper< irr::scene::ILightManager > {

    ILightManager_wrapper()
    : irr::scene::ILightManager()
      , bp::wrapper< irr::scene::ILightManager >(){
        // null constructor
        
    }

    virtual void OnNodePostRender( ::irr::scene::ISceneNode * node ){
        bp::override func_OnNodePostRender = this->get_override( "OnNodePostRender" );
        func_OnNodePostRender( boost::python::ptr(node) );
    }

    virtual void OnNodePreRender( ::irr::scene::ISceneNode * node ){
        bp::override func_OnNodePreRender = this->get_override( "OnNodePreRender" );
        func_OnNodePreRender( boost::python::ptr(node) );
    }

    virtual void OnPostRender(  ){
        bp::override func_OnPostRender = this->get_override( "OnPostRender" );
        func_OnPostRender(  );
    }

    virtual void OnPreRender( ::irr::core::array< irr::scene::ILightSceneNode*, irr::core::irrAllocator< irr::scene::ILightSceneNode* > > & lightList ){
        bp::override func_OnPreRender = this->get_override( "OnPreRender" );
        func_OnPreRender( boost::ref(lightList) );
    }

    virtual void OnRenderPassPostRender( ::irr::scene::E_SCENE_NODE_RENDER_PASS renderPass ){
        bp::override func_OnRenderPassPostRender = this->get_override( "OnRenderPassPostRender" );
        func_OnRenderPassPostRender( renderPass );
    }

    virtual void OnRenderPassPreRender( ::irr::scene::E_SCENE_NODE_RENDER_PASS renderPass ){
        bp::override func_OnRenderPassPreRender = this->get_override( "OnRenderPassPreRender" );
        func_OnRenderPassPreRender( renderPass );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct ILightSceneNode_wrapper : irr::scene::ILightSceneNode, bp::wrapper< irr::scene::ILightSceneNode > {

    ILightSceneNode_wrapper(::irr::scene::ISceneNode * parent, ::irr::scene::ISceneManager * mgr, ::irr::s32 id, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f) )
    : irr::scene::ILightSceneNode( boost::python::ptr(parent), boost::python::ptr(mgr), id, boost::ref(position) )
      , bp::wrapper< irr::scene::ILightSceneNode >(){
        // constructor
    
    }

    virtual void enableCastShadow( bool shadow=true ){
        bp::override func_enableCastShadow = this->get_override( "enableCastShadow" );
        func_enableCastShadow( shadow );
    }

    virtual bool getCastShadow(  ) const {
        bp::override func_getCastShadow = this->get_override( "getCastShadow" );
        return func_getCastShadow(  );
    }

    virtual ::irr::video::SLight const & getLightData(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::video::SLight & getLightData(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::video::E_LIGHT_TYPE getLightType(  ) const {
        bp::override func_getLightType = this->get_override( "getLightType" );
        return func_getLightType(  );
    }

    virtual ::irr::f32 getRadius(  ) const {
        bp::override func_getRadius = this->get_override( "getRadius" );
        return func_getRadius(  );
    }

    virtual void setLightData( ::irr::video::SLight const & light ){
        bp::override func_setLightData = this->get_override( "setLightData" );
        func_setLightData( boost::ref(light) );
    }

    virtual void setLightType( ::irr::video::E_LIGHT_TYPE type ){
        bp::override func_setLightType = this->get_override( "setLightType" );
        func_setLightType( type );
    }

    virtual void setRadius( ::irr::f32 radius ){
        bp::override func_setRadius = this->get_override( "setRadius" );
        func_setRadius( radius );
    }

    virtual void setVisible( bool isVisible ){
        bp::override func_setVisible = this->get_override( "setVisible" );
        func_setVisible( isVisible );
    }

    virtual void OnAnimate( ::irr::u32 timeMs ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( timeMs );
        else{
            this->irr::scene::ISceneNode::OnAnimate( timeMs );
        }
    }
    
    void default_OnAnimate( ::irr::u32 timeMs ) {
        irr::scene::ISceneNode::OnAnimate( timeMs );
    }

    virtual void OnRegisterSceneNode(  ) {
        if( bp::override func_OnRegisterSceneNode = this->get_override( "OnRegisterSceneNode" ) )
            func_OnRegisterSceneNode(  );
        else{
            this->irr::scene::ISceneNode::OnRegisterSceneNode(  );
        }
    }
    
    void default_OnRegisterSceneNode(  ) {
        irr::scene::ISceneNode::OnRegisterSceneNode( );
    }

    virtual void addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_addAnimator = this->get_override( "addAnimator" ) )
            func_addAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
    }

    virtual void addChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::scene::ISceneNode * child ) {
        irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
    }

    virtual ::irr::scene::ISceneNode * clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        else{
            return this->irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        }
    }
    
    ::irr::scene::ISceneNode * default_clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        return irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
    }

    void cloneMembers( ::irr::scene::ISceneNode * toCopyFrom, ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::cloneMembers( boost::python::ptr(toCopyFrom), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::core::vector3df getAbsolutePosition(  ) const  {
        if( bp::override func_getAbsolutePosition = this->get_override( "getAbsolutePosition" ) )
            return func_getAbsolutePosition(  );
        else{
            return this->irr::scene::ISceneNode::getAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector3df default_getAbsolutePosition(  ) const  {
        return irr::scene::ISceneNode::getAbsolutePosition( );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::scene::ISceneNode::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::scene::ISceneNode::getID( );
    }

    virtual ::irr::u32 getMaterialCount(  ) const  {
        if( bp::override func_getMaterialCount = this->get_override( "getMaterialCount" ) )
            return func_getMaterialCount(  );
        else{
            return this->irr::scene::ISceneNode::getMaterialCount(  );
        }
    }
    
    ::irr::u32 default_getMaterialCount(  ) const  {
        return irr::scene::ISceneNode::getMaterialCount( );
    }

    virtual ::irr::c8 const * getName(  ) const  {
        if( bp::override func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            return this->irr::scene::ISceneNode::getName(  );
        }
    }
    
    ::irr::c8 const * default_getName(  ) const  {
        return irr::scene::ISceneNode::getName( );
    }

    virtual ::irr::core::matrix4 getRelativeTransformation(  ) const  {
        if( bp::override func_getRelativeTransformation = this->get_override( "getRelativeTransformation" ) )
            return func_getRelativeTransformation(  );
        else{
            return this->irr::scene::ISceneNode::getRelativeTransformation(  );
        }
    }
    
    ::irr::core::matrix4 default_getRelativeTransformation(  ) const  {
        return irr::scene::ISceneNode::getRelativeTransformation( );
    }

    virtual ::irr::scene::ISceneManager * getSceneManager(  ) const  {
        if( bp::override func_getSceneManager = this->get_override( "getSceneManager" ) )
            return func_getSceneManager(  );
        else{
            return this->irr::scene::ISceneNode::getSceneManager(  );
        }
    }
    
    ::irr::scene::ISceneManager * default_getSceneManager(  ) const  {
        return irr::scene::ISceneNode::getSceneManager( );
    }

    virtual ::irr::core::aabbox3d< float > const getTransformedBoundingBox(  ) const  {
        if( bp::override func_getTransformedBoundingBox = this->get_override( "getTransformedBoundingBox" ) )
            return func_getTransformedBoundingBox(  );
        else{
            return this->irr::scene::ISceneNode::getTransformedBoundingBox(  );
        }
    }
    
    ::irr::core::aabbox3d< float > const default_getTransformedBoundingBox(  ) const  {
        return irr::scene::ISceneNode::getTransformedBoundingBox( );
    }

    virtual ::irr::scene::ITriangleSelector * getTriangleSelector(  ) const  {
        if( bp::override func_getTriangleSelector = this->get_override( "getTriangleSelector" ) )
            return func_getTriangleSelector(  );
        else{
            return this->irr::scene::ISceneNode::getTriangleSelector(  );
        }
    }
    
    ::irr::scene::ITriangleSelector * default_getTriangleSelector(  ) const  {
        return irr::scene::ISceneNode::getTriangleSelector( );
    }

    virtual ::irr::scene::ESCENE_NODE_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNode::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNode::getType( );
    }

    virtual bool isTrulyVisible(  ) const  {
        if( bp::override func_isTrulyVisible = this->get_override( "isTrulyVisible" ) )
            return func_isTrulyVisible(  );
        else{
            return this->irr::scene::ISceneNode::isTrulyVisible(  );
        }
    }
    
    bool default_isTrulyVisible(  ) const  {
        return irr::scene::ISceneNode::isTrulyVisible( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::scene::ISceneNode::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::scene::ISceneNode::isVisible( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::scene::ISceneNode::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::scene::ISceneNode::remove( );
    }

    virtual void removeAll(  ) {
        if( bp::override func_removeAll = this->get_override( "removeAll" ) )
            func_removeAll(  );
        else{
            this->irr::scene::ISceneNode::removeAll(  );
        }
    }
    
    void default_removeAll(  ) {
        irr::scene::ISceneNode::removeAll( );
    }

    virtual void removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_removeAnimator = this->get_override( "removeAnimator" ) )
            func_removeAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
    }

    virtual void removeAnimators(  ) {
        if( bp::override func_removeAnimators = this->get_override( "removeAnimators" ) )
            func_removeAnimators(  );
        else{
            this->irr::scene::ISceneNode::removeAnimators(  );
        }
    }
    
    void default_removeAnimators(  ) {
        irr::scene::ISceneNode::removeAnimators( );
    }

    virtual bool removeChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            return func_removeChild( boost::python::ptr(child) );
        else{
            return this->irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
        }
    }
    
    bool default_removeChild( ::irr::scene::ISceneNode * child ) {
        return irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
    }

    virtual void render(  ){
        bp::override func_render = this->get_override( "render" );
        func_render(  );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual void setDebugDataVisible( ::irr::s32 state ) {
        if( bp::override func_setDebugDataVisible = this->get_override( "setDebugDataVisible" ) )
            func_setDebugDataVisible( state );
        else{
            this->irr::scene::ISceneNode::setDebugDataVisible( state );
        }
    }
    
    void default_setDebugDataVisible( ::irr::s32 state ) {
        irr::scene::ISceneNode::setDebugDataVisible( state );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::scene::ISceneNode::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::scene::ISceneNode::setID( id );
    }

    virtual void setName( ::irr::c8 const * name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->irr::scene::ISceneNode::setName( name );
        }
    }
    
    void default_setName( ::irr::c8 const * name ) {
        irr::scene::ISceneNode::setName( name );
    }

    virtual void setName( ::irr::core::stringc const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->irr::scene::ISceneNode::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::irr::core::stringc const & name ) {
        irr::scene::ISceneNode::setName( boost::ref(name) );
    }

    virtual void setParent( ::irr::scene::ISceneNode * newParent ) {
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(newParent) );
        else{
            this->irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
        }
    }
    
    void default_setParent( ::irr::scene::ISceneNode * newParent ) {
        irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
    }

    virtual void setPosition( ::irr::core::vector3df const & newpos ) {
        if( bp::override func_setPosition = this->get_override( "setPosition" ) )
            func_setPosition( boost::ref(newpos) );
        else{
            this->irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
        }
    }
    
    void default_setPosition( ::irr::core::vector3df const & newpos ) {
        irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
    }

    virtual void setRotation( ::irr::core::vector3df const & rotation ) {
        if( bp::override func_setRotation = this->get_override( "setRotation" ) )
            func_setRotation( boost::ref(rotation) );
        else{
            this->irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
        }
    }
    
    void default_setRotation( ::irr::core::vector3df const & rotation ) {
        irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
    }

    virtual void setScale( ::irr::core::vector3df const & scale ) {
        if( bp::override func_setScale = this->get_override( "setScale" ) )
            func_setScale( boost::ref(scale) );
        else{
            this->irr::scene::ISceneNode::setScale( boost::ref(scale) );
        }
    }
    
    void default_setScale( ::irr::core::vector3df const & scale ) {
        irr::scene::ISceneNode::setScale( boost::ref(scale) );
    }

    void setSceneManager( ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::setSceneManager( boost::python::ptr(newManager) );
    }

    virtual void setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        if( bp::override func_setTriangleSelector = this->get_override( "setTriangleSelector" ) )
            func_setTriangleSelector( boost::python::ptr(selector) );
        else{
            this->irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
        }
    }
    
    void default_setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::scene::ISceneNode::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::scene::ISceneNode::updateAbsolutePosition( );
    }

};

struct IMeshCache_wrapper : irr::scene::IMeshCache, bp::wrapper< irr::scene::IMeshCache > {

    IMeshCache_wrapper()
    : irr::scene::IMeshCache()
      , bp::wrapper< irr::scene::IMeshCache >(){
        // null constructor
        
    }

    virtual void addMesh( ::irr::io::path const & name, ::irr::scene::IAnimatedMesh * mesh ){
        bp::override func_addMesh = this->get_override( "addMesh" );
        func_addMesh( boost::ref(name), boost::python::ptr(mesh) );
    }

    virtual void clear(  ){
        bp::override func_clear = this->get_override( "clear" );
        func_clear(  );
    }

    virtual void clearUnusedMeshes(  ){
        bp::override func_clearUnusedMeshes = this->get_override( "clearUnusedMeshes" );
        func_clearUnusedMeshes(  );
    }

    virtual ::irr::scene::IAnimatedMesh * getMeshByIndex( ::irr::u32 index ){
        bp::override func_getMeshByIndex = this->get_override( "getMeshByIndex" );
        return func_getMeshByIndex( index );
    }

    virtual ::irr::scene::IAnimatedMesh * getMeshByName( ::irr::io::path const & name ){
        bp::override func_getMeshByName = this->get_override( "getMeshByName" );
        return func_getMeshByName( boost::ref(name) );
    }

    virtual ::irr::u32 getMeshCount(  ) const {
        bp::override func_getMeshCount = this->get_override( "getMeshCount" );
        return func_getMeshCount(  );
    }

    virtual ::irr::s32 getMeshIndex( ::irr::scene::IAnimatedMesh const * const mesh ) const {
        bp::override func_getMeshIndex = this->get_override( "getMeshIndex" );
        return func_getMeshIndex( mesh );
    }

    virtual ::irr::s32 getMeshIndex( ::irr::scene::IMesh const * const mesh ) const {
        bp::override func_getMeshIndex = this->get_override( "getMeshIndex" );
        return func_getMeshIndex( mesh );
    }

    virtual ::irr::io::SNamedPath const & getMeshName( ::irr::u32 index ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::io::SNamedPath const & getMeshName( ::irr::scene::IAnimatedMesh const * const mesh ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::io::SNamedPath const & getMeshName( ::irr::scene::IMesh const * const mesh ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual bool isMeshLoaded( ::irr::io::path const & name ){
        bp::override func_isMeshLoaded = this->get_override( "isMeshLoaded" );
        return func_isMeshLoaded( boost::ref(name) );
    }

    virtual void removeMesh( ::irr::scene::IAnimatedMesh const * const mesh ){
        bp::override func_removeMesh = this->get_override( "removeMesh" );
        func_removeMesh( mesh );
    }

    virtual void removeMesh( ::irr::scene::IMesh const * const mesh ){
        bp::override func_removeMesh = this->get_override( "removeMesh" );
        func_removeMesh( mesh );
    }

    virtual bool renameMesh( ::irr::u32 index, ::irr::io::path const & name ){
        bp::override func_renameMesh = this->get_override( "renameMesh" );
        return func_renameMesh( index, boost::ref(name) );
    }

    virtual bool renameMesh( ::irr::scene::IAnimatedMesh const * const mesh, ::irr::io::path const & name ){
        bp::override func_renameMesh = this->get_override( "renameMesh" );
        return func_renameMesh( mesh, boost::ref(name) );
    }

    virtual bool renameMesh( ::irr::scene::IMesh const * const mesh, ::irr::io::path const & name ){
        bp::override func_renameMesh = this->get_override( "renameMesh" );
        return func_renameMesh( mesh, boost::ref(name) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IMeshLoader_wrapper : irr::scene::IMeshLoader, bp::wrapper< irr::scene::IMeshLoader > {

    IMeshLoader_wrapper()
    : irr::scene::IMeshLoader()
      , bp::wrapper< irr::scene::IMeshLoader >(){
        // null constructor
        
    }

    virtual ::irr::scene::IAnimatedMesh * createMesh( ::irr::io::IReadFile * file ){
        bp::override func_createMesh = this->get_override( "createMesh" );
        return func_createMesh( boost::python::ptr(file) );
    }

    virtual bool isALoadableFileExtension( ::irr::io::path const & filename ) const {
        bp::override func_isALoadableFileExtension = this->get_override( "isALoadableFileExtension" );
        return func_isALoadableFileExtension( boost::ref(filename) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IMeshManipulator_wrapper : irr::scene::IMeshManipulator, bp::wrapper< irr::scene::IMeshManipulator > {

    IMeshManipulator_wrapper()
    : irr::scene::IMeshManipulator()
      , bp::wrapper< irr::scene::IMeshManipulator >(){
        // null constructor
        
    }

    virtual ::irr::scene::IAnimatedMesh * createAnimatedMesh( ::irr::scene::IMesh * mesh, ::irr::scene::E_ANIMATED_MESH_TYPE type=::irr::scene::EAMT_UNKNOWN ) const {
        bp::override func_createAnimatedMesh = this->get_override( "createAnimatedMesh" );
        return func_createAnimatedMesh( boost::python::ptr(mesh), type );
    }

    virtual ::irr::scene::SMesh * createMeshCopy( ::irr::scene::IMesh * mesh ) const {
        bp::override func_createMeshCopy = this->get_override( "createMeshCopy" );
        return func_createMeshCopy( boost::python::ptr(mesh) );
    }

    virtual ::irr::scene::IMesh * createMeshUniquePrimitives( ::irr::scene::IMesh * mesh ) const {
        bp::override func_createMeshUniquePrimitives = this->get_override( "createMeshUniquePrimitives" );
        return func_createMeshUniquePrimitives( boost::python::ptr(mesh) );
    }

    virtual ::irr::scene::IMesh * createMeshWelded( ::irr::scene::IMesh * mesh, ::irr::f32 tolerance=irr::core::ROUNDING_ERROR_f32 ) const {
        bp::override func_createMeshWelded = this->get_override( "createMeshWelded" );
        return func_createMeshWelded( boost::python::ptr(mesh), tolerance );
    }

    virtual ::irr::scene::IMesh * createMeshWith1TCoords( ::irr::scene::IMesh * mesh ) const {
        bp::override func_createMeshWith1TCoords = this->get_override( "createMeshWith1TCoords" );
        return func_createMeshWith1TCoords( boost::python::ptr(mesh) );
    }

    virtual ::irr::scene::IMesh * createMeshWith2TCoords( ::irr::scene::IMesh * mesh ) const {
        bp::override func_createMeshWith2TCoords = this->get_override( "createMeshWith2TCoords" );
        return func_createMeshWith2TCoords( boost::python::ptr(mesh) );
    }

    virtual ::irr::scene::IMesh * createMeshWithTangents( ::irr::scene::IMesh * mesh, bool recalculateNormals=false, bool smooth=false, bool angleWeighted=false, bool recalculateTangents=true ) const {
        bp::override func_createMeshWithTangents = this->get_override( "createMeshWithTangents" );
        return func_createMeshWithTangents( boost::python::ptr(mesh), recalculateNormals, smooth, angleWeighted, recalculateTangents );
    }

    virtual void flipSurfaces( ::irr::scene::IMesh * mesh ) const {
        bp::override func_flipSurfaces = this->get_override( "flipSurfaces" );
        func_flipSurfaces( boost::python::ptr(mesh) );
    }

    virtual ::irr::s32 getPolyCount( ::irr::scene::IMesh * mesh ) const {
        bp::override func_getPolyCount = this->get_override( "getPolyCount" );
        return func_getPolyCount( boost::python::ptr(mesh) );
    }

    virtual ::irr::s32 getPolyCount( ::irr::scene::IAnimatedMesh * mesh ) const {
        bp::override func_getPolyCount = this->get_override( "getPolyCount" );
        return func_getPolyCount( boost::python::ptr(mesh) );
    }

    virtual void makePlanarTextureMapping( ::irr::scene::IMesh * mesh, ::irr::f32 resolution=1.000000047497451305389404296875e-3f ) const {
        bp::override func_makePlanarTextureMapping = this->get_override( "makePlanarTextureMapping" );
        func_makePlanarTextureMapping( boost::python::ptr(mesh), resolution );
    }

    virtual void makePlanarTextureMapping( ::irr::scene::IMeshBuffer * meshbuffer, ::irr::f32 resolution=1.000000047497451305389404296875e-3f ) const {
        bp::override func_makePlanarTextureMapping = this->get_override( "makePlanarTextureMapping" );
        func_makePlanarTextureMapping( boost::python::ptr(meshbuffer), resolution );
    }

    virtual void makePlanarTextureMapping( ::irr::scene::IMeshBuffer * buffer, ::irr::f32 resolutionS, ::irr::f32 resolutionT, ::irr::u8 axis, ::irr::core::vector3df const & offset ) const {
        bp::override func_makePlanarTextureMapping = this->get_override( "makePlanarTextureMapping" );
        func_makePlanarTextureMapping( boost::python::ptr(buffer), resolutionS, resolutionT, axis, boost::ref(offset) );
    }

    virtual void recalculateNormals( ::irr::scene::IMesh * mesh, bool smooth=false, bool angleWeighted=false ) const {
        bp::override func_recalculateNormals = this->get_override( "recalculateNormals" );
        func_recalculateNormals( boost::python::ptr(mesh), smooth, angleWeighted );
    }

    virtual void recalculateNormals( ::irr::scene::IMeshBuffer * buffer, bool smooth=false, bool angleWeighted=false ) const {
        bp::override func_recalculateNormals = this->get_override( "recalculateNormals" );
        func_recalculateNormals( boost::python::ptr(buffer), smooth, angleWeighted );
    }

    virtual void recalculateTangents( ::irr::scene::IMesh * mesh, bool recalculateNormals=false, bool smooth=false, bool angleWeighted=false ) const {
        bp::override func_recalculateTangents = this->get_override( "recalculateTangents" );
        func_recalculateTangents( boost::python::ptr(mesh), recalculateNormals, smooth, angleWeighted );
    }

    virtual void transformMesh( ::irr::scene::IMesh * mesh, ::irr::core::matrix4 const & m ) const  {
        if( bp::override func_transformMesh = this->get_override( "transformMesh" ) )
            func_transformMesh( boost::python::ptr(mesh), boost::ref(m) );
        else{
            this->irr::scene::IMeshManipulator::transformMesh( boost::python::ptr(mesh), boost::ref(m) );
        }
    }
    
    void default_transformMesh( ::irr::scene::IMesh * mesh, ::irr::core::matrix4 const & m ) const  {
        irr::scene::IMeshManipulator::transformMesh( boost::python::ptr(mesh), boost::ref(m) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IMeshSceneNode_wrapper : irr::scene::IMeshSceneNode, bp::wrapper< irr::scene::IMeshSceneNode > {

    IMeshSceneNode_wrapper(::irr::scene::ISceneNode * parent, ::irr::scene::ISceneManager * mgr, ::irr::s32 id, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & rotation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & scale=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )
    : irr::scene::IMeshSceneNode( boost::python::ptr(parent), boost::python::ptr(mgr), id, boost::ref(position), boost::ref(rotation), boost::ref(scale) )
      , bp::wrapper< irr::scene::IMeshSceneNode >(){
        // constructor
    
    }

    virtual ::irr::scene::IMesh * getMesh(  ){
        bp::override func_getMesh = this->get_override( "getMesh" );
        return func_getMesh(  );
    }

    virtual bool isReadOnlyMaterials(  ) const {
        bp::override func_isReadOnlyMaterials = this->get_override( "isReadOnlyMaterials" );
        return func_isReadOnlyMaterials(  );
    }

    virtual void setMesh( ::irr::scene::IMesh * mesh ){
        bp::override func_setMesh = this->get_override( "setMesh" );
        func_setMesh( boost::python::ptr(mesh) );
    }

    virtual void setReadOnlyMaterials( bool readonly ){
        bp::override func_setReadOnlyMaterials = this->get_override( "setReadOnlyMaterials" );
        func_setReadOnlyMaterials( readonly );
    }

    virtual void OnAnimate( ::irr::u32 timeMs ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( timeMs );
        else{
            this->irr::scene::ISceneNode::OnAnimate( timeMs );
        }
    }
    
    void default_OnAnimate( ::irr::u32 timeMs ) {
        irr::scene::ISceneNode::OnAnimate( timeMs );
    }

    virtual void OnRegisterSceneNode(  ) {
        if( bp::override func_OnRegisterSceneNode = this->get_override( "OnRegisterSceneNode" ) )
            func_OnRegisterSceneNode(  );
        else{
            this->irr::scene::ISceneNode::OnRegisterSceneNode(  );
        }
    }
    
    void default_OnRegisterSceneNode(  ) {
        irr::scene::ISceneNode::OnRegisterSceneNode( );
    }

    virtual void addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_addAnimator = this->get_override( "addAnimator" ) )
            func_addAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
    }

    virtual void addChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::scene::ISceneNode * child ) {
        irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
    }

    virtual ::irr::scene::ISceneNode * clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        else{
            return this->irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        }
    }
    
    ::irr::scene::ISceneNode * default_clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        return irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
    }

    void cloneMembers( ::irr::scene::ISceneNode * toCopyFrom, ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::cloneMembers( boost::python::ptr(toCopyFrom), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::core::vector3df getAbsolutePosition(  ) const  {
        if( bp::override func_getAbsolutePosition = this->get_override( "getAbsolutePosition" ) )
            return func_getAbsolutePosition(  );
        else{
            return this->irr::scene::ISceneNode::getAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector3df default_getAbsolutePosition(  ) const  {
        return irr::scene::ISceneNode::getAbsolutePosition( );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::scene::ISceneNode::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::scene::ISceneNode::getID( );
    }

    virtual ::irr::u32 getMaterialCount(  ) const  {
        if( bp::override func_getMaterialCount = this->get_override( "getMaterialCount" ) )
            return func_getMaterialCount(  );
        else{
            return this->irr::scene::ISceneNode::getMaterialCount(  );
        }
    }
    
    ::irr::u32 default_getMaterialCount(  ) const  {
        return irr::scene::ISceneNode::getMaterialCount( );
    }

    virtual ::irr::c8 const * getName(  ) const  {
        if( bp::override func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            return this->irr::scene::ISceneNode::getName(  );
        }
    }
    
    ::irr::c8 const * default_getName(  ) const  {
        return irr::scene::ISceneNode::getName( );
    }

    virtual ::irr::core::matrix4 getRelativeTransformation(  ) const  {
        if( bp::override func_getRelativeTransformation = this->get_override( "getRelativeTransformation" ) )
            return func_getRelativeTransformation(  );
        else{
            return this->irr::scene::ISceneNode::getRelativeTransformation(  );
        }
    }
    
    ::irr::core::matrix4 default_getRelativeTransformation(  ) const  {
        return irr::scene::ISceneNode::getRelativeTransformation( );
    }

    virtual ::irr::scene::ISceneManager * getSceneManager(  ) const  {
        if( bp::override func_getSceneManager = this->get_override( "getSceneManager" ) )
            return func_getSceneManager(  );
        else{
            return this->irr::scene::ISceneNode::getSceneManager(  );
        }
    }
    
    ::irr::scene::ISceneManager * default_getSceneManager(  ) const  {
        return irr::scene::ISceneNode::getSceneManager( );
    }

    virtual ::irr::core::aabbox3d< float > const getTransformedBoundingBox(  ) const  {
        if( bp::override func_getTransformedBoundingBox = this->get_override( "getTransformedBoundingBox" ) )
            return func_getTransformedBoundingBox(  );
        else{
            return this->irr::scene::ISceneNode::getTransformedBoundingBox(  );
        }
    }
    
    ::irr::core::aabbox3d< float > const default_getTransformedBoundingBox(  ) const  {
        return irr::scene::ISceneNode::getTransformedBoundingBox( );
    }

    virtual ::irr::scene::ITriangleSelector * getTriangleSelector(  ) const  {
        if( bp::override func_getTriangleSelector = this->get_override( "getTriangleSelector" ) )
            return func_getTriangleSelector(  );
        else{
            return this->irr::scene::ISceneNode::getTriangleSelector(  );
        }
    }
    
    ::irr::scene::ITriangleSelector * default_getTriangleSelector(  ) const  {
        return irr::scene::ISceneNode::getTriangleSelector( );
    }

    virtual ::irr::scene::ESCENE_NODE_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNode::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNode::getType( );
    }

    virtual bool isTrulyVisible(  ) const  {
        if( bp::override func_isTrulyVisible = this->get_override( "isTrulyVisible" ) )
            return func_isTrulyVisible(  );
        else{
            return this->irr::scene::ISceneNode::isTrulyVisible(  );
        }
    }
    
    bool default_isTrulyVisible(  ) const  {
        return irr::scene::ISceneNode::isTrulyVisible( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::scene::ISceneNode::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::scene::ISceneNode::isVisible( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::scene::ISceneNode::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::scene::ISceneNode::remove( );
    }

    virtual void removeAll(  ) {
        if( bp::override func_removeAll = this->get_override( "removeAll" ) )
            func_removeAll(  );
        else{
            this->irr::scene::ISceneNode::removeAll(  );
        }
    }
    
    void default_removeAll(  ) {
        irr::scene::ISceneNode::removeAll( );
    }

    virtual void removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_removeAnimator = this->get_override( "removeAnimator" ) )
            func_removeAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
    }

    virtual void removeAnimators(  ) {
        if( bp::override func_removeAnimators = this->get_override( "removeAnimators" ) )
            func_removeAnimators(  );
        else{
            this->irr::scene::ISceneNode::removeAnimators(  );
        }
    }
    
    void default_removeAnimators(  ) {
        irr::scene::ISceneNode::removeAnimators( );
    }

    virtual bool removeChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            return func_removeChild( boost::python::ptr(child) );
        else{
            return this->irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
        }
    }
    
    bool default_removeChild( ::irr::scene::ISceneNode * child ) {
        return irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
    }

    virtual void render(  ){
        bp::override func_render = this->get_override( "render" );
        func_render(  );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual void setDebugDataVisible( ::irr::s32 state ) {
        if( bp::override func_setDebugDataVisible = this->get_override( "setDebugDataVisible" ) )
            func_setDebugDataVisible( state );
        else{
            this->irr::scene::ISceneNode::setDebugDataVisible( state );
        }
    }
    
    void default_setDebugDataVisible( ::irr::s32 state ) {
        irr::scene::ISceneNode::setDebugDataVisible( state );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::scene::ISceneNode::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::scene::ISceneNode::setID( id );
    }

    virtual void setName( ::irr::c8 const * name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->irr::scene::ISceneNode::setName( name );
        }
    }
    
    void default_setName( ::irr::c8 const * name ) {
        irr::scene::ISceneNode::setName( name );
    }

    virtual void setName( ::irr::core::stringc const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->irr::scene::ISceneNode::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::irr::core::stringc const & name ) {
        irr::scene::ISceneNode::setName( boost::ref(name) );
    }

    virtual void setParent( ::irr::scene::ISceneNode * newParent ) {
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(newParent) );
        else{
            this->irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
        }
    }
    
    void default_setParent( ::irr::scene::ISceneNode * newParent ) {
        irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
    }

    virtual void setPosition( ::irr::core::vector3df const & newpos ) {
        if( bp::override func_setPosition = this->get_override( "setPosition" ) )
            func_setPosition( boost::ref(newpos) );
        else{
            this->irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
        }
    }
    
    void default_setPosition( ::irr::core::vector3df const & newpos ) {
        irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
    }

    virtual void setRotation( ::irr::core::vector3df const & rotation ) {
        if( bp::override func_setRotation = this->get_override( "setRotation" ) )
            func_setRotation( boost::ref(rotation) );
        else{
            this->irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
        }
    }
    
    void default_setRotation( ::irr::core::vector3df const & rotation ) {
        irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
    }

    virtual void setScale( ::irr::core::vector3df const & scale ) {
        if( bp::override func_setScale = this->get_override( "setScale" ) )
            func_setScale( boost::ref(scale) );
        else{
            this->irr::scene::ISceneNode::setScale( boost::ref(scale) );
        }
    }
    
    void default_setScale( ::irr::core::vector3df const & scale ) {
        irr::scene::ISceneNode::setScale( boost::ref(scale) );
    }

    void setSceneManager( ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::setSceneManager( boost::python::ptr(newManager) );
    }

    virtual void setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        if( bp::override func_setTriangleSelector = this->get_override( "setTriangleSelector" ) )
            func_setTriangleSelector( boost::python::ptr(selector) );
        else{
            this->irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
        }
    }
    
    void default_setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
    }

    virtual void setVisible( bool isVisible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( isVisible );
        else{
            this->irr::scene::ISceneNode::setVisible( isVisible );
        }
    }
    
    void default_setVisible( bool isVisible ) {
        irr::scene::ISceneNode::setVisible( isVisible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::scene::ISceneNode::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::scene::ISceneNode::updateAbsolutePosition( );
    }

};

struct IMeshWriter_wrapper : irr::scene::IMeshWriter, bp::wrapper< irr::scene::IMeshWriter > {

    IMeshWriter_wrapper()
    : irr::scene::IMeshWriter()
      , bp::wrapper< irr::scene::IMeshWriter >(){
        // null constructor
        
    }

    virtual ::irr::scene::EMESH_WRITER_TYPE getType(  ) const {
        bp::override func_getType = this->get_override( "getType" );
        return func_getType(  );
    }

    virtual bool writeMesh( ::irr::io::IWriteFile * file, ::irr::scene::IMesh * mesh, ::irr::s32 flags=::irr::s32(::irr::scene::EMWF_NONE) ){
        bp::override func_writeMesh = this->get_override( "writeMesh" );
        return func_writeMesh( boost::python::ptr(file), boost::python::ptr(mesh), flags );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct ITriangleSelector_wrapper : irr::scene::ITriangleSelector, bp::wrapper< irr::scene::ITriangleSelector > {

    ITriangleSelector_wrapper()
    : irr::scene::ITriangleSelector()
      , bp::wrapper< irr::scene::ITriangleSelector >(){
        // null constructor
        
    }

    virtual ::irr::scene::ISceneNode const * getSceneNodeForTriangle( ::irr::u32 triangleIndex ) const {
        bp::override func_getSceneNodeForTriangle = this->get_override( "getSceneNodeForTriangle" );
        return func_getSceneNodeForTriangle( triangleIndex );
    }

    virtual ::irr::s32 getTriangleCount(  ) const {
        bp::override func_getTriangleCount = this->get_override( "getTriangleCount" );
        return func_getTriangleCount(  );
    }

    virtual void getTriangles( ::irr::core::triangle3df * triangles, ::irr::s32 arraySize, ::irr::s32 & outTriangleCount, ::irr::core::matrix4 const * transform=0 ) const {
        bp::override func_getTriangles = this->get_override( "getTriangles" );
        func_getTriangles( boost::python::ptr(triangles), arraySize, outTriangleCount, boost::python::ptr(transform) );
    }

    virtual void getTriangles( ::irr::core::triangle3df * triangles, ::irr::s32 arraySize, ::irr::s32 & outTriangleCount, ::irr::core::aabbox3d< float > const & box, ::irr::core::matrix4 const * transform=0 ) const {
        bp::override func_getTriangles = this->get_override( "getTriangles" );
        func_getTriangles( boost::python::ptr(triangles), arraySize, outTriangleCount, boost::ref(box), boost::python::ptr(transform) );
    }

    virtual void getTriangles( ::irr::core::triangle3df * triangles, ::irr::s32 arraySize, ::irr::s32 & outTriangleCount, ::irr::core::line3d< float > const & line, ::irr::core::matrix4 const * transform=0 ) const {
        bp::override func_getTriangles = this->get_override( "getTriangles" );
        func_getTriangles( boost::python::ptr(triangles), arraySize, outTriangleCount, boost::ref(line), boost::python::ptr(transform) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IMetaTriangleSelector_wrapper : irr::scene::IMetaTriangleSelector, bp::wrapper< irr::scene::IMetaTriangleSelector > {

    IMetaTriangleSelector_wrapper()
    : irr::scene::IMetaTriangleSelector()
      , bp::wrapper< irr::scene::IMetaTriangleSelector >(){
        // null constructor
        
    }

    virtual void addTriangleSelector( ::irr::scene::ITriangleSelector * toAdd ){
        bp::override func_addTriangleSelector = this->get_override( "addTriangleSelector" );
        func_addTriangleSelector( boost::python::ptr(toAdd) );
    }

    virtual void removeAllTriangleSelectors(  ){
        bp::override func_removeAllTriangleSelectors = this->get_override( "removeAllTriangleSelectors" );
        func_removeAllTriangleSelectors(  );
    }

    virtual bool removeTriangleSelector( ::irr::scene::ITriangleSelector * toRemove ){
        bp::override func_removeTriangleSelector = this->get_override( "removeTriangleSelector" );
        return func_removeTriangleSelector( boost::python::ptr(toRemove) );
    }

    virtual ::irr::scene::ISceneNode const * getSceneNodeForTriangle( ::irr::u32 triangleIndex ) const {
        bp::override func_getSceneNodeForTriangle = this->get_override( "getSceneNodeForTriangle" );
        return func_getSceneNodeForTriangle( triangleIndex );
    }

    virtual ::irr::s32 getTriangleCount(  ) const {
        bp::override func_getTriangleCount = this->get_override( "getTriangleCount" );
        return func_getTriangleCount(  );
    }

    virtual void getTriangles( ::irr::core::triangle3df * triangles, ::irr::s32 arraySize, ::irr::s32 & outTriangleCount, ::irr::core::matrix4 const * transform=0 ) const {
        bp::override func_getTriangles = this->get_override( "getTriangles" );
        func_getTriangles( boost::python::ptr(triangles), arraySize, outTriangleCount, boost::python::ptr(transform) );
    }

    virtual void getTriangles( ::irr::core::triangle3df * triangles, ::irr::s32 arraySize, ::irr::s32 & outTriangleCount, ::irr::core::aabbox3d< float > const & box, ::irr::core::matrix4 const * transform=0 ) const {
        bp::override func_getTriangles = this->get_override( "getTriangles" );
        func_getTriangles( boost::python::ptr(triangles), arraySize, outTriangleCount, boost::ref(box), boost::python::ptr(transform) );
    }

    virtual void getTriangles( ::irr::core::triangle3df * triangles, ::irr::s32 arraySize, ::irr::s32 & outTriangleCount, ::irr::core::line3d< float > const & line, ::irr::core::matrix4 const * transform=0 ) const {
        bp::override func_getTriangles = this->get_override( "getTriangles" );
        func_getTriangles( boost::python::ptr(triangles), arraySize, outTriangleCount, boost::ref(line), boost::python::ptr(transform) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IParticleAffector_wrapper : irr::scene::IParticleAffector, bp::wrapper< irr::scene::IParticleAffector > {

    IParticleAffector_wrapper( )
    : irr::scene::IParticleAffector( )
      , bp::wrapper< irr::scene::IParticleAffector >(){
        // null constructor
    
    }

    virtual void affect( ::irr::u32 now, ::irr::scene::SParticle * particlearray, ::irr::u32 count ){
        bp::override func_affect = this->get_override( "affect" );
        func_affect( now, boost::python::ptr(particlearray), count );
    }

    virtual bool getEnabled(  ) const  {
        if( bp::override func_getEnabled = this->get_override( "getEnabled" ) )
            return func_getEnabled(  );
        else{
            return this->irr::scene::IParticleAffector::getEnabled(  );
        }
    }
    
    bool default_getEnabled(  ) const  {
        return irr::scene::IParticleAffector::getEnabled( );
    }

    virtual ::irr::scene::E_PARTICLE_AFFECTOR_TYPE getType(  ) const {
        bp::override func_getType = this->get_override( "getType" );
        return func_getType(  );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::scene::IParticleAffector::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::scene::IParticleAffector::setEnabled( enabled );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IParticleEmitter_wrapper : irr::scene::IParticleEmitter, bp::wrapper< irr::scene::IParticleEmitter > {

    IParticleEmitter_wrapper()
    : irr::scene::IParticleEmitter()
      , bp::wrapper< irr::scene::IParticleEmitter >(){
        // null constructor
        
    }

    virtual ::irr::s32 emitt( ::irr::u32 now, ::irr::u32 timeSinceLastCall, ::irr::scene::SParticle * & outArray ){
        bp::override func_emitt = this->get_override( "emitt" );
        return func_emitt( now, timeSinceLastCall, boost::ref(outArray) );
    }

    virtual ::irr::core::vector3df const & getDirection(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getMaxParticlesPerSecond(  ) const {
        bp::override func_getMaxParticlesPerSecond = this->get_override( "getMaxParticlesPerSecond" );
        return func_getMaxParticlesPerSecond(  );
    }

    virtual ::irr::video::SColor const & getMaxStartColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::dimension2df const & getMaxStartSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getMinParticlesPerSecond(  ) const {
        bp::override func_getMinParticlesPerSecond = this->get_override( "getMinParticlesPerSecond" );
        return func_getMinParticlesPerSecond(  );
    }

    virtual ::irr::video::SColor const & getMinStartColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::dimension2df const & getMinStartSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::scene::E_PARTICLE_EMITTER_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::IParticleEmitter::getType(  );
        }
    }
    
    ::irr::scene::E_PARTICLE_EMITTER_TYPE default_getType(  ) const  {
        return irr::scene::IParticleEmitter::getType( );
    }

    virtual void setDirection( ::irr::core::vector3df const & newDirection ){
        bp::override func_setDirection = this->get_override( "setDirection" );
        func_setDirection( boost::ref(newDirection) );
    }

    virtual void setMaxParticlesPerSecond( ::irr::u32 maxPPS ){
        bp::override func_setMaxParticlesPerSecond = this->get_override( "setMaxParticlesPerSecond" );
        func_setMaxParticlesPerSecond( maxPPS );
    }

    virtual void setMaxStartColor( ::irr::video::SColor const & color ){
        bp::override func_setMaxStartColor = this->get_override( "setMaxStartColor" );
        func_setMaxStartColor( boost::ref(color) );
    }

    virtual void setMaxStartSize( ::irr::core::dimension2df const & size ){
        bp::override func_setMaxStartSize = this->get_override( "setMaxStartSize" );
        func_setMaxStartSize( boost::ref(size) );
    }

    virtual void setMinParticlesPerSecond( ::irr::u32 minPPS ){
        bp::override func_setMinParticlesPerSecond = this->get_override( "setMinParticlesPerSecond" );
        func_setMinParticlesPerSecond( minPPS );
    }

    virtual void setMinStartColor( ::irr::video::SColor const & color ){
        bp::override func_setMinStartColor = this->get_override( "setMinStartColor" );
        func_setMinStartColor( boost::ref(color) );
    }

    virtual void setMinStartSize( ::irr::core::dimension2df const & size ){
        bp::override func_setMinStartSize = this->get_override( "setMinStartSize" );
        func_setMinStartSize( boost::ref(size) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IParticleAnimatedMeshSceneNodeEmitter_wrapper : irr::scene::IParticleAnimatedMeshSceneNodeEmitter, bp::wrapper< irr::scene::IParticleAnimatedMeshSceneNodeEmitter > {

    IParticleAnimatedMeshSceneNodeEmitter_wrapper()
    : irr::scene::IParticleAnimatedMeshSceneNodeEmitter()
      , bp::wrapper< irr::scene::IParticleAnimatedMeshSceneNodeEmitter >(){
        // null constructor
        
    }

    virtual ::irr::scene::IAnimatedMeshSceneNode const * getAnimatedMeshSceneNode(  ) const {
        bp::override func_getAnimatedMeshSceneNode = this->get_override( "getAnimatedMeshSceneNode" );
        return func_getAnimatedMeshSceneNode(  );
    }

    virtual bool getEveryMeshVertex(  ) const {
        bp::override func_getEveryMeshVertex = this->get_override( "getEveryMeshVertex" );
        return func_getEveryMeshVertex(  );
    }

    virtual ::irr::f32 getNormalDirectionModifier(  ) const {
        bp::override func_getNormalDirectionModifier = this->get_override( "getNormalDirectionModifier" );
        return func_getNormalDirectionModifier(  );
    }

    virtual ::irr::scene::E_PARTICLE_EMITTER_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::IParticleAnimatedMeshSceneNodeEmitter::getType(  );
        }
    }
    
    ::irr::scene::E_PARTICLE_EMITTER_TYPE default_getType(  ) const  {
        return irr::scene::IParticleAnimatedMeshSceneNodeEmitter::getType( );
    }

    virtual bool isUsingNormalDirection(  ) const {
        bp::override func_isUsingNormalDirection = this->get_override( "isUsingNormalDirection" );
        return func_isUsingNormalDirection(  );
    }

    virtual void setAnimatedMeshSceneNode( ::irr::scene::IAnimatedMeshSceneNode * node ){
        bp::override func_setAnimatedMeshSceneNode = this->get_override( "setAnimatedMeshSceneNode" );
        func_setAnimatedMeshSceneNode( boost::python::ptr(node) );
    }

    virtual void setEveryMeshVertex( bool everyMeshVertex=true ){
        bp::override func_setEveryMeshVertex = this->get_override( "setEveryMeshVertex" );
        func_setEveryMeshVertex( everyMeshVertex );
    }

    virtual void setNormalDirectionModifier( ::irr::f32 normalDirectionModifier ){
        bp::override func_setNormalDirectionModifier = this->get_override( "setNormalDirectionModifier" );
        func_setNormalDirectionModifier( normalDirectionModifier );
    }

    virtual void setUseNormalDirection( bool useNormalDirection=true ){
        bp::override func_setUseNormalDirection = this->get_override( "setUseNormalDirection" );
        func_setUseNormalDirection( useNormalDirection );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::s32 emitt( ::irr::u32 now, ::irr::u32 timeSinceLastCall, ::irr::scene::SParticle * & outArray ){
        bp::override func_emitt = this->get_override( "emitt" );
        return func_emitt( now, timeSinceLastCall, boost::ref(outArray) );
    }

    virtual ::irr::core::vector3df const & getDirection(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getMaxParticlesPerSecond(  ) const {
        bp::override func_getMaxParticlesPerSecond = this->get_override( "getMaxParticlesPerSecond" );
        return func_getMaxParticlesPerSecond(  );
    }

    virtual ::irr::video::SColor const & getMaxStartColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::dimension2df const & getMaxStartSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getMinParticlesPerSecond(  ) const {
        bp::override func_getMinParticlesPerSecond = this->get_override( "getMinParticlesPerSecond" );
        return func_getMinParticlesPerSecond(  );
    }

    virtual ::irr::video::SColor const & getMinStartColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::dimension2df const & getMinStartSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setDirection( ::irr::core::vector3df const & newDirection ){
        bp::override func_setDirection = this->get_override( "setDirection" );
        func_setDirection( boost::ref(newDirection) );
    }

    virtual void setMaxParticlesPerSecond( ::irr::u32 maxPPS ){
        bp::override func_setMaxParticlesPerSecond = this->get_override( "setMaxParticlesPerSecond" );
        func_setMaxParticlesPerSecond( maxPPS );
    }

    virtual void setMaxStartColor( ::irr::video::SColor const & color ){
        bp::override func_setMaxStartColor = this->get_override( "setMaxStartColor" );
        func_setMaxStartColor( boost::ref(color) );
    }

    virtual void setMaxStartSize( ::irr::core::dimension2df const & size ){
        bp::override func_setMaxStartSize = this->get_override( "setMaxStartSize" );
        func_setMaxStartSize( boost::ref(size) );
    }

    virtual void setMinParticlesPerSecond( ::irr::u32 minPPS ){
        bp::override func_setMinParticlesPerSecond = this->get_override( "setMinParticlesPerSecond" );
        func_setMinParticlesPerSecond( minPPS );
    }

    virtual void setMinStartColor( ::irr::video::SColor const & color ){
        bp::override func_setMinStartColor = this->get_override( "setMinStartColor" );
        func_setMinStartColor( boost::ref(color) );
    }

    virtual void setMinStartSize( ::irr::core::dimension2df const & size ){
        bp::override func_setMinStartSize = this->get_override( "setMinStartSize" );
        func_setMinStartSize( boost::ref(size) );
    }

};

struct IParticleAttractionAffector_wrapper : irr::scene::IParticleAttractionAffector, bp::wrapper< irr::scene::IParticleAttractionAffector > {

    IParticleAttractionAffector_wrapper()
    : irr::scene::IParticleAttractionAffector()
      , bp::wrapper< irr::scene::IParticleAttractionAffector >(){
        // null constructor
        
    }

    virtual bool getAffectX(  ) const {
        bp::override func_getAffectX = this->get_override( "getAffectX" );
        return func_getAffectX(  );
    }

    virtual bool getAffectY(  ) const {
        bp::override func_getAffectY = this->get_override( "getAffectY" );
        return func_getAffectY(  );
    }

    virtual bool getAffectZ(  ) const {
        bp::override func_getAffectZ = this->get_override( "getAffectZ" );
        return func_getAffectZ(  );
    }

    virtual bool getAttract(  ) const {
        bp::override func_getAttract = this->get_override( "getAttract" );
        return func_getAttract(  );
    }

    virtual ::irr::core::vector3df const & getPoint(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::scene::E_PARTICLE_AFFECTOR_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::IParticleAttractionAffector::getType(  );
        }
    }
    
    ::irr::scene::E_PARTICLE_AFFECTOR_TYPE default_getType(  ) const  {
        return irr::scene::IParticleAttractionAffector::getType( );
    }

    virtual void setAffectX( bool affect ){
        bp::override func_setAffectX = this->get_override( "setAffectX" );
        func_setAffectX( affect );
    }

    virtual void setAffectY( bool affect ){
        bp::override func_setAffectY = this->get_override( "setAffectY" );
        func_setAffectY( affect );
    }

    virtual void setAffectZ( bool affect ){
        bp::override func_setAffectZ = this->get_override( "setAffectZ" );
        func_setAffectZ( affect );
    }

    virtual void setAttract( bool attract ){
        bp::override func_setAttract = this->get_override( "setAttract" );
        func_setAttract( attract );
    }

    virtual void setPoint( ::irr::core::vector3df const & point ){
        bp::override func_setPoint = this->get_override( "setPoint" );
        func_setPoint( boost::ref(point) );
    }

    virtual void affect( ::irr::u32 now, ::irr::scene::SParticle * particlearray, ::irr::u32 count ){
        bp::override func_affect = this->get_override( "affect" );
        func_affect( now, boost::python::ptr(particlearray), count );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual bool getEnabled(  ) const  {
        if( bp::override func_getEnabled = this->get_override( "getEnabled" ) )
            return func_getEnabled(  );
        else{
            return this->irr::scene::IParticleAffector::getEnabled(  );
        }
    }
    
    bool default_getEnabled(  ) const  {
        return irr::scene::IParticleAffector::getEnabled( );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::scene::IParticleAffector::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::scene::IParticleAffector::setEnabled( enabled );
    }

};

struct IParticleBoxEmitter_wrapper : irr::scene::IParticleBoxEmitter, bp::wrapper< irr::scene::IParticleBoxEmitter > {

    IParticleBoxEmitter_wrapper()
    : irr::scene::IParticleBoxEmitter()
      , bp::wrapper< irr::scene::IParticleBoxEmitter >(){
        // null constructor
        
    }

    virtual ::irr::core::aabbox3df const & getBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::scene::E_PARTICLE_EMITTER_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::IParticleBoxEmitter::getType(  );
        }
    }
    
    ::irr::scene::E_PARTICLE_EMITTER_TYPE default_getType(  ) const  {
        return irr::scene::IParticleBoxEmitter::getType( );
    }

    virtual void setBox( ::irr::core::aabbox3df const & box ){
        bp::override func_setBox = this->get_override( "setBox" );
        func_setBox( boost::ref(box) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::s32 emitt( ::irr::u32 now, ::irr::u32 timeSinceLastCall, ::irr::scene::SParticle * & outArray ){
        bp::override func_emitt = this->get_override( "emitt" );
        return func_emitt( now, timeSinceLastCall, boost::ref(outArray) );
    }

    virtual ::irr::core::vector3df const & getDirection(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getMaxParticlesPerSecond(  ) const {
        bp::override func_getMaxParticlesPerSecond = this->get_override( "getMaxParticlesPerSecond" );
        return func_getMaxParticlesPerSecond(  );
    }

    virtual ::irr::video::SColor const & getMaxStartColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::dimension2df const & getMaxStartSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getMinParticlesPerSecond(  ) const {
        bp::override func_getMinParticlesPerSecond = this->get_override( "getMinParticlesPerSecond" );
        return func_getMinParticlesPerSecond(  );
    }

    virtual ::irr::video::SColor const & getMinStartColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::dimension2df const & getMinStartSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setDirection( ::irr::core::vector3df const & newDirection ){
        bp::override func_setDirection = this->get_override( "setDirection" );
        func_setDirection( boost::ref(newDirection) );
    }

    virtual void setMaxParticlesPerSecond( ::irr::u32 maxPPS ){
        bp::override func_setMaxParticlesPerSecond = this->get_override( "setMaxParticlesPerSecond" );
        func_setMaxParticlesPerSecond( maxPPS );
    }

    virtual void setMaxStartColor( ::irr::video::SColor const & color ){
        bp::override func_setMaxStartColor = this->get_override( "setMaxStartColor" );
        func_setMaxStartColor( boost::ref(color) );
    }

    virtual void setMaxStartSize( ::irr::core::dimension2df const & size ){
        bp::override func_setMaxStartSize = this->get_override( "setMaxStartSize" );
        func_setMaxStartSize( boost::ref(size) );
    }

    virtual void setMinParticlesPerSecond( ::irr::u32 minPPS ){
        bp::override func_setMinParticlesPerSecond = this->get_override( "setMinParticlesPerSecond" );
        func_setMinParticlesPerSecond( minPPS );
    }

    virtual void setMinStartColor( ::irr::video::SColor const & color ){
        bp::override func_setMinStartColor = this->get_override( "setMinStartColor" );
        func_setMinStartColor( boost::ref(color) );
    }

    virtual void setMinStartSize( ::irr::core::dimension2df const & size ){
        bp::override func_setMinStartSize = this->get_override( "setMinStartSize" );
        func_setMinStartSize( boost::ref(size) );
    }

};

struct IParticleCylinderEmitter_wrapper : irr::scene::IParticleCylinderEmitter, bp::wrapper< irr::scene::IParticleCylinderEmitter > {

    IParticleCylinderEmitter_wrapper()
    : irr::scene::IParticleCylinderEmitter()
      , bp::wrapper< irr::scene::IParticleCylinderEmitter >(){
        // null constructor
        
    }

    virtual ::irr::core::vector3df const & getCenter(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::f32 getLength(  ) const {
        bp::override func_getLength = this->get_override( "getLength" );
        return func_getLength(  );
    }

    virtual ::irr::core::vector3df const & getNormal(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual bool getOutlineOnly(  ) const {
        bp::override func_getOutlineOnly = this->get_override( "getOutlineOnly" );
        return func_getOutlineOnly(  );
    }

    virtual ::irr::f32 getRadius(  ) const {
        bp::override func_getRadius = this->get_override( "getRadius" );
        return func_getRadius(  );
    }

    virtual ::irr::scene::E_PARTICLE_EMITTER_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::IParticleCylinderEmitter::getType(  );
        }
    }
    
    ::irr::scene::E_PARTICLE_EMITTER_TYPE default_getType(  ) const  {
        return irr::scene::IParticleCylinderEmitter::getType( );
    }

    virtual void setCenter( ::irr::core::vector3df const & center ){
        bp::override func_setCenter = this->get_override( "setCenter" );
        func_setCenter( boost::ref(center) );
    }

    virtual void setLength( ::irr::f32 length ){
        bp::override func_setLength = this->get_override( "setLength" );
        func_setLength( length );
    }

    virtual void setNormal( ::irr::core::vector3df const & normal ){
        bp::override func_setNormal = this->get_override( "setNormal" );
        func_setNormal( boost::ref(normal) );
    }

    virtual void setOutlineOnly( bool outlineOnly=true ){
        bp::override func_setOutlineOnly = this->get_override( "setOutlineOnly" );
        func_setOutlineOnly( outlineOnly );
    }

    virtual void setRadius( ::irr::f32 radius ){
        bp::override func_setRadius = this->get_override( "setRadius" );
        func_setRadius( radius );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::s32 emitt( ::irr::u32 now, ::irr::u32 timeSinceLastCall, ::irr::scene::SParticle * & outArray ){
        bp::override func_emitt = this->get_override( "emitt" );
        return func_emitt( now, timeSinceLastCall, boost::ref(outArray) );
    }

    virtual ::irr::core::vector3df const & getDirection(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getMaxParticlesPerSecond(  ) const {
        bp::override func_getMaxParticlesPerSecond = this->get_override( "getMaxParticlesPerSecond" );
        return func_getMaxParticlesPerSecond(  );
    }

    virtual ::irr::video::SColor const & getMaxStartColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::dimension2df const & getMaxStartSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getMinParticlesPerSecond(  ) const {
        bp::override func_getMinParticlesPerSecond = this->get_override( "getMinParticlesPerSecond" );
        return func_getMinParticlesPerSecond(  );
    }

    virtual ::irr::video::SColor const & getMinStartColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::dimension2df const & getMinStartSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setDirection( ::irr::core::vector3df const & newDirection ){
        bp::override func_setDirection = this->get_override( "setDirection" );
        func_setDirection( boost::ref(newDirection) );
    }

    virtual void setMaxParticlesPerSecond( ::irr::u32 maxPPS ){
        bp::override func_setMaxParticlesPerSecond = this->get_override( "setMaxParticlesPerSecond" );
        func_setMaxParticlesPerSecond( maxPPS );
    }

    virtual void setMaxStartColor( ::irr::video::SColor const & color ){
        bp::override func_setMaxStartColor = this->get_override( "setMaxStartColor" );
        func_setMaxStartColor( boost::ref(color) );
    }

    virtual void setMaxStartSize( ::irr::core::dimension2df const & size ){
        bp::override func_setMaxStartSize = this->get_override( "setMaxStartSize" );
        func_setMaxStartSize( boost::ref(size) );
    }

    virtual void setMinParticlesPerSecond( ::irr::u32 minPPS ){
        bp::override func_setMinParticlesPerSecond = this->get_override( "setMinParticlesPerSecond" );
        func_setMinParticlesPerSecond( minPPS );
    }

    virtual void setMinStartColor( ::irr::video::SColor const & color ){
        bp::override func_setMinStartColor = this->get_override( "setMinStartColor" );
        func_setMinStartColor( boost::ref(color) );
    }

    virtual void setMinStartSize( ::irr::core::dimension2df const & size ){
        bp::override func_setMinStartSize = this->get_override( "setMinStartSize" );
        func_setMinStartSize( boost::ref(size) );
    }

};

struct IParticleFadeOutAffector_wrapper : irr::scene::IParticleFadeOutAffector, bp::wrapper< irr::scene::IParticleFadeOutAffector > {

    IParticleFadeOutAffector_wrapper()
    : irr::scene::IParticleFadeOutAffector()
      , bp::wrapper< irr::scene::IParticleFadeOutAffector >(){
        // null constructor
        
    }

    virtual ::irr::f32 getFadeOutTime(  ) const {
        bp::override func_getFadeOutTime = this->get_override( "getFadeOutTime" );
        return func_getFadeOutTime(  );
    }

    virtual ::irr::video::SColor const & getTargetColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::scene::E_PARTICLE_AFFECTOR_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::IParticleFadeOutAffector::getType(  );
        }
    }
    
    ::irr::scene::E_PARTICLE_AFFECTOR_TYPE default_getType(  ) const  {
        return irr::scene::IParticleFadeOutAffector::getType( );
    }

    virtual void setFadeOutTime( ::irr::f32 fadeOutTime ){
        bp::override func_setFadeOutTime = this->get_override( "setFadeOutTime" );
        func_setFadeOutTime( fadeOutTime );
    }

    virtual void setTargetColor( ::irr::video::SColor const & targetColor ){
        bp::override func_setTargetColor = this->get_override( "setTargetColor" );
        func_setTargetColor( boost::ref(targetColor) );
    }

    virtual void affect( ::irr::u32 now, ::irr::scene::SParticle * particlearray, ::irr::u32 count ){
        bp::override func_affect = this->get_override( "affect" );
        func_affect( now, boost::python::ptr(particlearray), count );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual bool getEnabled(  ) const  {
        if( bp::override func_getEnabled = this->get_override( "getEnabled" ) )
            return func_getEnabled(  );
        else{
            return this->irr::scene::IParticleAffector::getEnabled(  );
        }
    }
    
    bool default_getEnabled(  ) const  {
        return irr::scene::IParticleAffector::getEnabled( );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::scene::IParticleAffector::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::scene::IParticleAffector::setEnabled( enabled );
    }

};

struct IParticleGravityAffector_wrapper : irr::scene::IParticleGravityAffector, bp::wrapper< irr::scene::IParticleGravityAffector > {

    IParticleGravityAffector_wrapper()
    : irr::scene::IParticleGravityAffector()
      , bp::wrapper< irr::scene::IParticleGravityAffector >(){
        // null constructor
        
    }

    virtual ::irr::core::vector3df const & getGravity(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::f32 getTimeForceLost(  ) const {
        bp::override func_getTimeForceLost = this->get_override( "getTimeForceLost" );
        return func_getTimeForceLost(  );
    }

    virtual ::irr::scene::E_PARTICLE_AFFECTOR_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::IParticleGravityAffector::getType(  );
        }
    }
    
    ::irr::scene::E_PARTICLE_AFFECTOR_TYPE default_getType(  ) const  {
        return irr::scene::IParticleGravityAffector::getType( );
    }

    virtual void setGravity( ::irr::core::vector3df const & gravity ){
        bp::override func_setGravity = this->get_override( "setGravity" );
        func_setGravity( boost::ref(gravity) );
    }

    virtual void setTimeForceLost( ::irr::f32 timeForceLost ){
        bp::override func_setTimeForceLost = this->get_override( "setTimeForceLost" );
        func_setTimeForceLost( timeForceLost );
    }

    virtual void affect( ::irr::u32 now, ::irr::scene::SParticle * particlearray, ::irr::u32 count ){
        bp::override func_affect = this->get_override( "affect" );
        func_affect( now, boost::python::ptr(particlearray), count );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual bool getEnabled(  ) const  {
        if( bp::override func_getEnabled = this->get_override( "getEnabled" ) )
            return func_getEnabled(  );
        else{
            return this->irr::scene::IParticleAffector::getEnabled(  );
        }
    }
    
    bool default_getEnabled(  ) const  {
        return irr::scene::IParticleAffector::getEnabled( );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::scene::IParticleAffector::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::scene::IParticleAffector::setEnabled( enabled );
    }

};

struct IParticleMeshEmitter_wrapper : irr::scene::IParticleMeshEmitter, bp::wrapper< irr::scene::IParticleMeshEmitter > {

    IParticleMeshEmitter_wrapper()
    : irr::scene::IParticleMeshEmitter()
      , bp::wrapper< irr::scene::IParticleMeshEmitter >(){
        // null constructor
        
    }

    virtual bool getEveryMeshVertex(  ) const {
        bp::override func_getEveryMeshVertex = this->get_override( "getEveryMeshVertex" );
        return func_getEveryMeshVertex(  );
    }

    virtual ::irr::scene::IMesh const * getMesh(  ) const {
        bp::override func_getMesh = this->get_override( "getMesh" );
        return func_getMesh(  );
    }

    virtual ::irr::f32 getNormalDirectionModifier(  ) const {
        bp::override func_getNormalDirectionModifier = this->get_override( "getNormalDirectionModifier" );
        return func_getNormalDirectionModifier(  );
    }

    virtual ::irr::scene::E_PARTICLE_EMITTER_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::IParticleMeshEmitter::getType(  );
        }
    }
    
    ::irr::scene::E_PARTICLE_EMITTER_TYPE default_getType(  ) const  {
        return irr::scene::IParticleMeshEmitter::getType( );
    }

    virtual bool isUsingNormalDirection(  ) const {
        bp::override func_isUsingNormalDirection = this->get_override( "isUsingNormalDirection" );
        return func_isUsingNormalDirection(  );
    }

    virtual void setEveryMeshVertex( bool everyMeshVertex=true ){
        bp::override func_setEveryMeshVertex = this->get_override( "setEveryMeshVertex" );
        func_setEveryMeshVertex( everyMeshVertex );
    }

    virtual void setMesh( ::irr::scene::IMesh * mesh ){
        bp::override func_setMesh = this->get_override( "setMesh" );
        func_setMesh( boost::python::ptr(mesh) );
    }

    virtual void setNormalDirectionModifier( ::irr::f32 normalDirectionModifier ){
        bp::override func_setNormalDirectionModifier = this->get_override( "setNormalDirectionModifier" );
        func_setNormalDirectionModifier( normalDirectionModifier );
    }

    virtual void setUseNormalDirection( bool useNormalDirection=true ){
        bp::override func_setUseNormalDirection = this->get_override( "setUseNormalDirection" );
        func_setUseNormalDirection( useNormalDirection );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::s32 emitt( ::irr::u32 now, ::irr::u32 timeSinceLastCall, ::irr::scene::SParticle * & outArray ){
        bp::override func_emitt = this->get_override( "emitt" );
        return func_emitt( now, timeSinceLastCall, boost::ref(outArray) );
    }

    virtual ::irr::core::vector3df const & getDirection(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getMaxParticlesPerSecond(  ) const {
        bp::override func_getMaxParticlesPerSecond = this->get_override( "getMaxParticlesPerSecond" );
        return func_getMaxParticlesPerSecond(  );
    }

    virtual ::irr::video::SColor const & getMaxStartColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::dimension2df const & getMaxStartSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getMinParticlesPerSecond(  ) const {
        bp::override func_getMinParticlesPerSecond = this->get_override( "getMinParticlesPerSecond" );
        return func_getMinParticlesPerSecond(  );
    }

    virtual ::irr::video::SColor const & getMinStartColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::dimension2df const & getMinStartSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setDirection( ::irr::core::vector3df const & newDirection ){
        bp::override func_setDirection = this->get_override( "setDirection" );
        func_setDirection( boost::ref(newDirection) );
    }

    virtual void setMaxParticlesPerSecond( ::irr::u32 maxPPS ){
        bp::override func_setMaxParticlesPerSecond = this->get_override( "setMaxParticlesPerSecond" );
        func_setMaxParticlesPerSecond( maxPPS );
    }

    virtual void setMaxStartColor( ::irr::video::SColor const & color ){
        bp::override func_setMaxStartColor = this->get_override( "setMaxStartColor" );
        func_setMaxStartColor( boost::ref(color) );
    }

    virtual void setMaxStartSize( ::irr::core::dimension2df const & size ){
        bp::override func_setMaxStartSize = this->get_override( "setMaxStartSize" );
        func_setMaxStartSize( boost::ref(size) );
    }

    virtual void setMinParticlesPerSecond( ::irr::u32 minPPS ){
        bp::override func_setMinParticlesPerSecond = this->get_override( "setMinParticlesPerSecond" );
        func_setMinParticlesPerSecond( minPPS );
    }

    virtual void setMinStartColor( ::irr::video::SColor const & color ){
        bp::override func_setMinStartColor = this->get_override( "setMinStartColor" );
        func_setMinStartColor( boost::ref(color) );
    }

    virtual void setMinStartSize( ::irr::core::dimension2df const & size ){
        bp::override func_setMinStartSize = this->get_override( "setMinStartSize" );
        func_setMinStartSize( boost::ref(size) );
    }

};

struct IParticleRingEmitter_wrapper : irr::scene::IParticleRingEmitter, bp::wrapper< irr::scene::IParticleRingEmitter > {

    IParticleRingEmitter_wrapper()
    : irr::scene::IParticleRingEmitter()
      , bp::wrapper< irr::scene::IParticleRingEmitter >(){
        // null constructor
        
    }

    virtual ::irr::core::vector3df const & getCenter(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::f32 getRadius(  ) const {
        bp::override func_getRadius = this->get_override( "getRadius" );
        return func_getRadius(  );
    }

    virtual ::irr::f32 getRingThickness(  ) const {
        bp::override func_getRingThickness = this->get_override( "getRingThickness" );
        return func_getRingThickness(  );
    }

    virtual ::irr::scene::E_PARTICLE_EMITTER_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::IParticleRingEmitter::getType(  );
        }
    }
    
    ::irr::scene::E_PARTICLE_EMITTER_TYPE default_getType(  ) const  {
        return irr::scene::IParticleRingEmitter::getType( );
    }

    virtual void setCenter( ::irr::core::vector3df const & center ){
        bp::override func_setCenter = this->get_override( "setCenter" );
        func_setCenter( boost::ref(center) );
    }

    virtual void setRadius( ::irr::f32 radius ){
        bp::override func_setRadius = this->get_override( "setRadius" );
        func_setRadius( radius );
    }

    virtual void setRingThickness( ::irr::f32 ringThickness ){
        bp::override func_setRingThickness = this->get_override( "setRingThickness" );
        func_setRingThickness( ringThickness );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::s32 emitt( ::irr::u32 now, ::irr::u32 timeSinceLastCall, ::irr::scene::SParticle * & outArray ){
        bp::override func_emitt = this->get_override( "emitt" );
        return func_emitt( now, timeSinceLastCall, boost::ref(outArray) );
    }

    virtual ::irr::core::vector3df const & getDirection(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getMaxParticlesPerSecond(  ) const {
        bp::override func_getMaxParticlesPerSecond = this->get_override( "getMaxParticlesPerSecond" );
        return func_getMaxParticlesPerSecond(  );
    }

    virtual ::irr::video::SColor const & getMaxStartColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::dimension2df const & getMaxStartSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getMinParticlesPerSecond(  ) const {
        bp::override func_getMinParticlesPerSecond = this->get_override( "getMinParticlesPerSecond" );
        return func_getMinParticlesPerSecond(  );
    }

    virtual ::irr::video::SColor const & getMinStartColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::dimension2df const & getMinStartSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setDirection( ::irr::core::vector3df const & newDirection ){
        bp::override func_setDirection = this->get_override( "setDirection" );
        func_setDirection( boost::ref(newDirection) );
    }

    virtual void setMaxParticlesPerSecond( ::irr::u32 maxPPS ){
        bp::override func_setMaxParticlesPerSecond = this->get_override( "setMaxParticlesPerSecond" );
        func_setMaxParticlesPerSecond( maxPPS );
    }

    virtual void setMaxStartColor( ::irr::video::SColor const & color ){
        bp::override func_setMaxStartColor = this->get_override( "setMaxStartColor" );
        func_setMaxStartColor( boost::ref(color) );
    }

    virtual void setMaxStartSize( ::irr::core::dimension2df const & size ){
        bp::override func_setMaxStartSize = this->get_override( "setMaxStartSize" );
        func_setMaxStartSize( boost::ref(size) );
    }

    virtual void setMinParticlesPerSecond( ::irr::u32 minPPS ){
        bp::override func_setMinParticlesPerSecond = this->get_override( "setMinParticlesPerSecond" );
        func_setMinParticlesPerSecond( minPPS );
    }

    virtual void setMinStartColor( ::irr::video::SColor const & color ){
        bp::override func_setMinStartColor = this->get_override( "setMinStartColor" );
        func_setMinStartColor( boost::ref(color) );
    }

    virtual void setMinStartSize( ::irr::core::dimension2df const & size ){
        bp::override func_setMinStartSize = this->get_override( "setMinStartSize" );
        func_setMinStartSize( boost::ref(size) );
    }

};

struct IParticleRotationAffector_wrapper : irr::scene::IParticleRotationAffector, bp::wrapper< irr::scene::IParticleRotationAffector > {

    IParticleRotationAffector_wrapper()
    : irr::scene::IParticleRotationAffector()
      , bp::wrapper< irr::scene::IParticleRotationAffector >(){
        // null constructor
        
    }

    virtual ::irr::core::vector3df const & getPivotPoint(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector3df const & getSpeed(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::scene::E_PARTICLE_AFFECTOR_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::IParticleRotationAffector::getType(  );
        }
    }
    
    ::irr::scene::E_PARTICLE_AFFECTOR_TYPE default_getType(  ) const  {
        return irr::scene::IParticleRotationAffector::getType( );
    }

    virtual void setPivotPoint( ::irr::core::vector3df const & point ){
        bp::override func_setPivotPoint = this->get_override( "setPivotPoint" );
        func_setPivotPoint( boost::ref(point) );
    }

    virtual void setSpeed( ::irr::core::vector3df const & speed ){
        bp::override func_setSpeed = this->get_override( "setSpeed" );
        func_setSpeed( boost::ref(speed) );
    }

    virtual void affect( ::irr::u32 now, ::irr::scene::SParticle * particlearray, ::irr::u32 count ){
        bp::override func_affect = this->get_override( "affect" );
        func_affect( now, boost::python::ptr(particlearray), count );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual bool getEnabled(  ) const  {
        if( bp::override func_getEnabled = this->get_override( "getEnabled" ) )
            return func_getEnabled(  );
        else{
            return this->irr::scene::IParticleAffector::getEnabled(  );
        }
    }
    
    bool default_getEnabled(  ) const  {
        return irr::scene::IParticleAffector::getEnabled( );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setEnabled( bool enabled ) {
        if( bp::override func_setEnabled = this->get_override( "setEnabled" ) )
            func_setEnabled( enabled );
        else{
            this->irr::scene::IParticleAffector::setEnabled( enabled );
        }
    }
    
    void default_setEnabled( bool enabled ) {
        irr::scene::IParticleAffector::setEnabled( enabled );
    }

};

struct IParticleSphereEmitter_wrapper : irr::scene::IParticleSphereEmitter, bp::wrapper< irr::scene::IParticleSphereEmitter > {

    IParticleSphereEmitter_wrapper()
    : irr::scene::IParticleSphereEmitter()
      , bp::wrapper< irr::scene::IParticleSphereEmitter >(){
        // null constructor
        
    }

    virtual ::irr::core::vector3df const & getCenter(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::f32 getRadius(  ) const {
        bp::override func_getRadius = this->get_override( "getRadius" );
        return func_getRadius(  );
    }

    virtual ::irr::scene::E_PARTICLE_EMITTER_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::IParticleSphereEmitter::getType(  );
        }
    }
    
    ::irr::scene::E_PARTICLE_EMITTER_TYPE default_getType(  ) const  {
        return irr::scene::IParticleSphereEmitter::getType( );
    }

    virtual void setCenter( ::irr::core::vector3df const & center ){
        bp::override func_setCenter = this->get_override( "setCenter" );
        func_setCenter( boost::ref(center) );
    }

    virtual void setRadius( ::irr::f32 radius ){
        bp::override func_setRadius = this->get_override( "setRadius" );
        func_setRadius( radius );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::s32 emitt( ::irr::u32 now, ::irr::u32 timeSinceLastCall, ::irr::scene::SParticle * & outArray ){
        bp::override func_emitt = this->get_override( "emitt" );
        return func_emitt( now, timeSinceLastCall, boost::ref(outArray) );
    }

    virtual ::irr::core::vector3df const & getDirection(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getMaxParticlesPerSecond(  ) const {
        bp::override func_getMaxParticlesPerSecond = this->get_override( "getMaxParticlesPerSecond" );
        return func_getMaxParticlesPerSecond(  );
    }

    virtual ::irr::video::SColor const & getMaxStartColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::dimension2df const & getMaxStartSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getMinParticlesPerSecond(  ) const {
        bp::override func_getMinParticlesPerSecond = this->get_override( "getMinParticlesPerSecond" );
        return func_getMinParticlesPerSecond(  );
    }

    virtual ::irr::video::SColor const & getMinStartColor(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::dimension2df const & getMinStartSize(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setDirection( ::irr::core::vector3df const & newDirection ){
        bp::override func_setDirection = this->get_override( "setDirection" );
        func_setDirection( boost::ref(newDirection) );
    }

    virtual void setMaxParticlesPerSecond( ::irr::u32 maxPPS ){
        bp::override func_setMaxParticlesPerSecond = this->get_override( "setMaxParticlesPerSecond" );
        func_setMaxParticlesPerSecond( maxPPS );
    }

    virtual void setMaxStartColor( ::irr::video::SColor const & color ){
        bp::override func_setMaxStartColor = this->get_override( "setMaxStartColor" );
        func_setMaxStartColor( boost::ref(color) );
    }

    virtual void setMaxStartSize( ::irr::core::dimension2df const & size ){
        bp::override func_setMaxStartSize = this->get_override( "setMaxStartSize" );
        func_setMaxStartSize( boost::ref(size) );
    }

    virtual void setMinParticlesPerSecond( ::irr::u32 minPPS ){
        bp::override func_setMinParticlesPerSecond = this->get_override( "setMinParticlesPerSecond" );
        func_setMinParticlesPerSecond( minPPS );
    }

    virtual void setMinStartColor( ::irr::video::SColor const & color ){
        bp::override func_setMinStartColor = this->get_override( "setMinStartColor" );
        func_setMinStartColor( boost::ref(color) );
    }

    virtual void setMinStartSize( ::irr::core::dimension2df const & size ){
        bp::override func_setMinStartSize = this->get_override( "setMinStartSize" );
        func_setMinStartSize( boost::ref(size) );
    }

};

struct IParticleSystemSceneNode_wrapper : irr::scene::IParticleSystemSceneNode, bp::wrapper< irr::scene::IParticleSystemSceneNode > {

    IParticleSystemSceneNode_wrapper(::irr::scene::ISceneNode * parent, ::irr::scene::ISceneManager * mgr, ::irr::s32 id, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & rotation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & scale=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )
    : irr::scene::IParticleSystemSceneNode( boost::python::ptr(parent), boost::python::ptr(mgr), id, boost::ref(position), boost::ref(rotation), boost::ref(scale) )
      , bp::wrapper< irr::scene::IParticleSystemSceneNode >(){
        // constructor
    
    }

    virtual void addAffector( ::irr::scene::IParticleAffector * affector ){
        bp::override func_addAffector = this->get_override( "addAffector" );
        func_addAffector( boost::python::ptr(affector) );
    }

    virtual ::irr::scene::IParticleAnimatedMeshSceneNodeEmitter * createAnimatedMeshSceneNodeEmitter( ::irr::scene::IAnimatedMeshSceneNode * node, bool useNormalDirection=true, ::irr::core::vector3df const & direction=irr::core::vector3d<float>(0.0f, 2.999999932944774627685546875e-2f, 0.0f), ::irr::f32 normalDirectionModifier=1.0e+2f, ::irr::s32 mbNumber=-0x00000000000000001, bool everyMeshVertex=false, ::irr::u32 minParticlesPerSecond=5, ::irr::u32 maxParticlesPerSecond=10, ::irr::video::SColor const & minStartColor=irr::video::SColor(255u, 0u, 0u, 0u), ::irr::video::SColor const & maxStartColor=irr::video::SColor(255u, 255u, 255u, 255u), ::irr::u32 lifeTimeMin=2000, ::irr::u32 lifeTimeMax=4000, ::irr::s32 maxAngleDegrees=0, ::irr::core::dimension2df const & minStartSize=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))), ::irr::core::dimension2df const & maxStartSize=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) ){
        bp::override func_createAnimatedMeshSceneNodeEmitter = this->get_override( "createAnimatedMeshSceneNodeEmitter" );
        return func_createAnimatedMeshSceneNodeEmitter( boost::python::ptr(node), useNormalDirection, boost::ref(direction), normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, boost::ref(minStartColor), boost::ref(maxStartColor), lifeTimeMin, lifeTimeMax, maxAngleDegrees, boost::ref(minStartSize), boost::ref(maxStartSize) );
    }

    virtual ::irr::scene::IParticleAttractionAffector * createAttractionAffector( ::irr::core::vector3df const & point, ::irr::f32 speed=1.0e+0f, bool attract=true, bool affectX=true, bool affectY=true, bool affectZ=true ){
        bp::override func_createAttractionAffector = this->get_override( "createAttractionAffector" );
        return func_createAttractionAffector( boost::ref(point), speed, attract, affectX, affectY, affectZ );
    }

    virtual ::irr::scene::IParticleBoxEmitter * createBoxEmitter( ::irr::core::aabbox3df const & box=irr::core::aabbox3d<float>(-1.0e+1f, 2.8e+1f, -1.0e+1f, 1.0e+1f, 3.0e+1f, 1.0e+1f), ::irr::core::vector3df const & direction=irr::core::vector3d<float>(0.0f, 2.999999932944774627685546875e-2f, 0.0f), ::irr::u32 minParticlesPerSecond=5, ::irr::u32 maxParticlesPerSecond=10, ::irr::video::SColor const & minStartColor=irr::video::SColor(255u, 0u, 0u, 0u), ::irr::video::SColor const & maxStartColor=irr::video::SColor(255u, 255u, 255u, 255u), ::irr::u32 lifeTimeMin=2000, ::irr::u32 lifeTimeMax=4000, ::irr::s32 maxAngleDegrees=0, ::irr::core::dimension2df const & minStartSize=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))), ::irr::core::dimension2df const & maxStartSize=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) ){
        bp::override func_createBoxEmitter = this->get_override( "createBoxEmitter" );
        return func_createBoxEmitter( boost::ref(box), boost::ref(direction), minParticlesPerSecond, maxParticlesPerSecond, boost::ref(minStartColor), boost::ref(maxStartColor), lifeTimeMin, lifeTimeMax, maxAngleDegrees, boost::ref(minStartSize), boost::ref(maxStartSize) );
    }

    virtual ::irr::scene::IParticleCylinderEmitter * createCylinderEmitter( ::irr::core::vector3df const & center, ::irr::f32 radius, ::irr::core::vector3df const & normal, ::irr::f32 length, bool outlineOnly=false, ::irr::core::vector3df const & direction=irr::core::vector3d<float>(0.0f, 2.999999932944774627685546875e-2f, 0.0f), ::irr::u32 minParticlesPerSecond=5, ::irr::u32 maxParticlesPerSecond=10, ::irr::video::SColor const & minStartColor=irr::video::SColor(255u, 0u, 0u, 0u), ::irr::video::SColor const & maxStartColor=irr::video::SColor(255u, 255u, 255u, 255u), ::irr::u32 lifeTimeMin=2000, ::irr::u32 lifeTimeMax=4000, ::irr::s32 maxAngleDegrees=0, ::irr::core::dimension2df const & minStartSize=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))), ::irr::core::dimension2df const & maxStartSize=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) ){
        bp::override func_createCylinderEmitter = this->get_override( "createCylinderEmitter" );
        return func_createCylinderEmitter( boost::ref(center), radius, boost::ref(normal), length, outlineOnly, boost::ref(direction), minParticlesPerSecond, maxParticlesPerSecond, boost::ref(minStartColor), boost::ref(maxStartColor), lifeTimeMin, lifeTimeMax, maxAngleDegrees, boost::ref(minStartSize), boost::ref(maxStartSize) );
    }

    virtual ::irr::scene::IParticleFadeOutAffector * createFadeOutParticleAffector( ::irr::video::SColor const & targetColor=irr::video::SColor(0u, 0u, 0u, 0u), ::irr::u32 timeNeededToFadeOut=1000 ){
        bp::override func_createFadeOutParticleAffector = this->get_override( "createFadeOutParticleAffector" );
        return func_createFadeOutParticleAffector( boost::ref(targetColor), timeNeededToFadeOut );
    }

    virtual ::irr::scene::IParticleGravityAffector * createGravityAffector( ::irr::core::vector3df const & gravity=irr::core::vector3d<float>(0.0f, -2.999999932944774627685546875e-2f, 0.0f), ::irr::u32 timeForceLost=1000 ){
        bp::override func_createGravityAffector = this->get_override( "createGravityAffector" );
        return func_createGravityAffector( boost::ref(gravity), timeForceLost );
    }

    virtual ::irr::scene::IParticleMeshEmitter * createMeshEmitter( ::irr::scene::IMesh * mesh, bool useNormalDirection=true, ::irr::core::vector3df const & direction=irr::core::vector3d<float>(0.0f, 2.999999932944774627685546875e-2f, 0.0f), ::irr::f32 normalDirectionModifier=1.0e+2f, ::irr::s32 mbNumber=-0x00000000000000001, bool everyMeshVertex=false, ::irr::u32 minParticlesPerSecond=5, ::irr::u32 maxParticlesPerSecond=10, ::irr::video::SColor const & minStartColor=irr::video::SColor(255u, 0u, 0u, 0u), ::irr::video::SColor const & maxStartColor=irr::video::SColor(255u, 255u, 255u, 255u), ::irr::u32 lifeTimeMin=2000, ::irr::u32 lifeTimeMax=4000, ::irr::s32 maxAngleDegrees=0, ::irr::core::dimension2df const & minStartSize=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))), ::irr::core::dimension2df const & maxStartSize=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) ){
        bp::override func_createMeshEmitter = this->get_override( "createMeshEmitter" );
        return func_createMeshEmitter( boost::python::ptr(mesh), useNormalDirection, boost::ref(direction), normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, boost::ref(minStartColor), boost::ref(maxStartColor), lifeTimeMin, lifeTimeMax, maxAngleDegrees, boost::ref(minStartSize), boost::ref(maxStartSize) );
    }

    virtual ::irr::scene::IParticlePointEmitter * createPointEmitter( ::irr::core::vector3df const & direction=irr::core::vector3d<float>(0.0f, 2.999999932944774627685546875e-2f, 0.0f), ::irr::u32 minParticlesPerSecond=5, ::irr::u32 maxParticlesPerSecond=10, ::irr::video::SColor const & minStartColor=irr::video::SColor(255u, 0u, 0u, 0u), ::irr::video::SColor const & maxStartColor=irr::video::SColor(255u, 255u, 255u, 255u), ::irr::u32 lifeTimeMin=2000, ::irr::u32 lifeTimeMax=4000, ::irr::s32 maxAngleDegrees=0, ::irr::core::dimension2df const & minStartSize=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))), ::irr::core::dimension2df const & maxStartSize=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) ){
        bp::override func_createPointEmitter = this->get_override( "createPointEmitter" );
        return func_createPointEmitter( boost::ref(direction), minParticlesPerSecond, maxParticlesPerSecond, boost::ref(minStartColor), boost::ref(maxStartColor), lifeTimeMin, lifeTimeMax, maxAngleDegrees, boost::ref(minStartSize), boost::ref(maxStartSize) );
    }

    virtual ::irr::scene::IParticleRingEmitter * createRingEmitter( ::irr::core::vector3df const & center, ::irr::f32 radius, ::irr::f32 ringThickness, ::irr::core::vector3df const & direction=irr::core::vector3d<float>(0.0f, 2.999999932944774627685546875e-2f, 0.0f), ::irr::u32 minParticlesPerSecond=5, ::irr::u32 maxParticlesPerSecond=10, ::irr::video::SColor const & minStartColor=irr::video::SColor(255u, 0u, 0u, 0u), ::irr::video::SColor const & maxStartColor=irr::video::SColor(255u, 255u, 255u, 255u), ::irr::u32 lifeTimeMin=2000, ::irr::u32 lifeTimeMax=4000, ::irr::s32 maxAngleDegrees=0, ::irr::core::dimension2df const & minStartSize=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))), ::irr::core::dimension2df const & maxStartSize=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) ){
        bp::override func_createRingEmitter = this->get_override( "createRingEmitter" );
        return func_createRingEmitter( boost::ref(center), radius, ringThickness, boost::ref(direction), minParticlesPerSecond, maxParticlesPerSecond, boost::ref(minStartColor), boost::ref(maxStartColor), lifeTimeMin, lifeTimeMax, maxAngleDegrees, boost::ref(minStartSize), boost::ref(maxStartSize) );
    }

    virtual ::irr::scene::IParticleRotationAffector * createRotationAffector( ::irr::core::vector3df const & speed=irr::core::vector3d<float>(5.0e+0f, 5.0e+0f, 5.0e+0f), ::irr::core::vector3df const & pivotPoint=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f) ){
        bp::override func_createRotationAffector = this->get_override( "createRotationAffector" );
        return func_createRotationAffector( boost::ref(speed), boost::ref(pivotPoint) );
    }

    virtual ::irr::scene::IParticleAffector * createScaleParticleAffector( ::irr::core::dimension2df const & scaleTo=irr::core::dimension2d<float>(((const float&)((const float*)(&1.0e+0f))), ((const float&)((const float*)(&1.0e+0f)))) ){
        bp::override func_createScaleParticleAffector = this->get_override( "createScaleParticleAffector" );
        return func_createScaleParticleAffector( boost::ref(scaleTo) );
    }

    virtual ::irr::scene::IParticleSphereEmitter * createSphereEmitter( ::irr::core::vector3df const & center, ::irr::f32 radius, ::irr::core::vector3df const & direction=irr::core::vector3d<float>(0.0f, 2.999999932944774627685546875e-2f, 0.0f), ::irr::u32 minParticlesPerSecond=5, ::irr::u32 maxParticlesPerSecond=10, ::irr::video::SColor const & minStartColor=irr::video::SColor(255u, 0u, 0u, 0u), ::irr::video::SColor const & maxStartColor=irr::video::SColor(255u, 255u, 255u, 255u), ::irr::u32 lifeTimeMin=2000, ::irr::u32 lifeTimeMax=4000, ::irr::s32 maxAngleDegrees=0, ::irr::core::dimension2df const & minStartSize=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))), ::irr::core::dimension2df const & maxStartSize=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) ){
        bp::override func_createSphereEmitter = this->get_override( "createSphereEmitter" );
        return func_createSphereEmitter( boost::ref(center), radius, boost::ref(direction), minParticlesPerSecond, maxParticlesPerSecond, boost::ref(minStartColor), boost::ref(maxStartColor), lifeTimeMin, lifeTimeMax, maxAngleDegrees, boost::ref(minStartSize), boost::ref(maxStartSize) );
    }

    virtual ::irr::scene::IParticleEmitter * getEmitter(  ){
        bp::override func_getEmitter = this->get_override( "getEmitter" );
        return func_getEmitter(  );
    }

    virtual void removeAllAffectors(  ){
        bp::override func_removeAllAffectors = this->get_override( "removeAllAffectors" );
        func_removeAllAffectors(  );
    }

    virtual void setEmitter( ::irr::scene::IParticleEmitter * emitter ){
        bp::override func_setEmitter = this->get_override( "setEmitter" );
        func_setEmitter( boost::python::ptr(emitter) );
    }

    virtual void setParticleSize( ::irr::core::dimension2d< float > const & size=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) ){
        bp::override func_setParticleSize = this->get_override( "setParticleSize" );
        func_setParticleSize( boost::ref(size) );
    }

    virtual void setParticlesAreGlobal( bool global=true ){
        bp::override func_setParticlesAreGlobal = this->get_override( "setParticlesAreGlobal" );
        func_setParticlesAreGlobal( global );
    }

    virtual void OnAnimate( ::irr::u32 timeMs ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( timeMs );
        else{
            this->irr::scene::ISceneNode::OnAnimate( timeMs );
        }
    }
    
    void default_OnAnimate( ::irr::u32 timeMs ) {
        irr::scene::ISceneNode::OnAnimate( timeMs );
    }

    virtual void OnRegisterSceneNode(  ) {
        if( bp::override func_OnRegisterSceneNode = this->get_override( "OnRegisterSceneNode" ) )
            func_OnRegisterSceneNode(  );
        else{
            this->irr::scene::ISceneNode::OnRegisterSceneNode(  );
        }
    }
    
    void default_OnRegisterSceneNode(  ) {
        irr::scene::ISceneNode::OnRegisterSceneNode( );
    }

    virtual void addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_addAnimator = this->get_override( "addAnimator" ) )
            func_addAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
    }

    virtual void addChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::scene::ISceneNode * child ) {
        irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
    }

    virtual ::irr::scene::ISceneNode * clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        else{
            return this->irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        }
    }
    
    ::irr::scene::ISceneNode * default_clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        return irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
    }

    void cloneMembers( ::irr::scene::ISceneNode * toCopyFrom, ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::cloneMembers( boost::python::ptr(toCopyFrom), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::core::vector3df getAbsolutePosition(  ) const  {
        if( bp::override func_getAbsolutePosition = this->get_override( "getAbsolutePosition" ) )
            return func_getAbsolutePosition(  );
        else{
            return this->irr::scene::ISceneNode::getAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector3df default_getAbsolutePosition(  ) const  {
        return irr::scene::ISceneNode::getAbsolutePosition( );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::scene::ISceneNode::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::scene::ISceneNode::getID( );
    }

    virtual ::irr::u32 getMaterialCount(  ) const  {
        if( bp::override func_getMaterialCount = this->get_override( "getMaterialCount" ) )
            return func_getMaterialCount(  );
        else{
            return this->irr::scene::ISceneNode::getMaterialCount(  );
        }
    }
    
    ::irr::u32 default_getMaterialCount(  ) const  {
        return irr::scene::ISceneNode::getMaterialCount( );
    }

    virtual ::irr::c8 const * getName(  ) const  {
        if( bp::override func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            return this->irr::scene::ISceneNode::getName(  );
        }
    }
    
    ::irr::c8 const * default_getName(  ) const  {
        return irr::scene::ISceneNode::getName( );
    }

    virtual ::irr::core::matrix4 getRelativeTransformation(  ) const  {
        if( bp::override func_getRelativeTransformation = this->get_override( "getRelativeTransformation" ) )
            return func_getRelativeTransformation(  );
        else{
            return this->irr::scene::ISceneNode::getRelativeTransformation(  );
        }
    }
    
    ::irr::core::matrix4 default_getRelativeTransformation(  ) const  {
        return irr::scene::ISceneNode::getRelativeTransformation( );
    }

    virtual ::irr::scene::ISceneManager * getSceneManager(  ) const  {
        if( bp::override func_getSceneManager = this->get_override( "getSceneManager" ) )
            return func_getSceneManager(  );
        else{
            return this->irr::scene::ISceneNode::getSceneManager(  );
        }
    }
    
    ::irr::scene::ISceneManager * default_getSceneManager(  ) const  {
        return irr::scene::ISceneNode::getSceneManager( );
    }

    virtual ::irr::core::aabbox3d< float > const getTransformedBoundingBox(  ) const  {
        if( bp::override func_getTransformedBoundingBox = this->get_override( "getTransformedBoundingBox" ) )
            return func_getTransformedBoundingBox(  );
        else{
            return this->irr::scene::ISceneNode::getTransformedBoundingBox(  );
        }
    }
    
    ::irr::core::aabbox3d< float > const default_getTransformedBoundingBox(  ) const  {
        return irr::scene::ISceneNode::getTransformedBoundingBox( );
    }

    virtual ::irr::scene::ITriangleSelector * getTriangleSelector(  ) const  {
        if( bp::override func_getTriangleSelector = this->get_override( "getTriangleSelector" ) )
            return func_getTriangleSelector(  );
        else{
            return this->irr::scene::ISceneNode::getTriangleSelector(  );
        }
    }
    
    ::irr::scene::ITriangleSelector * default_getTriangleSelector(  ) const  {
        return irr::scene::ISceneNode::getTriangleSelector( );
    }

    virtual ::irr::scene::ESCENE_NODE_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNode::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNode::getType( );
    }

    virtual bool isTrulyVisible(  ) const  {
        if( bp::override func_isTrulyVisible = this->get_override( "isTrulyVisible" ) )
            return func_isTrulyVisible(  );
        else{
            return this->irr::scene::ISceneNode::isTrulyVisible(  );
        }
    }
    
    bool default_isTrulyVisible(  ) const  {
        return irr::scene::ISceneNode::isTrulyVisible( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::scene::ISceneNode::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::scene::ISceneNode::isVisible( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::scene::ISceneNode::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::scene::ISceneNode::remove( );
    }

    virtual void removeAll(  ) {
        if( bp::override func_removeAll = this->get_override( "removeAll" ) )
            func_removeAll(  );
        else{
            this->irr::scene::ISceneNode::removeAll(  );
        }
    }
    
    void default_removeAll(  ) {
        irr::scene::ISceneNode::removeAll( );
    }

    virtual void removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_removeAnimator = this->get_override( "removeAnimator" ) )
            func_removeAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
    }

    virtual void removeAnimators(  ) {
        if( bp::override func_removeAnimators = this->get_override( "removeAnimators" ) )
            func_removeAnimators(  );
        else{
            this->irr::scene::ISceneNode::removeAnimators(  );
        }
    }
    
    void default_removeAnimators(  ) {
        irr::scene::ISceneNode::removeAnimators( );
    }

    virtual bool removeChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            return func_removeChild( boost::python::ptr(child) );
        else{
            return this->irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
        }
    }
    
    bool default_removeChild( ::irr::scene::ISceneNode * child ) {
        return irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
    }

    virtual void render(  ){
        bp::override func_render = this->get_override( "render" );
        func_render(  );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual void setDebugDataVisible( ::irr::s32 state ) {
        if( bp::override func_setDebugDataVisible = this->get_override( "setDebugDataVisible" ) )
            func_setDebugDataVisible( state );
        else{
            this->irr::scene::ISceneNode::setDebugDataVisible( state );
        }
    }
    
    void default_setDebugDataVisible( ::irr::s32 state ) {
        irr::scene::ISceneNode::setDebugDataVisible( state );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::scene::ISceneNode::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::scene::ISceneNode::setID( id );
    }

    virtual void setName( ::irr::c8 const * name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->irr::scene::ISceneNode::setName( name );
        }
    }
    
    void default_setName( ::irr::c8 const * name ) {
        irr::scene::ISceneNode::setName( name );
    }

    virtual void setName( ::irr::core::stringc const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->irr::scene::ISceneNode::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::irr::core::stringc const & name ) {
        irr::scene::ISceneNode::setName( boost::ref(name) );
    }

    virtual void setParent( ::irr::scene::ISceneNode * newParent ) {
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(newParent) );
        else{
            this->irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
        }
    }
    
    void default_setParent( ::irr::scene::ISceneNode * newParent ) {
        irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
    }

    virtual void setPosition( ::irr::core::vector3df const & newpos ) {
        if( bp::override func_setPosition = this->get_override( "setPosition" ) )
            func_setPosition( boost::ref(newpos) );
        else{
            this->irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
        }
    }
    
    void default_setPosition( ::irr::core::vector3df const & newpos ) {
        irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
    }

    virtual void setRotation( ::irr::core::vector3df const & rotation ) {
        if( bp::override func_setRotation = this->get_override( "setRotation" ) )
            func_setRotation( boost::ref(rotation) );
        else{
            this->irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
        }
    }
    
    void default_setRotation( ::irr::core::vector3df const & rotation ) {
        irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
    }

    virtual void setScale( ::irr::core::vector3df const & scale ) {
        if( bp::override func_setScale = this->get_override( "setScale" ) )
            func_setScale( boost::ref(scale) );
        else{
            this->irr::scene::ISceneNode::setScale( boost::ref(scale) );
        }
    }
    
    void default_setScale( ::irr::core::vector3df const & scale ) {
        irr::scene::ISceneNode::setScale( boost::ref(scale) );
    }

    void setSceneManager( ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::setSceneManager( boost::python::ptr(newManager) );
    }

    virtual void setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        if( bp::override func_setTriangleSelector = this->get_override( "setTriangleSelector" ) )
            func_setTriangleSelector( boost::python::ptr(selector) );
        else{
            this->irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
        }
    }
    
    void default_setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
    }

    virtual void setVisible( bool isVisible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( isVisible );
        else{
            this->irr::scene::ISceneNode::setVisible( isVisible );
        }
    }
    
    void default_setVisible( bool isVisible ) {
        irr::scene::ISceneNode::setVisible( isVisible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::scene::ISceneNode::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::scene::ISceneNode::updateAbsolutePosition( );
    }

};

struct IQ3LevelMesh_wrapper : irr::scene::IQ3LevelMesh, bp::wrapper< irr::scene::IQ3LevelMesh > {

    IQ3LevelMesh_wrapper()
    : irr::scene::IQ3LevelMesh()
      , bp::wrapper< irr::scene::IQ3LevelMesh >(){
        // null constructor
        
    }

    virtual ::irr::scene::quake3::tQ3EntityList & getEntityList(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::scene::quake3::IShader const * getShader( ::irr::c8 const * filename, bool fileNameIsValid=true ){
        bp::override func_getShader = this->get_override( "getShader" );
        return func_getShader( filename, fileNameIsValid );
    }

    virtual ::irr::scene::quake3::IShader const * getShader( ::irr::u32 index ) const {
        bp::override func_getShader = this->get_override( "getShader" );
        return func_getShader( index );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getFrameCount(  ) const {
        bp::override func_getFrameCount = this->get_override( "getFrameCount" );
        return func_getFrameCount(  );
    }

    virtual ::irr::scene::IMesh * getMesh( ::irr::s32 frame, ::irr::s32 detailLevel=255, ::irr::s32 startFrameLoop=-0x00000000000000001, ::irr::s32 endFrameLoop=-0x00000000000000001 ){
        bp::override func_getMesh = this->get_override( "getMesh" );
        return func_getMesh( frame, detailLevel, startFrameLoop, endFrameLoop );
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::u32 nr ) const {
        bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" );
        return func_getMeshBuffer( nr );
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::video::SMaterial const & material ) const {
        bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" );
        return func_getMeshBuffer( boost::ref(material) );
    }

    virtual ::irr::u32 getMeshBufferCount(  ) const {
        bp::override func_getMeshBufferCount = this->get_override( "getMeshBufferCount" );
        return func_getMeshBufferCount(  );
    }

    virtual ::irr::scene::E_ANIMATED_MESH_TYPE getMeshType(  ) const  {
        if( bp::override func_getMeshType = this->get_override( "getMeshType" ) )
            return func_getMeshType(  );
        else{
            return this->irr::scene::IAnimatedMesh::getMeshType(  );
        }
    }
    
    ::irr::scene::E_ANIMATED_MESH_TYPE default_getMeshType(  ) const  {
        return irr::scene::IAnimatedMesh::getMeshType( );
    }

    virtual void setBoundingBox( ::irr::core::aabbox3df const & box ){
        bp::override func_setBoundingBox = this->get_override( "setBoundingBox" );
        func_setBoundingBox( boost::ref(box) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setDirty( ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ){
        bp::override func_setDirty = this->get_override( "setDirty" );
        func_setDirty( buffer );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING newMappingHint, ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ){
        bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" );
        func_setHardwareMappingHint( newMappingHint, buffer );
    }

    virtual void setMaterialFlag( ::irr::video::E_MATERIAL_FLAG flag, bool newvalue ){
        bp::override func_setMaterialFlag = this->get_override( "setMaterialFlag" );
        func_setMaterialFlag( flag, newvalue );
    }

};

struct ISceneCollisionManager_wrapper : irr::scene::ISceneCollisionManager, bp::wrapper< irr::scene::ISceneCollisionManager > {

    ISceneCollisionManager_wrapper()
    : irr::scene::ISceneCollisionManager()
      , bp::wrapper< irr::scene::ISceneCollisionManager >(){
        // null constructor
        
    }

    virtual bool getCollisionPoint( ::irr::core::line3d< float > const & ray, ::irr::scene::ITriangleSelector * selector, ::irr::core::vector3df & outCollisionPoint, ::irr::core::triangle3df & outTriangle, ::irr::scene::ISceneNode const * & outNode ){
        bp::override func_getCollisionPoint = this->get_override( "getCollisionPoint" );
        return func_getCollisionPoint( boost::ref(ray), boost::python::ptr(selector), boost::ref(outCollisionPoint), boost::ref(outTriangle), boost::ref(outNode) );
    }

    virtual ::irr::core::vector3df getCollisionResultPosition( ::irr::scene::ITriangleSelector * selector, ::irr::core::vector3df const & ellipsoidPosition, ::irr::core::vector3df const & ellipsoidRadius, ::irr::core::vector3df const & ellipsoidDirectionAndSpeed, ::irr::core::triangle3df & triout, ::irr::core::vector3df & hitPosition, bool & outFalling, ::irr::scene::ISceneNode const * & outNode, ::irr::f32 slidingSpeed=5.000000237487256526947021484375e-4f, ::irr::core::vector3df const & gravityDirectionAndSpeed=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f) ){
        bp::override func_getCollisionResultPosition = this->get_override( "getCollisionResultPosition" );
        return func_getCollisionResultPosition( boost::python::ptr(selector), boost::ref(ellipsoidPosition), boost::ref(ellipsoidRadius), boost::ref(ellipsoidDirectionAndSpeed), boost::ref(triout), boost::ref(hitPosition), outFalling, boost::ref(outNode), slidingSpeed, boost::ref(gravityDirectionAndSpeed) );
    }

    virtual ::irr::core::line3d< float > getRayFromScreenCoordinates( ::irr::core::vector2d< int > const & pos, ::irr::scene::ICameraSceneNode * camera=0 ){
        bp::override func_getRayFromScreenCoordinates = this->get_override( "getRayFromScreenCoordinates" );
        return func_getRayFromScreenCoordinates( boost::ref(pos), boost::python::ptr(camera) );
    }

    virtual ::irr::scene::ISceneNode * getSceneNodeAndCollisionPointFromRay( ::irr::core::line3df ray, ::irr::core::vector3df & outCollisionPoint, ::irr::core::triangle3df & outTriangle, ::irr::s32 idBitMask=0, ::irr::scene::ISceneNode * collisionRootNode=0, bool noDebugObjects=false ){
        bp::override func_getSceneNodeAndCollisionPointFromRay = this->get_override( "getSceneNodeAndCollisionPointFromRay" );
        return func_getSceneNodeAndCollisionPointFromRay( ray, boost::ref(outCollisionPoint), boost::ref(outTriangle), idBitMask, boost::python::ptr(collisionRootNode), noDebugObjects );
    }

    virtual ::irr::scene::ISceneNode * getSceneNodeFromCameraBB( ::irr::scene::ICameraSceneNode * camera, ::irr::s32 idBitMask=0, bool bNoDebugObjects=false ){
        bp::override func_getSceneNodeFromCameraBB = this->get_override( "getSceneNodeFromCameraBB" );
        return func_getSceneNodeFromCameraBB( boost::python::ptr(camera), idBitMask, bNoDebugObjects );
    }

    virtual ::irr::scene::ISceneNode * getSceneNodeFromRayBB( ::irr::core::line3d< float > const & ray, ::irr::s32 idBitMask=0, bool bNoDebugObjects=false, ::irr::scene::ISceneNode * root=0 ){
        bp::override func_getSceneNodeFromRayBB = this->get_override( "getSceneNodeFromRayBB" );
        return func_getSceneNodeFromRayBB( boost::ref(ray), idBitMask, bNoDebugObjects, boost::python::ptr(root) );
    }

    virtual ::irr::scene::ISceneNode * getSceneNodeFromScreenCoordinatesBB( ::irr::core::vector2d< int > const & pos, ::irr::s32 idBitMask=0, bool bNoDebugObjects=false, ::irr::scene::ISceneNode * root=0 ){
        bp::override func_getSceneNodeFromScreenCoordinatesBB = this->get_override( "getSceneNodeFromScreenCoordinatesBB" );
        return func_getSceneNodeFromScreenCoordinatesBB( boost::ref(pos), idBitMask, bNoDebugObjects, boost::python::ptr(root) );
    }

    virtual ::irr::core::vector2d< int > getScreenCoordinatesFrom3DPosition( ::irr::core::vector3df const & pos, ::irr::scene::ICameraSceneNode * camera=0 ){
        bp::override func_getScreenCoordinatesFrom3DPosition = this->get_override( "getScreenCoordinatesFrom3DPosition" );
        return func_getScreenCoordinatesFrom3DPosition( boost::ref(pos), boost::python::ptr(camera) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct ISceneNodeAnimatorCameraFPS_wrapper : irr::scene::ISceneNodeAnimatorCameraFPS, bp::wrapper< irr::scene::ISceneNodeAnimatorCameraFPS > {

    ISceneNodeAnimatorCameraFPS_wrapper()
    : irr::scene::ISceneNodeAnimatorCameraFPS()
      , bp::wrapper< irr::scene::ISceneNodeAnimatorCameraFPS >(){
        // null constructor
        
    }

    virtual ::irr::f32 getMoveSpeed(  ) const {
        bp::override func_getMoveSpeed = this->get_override( "getMoveSpeed" );
        return func_getMoveSpeed(  );
    }

    virtual ::irr::f32 getRotateSpeed(  ) const {
        bp::override func_getRotateSpeed = this->get_override( "getRotateSpeed" );
        return func_getRotateSpeed(  );
    }

    virtual void setInvertMouse( bool invert ){
        bp::override func_setInvertMouse = this->get_override( "setInvertMouse" );
        func_setInvertMouse( invert );
    }

    virtual void setKeyMap( ::irr::SKeyMap * map, ::irr::u32 count ){
        bp::override func_setKeyMap = this->get_override( "setKeyMap" );
        func_setKeyMap( boost::python::ptr(map), count );
    }

    virtual void setMoveSpeed( ::irr::f32 moveSpeed ){
        bp::override func_setMoveSpeed = this->get_override( "setMoveSpeed" );
        func_setMoveSpeed( moveSpeed );
    }

    virtual void setRotateSpeed( ::irr::f32 rotateSpeed ){
        bp::override func_setRotateSpeed = this->get_override( "setRotateSpeed" );
        func_setRotateSpeed( rotateSpeed );
    }

    virtual void setVerticalMovement( bool allow ){
        bp::override func_setVerticalMovement = this->get_override( "setVerticalMovement" );
        func_setVerticalMovement( allow );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::scene::ISceneNodeAnimator::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::scene::ISceneNodeAnimator::OnEvent( boost::ref(event) );
    }

    virtual void animateNode( ::irr::scene::ISceneNode * node, ::irr::u32 timeMs ){
        bp::override func_animateNode = this->get_override( "animateNode" );
        func_animateNode( boost::python::ptr(node), timeMs );
    }

    virtual ::irr::scene::ISceneNodeAnimator * createClone( ::irr::scene::ISceneNode * node, ::irr::scene::ISceneManager * newManager=0 ){
        bp::override func_createClone = this->get_override( "createClone" );
        return func_createClone( boost::python::ptr(node), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNodeAnimator::getType( );
    }

    virtual bool hasFinished(  ) const  {
        if( bp::override func_hasFinished = this->get_override( "hasFinished" ) )
            return func_hasFinished(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::hasFinished(  );
        }
    }
    
    bool default_hasFinished(  ) const  {
        return irr::scene::ISceneNodeAnimator::hasFinished( );
    }

    virtual bool isEventReceiverEnabled(  ) const  {
        if( bp::override func_isEventReceiverEnabled = this->get_override( "isEventReceiverEnabled" ) )
            return func_isEventReceiverEnabled(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::isEventReceiverEnabled(  );
        }
    }
    
    bool default_isEventReceiverEnabled(  ) const  {
        return irr::scene::ISceneNodeAnimator::isEventReceiverEnabled( );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct ISceneNodeAnimatorCameraMaya_wrapper : irr::scene::ISceneNodeAnimatorCameraMaya, bp::wrapper< irr::scene::ISceneNodeAnimatorCameraMaya > {

    ISceneNodeAnimatorCameraMaya_wrapper()
    : irr::scene::ISceneNodeAnimatorCameraMaya()
      , bp::wrapper< irr::scene::ISceneNodeAnimatorCameraMaya >(){
        // null constructor
        
    }

    virtual ::irr::f32 getMoveSpeed(  ) const {
        bp::override func_getMoveSpeed = this->get_override( "getMoveSpeed" );
        return func_getMoveSpeed(  );
    }

    virtual ::irr::f32 getRotateSpeed(  ) const {
        bp::override func_getRotateSpeed = this->get_override( "getRotateSpeed" );
        return func_getRotateSpeed(  );
    }

    virtual ::irr::f32 getZoomSpeed(  ) const {
        bp::override func_getZoomSpeed = this->get_override( "getZoomSpeed" );
        return func_getZoomSpeed(  );
    }

    virtual void setMoveSpeed( ::irr::f32 moveSpeed ){
        bp::override func_setMoveSpeed = this->get_override( "setMoveSpeed" );
        func_setMoveSpeed( moveSpeed );
    }

    virtual void setRotateSpeed( ::irr::f32 rotateSpeed ){
        bp::override func_setRotateSpeed = this->get_override( "setRotateSpeed" );
        func_setRotateSpeed( rotateSpeed );
    }

    virtual void setZoomSpeed( ::irr::f32 zoomSpeed ){
        bp::override func_setZoomSpeed = this->get_override( "setZoomSpeed" );
        func_setZoomSpeed( zoomSpeed );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::scene::ISceneNodeAnimator::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::scene::ISceneNodeAnimator::OnEvent( boost::ref(event) );
    }

    virtual void animateNode( ::irr::scene::ISceneNode * node, ::irr::u32 timeMs ){
        bp::override func_animateNode = this->get_override( "animateNode" );
        func_animateNode( boost::python::ptr(node), timeMs );
    }

    virtual ::irr::scene::ISceneNodeAnimator * createClone( ::irr::scene::ISceneNode * node, ::irr::scene::ISceneManager * newManager=0 ){
        bp::override func_createClone = this->get_override( "createClone" );
        return func_createClone( boost::python::ptr(node), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNodeAnimator::getType( );
    }

    virtual bool hasFinished(  ) const  {
        if( bp::override func_hasFinished = this->get_override( "hasFinished" ) )
            return func_hasFinished(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::hasFinished(  );
        }
    }
    
    bool default_hasFinished(  ) const  {
        return irr::scene::ISceneNodeAnimator::hasFinished( );
    }

    virtual bool isEventReceiverEnabled(  ) const  {
        if( bp::override func_isEventReceiverEnabled = this->get_override( "isEventReceiverEnabled" ) )
            return func_isEventReceiverEnabled(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::isEventReceiverEnabled(  );
        }
    }
    
    bool default_isEventReceiverEnabled(  ) const  {
        return irr::scene::ISceneNodeAnimator::isEventReceiverEnabled( );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct ISceneNodeAnimatorCollisionResponse_wrapper : irr::scene::ISceneNodeAnimatorCollisionResponse, bp::wrapper< irr::scene::ISceneNodeAnimatorCollisionResponse > {

    ISceneNodeAnimatorCollisionResponse_wrapper()
    : irr::scene::ISceneNodeAnimatorCollisionResponse()
      , bp::wrapper< irr::scene::ISceneNodeAnimatorCollisionResponse >(){
        // null constructor
        
    }

    virtual bool collisionOccurred(  ) const {
        bp::override func_collisionOccurred = this->get_override( "collisionOccurred" );
        return func_collisionOccurred(  );
    }

    virtual bool getAnimateTarget(  ) const {
        bp::override func_getAnimateTarget = this->get_override( "getAnimateTarget" );
        return func_getAnimateTarget(  );
    }

    virtual ::irr::scene::ISceneNode const * getCollisionNode(  ) const {
        bp::override func_getCollisionNode = this->get_override( "getCollisionNode" );
        return func_getCollisionNode(  );
    }

    virtual ::irr::core::vector3df const & getCollisionPoint(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector3df const & getCollisionResultPosition(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::triangle3df const & getCollisionTriangle(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector3df getEllipsoidRadius(  ) const {
        bp::override func_getEllipsoidRadius = this->get_override( "getEllipsoidRadius" );
        return func_getEllipsoidRadius(  );
    }

    virtual ::irr::core::vector3df getEllipsoidTranslation(  ) const {
        bp::override func_getEllipsoidTranslation = this->get_override( "getEllipsoidTranslation" );
        return func_getEllipsoidTranslation(  );
    }

    virtual ::irr::core::vector3df getGravity(  ) const {
        bp::override func_getGravity = this->get_override( "getGravity" );
        return func_getGravity(  );
    }

    virtual ::irr::scene::ISceneNode * getTargetNode(  ) const {
        bp::override func_getTargetNode = this->get_override( "getTargetNode" );
        return func_getTargetNode(  );
    }

    virtual ::irr::scene::ITriangleSelector * getWorld(  ) const {
        bp::override func_getWorld = this->get_override( "getWorld" );
        return func_getWorld(  );
    }

    virtual bool isFalling(  ) const {
        bp::override func_isFalling = this->get_override( "isFalling" );
        return func_isFalling(  );
    }

    virtual void jump( ::irr::f32 jumpSpeed ){
        bp::override func_jump = this->get_override( "jump" );
        func_jump( jumpSpeed );
    }

    virtual void setAnimateTarget( bool enable ){
        bp::override func_setAnimateTarget = this->get_override( "setAnimateTarget" );
        func_setAnimateTarget( enable );
    }

    virtual void setCollisionCallback( ::irr::scene::ICollisionCallback * callback ){
        bp::override func_setCollisionCallback = this->get_override( "setCollisionCallback" );
        func_setCollisionCallback( boost::python::ptr(callback) );
    }

    virtual void setEllipsoidRadius( ::irr::core::vector3df const & radius ){
        bp::override func_setEllipsoidRadius = this->get_override( "setEllipsoidRadius" );
        func_setEllipsoidRadius( boost::ref(radius) );
    }

    virtual void setEllipsoidTranslation( ::irr::core::vector3df const & translation ){
        bp::override func_setEllipsoidTranslation = this->get_override( "setEllipsoidTranslation" );
        func_setEllipsoidTranslation( boost::ref(translation) );
    }

    virtual void setGravity( ::irr::core::vector3df const & gravity ){
        bp::override func_setGravity = this->get_override( "setGravity" );
        func_setGravity( boost::ref(gravity) );
    }

    virtual void setTargetNode( ::irr::scene::ISceneNode * node ){
        bp::override func_setTargetNode = this->get_override( "setTargetNode" );
        func_setTargetNode( boost::python::ptr(node) );
    }

    virtual void setWorld( ::irr::scene::ITriangleSelector * newWorld ){
        bp::override func_setWorld = this->get_override( "setWorld" );
        func_setWorld( boost::python::ptr(newWorld) );
    }

    virtual bool OnEvent( ::irr::SEvent const & event ) {
        if( bp::override func_OnEvent = this->get_override( "OnEvent" ) )
            return func_OnEvent( boost::ref(event) );
        else{
            return this->irr::scene::ISceneNodeAnimator::OnEvent( boost::ref(event) );
        }
    }
    
    bool default_OnEvent( ::irr::SEvent const & event ) {
        return irr::scene::ISceneNodeAnimator::OnEvent( boost::ref(event) );
    }

    virtual void animateNode( ::irr::scene::ISceneNode * node, ::irr::u32 timeMs ){
        bp::override func_animateNode = this->get_override( "animateNode" );
        func_animateNode( boost::python::ptr(node), timeMs );
    }

    virtual ::irr::scene::ISceneNodeAnimator * createClone( ::irr::scene::ISceneNode * node, ::irr::scene::ISceneManager * newManager=0 ){
        bp::override func_createClone = this->get_override( "createClone" );
        return func_createClone( boost::python::ptr(node), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::io::IAttributeExchangingObject::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNodeAnimator::getType( );
    }

    virtual bool hasFinished(  ) const  {
        if( bp::override func_hasFinished = this->get_override( "hasFinished" ) )
            return func_hasFinished(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::hasFinished(  );
        }
    }
    
    bool default_hasFinished(  ) const  {
        return irr::scene::ISceneNodeAnimator::hasFinished( );
    }

    virtual bool isEventReceiverEnabled(  ) const  {
        if( bp::override func_isEventReceiverEnabled = this->get_override( "isEventReceiverEnabled" ) )
            return func_isEventReceiverEnabled(  );
        else{
            return this->irr::scene::ISceneNodeAnimator::isEventReceiverEnabled(  );
        }
    }
    
    bool default_isEventReceiverEnabled(  ) const  {
        return irr::scene::ISceneNodeAnimator::isEventReceiverEnabled( );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::io::IAttributeExchangingObject::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct ISceneNodeAnimatorFactory_wrapper : irr::scene::ISceneNodeAnimatorFactory, bp::wrapper< irr::scene::ISceneNodeAnimatorFactory > {

    ISceneNodeAnimatorFactory_wrapper()
    : irr::scene::ISceneNodeAnimatorFactory()
      , bp::wrapper< irr::scene::ISceneNodeAnimatorFactory >(){
        // null constructor
        
    }

    virtual ::irr::scene::ISceneNodeAnimator * createSceneNodeAnimator( ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE type, ::irr::scene::ISceneNode * target ){
        bp::override func_createSceneNodeAnimator = this->get_override( "createSceneNodeAnimator" );
        return func_createSceneNodeAnimator( type, boost::python::ptr(target) );
    }

    virtual ::irr::scene::ISceneNodeAnimator * createSceneNodeAnimator( ::irr::c8 const * typeName, ::irr::scene::ISceneNode * target ){
        bp::override func_createSceneNodeAnimator = this->get_override( "createSceneNodeAnimator" );
        return func_createSceneNodeAnimator( typeName, boost::python::ptr(target) );
    }

    virtual ::irr::u32 getCreatableSceneNodeAnimatorTypeCount(  ) const {
        bp::override func_getCreatableSceneNodeAnimatorTypeCount = this->get_override( "getCreatableSceneNodeAnimatorTypeCount" );
        return func_getCreatableSceneNodeAnimatorTypeCount(  );
    }

    virtual ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE getCreateableSceneNodeAnimatorType( ::irr::u32 idx ) const {
        bp::override func_getCreateableSceneNodeAnimatorType = this->get_override( "getCreateableSceneNodeAnimatorType" );
        return func_getCreateableSceneNodeAnimatorType( idx );
    }

    virtual ::irr::c8 const * getCreateableSceneNodeAnimatorTypeName( ::irr::u32 idx ) const {
        bp::override func_getCreateableSceneNodeAnimatorTypeName = this->get_override( "getCreateableSceneNodeAnimatorTypeName" );
        return func_getCreateableSceneNodeAnimatorTypeName( idx );
    }

    virtual ::irr::c8 const * getCreateableSceneNodeAnimatorTypeName( ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE type ) const {
        bp::override func_getCreateableSceneNodeAnimatorTypeName = this->get_override( "getCreateableSceneNodeAnimatorTypeName" );
        return func_getCreateableSceneNodeAnimatorTypeName( type );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct ISceneNodeFactory_wrapper : irr::scene::ISceneNodeFactory, bp::wrapper< irr::scene::ISceneNodeFactory > {

    ISceneNodeFactory_wrapper()
    : irr::scene::ISceneNodeFactory()
      , bp::wrapper< irr::scene::ISceneNodeFactory >(){
        // null constructor
        
    }

    virtual ::irr::scene::ISceneNode * addSceneNode( ::irr::scene::ESCENE_NODE_TYPE type, ::irr::scene::ISceneNode * parent=0 ){
        bp::override func_addSceneNode = this->get_override( "addSceneNode" );
        return func_addSceneNode( type, boost::python::ptr(parent) );
    }

    virtual ::irr::scene::ISceneNode * addSceneNode( ::irr::c8 const * typeName, ::irr::scene::ISceneNode * parent=0 ){
        bp::override func_addSceneNode = this->get_override( "addSceneNode" );
        return func_addSceneNode( typeName, boost::python::ptr(parent) );
    }

    virtual ::irr::u32 getCreatableSceneNodeTypeCount(  ) const {
        bp::override func_getCreatableSceneNodeTypeCount = this->get_override( "getCreatableSceneNodeTypeCount" );
        return func_getCreatableSceneNodeTypeCount(  );
    }

    virtual ::irr::scene::ESCENE_NODE_TYPE getCreateableSceneNodeType( ::irr::u32 idx ) const {
        bp::override func_getCreateableSceneNodeType = this->get_override( "getCreateableSceneNodeType" );
        return func_getCreateableSceneNodeType( idx );
    }

    virtual ::irr::c8 const * getCreateableSceneNodeTypeName( ::irr::u32 idx ) const {
        bp::override func_getCreateableSceneNodeTypeName = this->get_override( "getCreateableSceneNodeTypeName" );
        return func_getCreateableSceneNodeTypeName( idx );
    }

    virtual ::irr::c8 const * getCreateableSceneNodeTypeName( ::irr::scene::ESCENE_NODE_TYPE type ) const {
        bp::override func_getCreateableSceneNodeTypeName = this->get_override( "getCreateableSceneNodeTypeName" );
        return func_getCreateableSceneNodeTypeName( type );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IShadowVolumeSceneNode_wrapper : irr::scene::IShadowVolumeSceneNode, bp::wrapper< irr::scene::IShadowVolumeSceneNode > {

    IShadowVolumeSceneNode_wrapper(::irr::scene::ISceneNode * parent, ::irr::scene::ISceneManager * mgr, ::irr::s32 id )
    : irr::scene::IShadowVolumeSceneNode( boost::python::ptr(parent), boost::python::ptr(mgr), id )
      , bp::wrapper< irr::scene::IShadowVolumeSceneNode >(){
        // constructor
    
    }

    virtual void setShadowMesh( ::irr::scene::IMesh const * mesh ){
        bp::override func_setShadowMesh = this->get_override( "setShadowMesh" );
        func_setShadowMesh( boost::python::ptr(mesh) );
    }

    virtual void updateShadowVolumes(  ){
        bp::override func_updateShadowVolumes = this->get_override( "updateShadowVolumes" );
        func_updateShadowVolumes(  );
    }

    virtual void OnAnimate( ::irr::u32 timeMs ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( timeMs );
        else{
            this->irr::scene::ISceneNode::OnAnimate( timeMs );
        }
    }
    
    void default_OnAnimate( ::irr::u32 timeMs ) {
        irr::scene::ISceneNode::OnAnimate( timeMs );
    }

    virtual void OnRegisterSceneNode(  ) {
        if( bp::override func_OnRegisterSceneNode = this->get_override( "OnRegisterSceneNode" ) )
            func_OnRegisterSceneNode(  );
        else{
            this->irr::scene::ISceneNode::OnRegisterSceneNode(  );
        }
    }
    
    void default_OnRegisterSceneNode(  ) {
        irr::scene::ISceneNode::OnRegisterSceneNode( );
    }

    virtual void addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_addAnimator = this->get_override( "addAnimator" ) )
            func_addAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
    }

    virtual void addChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::scene::ISceneNode * child ) {
        irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
    }

    virtual ::irr::scene::ISceneNode * clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        else{
            return this->irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        }
    }
    
    ::irr::scene::ISceneNode * default_clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        return irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
    }

    void cloneMembers( ::irr::scene::ISceneNode * toCopyFrom, ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::cloneMembers( boost::python::ptr(toCopyFrom), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::core::vector3df getAbsolutePosition(  ) const  {
        if( bp::override func_getAbsolutePosition = this->get_override( "getAbsolutePosition" ) )
            return func_getAbsolutePosition(  );
        else{
            return this->irr::scene::ISceneNode::getAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector3df default_getAbsolutePosition(  ) const  {
        return irr::scene::ISceneNode::getAbsolutePosition( );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::scene::ISceneNode::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::scene::ISceneNode::getID( );
    }

    virtual ::irr::u32 getMaterialCount(  ) const  {
        if( bp::override func_getMaterialCount = this->get_override( "getMaterialCount" ) )
            return func_getMaterialCount(  );
        else{
            return this->irr::scene::ISceneNode::getMaterialCount(  );
        }
    }
    
    ::irr::u32 default_getMaterialCount(  ) const  {
        return irr::scene::ISceneNode::getMaterialCount( );
    }

    virtual ::irr::c8 const * getName(  ) const  {
        if( bp::override func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            return this->irr::scene::ISceneNode::getName(  );
        }
    }
    
    ::irr::c8 const * default_getName(  ) const  {
        return irr::scene::ISceneNode::getName( );
    }

    virtual ::irr::core::matrix4 getRelativeTransformation(  ) const  {
        if( bp::override func_getRelativeTransformation = this->get_override( "getRelativeTransformation" ) )
            return func_getRelativeTransformation(  );
        else{
            return this->irr::scene::ISceneNode::getRelativeTransformation(  );
        }
    }
    
    ::irr::core::matrix4 default_getRelativeTransformation(  ) const  {
        return irr::scene::ISceneNode::getRelativeTransformation( );
    }

    virtual ::irr::scene::ISceneManager * getSceneManager(  ) const  {
        if( bp::override func_getSceneManager = this->get_override( "getSceneManager" ) )
            return func_getSceneManager(  );
        else{
            return this->irr::scene::ISceneNode::getSceneManager(  );
        }
    }
    
    ::irr::scene::ISceneManager * default_getSceneManager(  ) const  {
        return irr::scene::ISceneNode::getSceneManager( );
    }

    virtual ::irr::core::aabbox3d< float > const getTransformedBoundingBox(  ) const  {
        if( bp::override func_getTransformedBoundingBox = this->get_override( "getTransformedBoundingBox" ) )
            return func_getTransformedBoundingBox(  );
        else{
            return this->irr::scene::ISceneNode::getTransformedBoundingBox(  );
        }
    }
    
    ::irr::core::aabbox3d< float > const default_getTransformedBoundingBox(  ) const  {
        return irr::scene::ISceneNode::getTransformedBoundingBox( );
    }

    virtual ::irr::scene::ITriangleSelector * getTriangleSelector(  ) const  {
        if( bp::override func_getTriangleSelector = this->get_override( "getTriangleSelector" ) )
            return func_getTriangleSelector(  );
        else{
            return this->irr::scene::ISceneNode::getTriangleSelector(  );
        }
    }
    
    ::irr::scene::ITriangleSelector * default_getTriangleSelector(  ) const  {
        return irr::scene::ISceneNode::getTriangleSelector( );
    }

    virtual ::irr::scene::ESCENE_NODE_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNode::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNode::getType( );
    }

    virtual bool isTrulyVisible(  ) const  {
        if( bp::override func_isTrulyVisible = this->get_override( "isTrulyVisible" ) )
            return func_isTrulyVisible(  );
        else{
            return this->irr::scene::ISceneNode::isTrulyVisible(  );
        }
    }
    
    bool default_isTrulyVisible(  ) const  {
        return irr::scene::ISceneNode::isTrulyVisible( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::scene::ISceneNode::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::scene::ISceneNode::isVisible( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::scene::ISceneNode::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::scene::ISceneNode::remove( );
    }

    virtual void removeAll(  ) {
        if( bp::override func_removeAll = this->get_override( "removeAll" ) )
            func_removeAll(  );
        else{
            this->irr::scene::ISceneNode::removeAll(  );
        }
    }
    
    void default_removeAll(  ) {
        irr::scene::ISceneNode::removeAll( );
    }

    virtual void removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_removeAnimator = this->get_override( "removeAnimator" ) )
            func_removeAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
    }

    virtual void removeAnimators(  ) {
        if( bp::override func_removeAnimators = this->get_override( "removeAnimators" ) )
            func_removeAnimators(  );
        else{
            this->irr::scene::ISceneNode::removeAnimators(  );
        }
    }
    
    void default_removeAnimators(  ) {
        irr::scene::ISceneNode::removeAnimators( );
    }

    virtual bool removeChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            return func_removeChild( boost::python::ptr(child) );
        else{
            return this->irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
        }
    }
    
    bool default_removeChild( ::irr::scene::ISceneNode * child ) {
        return irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
    }

    virtual void render(  ){
        bp::override func_render = this->get_override( "render" );
        func_render(  );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual void setDebugDataVisible( ::irr::s32 state ) {
        if( bp::override func_setDebugDataVisible = this->get_override( "setDebugDataVisible" ) )
            func_setDebugDataVisible( state );
        else{
            this->irr::scene::ISceneNode::setDebugDataVisible( state );
        }
    }
    
    void default_setDebugDataVisible( ::irr::s32 state ) {
        irr::scene::ISceneNode::setDebugDataVisible( state );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::scene::ISceneNode::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::scene::ISceneNode::setID( id );
    }

    virtual void setName( ::irr::c8 const * name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->irr::scene::ISceneNode::setName( name );
        }
    }
    
    void default_setName( ::irr::c8 const * name ) {
        irr::scene::ISceneNode::setName( name );
    }

    virtual void setName( ::irr::core::stringc const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->irr::scene::ISceneNode::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::irr::core::stringc const & name ) {
        irr::scene::ISceneNode::setName( boost::ref(name) );
    }

    virtual void setParent( ::irr::scene::ISceneNode * newParent ) {
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(newParent) );
        else{
            this->irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
        }
    }
    
    void default_setParent( ::irr::scene::ISceneNode * newParent ) {
        irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
    }

    virtual void setPosition( ::irr::core::vector3df const & newpos ) {
        if( bp::override func_setPosition = this->get_override( "setPosition" ) )
            func_setPosition( boost::ref(newpos) );
        else{
            this->irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
        }
    }
    
    void default_setPosition( ::irr::core::vector3df const & newpos ) {
        irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
    }

    virtual void setRotation( ::irr::core::vector3df const & rotation ) {
        if( bp::override func_setRotation = this->get_override( "setRotation" ) )
            func_setRotation( boost::ref(rotation) );
        else{
            this->irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
        }
    }
    
    void default_setRotation( ::irr::core::vector3df const & rotation ) {
        irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
    }

    virtual void setScale( ::irr::core::vector3df const & scale ) {
        if( bp::override func_setScale = this->get_override( "setScale" ) )
            func_setScale( boost::ref(scale) );
        else{
            this->irr::scene::ISceneNode::setScale( boost::ref(scale) );
        }
    }
    
    void default_setScale( ::irr::core::vector3df const & scale ) {
        irr::scene::ISceneNode::setScale( boost::ref(scale) );
    }

    void setSceneManager( ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::setSceneManager( boost::python::ptr(newManager) );
    }

    virtual void setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        if( bp::override func_setTriangleSelector = this->get_override( "setTriangleSelector" ) )
            func_setTriangleSelector( boost::python::ptr(selector) );
        else{
            this->irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
        }
    }
    
    void default_setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
    }

    virtual void setVisible( bool isVisible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( isVisible );
        else{
            this->irr::scene::ISceneNode::setVisible( isVisible );
        }
    }
    
    void default_setVisible( bool isVisible ) {
        irr::scene::ISceneNode::setVisible( isVisible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::scene::ISceneNode::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::scene::ISceneNode::updateAbsolutePosition( );
    }

};

struct ISkinnedMesh_wrapper : irr::scene::ISkinnedMesh, bp::wrapper< irr::scene::ISkinnedMesh > {

    ISkinnedMesh_wrapper()
    : irr::scene::ISkinnedMesh()
      , bp::wrapper< irr::scene::ISkinnedMesh >(){
        // null constructor
        
    }

    virtual ::irr::scene::ISkinnedMesh::SJoint * addJoint( ::irr::scene::ISkinnedMesh::SJoint * parent=0 ){
        bp::override func_addJoint = this->get_override( "addJoint" );
        return func_addJoint( boost::python::ptr(parent) );
    }

    virtual ::irr::scene::SSkinMeshBuffer * addMeshBuffer(  ){
        bp::override func_addMeshBuffer = this->get_override( "addMeshBuffer" );
        return func_addMeshBuffer(  );
    }

    virtual ::irr::scene::ISkinnedMesh::SPositionKey * addPositionKey( ::irr::scene::ISkinnedMesh::SJoint * joint ){
        bp::override func_addPositionKey = this->get_override( "addPositionKey" );
        return func_addPositionKey( boost::python::ptr(joint) );
    }

    virtual ::irr::scene::ISkinnedMesh::SRotationKey * addRotationKey( ::irr::scene::ISkinnedMesh::SJoint * joint ){
        bp::override func_addRotationKey = this->get_override( "addRotationKey" );
        return func_addRotationKey( boost::python::ptr(joint) );
    }

    virtual ::irr::scene::ISkinnedMesh::SScaleKey * addScaleKey( ::irr::scene::ISkinnedMesh::SJoint * joint ){
        bp::override func_addScaleKey = this->get_override( "addScaleKey" );
        return func_addScaleKey( boost::python::ptr(joint) );
    }

    virtual ::irr::scene::ISkinnedMesh::SWeight * addWeight( ::irr::scene::ISkinnedMesh::SJoint * joint ){
        bp::override func_addWeight = this->get_override( "addWeight" );
        return func_addWeight( boost::python::ptr(joint) );
    }

    virtual void animateMesh( ::irr::f32 frame, ::irr::f32 blend ){
        bp::override func_animateMesh = this->get_override( "animateMesh" );
        func_animateMesh( frame, blend );
    }

    virtual void convertMeshToTangents(  ){
        bp::override func_convertMeshToTangents = this->get_override( "convertMeshToTangents" );
        func_convertMeshToTangents(  );
    }

    virtual void finalize(  ){
        bp::override func_finalize = this->get_override( "finalize" );
        func_finalize(  );
    }

    virtual ::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > & getAllJoints(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > const & getAllJoints(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getJointCount(  ) const {
        bp::override func_getJointCount = this->get_override( "getJointCount" );
        return func_getJointCount(  );
    }

    virtual ::irr::c8 const * getJointName( ::irr::u32 number ) const {
        bp::override func_getJointName = this->get_override( "getJointName" );
        return func_getJointName( number );
    }

    virtual ::irr::s32 getJointNumber( ::irr::c8 const * name ) const {
        bp::override func_getJointNumber = this->get_override( "getJointNumber" );
        return func_getJointNumber( name );
    }

    virtual ::irr::core::array< irr::scene::SSkinMeshBuffer*, irr::core::irrAllocator< irr::scene::SSkinMeshBuffer* > > & getMeshBuffers(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual bool isStatic(  ){
        bp::override func_isStatic = this->get_override( "isStatic" );
        return func_isStatic(  );
    }

    virtual bool setHardwareSkinning( bool on ){
        bp::override func_setHardwareSkinning = this->get_override( "setHardwareSkinning" );
        return func_setHardwareSkinning( on );
    }

    virtual void setInterpolationMode( ::irr::scene::E_INTERPOLATION_MODE mode ){
        bp::override func_setInterpolationMode = this->get_override( "setInterpolationMode" );
        func_setInterpolationMode( mode );
    }

    virtual void skinMesh(  ){
        bp::override func_skinMesh = this->get_override( "skinMesh" );
        func_skinMesh(  );
    }

    virtual void updateNormalsWhenAnimating( bool on ){
        bp::override func_updateNormalsWhenAnimating = this->get_override( "updateNormalsWhenAnimating" );
        func_updateNormalsWhenAnimating( on );
    }

    virtual bool useAnimationFrom( ::irr::scene::ISkinnedMesh const * mesh ){
        bp::override func_useAnimationFrom = this->get_override( "useAnimationFrom" );
        return func_useAnimationFrom( boost::python::ptr(mesh) );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getFrameCount(  ) const {
        bp::override func_getFrameCount = this->get_override( "getFrameCount" );
        return func_getFrameCount(  );
    }

    virtual ::irr::scene::IMesh * getMesh( ::irr::s32 frame, ::irr::s32 detailLevel=255, ::irr::s32 startFrameLoop=-0x00000000000000001, ::irr::s32 endFrameLoop=-0x00000000000000001 ){
        bp::override func_getMesh = this->get_override( "getMesh" );
        return func_getMesh( frame, detailLevel, startFrameLoop, endFrameLoop );
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::u32 nr ) const {
        bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" );
        return func_getMeshBuffer( nr );
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::video::SMaterial const & material ) const {
        bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" );
        return func_getMeshBuffer( boost::ref(material) );
    }

    virtual ::irr::u32 getMeshBufferCount(  ) const {
        bp::override func_getMeshBufferCount = this->get_override( "getMeshBufferCount" );
        return func_getMeshBufferCount(  );
    }

    virtual ::irr::scene::E_ANIMATED_MESH_TYPE getMeshType(  ) const  {
        if( bp::override func_getMeshType = this->get_override( "getMeshType" ) )
            return func_getMeshType(  );
        else{
            return this->irr::scene::IAnimatedMesh::getMeshType(  );
        }
    }
    
    ::irr::scene::E_ANIMATED_MESH_TYPE default_getMeshType(  ) const  {
        return irr::scene::IAnimatedMesh::getMeshType( );
    }

    virtual void setBoundingBox( ::irr::core::aabbox3df const & box ){
        bp::override func_setBoundingBox = this->get_override( "setBoundingBox" );
        func_setBoundingBox( boost::ref(box) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setDirty( ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ){
        bp::override func_setDirty = this->get_override( "setDirty" );
        func_setDirty( buffer );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING newMappingHint, ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ){
        bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" );
        func_setHardwareMappingHint( newMappingHint, buffer );
    }

    virtual void setMaterialFlag( ::irr::video::E_MATERIAL_FLAG flag, bool newvalue ){
        bp::override func_setMaterialFlag = this->get_override( "setMaterialFlag" );
        func_setMaterialFlag( flag, newvalue );
    }

};

struct ITerrainSceneNode_wrapper : irr::scene::ITerrainSceneNode, bp::wrapper< irr::scene::ITerrainSceneNode > {

    ITerrainSceneNode_wrapper(::irr::scene::ISceneNode * parent, ::irr::scene::ISceneManager * mgr, ::irr::s32 id, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & rotation=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), ::irr::core::vector3df const & scale=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )
    : irr::scene::ITerrainSceneNode( boost::python::ptr(parent), boost::python::ptr(mgr), id, boost::ref(position), boost::ref(rotation), boost::ref(scale) )
      , bp::wrapper< irr::scene::ITerrainSceneNode >(){
        // constructor
    
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox( ::irr::s32 patchX, ::irr::s32 patchZ ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::s32 getCurrentLODOfPatches( ::irr::core::array< int, irr::core::irrAllocator< int > > & LODs ) const {
        bp::override func_getCurrentLODOfPatches = this->get_override( "getCurrentLODOfPatches" );
        return func_getCurrentLODOfPatches( boost::ref(LODs) );
    }

    virtual ::irr::f32 getHeight( ::irr::f32 x, ::irr::f32 y ) const {
        bp::override func_getHeight = this->get_override( "getHeight" );
        return func_getHeight( x, y );
    }

    virtual ::irr::u32 getIndexCount(  ) const {
        bp::override func_getIndexCount = this->get_override( "getIndexCount" );
        return func_getIndexCount(  );
    }

    virtual ::irr::s32 getIndicesForPatch( ::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > & indices, ::irr::s32 patchX, ::irr::s32 patchZ, ::irr::s32 LOD=0 ){
        bp::override func_getIndicesForPatch = this->get_override( "getIndicesForPatch" );
        return func_getIndicesForPatch( boost::ref(indices), patchX, patchZ, LOD );
    }

    virtual ::irr::scene::IMesh * getMesh(  ){
        bp::override func_getMesh = this->get_override( "getMesh" );
        return func_getMesh(  );
    }

    virtual void getMeshBufferForLOD( ::irr::scene::IDynamicMeshBuffer & mb, ::irr::s32 LOD=0 ) const {
        bp::override func_getMeshBufferForLOD = this->get_override( "getMeshBufferForLOD" );
        func_getMeshBufferForLOD( boost::ref(mb), LOD );
    }

    virtual ::irr::scene::IMeshBuffer * getRenderBuffer(  ){
        bp::override func_getRenderBuffer = this->get_override( "getRenderBuffer" );
        return func_getRenderBuffer(  );
    }

    virtual ::irr::core::vector3df const & getTerrainCenter(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual bool loadHeightMap( ::irr::io::IReadFile * file, ::irr::video::SColor vertexColor=irr::video::SColor(255u, 255u, 255u, 255u), ::irr::s32 smoothFactor=0 ){
        bp::override func_loadHeightMap = this->get_override( "loadHeightMap" );
        return func_loadHeightMap( boost::python::ptr(file), vertexColor, smoothFactor );
    }

    virtual bool loadHeightMapRAW( ::irr::io::IReadFile * file, ::irr::s32 bitsPerPixel=16, bool signedData=false, bool floatVals=false, ::irr::s32 width=0, ::irr::video::SColor vertexColor=irr::video::SColor(255u, 255u, 255u, 255u), ::irr::s32 smoothFactor=0 ){
        bp::override func_loadHeightMapRAW = this->get_override( "loadHeightMapRAW" );
        return func_loadHeightMapRAW( boost::python::ptr(file), bitsPerPixel, signedData, floatVals, width, vertexColor, smoothFactor );
    }

    virtual bool overrideLODDistance( ::irr::s32 LOD, ::irr::f64 newDistance ){
        bp::override func_overrideLODDistance = this->get_override( "overrideLODDistance" );
        return func_overrideLODDistance( LOD, newDistance );
    }

    virtual void scaleTexture( ::irr::f32 scale=1.0e+0f, ::irr::f32 scale2=0.0f ){
        bp::override func_scaleTexture = this->get_override( "scaleTexture" );
        func_scaleTexture( scale, scale2 );
    }

    virtual void setCameraMovementDelta( ::irr::f32 delta ){
        bp::override func_setCameraMovementDelta = this->get_override( "setCameraMovementDelta" );
        func_setCameraMovementDelta( delta );
    }

    virtual void setCameraRotationDelta( ::irr::f32 delta ){
        bp::override func_setCameraRotationDelta = this->get_override( "setCameraRotationDelta" );
        func_setCameraRotationDelta( delta );
    }

    virtual void setDynamicSelectorUpdate( bool bVal ){
        bp::override func_setDynamicSelectorUpdate = this->get_override( "setDynamicSelectorUpdate" );
        func_setDynamicSelectorUpdate( bVal );
    }

    virtual void setLODOfPatch( ::irr::s32 patchX, ::irr::s32 patchZ, ::irr::s32 LOD=0 ){
        bp::override func_setLODOfPatch = this->get_override( "setLODOfPatch" );
        func_setLODOfPatch( patchX, patchZ, LOD );
    }

    virtual void OnAnimate( ::irr::u32 timeMs ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( timeMs );
        else{
            this->irr::scene::ISceneNode::OnAnimate( timeMs );
        }
    }
    
    void default_OnAnimate( ::irr::u32 timeMs ) {
        irr::scene::ISceneNode::OnAnimate( timeMs );
    }

    virtual void OnRegisterSceneNode(  ) {
        if( bp::override func_OnRegisterSceneNode = this->get_override( "OnRegisterSceneNode" ) )
            func_OnRegisterSceneNode(  );
        else{
            this->irr::scene::ISceneNode::OnRegisterSceneNode(  );
        }
    }
    
    void default_OnRegisterSceneNode(  ) {
        irr::scene::ISceneNode::OnRegisterSceneNode( );
    }

    virtual void addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_addAnimator = this->get_override( "addAnimator" ) )
            func_addAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
    }

    virtual void addChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::scene::ISceneNode * child ) {
        irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
    }

    virtual ::irr::scene::ISceneNode * clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        else{
            return this->irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        }
    }
    
    ::irr::scene::ISceneNode * default_clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        return irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
    }

    void cloneMembers( ::irr::scene::ISceneNode * toCopyFrom, ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::cloneMembers( boost::python::ptr(toCopyFrom), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::core::vector3df getAbsolutePosition(  ) const  {
        if( bp::override func_getAbsolutePosition = this->get_override( "getAbsolutePosition" ) )
            return func_getAbsolutePosition(  );
        else{
            return this->irr::scene::ISceneNode::getAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector3df default_getAbsolutePosition(  ) const  {
        return irr::scene::ISceneNode::getAbsolutePosition( );
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::scene::ISceneNode::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::scene::ISceneNode::getID( );
    }

    virtual ::irr::u32 getMaterialCount(  ) const  {
        if( bp::override func_getMaterialCount = this->get_override( "getMaterialCount" ) )
            return func_getMaterialCount(  );
        else{
            return this->irr::scene::ISceneNode::getMaterialCount(  );
        }
    }
    
    ::irr::u32 default_getMaterialCount(  ) const  {
        return irr::scene::ISceneNode::getMaterialCount( );
    }

    virtual ::irr::c8 const * getName(  ) const  {
        if( bp::override func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            return this->irr::scene::ISceneNode::getName(  );
        }
    }
    
    ::irr::c8 const * default_getName(  ) const  {
        return irr::scene::ISceneNode::getName( );
    }

    virtual ::irr::core::matrix4 getRelativeTransformation(  ) const  {
        if( bp::override func_getRelativeTransformation = this->get_override( "getRelativeTransformation" ) )
            return func_getRelativeTransformation(  );
        else{
            return this->irr::scene::ISceneNode::getRelativeTransformation(  );
        }
    }
    
    ::irr::core::matrix4 default_getRelativeTransformation(  ) const  {
        return irr::scene::ISceneNode::getRelativeTransformation( );
    }

    virtual ::irr::scene::ISceneManager * getSceneManager(  ) const  {
        if( bp::override func_getSceneManager = this->get_override( "getSceneManager" ) )
            return func_getSceneManager(  );
        else{
            return this->irr::scene::ISceneNode::getSceneManager(  );
        }
    }
    
    ::irr::scene::ISceneManager * default_getSceneManager(  ) const  {
        return irr::scene::ISceneNode::getSceneManager( );
    }

    virtual ::irr::core::aabbox3d< float > const getTransformedBoundingBox(  ) const  {
        if( bp::override func_getTransformedBoundingBox = this->get_override( "getTransformedBoundingBox" ) )
            return func_getTransformedBoundingBox(  );
        else{
            return this->irr::scene::ISceneNode::getTransformedBoundingBox(  );
        }
    }
    
    ::irr::core::aabbox3d< float > const default_getTransformedBoundingBox(  ) const  {
        return irr::scene::ISceneNode::getTransformedBoundingBox( );
    }

    virtual ::irr::scene::ITriangleSelector * getTriangleSelector(  ) const  {
        if( bp::override func_getTriangleSelector = this->get_override( "getTriangleSelector" ) )
            return func_getTriangleSelector(  );
        else{
            return this->irr::scene::ISceneNode::getTriangleSelector(  );
        }
    }
    
    ::irr::scene::ITriangleSelector * default_getTriangleSelector(  ) const  {
        return irr::scene::ISceneNode::getTriangleSelector( );
    }

    virtual ::irr::scene::ESCENE_NODE_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNode::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNode::getType( );
    }

    virtual bool isTrulyVisible(  ) const  {
        if( bp::override func_isTrulyVisible = this->get_override( "isTrulyVisible" ) )
            return func_isTrulyVisible(  );
        else{
            return this->irr::scene::ISceneNode::isTrulyVisible(  );
        }
    }
    
    bool default_isTrulyVisible(  ) const  {
        return irr::scene::ISceneNode::isTrulyVisible( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::scene::ISceneNode::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::scene::ISceneNode::isVisible( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::scene::ISceneNode::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::scene::ISceneNode::remove( );
    }

    virtual void removeAll(  ) {
        if( bp::override func_removeAll = this->get_override( "removeAll" ) )
            func_removeAll(  );
        else{
            this->irr::scene::ISceneNode::removeAll(  );
        }
    }
    
    void default_removeAll(  ) {
        irr::scene::ISceneNode::removeAll( );
    }

    virtual void removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_removeAnimator = this->get_override( "removeAnimator" ) )
            func_removeAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
    }

    virtual void removeAnimators(  ) {
        if( bp::override func_removeAnimators = this->get_override( "removeAnimators" ) )
            func_removeAnimators(  );
        else{
            this->irr::scene::ISceneNode::removeAnimators(  );
        }
    }
    
    void default_removeAnimators(  ) {
        irr::scene::ISceneNode::removeAnimators( );
    }

    virtual bool removeChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            return func_removeChild( boost::python::ptr(child) );
        else{
            return this->irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
        }
    }
    
    bool default_removeChild( ::irr::scene::ISceneNode * child ) {
        return irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
    }

    virtual void render(  ){
        bp::override func_render = this->get_override( "render" );
        func_render(  );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual void setDebugDataVisible( ::irr::s32 state ) {
        if( bp::override func_setDebugDataVisible = this->get_override( "setDebugDataVisible" ) )
            func_setDebugDataVisible( state );
        else{
            this->irr::scene::ISceneNode::setDebugDataVisible( state );
        }
    }
    
    void default_setDebugDataVisible( ::irr::s32 state ) {
        irr::scene::ISceneNode::setDebugDataVisible( state );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::scene::ISceneNode::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::scene::ISceneNode::setID( id );
    }

    virtual void setName( ::irr::c8 const * name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->irr::scene::ISceneNode::setName( name );
        }
    }
    
    void default_setName( ::irr::c8 const * name ) {
        irr::scene::ISceneNode::setName( name );
    }

    virtual void setName( ::irr::core::stringc const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->irr::scene::ISceneNode::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::irr::core::stringc const & name ) {
        irr::scene::ISceneNode::setName( boost::ref(name) );
    }

    virtual void setParent( ::irr::scene::ISceneNode * newParent ) {
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(newParent) );
        else{
            this->irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
        }
    }
    
    void default_setParent( ::irr::scene::ISceneNode * newParent ) {
        irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
    }

    virtual void setPosition( ::irr::core::vector3df const & newpos ) {
        if( bp::override func_setPosition = this->get_override( "setPosition" ) )
            func_setPosition( boost::ref(newpos) );
        else{
            this->irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
        }
    }
    
    void default_setPosition( ::irr::core::vector3df const & newpos ) {
        irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
    }

    virtual void setRotation( ::irr::core::vector3df const & rotation ) {
        if( bp::override func_setRotation = this->get_override( "setRotation" ) )
            func_setRotation( boost::ref(rotation) );
        else{
            this->irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
        }
    }
    
    void default_setRotation( ::irr::core::vector3df const & rotation ) {
        irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
    }

    virtual void setScale( ::irr::core::vector3df const & scale ) {
        if( bp::override func_setScale = this->get_override( "setScale" ) )
            func_setScale( boost::ref(scale) );
        else{
            this->irr::scene::ISceneNode::setScale( boost::ref(scale) );
        }
    }
    
    void default_setScale( ::irr::core::vector3df const & scale ) {
        irr::scene::ISceneNode::setScale( boost::ref(scale) );
    }

    void setSceneManager( ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::setSceneManager( boost::python::ptr(newManager) );
    }

    virtual void setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        if( bp::override func_setTriangleSelector = this->get_override( "setTriangleSelector" ) )
            func_setTriangleSelector( boost::python::ptr(selector) );
        else{
            this->irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
        }
    }
    
    void default_setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
    }

    virtual void setVisible( bool isVisible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( isVisible );
        else{
            this->irr::scene::ISceneNode::setVisible( isVisible );
        }
    }
    
    void default_setVisible( bool isVisible ) {
        irr::scene::ISceneNode::setVisible( isVisible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::scene::ISceneNode::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::scene::ISceneNode::updateAbsolutePosition( );
    }

};

struct ITextSceneNode_wrapper : irr::scene::ITextSceneNode, bp::wrapper< irr::scene::ITextSceneNode > {

    ITextSceneNode_wrapper(::irr::scene::ISceneNode * parent, ::irr::scene::ISceneManager * mgr, ::irr::s32 id, ::irr::core::vector3df const & position=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f) )
    : irr::scene::ITextSceneNode( boost::python::ptr(parent), boost::python::ptr(mgr), id, boost::ref(position) )
      , bp::wrapper< irr::scene::ITextSceneNode >(){
        // constructor
    
    }

    virtual void setText( wchar_t const * text ){
        bp::override func_setText = this->get_override( "setText" );
        func_setText( text );
    }

    virtual void setTextColor( ::irr::video::SColor color ){
        bp::override func_setTextColor = this->get_override( "setTextColor" );
        func_setTextColor( color );
    }

    virtual void OnAnimate( ::irr::u32 timeMs ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( timeMs );
        else{
            this->irr::scene::ISceneNode::OnAnimate( timeMs );
        }
    }
    
    void default_OnAnimate( ::irr::u32 timeMs ) {
        irr::scene::ISceneNode::OnAnimate( timeMs );
    }

    virtual void OnRegisterSceneNode(  ) {
        if( bp::override func_OnRegisterSceneNode = this->get_override( "OnRegisterSceneNode" ) )
            func_OnRegisterSceneNode(  );
        else{
            this->irr::scene::ISceneNode::OnRegisterSceneNode(  );
        }
    }
    
    void default_OnRegisterSceneNode(  ) {
        irr::scene::ISceneNode::OnRegisterSceneNode( );
    }

    virtual void addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_addAnimator = this->get_override( "addAnimator" ) )
            func_addAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
    }

    virtual void addChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::scene::ISceneNode * child ) {
        irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
    }

    virtual ::irr::scene::ISceneNode * clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        else{
            return this->irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        }
    }
    
    ::irr::scene::ISceneNode * default_clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        return irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
    }

    void cloneMembers( ::irr::scene::ISceneNode * toCopyFrom, ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::cloneMembers( boost::python::ptr(toCopyFrom), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::core::vector3df getAbsolutePosition(  ) const  {
        if( bp::override func_getAbsolutePosition = this->get_override( "getAbsolutePosition" ) )
            return func_getAbsolutePosition(  );
        else{
            return this->irr::scene::ISceneNode::getAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector3df default_getAbsolutePosition(  ) const  {
        return irr::scene::ISceneNode::getAbsolutePosition( );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::scene::ISceneNode::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::scene::ISceneNode::getID( );
    }

    virtual ::irr::u32 getMaterialCount(  ) const  {
        if( bp::override func_getMaterialCount = this->get_override( "getMaterialCount" ) )
            return func_getMaterialCount(  );
        else{
            return this->irr::scene::ISceneNode::getMaterialCount(  );
        }
    }
    
    ::irr::u32 default_getMaterialCount(  ) const  {
        return irr::scene::ISceneNode::getMaterialCount( );
    }

    virtual ::irr::c8 const * getName(  ) const  {
        if( bp::override func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            return this->irr::scene::ISceneNode::getName(  );
        }
    }
    
    ::irr::c8 const * default_getName(  ) const  {
        return irr::scene::ISceneNode::getName( );
    }

    virtual ::irr::core::matrix4 getRelativeTransformation(  ) const  {
        if( bp::override func_getRelativeTransformation = this->get_override( "getRelativeTransformation" ) )
            return func_getRelativeTransformation(  );
        else{
            return this->irr::scene::ISceneNode::getRelativeTransformation(  );
        }
    }
    
    ::irr::core::matrix4 default_getRelativeTransformation(  ) const  {
        return irr::scene::ISceneNode::getRelativeTransformation( );
    }

    virtual ::irr::scene::ISceneManager * getSceneManager(  ) const  {
        if( bp::override func_getSceneManager = this->get_override( "getSceneManager" ) )
            return func_getSceneManager(  );
        else{
            return this->irr::scene::ISceneNode::getSceneManager(  );
        }
    }
    
    ::irr::scene::ISceneManager * default_getSceneManager(  ) const  {
        return irr::scene::ISceneNode::getSceneManager( );
    }

    virtual ::irr::core::aabbox3d< float > const getTransformedBoundingBox(  ) const  {
        if( bp::override func_getTransformedBoundingBox = this->get_override( "getTransformedBoundingBox" ) )
            return func_getTransformedBoundingBox(  );
        else{
            return this->irr::scene::ISceneNode::getTransformedBoundingBox(  );
        }
    }
    
    ::irr::core::aabbox3d< float > const default_getTransformedBoundingBox(  ) const  {
        return irr::scene::ISceneNode::getTransformedBoundingBox( );
    }

    virtual ::irr::scene::ITriangleSelector * getTriangleSelector(  ) const  {
        if( bp::override func_getTriangleSelector = this->get_override( "getTriangleSelector" ) )
            return func_getTriangleSelector(  );
        else{
            return this->irr::scene::ISceneNode::getTriangleSelector(  );
        }
    }
    
    ::irr::scene::ITriangleSelector * default_getTriangleSelector(  ) const  {
        return irr::scene::ISceneNode::getTriangleSelector( );
    }

    virtual ::irr::scene::ESCENE_NODE_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::ISceneNode::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_TYPE default_getType(  ) const  {
        return irr::scene::ISceneNode::getType( );
    }

    virtual bool isTrulyVisible(  ) const  {
        if( bp::override func_isTrulyVisible = this->get_override( "isTrulyVisible" ) )
            return func_isTrulyVisible(  );
        else{
            return this->irr::scene::ISceneNode::isTrulyVisible(  );
        }
    }
    
    bool default_isTrulyVisible(  ) const  {
        return irr::scene::ISceneNode::isTrulyVisible( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::scene::ISceneNode::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::scene::ISceneNode::isVisible( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::scene::ISceneNode::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::scene::ISceneNode::remove( );
    }

    virtual void removeAll(  ) {
        if( bp::override func_removeAll = this->get_override( "removeAll" ) )
            func_removeAll(  );
        else{
            this->irr::scene::ISceneNode::removeAll(  );
        }
    }
    
    void default_removeAll(  ) {
        irr::scene::ISceneNode::removeAll( );
    }

    virtual void removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_removeAnimator = this->get_override( "removeAnimator" ) )
            func_removeAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
    }

    virtual void removeAnimators(  ) {
        if( bp::override func_removeAnimators = this->get_override( "removeAnimators" ) )
            func_removeAnimators(  );
        else{
            this->irr::scene::ISceneNode::removeAnimators(  );
        }
    }
    
    void default_removeAnimators(  ) {
        irr::scene::ISceneNode::removeAnimators( );
    }

    virtual bool removeChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            return func_removeChild( boost::python::ptr(child) );
        else{
            return this->irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
        }
    }
    
    bool default_removeChild( ::irr::scene::ISceneNode * child ) {
        return irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
    }

    virtual void render(  ){
        bp::override func_render = this->get_override( "render" );
        func_render(  );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual void setDebugDataVisible( ::irr::s32 state ) {
        if( bp::override func_setDebugDataVisible = this->get_override( "setDebugDataVisible" ) )
            func_setDebugDataVisible( state );
        else{
            this->irr::scene::ISceneNode::setDebugDataVisible( state );
        }
    }
    
    void default_setDebugDataVisible( ::irr::s32 state ) {
        irr::scene::ISceneNode::setDebugDataVisible( state );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::scene::ISceneNode::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::scene::ISceneNode::setID( id );
    }

    virtual void setName( ::irr::c8 const * name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->irr::scene::ISceneNode::setName( name );
        }
    }
    
    void default_setName( ::irr::c8 const * name ) {
        irr::scene::ISceneNode::setName( name );
    }

    virtual void setName( ::irr::core::stringc const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->irr::scene::ISceneNode::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::irr::core::stringc const & name ) {
        irr::scene::ISceneNode::setName( boost::ref(name) );
    }

    virtual void setParent( ::irr::scene::ISceneNode * newParent ) {
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(newParent) );
        else{
            this->irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
        }
    }
    
    void default_setParent( ::irr::scene::ISceneNode * newParent ) {
        irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
    }

    virtual void setPosition( ::irr::core::vector3df const & newpos ) {
        if( bp::override func_setPosition = this->get_override( "setPosition" ) )
            func_setPosition( boost::ref(newpos) );
        else{
            this->irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
        }
    }
    
    void default_setPosition( ::irr::core::vector3df const & newpos ) {
        irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
    }

    virtual void setRotation( ::irr::core::vector3df const & rotation ) {
        if( bp::override func_setRotation = this->get_override( "setRotation" ) )
            func_setRotation( boost::ref(rotation) );
        else{
            this->irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
        }
    }
    
    void default_setRotation( ::irr::core::vector3df const & rotation ) {
        irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
    }

    virtual void setScale( ::irr::core::vector3df const & scale ) {
        if( bp::override func_setScale = this->get_override( "setScale" ) )
            func_setScale( boost::ref(scale) );
        else{
            this->irr::scene::ISceneNode::setScale( boost::ref(scale) );
        }
    }
    
    void default_setScale( ::irr::core::vector3df const & scale ) {
        irr::scene::ISceneNode::setScale( boost::ref(scale) );
    }

    void setSceneManager( ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::setSceneManager( boost::python::ptr(newManager) );
    }

    virtual void setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        if( bp::override func_setTriangleSelector = this->get_override( "setTriangleSelector" ) )
            func_setTriangleSelector( boost::python::ptr(selector) );
        else{
            this->irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
        }
    }
    
    void default_setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
    }

    virtual void setVisible( bool isVisible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( isVisible );
        else{
            this->irr::scene::ISceneNode::setVisible( isVisible );
        }
    }
    
    void default_setVisible( bool isVisible ) {
        irr::scene::ISceneNode::setVisible( isVisible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::scene::ISceneNode::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::scene::ISceneNode::updateAbsolutePosition( );
    }

};

struct IVolumeLightSceneNode_wrapper : irr::scene::IVolumeLightSceneNode, bp::wrapper< irr::scene::IVolumeLightSceneNode > {

    IVolumeLightSceneNode_wrapper(::irr::scene::ISceneNode * parent, ::irr::scene::ISceneManager * mgr, ::irr::s32 id, ::irr::core::vector3df const & position, ::irr::core::vector3df const & rotation, ::irr::core::vector3df const & scale )
    : irr::scene::IVolumeLightSceneNode( boost::python::ptr(parent), boost::python::ptr(mgr), id, boost::ref(position), boost::ref(rotation), boost::ref(scale) )
      , bp::wrapper< irr::scene::IVolumeLightSceneNode >(){
        // constructor
    
    }

    virtual ::irr::video::SColor getFootColor(  ) const {
        bp::override func_getFootColor = this->get_override( "getFootColor" );
        return func_getFootColor(  );
    }

    virtual ::irr::u32 getSubDivideU(  ) const {
        bp::override func_getSubDivideU = this->get_override( "getSubDivideU" );
        return func_getSubDivideU(  );
    }

    virtual ::irr::u32 getSubDivideV(  ) const {
        bp::override func_getSubDivideV = this->get_override( "getSubDivideV" );
        return func_getSubDivideV(  );
    }

    virtual ::irr::video::SColor getTailColor(  ) const {
        bp::override func_getTailColor = this->get_override( "getTailColor" );
        return func_getTailColor(  );
    }

    virtual ::irr::scene::ESCENE_NODE_TYPE getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->irr::scene::IVolumeLightSceneNode::getType(  );
        }
    }
    
    ::irr::scene::ESCENE_NODE_TYPE default_getType(  ) const  {
        return irr::scene::IVolumeLightSceneNode::getType( );
    }

    virtual void setFootColor( ::irr::video::SColor const inColour ){
        bp::override func_setFootColor = this->get_override( "setFootColor" );
        func_setFootColor( inColour );
    }

    virtual void setSubDivideU( ::irr::u32 const inU ){
        bp::override func_setSubDivideU = this->get_override( "setSubDivideU" );
        func_setSubDivideU( inU );
    }

    virtual void setSubDivideV( ::irr::u32 const inV ){
        bp::override func_setSubDivideV = this->get_override( "setSubDivideV" );
        func_setSubDivideV( inV );
    }

    virtual void setTailColor( ::irr::video::SColor const inColour ){
        bp::override func_setTailColor = this->get_override( "setTailColor" );
        func_setTailColor( inColour );
    }

    virtual void OnAnimate( ::irr::u32 timeMs ) {
        if( bp::override func_OnAnimate = this->get_override( "OnAnimate" ) )
            func_OnAnimate( timeMs );
        else{
            this->irr::scene::ISceneNode::OnAnimate( timeMs );
        }
    }
    
    void default_OnAnimate( ::irr::u32 timeMs ) {
        irr::scene::ISceneNode::OnAnimate( timeMs );
    }

    virtual void OnRegisterSceneNode(  ) {
        if( bp::override func_OnRegisterSceneNode = this->get_override( "OnRegisterSceneNode" ) )
            func_OnRegisterSceneNode(  );
        else{
            this->irr::scene::ISceneNode::OnRegisterSceneNode(  );
        }
    }
    
    void default_OnRegisterSceneNode(  ) {
        irr::scene::ISceneNode::OnRegisterSceneNode( );
    }

    virtual void addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_addAnimator = this->get_override( "addAnimator" ) )
            func_addAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_addAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::addAnimator( boost::python::ptr(animator) );
    }

    virtual void addChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            func_addChild( boost::python::ptr(child) );
        else{
            this->irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
        }
    }
    
    void default_addChild( ::irr::scene::ISceneNode * child ) {
        irr::scene::ISceneNode::addChild( boost::python::ptr(child) );
    }

    virtual ::irr::scene::ISceneNode * clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        else{
            return this->irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
        }
    }
    
    ::irr::scene::ISceneNode * default_clone( ::irr::scene::ISceneNode * newParent=0, ::irr::scene::ISceneManager * newManager=0 ) {
        return irr::scene::ISceneNode::clone( boost::python::ptr(newParent), boost::python::ptr(newManager) );
    }

    void cloneMembers( ::irr::scene::ISceneNode * toCopyFrom, ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::cloneMembers( boost::python::ptr(toCopyFrom), boost::python::ptr(newManager) );
    }

    virtual void deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        if( bp::override func_deserializeAttributes = this->get_override( "deserializeAttributes" ) )
            func_deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
        }
    }
    
    void default_deserializeAttributes( ::irr::io::IAttributes * in, ::irr::io::SAttributeReadWriteOptions * options=0 ) {
        irr::scene::ISceneNode::deserializeAttributes( boost::python::ptr(in), boost::python::ptr(options) );
    }

    virtual ::irr::core::vector3df getAbsolutePosition(  ) const  {
        if( bp::override func_getAbsolutePosition = this->get_override( "getAbsolutePosition" ) )
            return func_getAbsolutePosition(  );
        else{
            return this->irr::scene::ISceneNode::getAbsolutePosition(  );
        }
    }
    
    ::irr::core::vector3df default_getAbsolutePosition(  ) const  {
        return irr::scene::ISceneNode::getAbsolutePosition( );
    }

    virtual ::irr::core::aabbox3d< float > const & getBoundingBox(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::s32 getID(  ) const  {
        if( bp::override func_getID = this->get_override( "getID" ) )
            return func_getID(  );
        else{
            return this->irr::scene::ISceneNode::getID(  );
        }
    }
    
    ::irr::s32 default_getID(  ) const  {
        return irr::scene::ISceneNode::getID( );
    }

    virtual ::irr::u32 getMaterialCount(  ) const  {
        if( bp::override func_getMaterialCount = this->get_override( "getMaterialCount" ) )
            return func_getMaterialCount(  );
        else{
            return this->irr::scene::ISceneNode::getMaterialCount(  );
        }
    }
    
    ::irr::u32 default_getMaterialCount(  ) const  {
        return irr::scene::ISceneNode::getMaterialCount( );
    }

    virtual ::irr::c8 const * getName(  ) const  {
        if( bp::override func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            return this->irr::scene::ISceneNode::getName(  );
        }
    }
    
    ::irr::c8 const * default_getName(  ) const  {
        return irr::scene::ISceneNode::getName( );
    }

    virtual ::irr::core::matrix4 getRelativeTransformation(  ) const  {
        if( bp::override func_getRelativeTransformation = this->get_override( "getRelativeTransformation" ) )
            return func_getRelativeTransformation(  );
        else{
            return this->irr::scene::ISceneNode::getRelativeTransformation(  );
        }
    }
    
    ::irr::core::matrix4 default_getRelativeTransformation(  ) const  {
        return irr::scene::ISceneNode::getRelativeTransformation( );
    }

    virtual ::irr::scene::ISceneManager * getSceneManager(  ) const  {
        if( bp::override func_getSceneManager = this->get_override( "getSceneManager" ) )
            return func_getSceneManager(  );
        else{
            return this->irr::scene::ISceneNode::getSceneManager(  );
        }
    }
    
    ::irr::scene::ISceneManager * default_getSceneManager(  ) const  {
        return irr::scene::ISceneNode::getSceneManager( );
    }

    virtual ::irr::core::aabbox3d< float > const getTransformedBoundingBox(  ) const  {
        if( bp::override func_getTransformedBoundingBox = this->get_override( "getTransformedBoundingBox" ) )
            return func_getTransformedBoundingBox(  );
        else{
            return this->irr::scene::ISceneNode::getTransformedBoundingBox(  );
        }
    }
    
    ::irr::core::aabbox3d< float > const default_getTransformedBoundingBox(  ) const  {
        return irr::scene::ISceneNode::getTransformedBoundingBox( );
    }

    virtual ::irr::scene::ITriangleSelector * getTriangleSelector(  ) const  {
        if( bp::override func_getTriangleSelector = this->get_override( "getTriangleSelector" ) )
            return func_getTriangleSelector(  );
        else{
            return this->irr::scene::ISceneNode::getTriangleSelector(  );
        }
    }
    
    ::irr::scene::ITriangleSelector * default_getTriangleSelector(  ) const  {
        return irr::scene::ISceneNode::getTriangleSelector( );
    }

    virtual bool isTrulyVisible(  ) const  {
        if( bp::override func_isTrulyVisible = this->get_override( "isTrulyVisible" ) )
            return func_isTrulyVisible(  );
        else{
            return this->irr::scene::ISceneNode::isTrulyVisible(  );
        }
    }
    
    bool default_isTrulyVisible(  ) const  {
        return irr::scene::ISceneNode::isTrulyVisible( );
    }

    virtual bool isVisible(  ) const  {
        if( bp::override func_isVisible = this->get_override( "isVisible" ) )
            return func_isVisible(  );
        else{
            return this->irr::scene::ISceneNode::isVisible(  );
        }
    }
    
    bool default_isVisible(  ) const  {
        return irr::scene::ISceneNode::isVisible( );
    }

    virtual void remove(  ) {
        if( bp::override func_remove = this->get_override( "remove" ) )
            func_remove(  );
        else{
            this->irr::scene::ISceneNode::remove(  );
        }
    }
    
    void default_remove(  ) {
        irr::scene::ISceneNode::remove( );
    }

    virtual void removeAll(  ) {
        if( bp::override func_removeAll = this->get_override( "removeAll" ) )
            func_removeAll(  );
        else{
            this->irr::scene::ISceneNode::removeAll(  );
        }
    }
    
    void default_removeAll(  ) {
        irr::scene::ISceneNode::removeAll( );
    }

    virtual void removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        if( bp::override func_removeAnimator = this->get_override( "removeAnimator" ) )
            func_removeAnimator( boost::python::ptr(animator) );
        else{
            this->irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
        }
    }
    
    void default_removeAnimator( ::irr::scene::ISceneNodeAnimator * animator ) {
        irr::scene::ISceneNode::removeAnimator( boost::python::ptr(animator) );
    }

    virtual void removeAnimators(  ) {
        if( bp::override func_removeAnimators = this->get_override( "removeAnimators" ) )
            func_removeAnimators(  );
        else{
            this->irr::scene::ISceneNode::removeAnimators(  );
        }
    }
    
    void default_removeAnimators(  ) {
        irr::scene::ISceneNode::removeAnimators( );
    }

    virtual bool removeChild( ::irr::scene::ISceneNode * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            return func_removeChild( boost::python::ptr(child) );
        else{
            return this->irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
        }
    }
    
    bool default_removeChild( ::irr::scene::ISceneNode * child ) {
        return irr::scene::ISceneNode::removeChild( boost::python::ptr(child) );
    }

    virtual void render(  ){
        bp::override func_render = this->get_override( "render" );
        func_render(  );
    }

    virtual void serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        if( bp::override func_serializeAttributes = this->get_override( "serializeAttributes" ) )
            func_serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        else{
            this->irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
        }
    }
    
    void default_serializeAttributes( ::irr::io::IAttributes * out, ::irr::io::SAttributeReadWriteOptions * options=0 ) const  {
        irr::scene::ISceneNode::serializeAttributes( boost::python::ptr(out), boost::python::ptr(options) );
    }

    virtual void setDebugDataVisible( ::irr::s32 state ) {
        if( bp::override func_setDebugDataVisible = this->get_override( "setDebugDataVisible" ) )
            func_setDebugDataVisible( state );
        else{
            this->irr::scene::ISceneNode::setDebugDataVisible( state );
        }
    }
    
    void default_setDebugDataVisible( ::irr::s32 state ) {
        irr::scene::ISceneNode::setDebugDataVisible( state );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

    virtual void setID( ::irr::s32 id ) {
        if( bp::override func_setID = this->get_override( "setID" ) )
            func_setID( id );
        else{
            this->irr::scene::ISceneNode::setID( id );
        }
    }
    
    void default_setID( ::irr::s32 id ) {
        irr::scene::ISceneNode::setID( id );
    }

    virtual void setName( ::irr::c8 const * name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->irr::scene::ISceneNode::setName( name );
        }
    }
    
    void default_setName( ::irr::c8 const * name ) {
        irr::scene::ISceneNode::setName( name );
    }

    virtual void setName( ::irr::core::stringc const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( boost::ref(name) );
        else{
            this->irr::scene::ISceneNode::setName( boost::ref(name) );
        }
    }
    
    void default_setName( ::irr::core::stringc const & name ) {
        irr::scene::ISceneNode::setName( boost::ref(name) );
    }

    virtual void setParent( ::irr::scene::ISceneNode * newParent ) {
        if( bp::override func_setParent = this->get_override( "setParent" ) )
            func_setParent( boost::python::ptr(newParent) );
        else{
            this->irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
        }
    }
    
    void default_setParent( ::irr::scene::ISceneNode * newParent ) {
        irr::scene::ISceneNode::setParent( boost::python::ptr(newParent) );
    }

    virtual void setPosition( ::irr::core::vector3df const & newpos ) {
        if( bp::override func_setPosition = this->get_override( "setPosition" ) )
            func_setPosition( boost::ref(newpos) );
        else{
            this->irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
        }
    }
    
    void default_setPosition( ::irr::core::vector3df const & newpos ) {
        irr::scene::ISceneNode::setPosition( boost::ref(newpos) );
    }

    virtual void setRotation( ::irr::core::vector3df const & rotation ) {
        if( bp::override func_setRotation = this->get_override( "setRotation" ) )
            func_setRotation( boost::ref(rotation) );
        else{
            this->irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
        }
    }
    
    void default_setRotation( ::irr::core::vector3df const & rotation ) {
        irr::scene::ISceneNode::setRotation( boost::ref(rotation) );
    }

    virtual void setScale( ::irr::core::vector3df const & scale ) {
        if( bp::override func_setScale = this->get_override( "setScale" ) )
            func_setScale( boost::ref(scale) );
        else{
            this->irr::scene::ISceneNode::setScale( boost::ref(scale) );
        }
    }
    
    void default_setScale( ::irr::core::vector3df const & scale ) {
        irr::scene::ISceneNode::setScale( boost::ref(scale) );
    }

    void setSceneManager( ::irr::scene::ISceneManager * newManager ){
        irr::scene::ISceneNode::setSceneManager( boost::python::ptr(newManager) );
    }

    virtual void setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        if( bp::override func_setTriangleSelector = this->get_override( "setTriangleSelector" ) )
            func_setTriangleSelector( boost::python::ptr(selector) );
        else{
            this->irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
        }
    }
    
    void default_setTriangleSelector( ::irr::scene::ITriangleSelector * selector ) {
        irr::scene::ISceneNode::setTriangleSelector( boost::python::ptr(selector) );
    }

    virtual void setVisible( bool isVisible ) {
        if( bp::override func_setVisible = this->get_override( "setVisible" ) )
            func_setVisible( isVisible );
        else{
            this->irr::scene::ISceneNode::setVisible( isVisible );
        }
    }
    
    void default_setVisible( bool isVisible ) {
        irr::scene::ISceneNode::setVisible( isVisible );
    }

    virtual void updateAbsolutePosition(  ) {
        if( bp::override func_updateAbsolutePosition = this->get_override( "updateAbsolutePosition" ) )
            func_updateAbsolutePosition(  );
        else{
            this->irr::scene::ISceneNode::updateAbsolutePosition(  );
        }
    }
    
    void default_updateAbsolutePosition(  ) {
        irr::scene::ISceneNode::updateAbsolutePosition( );
    }

};

struct SAnimatedMesh_wrapper : irr::scene::SAnimatedMesh, bp::wrapper< irr::scene::SAnimatedMesh > {

    SAnimatedMesh_wrapper(irr::scene::SAnimatedMesh const & arg )
    : irr::scene::SAnimatedMesh( arg )
      , bp::wrapper< irr::scene::SAnimatedMesh >(){
        // copy constructor
        
    }

    SAnimatedMesh_wrapper(::irr::scene::IMesh * mesh=0, ::irr::scene::E_ANIMATED_MESH_TYPE type=::irr::scene::EAMT_UNKNOWN )
    : irr::scene::SAnimatedMesh( boost::python::ptr(mesh), type )
      , bp::wrapper< irr::scene::SAnimatedMesh >(){
        // constructor
    
    }

    virtual ::irr::u32 getFrameCount(  ) const  {
        if( bp::override func_getFrameCount = this->get_override( "getFrameCount" ) )
            return func_getFrameCount(  );
        else{
            return this->irr::scene::SAnimatedMesh::getFrameCount(  );
        }
    }
    
    ::irr::u32 default_getFrameCount(  ) const  {
        return irr::scene::SAnimatedMesh::getFrameCount( );
    }

    virtual ::irr::scene::IMesh * getMesh( ::irr::s32 frame, ::irr::s32 detailLevel, ::irr::s32 startFrameLoop=-0x00000000000000001, ::irr::s32 endFrameLoop=-0x00000000000000001 ) {
        if( bp::override func_getMesh = this->get_override( "getMesh" ) )
            return func_getMesh( frame, detailLevel, startFrameLoop, endFrameLoop );
        else{
            return this->irr::scene::SAnimatedMesh::getMesh( frame, detailLevel, startFrameLoop, endFrameLoop );
        }
    }
    
    ::irr::scene::IMesh * default_getMesh( ::irr::s32 frame, ::irr::s32 detailLevel, ::irr::s32 startFrameLoop=-0x00000000000000001, ::irr::s32 endFrameLoop=-0x00000000000000001 ) {
        return irr::scene::SAnimatedMesh::getMesh( frame, detailLevel, startFrameLoop, endFrameLoop );
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::u32 nr ) const  {
        if( bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" ) )
            return func_getMeshBuffer( nr );
        else{
            return this->irr::scene::SAnimatedMesh::getMeshBuffer( nr );
        }
    }
    
    ::irr::scene::IMeshBuffer * default_getMeshBuffer( ::irr::u32 nr ) const  {
        return irr::scene::SAnimatedMesh::getMeshBuffer( nr );
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::video::SMaterial const & material ) const  {
        if( bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" ) )
            return func_getMeshBuffer( boost::ref(material) );
        else{
            return this->irr::scene::SAnimatedMesh::getMeshBuffer( boost::ref(material) );
        }
    }
    
    ::irr::scene::IMeshBuffer * default_getMeshBuffer( ::irr::video::SMaterial const & material ) const  {
        return irr::scene::SAnimatedMesh::getMeshBuffer( boost::ref(material) );
    }

    virtual ::irr::u32 getMeshBufferCount(  ) const  {
        if( bp::override func_getMeshBufferCount = this->get_override( "getMeshBufferCount" ) )
            return func_getMeshBufferCount(  );
        else{
            return this->irr::scene::SAnimatedMesh::getMeshBufferCount(  );
        }
    }
    
    ::irr::u32 default_getMeshBufferCount(  ) const  {
        return irr::scene::SAnimatedMesh::getMeshBufferCount( );
    }

    virtual ::irr::scene::E_ANIMATED_MESH_TYPE getMeshType(  ) const  {
        if( bp::override func_getMeshType = this->get_override( "getMeshType" ) )
            return func_getMeshType(  );
        else{
            return this->irr::scene::SAnimatedMesh::getMeshType(  );
        }
    }
    
    ::irr::scene::E_ANIMATED_MESH_TYPE default_getMeshType(  ) const  {
        return irr::scene::SAnimatedMesh::getMeshType( );
    }

    virtual void setBoundingBox( ::irr::core::aabbox3df const & box ) {
        if( bp::override func_setBoundingBox = this->get_override( "setBoundingBox" ) )
            func_setBoundingBox( boost::ref(box) );
        else{
            this->irr::scene::SAnimatedMesh::setBoundingBox( boost::ref(box) );
        }
    }
    
    void default_setBoundingBox( ::irr::core::aabbox3df const & box ) {
        irr::scene::SAnimatedMesh::setBoundingBox( boost::ref(box) );
    }

    virtual void setDirty( ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        if( bp::override func_setDirty = this->get_override( "setDirty" ) )
            func_setDirty( buffer );
        else{
            this->irr::scene::SAnimatedMesh::setDirty( buffer );
        }
    }
    
    void default_setDirty( ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        irr::scene::SAnimatedMesh::setDirty( buffer );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING newMappingHint, ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        if( bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" ) )
            func_setHardwareMappingHint( newMappingHint, buffer );
        else{
            this->irr::scene::SAnimatedMesh::setHardwareMappingHint( newMappingHint, buffer );
        }
    }
    
    void default_setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING newMappingHint, ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        irr::scene::SAnimatedMesh::setHardwareMappingHint( newMappingHint, buffer );
    }

    virtual void setMaterialFlag( ::irr::video::E_MATERIAL_FLAG flag, bool newvalue ) {
        if( bp::override func_setMaterialFlag = this->get_override( "setMaterialFlag" ) )
            func_setMaterialFlag( flag, newvalue );
        else{
            this->irr::scene::SAnimatedMesh::setMaterialFlag( flag, newvalue );
        }
    }
    
    void default_setMaterialFlag( ::irr::video::E_MATERIAL_FLAG flag, bool newvalue ) {
        irr::scene::SAnimatedMesh::setMaterialFlag( flag, newvalue );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct SMD3Face_wrapper : irr::scene::SMD3Face, bp::wrapper< irr::scene::SMD3Face > {

    SMD3Face_wrapper(irr::scene::SMD3Face const & arg )
    : irr::scene::SMD3Face( arg )
      , bp::wrapper< irr::scene::SMD3Face >(){
        // copy constructor
        
    }

    SMD3Face_wrapper()
    : irr::scene::SMD3Face()
      , bp::wrapper< irr::scene::SMD3Face >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 3>
    pyplusplus_Index_wrapper( ::irr::scene::SMD3Face & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 3>( inst.Index );
    }

};

struct SMD3Header_wrapper : irr::scene::SMD3Header, bp::wrapper< irr::scene::SMD3Header > {

    SMD3Header_wrapper(irr::scene::SMD3Header const & arg )
    : irr::scene::SMD3Header( arg )
      , bp::wrapper< irr::scene::SMD3Header >(){
        // copy constructor
        
    }

    SMD3Header_wrapper()
    : irr::scene::SMD3Header()
      , bp::wrapper< irr::scene::SMD3Header >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< signed char, 68>
    pyplusplus_fileName_wrapper( ::irr::scene::SMD3Header & inst ){
        return pyplusplus::containers::static_sized::array_1_t< signed char, 68>( inst.fileName );
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 4>
    pyplusplus_headerID_wrapper( ::irr::scene::SMD3Header & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 4>( inst.headerID );
    }

};

struct SMD3Mesh_wrapper : irr::scene::SMD3Mesh, bp::wrapper< irr::scene::SMD3Mesh > {

    SMD3Mesh_wrapper(irr::scene::SMD3Mesh const & arg )
    : irr::scene::SMD3Mesh( arg )
      , bp::wrapper< irr::scene::SMD3Mesh >(){
        // copy constructor
        
    }

    SMD3Mesh_wrapper( )
    : irr::scene::SMD3Mesh( )
      , bp::wrapper< irr::scene::SMD3Mesh >(){
        // null constructor
    
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct SMD3MeshBuffer_wrapper : irr::scene::SMD3MeshBuffer, bp::wrapper< irr::scene::SMD3MeshBuffer > {

    SMD3MeshBuffer_wrapper(irr::scene::SMD3MeshBuffer const & arg )
    : irr::scene::SMD3MeshBuffer( arg )
      , bp::wrapper< irr::scene::SMD3MeshBuffer >(){
        // copy constructor
        
    }

    SMD3MeshBuffer_wrapper()
    : irr::scene::SMD3MeshBuffer()
      , bp::wrapper< irr::scene::SMD3MeshBuffer >(){
        // null constructor
        
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct SMD3MeshHeader_wrapper : irr::scene::SMD3MeshHeader, bp::wrapper< irr::scene::SMD3MeshHeader > {

    SMD3MeshHeader_wrapper(irr::scene::SMD3MeshHeader const & arg )
    : irr::scene::SMD3MeshHeader( arg )
      , bp::wrapper< irr::scene::SMD3MeshHeader >(){
        // copy constructor
        
    }

    SMD3MeshHeader_wrapper()
    : irr::scene::SMD3MeshHeader()
      , bp::wrapper< irr::scene::SMD3MeshHeader >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 4>
    pyplusplus_meshID_wrapper( ::irr::scene::SMD3MeshHeader & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 4>( inst.meshID );
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 68>
    pyplusplus_meshName_wrapper( ::irr::scene::SMD3MeshHeader & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 68>( inst.meshName );
    }

};

struct SMD3Vertex_wrapper : irr::scene::SMD3Vertex, bp::wrapper< irr::scene::SMD3Vertex > {

    SMD3Vertex_wrapper(irr::scene::SMD3Vertex const & arg )
    : irr::scene::SMD3Vertex( arg )
      , bp::wrapper< irr::scene::SMD3Vertex >(){
        // copy constructor
        
    }

    SMD3Vertex_wrapper()
    : irr::scene::SMD3Vertex()
      , bp::wrapper< irr::scene::SMD3Vertex >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< unsigned char, 2>
    pyplusplus_normal_wrapper( ::irr::scene::SMD3Vertex & inst ){
        return pyplusplus::containers::static_sized::array_1_t< unsigned char, 2>( inst.normal );
    }

    static pyplusplus::containers::static_sized::array_1_t< short int, 3>
    pyplusplus_position_wrapper( ::irr::scene::SMD3Vertex & inst ){
        return pyplusplus::containers::static_sized::array_1_t< short int, 3>( inst.position );
    }

};

struct SMesh_wrapper : irr::scene::SMesh, bp::wrapper< irr::scene::SMesh > {

    SMesh_wrapper(irr::scene::SMesh const & arg )
    : irr::scene::SMesh( arg )
      , bp::wrapper< irr::scene::SMesh >(){
        // copy constructor
        
    }

    SMesh_wrapper( )
    : irr::scene::SMesh( )
      , bp::wrapper< irr::scene::SMesh >(){
        // null constructor
    
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::u32 nr ) const  {
        if( bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" ) )
            return func_getMeshBuffer( nr );
        else{
            return this->irr::scene::SMesh::getMeshBuffer( nr );
        }
    }
    
    ::irr::scene::IMeshBuffer * default_getMeshBuffer( ::irr::u32 nr ) const  {
        return irr::scene::SMesh::getMeshBuffer( nr );
    }

    virtual ::irr::scene::IMeshBuffer * getMeshBuffer( ::irr::video::SMaterial const & material ) const  {
        if( bp::override func_getMeshBuffer = this->get_override( "getMeshBuffer" ) )
            return func_getMeshBuffer( boost::ref(material) );
        else{
            return this->irr::scene::SMesh::getMeshBuffer( boost::ref(material) );
        }
    }
    
    ::irr::scene::IMeshBuffer * default_getMeshBuffer( ::irr::video::SMaterial const & material ) const  {
        return irr::scene::SMesh::getMeshBuffer( boost::ref(material) );
    }

    virtual ::irr::u32 getMeshBufferCount(  ) const  {
        if( bp::override func_getMeshBufferCount = this->get_override( "getMeshBufferCount" ) )
            return func_getMeshBufferCount(  );
        else{
            return this->irr::scene::SMesh::getMeshBufferCount(  );
        }
    }
    
    ::irr::u32 default_getMeshBufferCount(  ) const  {
        return irr::scene::SMesh::getMeshBufferCount( );
    }

    virtual void setBoundingBox( ::irr::core::aabbox3df const & box ) {
        if( bp::override func_setBoundingBox = this->get_override( "setBoundingBox" ) )
            func_setBoundingBox( boost::ref(box) );
        else{
            this->irr::scene::SMesh::setBoundingBox( boost::ref(box) );
        }
    }
    
    void default_setBoundingBox( ::irr::core::aabbox3df const & box ) {
        irr::scene::SMesh::setBoundingBox( boost::ref(box) );
    }

    virtual void setDirty( ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        if( bp::override func_setDirty = this->get_override( "setDirty" ) )
            func_setDirty( buffer );
        else{
            this->irr::scene::SMesh::setDirty( buffer );
        }
    }
    
    void default_setDirty( ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        irr::scene::SMesh::setDirty( buffer );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING newMappingHint, ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        if( bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" ) )
            func_setHardwareMappingHint( newMappingHint, buffer );
        else{
            this->irr::scene::SMesh::setHardwareMappingHint( newMappingHint, buffer );
        }
    }
    
    void default_setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING newMappingHint, ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        irr::scene::SMesh::setHardwareMappingHint( newMappingHint, buffer );
    }

    virtual void setMaterialFlag( ::irr::video::E_MATERIAL_FLAG flag, bool newvalue ) {
        if( bp::override func_setMaterialFlag = this->get_override( "setMaterialFlag" ) )
            func_setMaterialFlag( flag, newvalue );
        else{
            this->irr::scene::SMesh::setMaterialFlag( flag, newvalue );
        }
    }
    
    void default_setMaterialFlag( ::irr::video::E_MATERIAL_FLAG flag, bool newvalue ) {
        irr::scene::SMesh::setMaterialFlag( flag, newvalue );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct SSharedMeshBuffer_wrapper : irr::scene::SSharedMeshBuffer, bp::wrapper< irr::scene::SSharedMeshBuffer > {

    SSharedMeshBuffer_wrapper( )
    : irr::scene::SSharedMeshBuffer( )
      , bp::wrapper< irr::scene::SSharedMeshBuffer >(){
        // null constructor
    
    }

    SSharedMeshBuffer_wrapper(::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > * vertices )
    : irr::scene::SSharedMeshBuffer( boost::python::ptr(vertices) )
      , bp::wrapper< irr::scene::SSharedMeshBuffer >(){
        // constructor
    
    }

    virtual void append( void const * const vertices, ::irr::u32 numVertices, ::irr::u16 const * const indices, ::irr::u32 numIndices ) {
        if( bp::override func_append = this->get_override( "append" ) )
            func_append( vertices, numVertices, indices, numIndices );
        else{
            this->irr::scene::SSharedMeshBuffer::append( vertices, numVertices, indices, numIndices );
        }
    }
    
    void default_append( void const * const vertices, ::irr::u32 numVertices, ::irr::u16 const * const indices, ::irr::u32 numIndices ) {
        irr::scene::SSharedMeshBuffer::append( vertices, numVertices, indices, numIndices );
    }

    virtual void append( ::irr::scene::IMeshBuffer const * const other ) {
        if( bp::override func_append = this->get_override( "append" ) )
            func_append( other );
        else{
            this->irr::scene::SSharedMeshBuffer::append( other );
        }
    }
    
    void default_append( ::irr::scene::IMeshBuffer const * const other ) {
        irr::scene::SSharedMeshBuffer::append( other );
    }

    virtual ::irr::u32 getChangedID_Index(  ) const  {
        if( bp::override func_getChangedID_Index = this->get_override( "getChangedID_Index" ) )
            return func_getChangedID_Index(  );
        else{
            return this->irr::scene::SSharedMeshBuffer::getChangedID_Index(  );
        }
    }
    
    ::irr::u32 default_getChangedID_Index(  ) const  {
        return irr::scene::SSharedMeshBuffer::getChangedID_Index( );
    }

    virtual ::irr::u32 getChangedID_Vertex(  ) const  {
        if( bp::override func_getChangedID_Vertex = this->get_override( "getChangedID_Vertex" ) )
            return func_getChangedID_Vertex(  );
        else{
            return this->irr::scene::SSharedMeshBuffer::getChangedID_Vertex(  );
        }
    }
    
    ::irr::u32 default_getChangedID_Vertex(  ) const  {
        return irr::scene::SSharedMeshBuffer::getChangedID_Vertex( );
    }

    virtual ::irr::scene::E_HARDWARE_MAPPING getHardwareMappingHint_Index(  ) const  {
        if( bp::override func_getHardwareMappingHint_Index = this->get_override( "getHardwareMappingHint_Index" ) )
            return func_getHardwareMappingHint_Index(  );
        else{
            return this->irr::scene::SSharedMeshBuffer::getHardwareMappingHint_Index(  );
        }
    }
    
    ::irr::scene::E_HARDWARE_MAPPING default_getHardwareMappingHint_Index(  ) const  {
        return irr::scene::SSharedMeshBuffer::getHardwareMappingHint_Index( );
    }

    virtual ::irr::scene::E_HARDWARE_MAPPING getHardwareMappingHint_Vertex(  ) const  {
        if( bp::override func_getHardwareMappingHint_Vertex = this->get_override( "getHardwareMappingHint_Vertex" ) )
            return func_getHardwareMappingHint_Vertex(  );
        else{
            return this->irr::scene::SSharedMeshBuffer::getHardwareMappingHint_Vertex(  );
        }
    }
    
    ::irr::scene::E_HARDWARE_MAPPING default_getHardwareMappingHint_Vertex(  ) const  {
        return irr::scene::SSharedMeshBuffer::getHardwareMappingHint_Vertex( );
    }

    virtual ::irr::u32 getIndexCount(  ) const  {
        if( bp::override func_getIndexCount = this->get_override( "getIndexCount" ) )
            return func_getIndexCount(  );
        else{
            return this->irr::scene::SSharedMeshBuffer::getIndexCount(  );
        }
    }
    
    ::irr::u32 default_getIndexCount(  ) const  {
        return irr::scene::SSharedMeshBuffer::getIndexCount( );
    }

    virtual ::irr::u16 const * getIndices(  ) const  {
        if( bp::override func_getIndices = this->get_override( "getIndices" ) )
            return func_getIndices(  );
        else{
            return this->irr::scene::SSharedMeshBuffer::getIndices(  );
        }
    }
    
    ::irr::u16 const * default_getIndices(  ) const  {
        return irr::scene::SSharedMeshBuffer::getIndices( );
    }

    virtual ::irr::u16 * getIndices(  ) {
        if( bp::override func_getIndices = this->get_override( "getIndices" ) )
            return func_getIndices(  );
        else{
            return this->irr::scene::SSharedMeshBuffer::getIndices(  );
        }
    }
    
    ::irr::u16 * default_getIndices(  ) {
        return irr::scene::SSharedMeshBuffer::getIndices( );
    }

    virtual ::irr::u32 getVertexCount(  ) const  {
        if( bp::override func_getVertexCount = this->get_override( "getVertexCount" ) )
            return func_getVertexCount(  );
        else{
            return this->irr::scene::SSharedMeshBuffer::getVertexCount(  );
        }
    }
    
    ::irr::u32 default_getVertexCount(  ) const  {
        return irr::scene::SSharedMeshBuffer::getVertexCount( );
    }

    virtual ::irr::video::E_VERTEX_TYPE getVertexType(  ) const  {
        if( bp::override func_getVertexType = this->get_override( "getVertexType" ) )
            return func_getVertexType(  );
        else{
            return this->irr::scene::SSharedMeshBuffer::getVertexType(  );
        }
    }
    
    ::irr::video::E_VERTEX_TYPE default_getVertexType(  ) const  {
        return irr::scene::SSharedMeshBuffer::getVertexType( );
    }

    virtual void const * getVertices(  ) const  {
        if( bp::override func_getVertices = this->get_override( "getVertices" ) )
            return func_getVertices(  );
        else{
            return this->irr::scene::SSharedMeshBuffer::getVertices(  );
        }
    }
    
    void const * default_getVertices(  ) const  {
        return irr::scene::SSharedMeshBuffer::getVertices( );
    }

    virtual void * getVertices(  ) {
        if( bp::override func_getVertices = this->get_override( "getVertices" ) )
            return func_getVertices(  );
        else{
            return this->irr::scene::SSharedMeshBuffer::getVertices(  );
        }
    }
    
    void * default_getVertices(  ) {
        return irr::scene::SSharedMeshBuffer::getVertices( );
    }

    virtual void recalculateBoundingBox(  ) {
        if( bp::override func_recalculateBoundingBox = this->get_override( "recalculateBoundingBox" ) )
            func_recalculateBoundingBox(  );
        else{
            this->irr::scene::SSharedMeshBuffer::recalculateBoundingBox(  );
        }
    }
    
    void default_recalculateBoundingBox(  ) {
        irr::scene::SSharedMeshBuffer::recalculateBoundingBox( );
    }

    virtual void setBoundingBox( ::irr::core::aabbox3df const & box ) {
        if( bp::override func_setBoundingBox = this->get_override( "setBoundingBox" ) )
            func_setBoundingBox( boost::ref(box) );
        else{
            this->irr::scene::SSharedMeshBuffer::setBoundingBox( boost::ref(box) );
        }
    }
    
    void default_setBoundingBox( ::irr::core::aabbox3df const & box ) {
        irr::scene::SSharedMeshBuffer::setBoundingBox( boost::ref(box) );
    }

    virtual void setDirty( ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        if( bp::override func_setDirty = this->get_override( "setDirty" ) )
            func_setDirty( buffer );
        else{
            this->irr::scene::SSharedMeshBuffer::setDirty( buffer );
        }
    }
    
    void default_setDirty( ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        irr::scene::SSharedMeshBuffer::setDirty( buffer );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING NewMappingHint, ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        if( bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" ) )
            func_setHardwareMappingHint( NewMappingHint, buffer );
        else{
            this->irr::scene::SSharedMeshBuffer::setHardwareMappingHint( NewMappingHint, buffer );
        }
    }
    
    void default_setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING NewMappingHint, ::irr::scene::E_BUFFER_TYPE buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        irr::scene::SSharedMeshBuffer::setHardwareMappingHint( NewMappingHint, buffer );
    }

    static ::irr::core::array<irr::video::S3DVertex, irr::core::irrAllocator<irr::video::S3DVertex> > * get_Vertices(irr::scene::SSharedMeshBuffer const & inst ){
        return inst.Vertices;
    }
    
    static void set_Vertices( irr::scene::SSharedMeshBuffer & inst, ::irr::core::array<irr::video::S3DVertex, irr::core::irrAllocator<irr::video::S3DVertex> > * new_value ){ 
        inst.Vertices = new_value;
    }

    virtual ::irr::video::E_INDEX_TYPE getIndexType(  ) const {
        bp::override func_getIndexType = this->get_override( "getIndexType" );
        return func_getIndexType(  );
    }

    virtual ::irr::core::vector3df const & getNormal( ::irr::u32 i ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector3df & getNormal( ::irr::u32 i ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector3df const & getPosition( ::irr::u32 i ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector3df & getPosition( ::irr::u32 i ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector2df const & getTCoords( ::irr::u32 i ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::core::vector2df & getTCoords( ::irr::u32 i ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct SSkinMeshBuffer_wrapper : irr::scene::SSkinMeshBuffer, bp::wrapper< irr::scene::SSkinMeshBuffer > {

    SSkinMeshBuffer_wrapper(irr::scene::SSkinMeshBuffer const & arg )
    : irr::scene::SSkinMeshBuffer( arg )
      , bp::wrapper< irr::scene::SSkinMeshBuffer >(){
        // copy constructor
        
    }

    SSkinMeshBuffer_wrapper(::irr::video::E_VERTEX_TYPE vt=::irr::video::EVT_STANDARD )
    : irr::scene::SSkinMeshBuffer( vt )
      , bp::wrapper< irr::scene::SSkinMeshBuffer >(){
        // constructor
    
    }

    virtual void append( void const * const vertices, ::irr::u32 numVertices, ::irr::u16 const * const indices, ::irr::u32 numIndices ) {
        if( bp::override func_append = this->get_override( "append" ) )
            func_append( vertices, numVertices, indices, numIndices );
        else{
            this->irr::scene::SSkinMeshBuffer::append( vertices, numVertices, indices, numIndices );
        }
    }
    
    void default_append( void const * const vertices, ::irr::u32 numVertices, ::irr::u16 const * const indices, ::irr::u32 numIndices ) {
        irr::scene::SSkinMeshBuffer::append( vertices, numVertices, indices, numIndices );
    }

    virtual void append( ::irr::scene::IMeshBuffer const * const other ) {
        if( bp::override func_append = this->get_override( "append" ) )
            func_append( other );
        else{
            this->irr::scene::SSkinMeshBuffer::append( other );
        }
    }
    
    void default_append( ::irr::scene::IMeshBuffer const * const other ) {
        irr::scene::SSkinMeshBuffer::append( other );
    }

    virtual void convertTo2TCoords(  ) {
        if( bp::override func_convertTo2TCoords = this->get_override( "convertTo2TCoords" ) )
            func_convertTo2TCoords(  );
        else{
            this->irr::scene::SSkinMeshBuffer::convertTo2TCoords(  );
        }
    }
    
    void default_convertTo2TCoords(  ) {
        irr::scene::SSkinMeshBuffer::convertTo2TCoords( );
    }

    virtual void convertToTangents(  ) {
        if( bp::override func_convertToTangents = this->get_override( "convertToTangents" ) )
            func_convertToTangents(  );
        else{
            this->irr::scene::SSkinMeshBuffer::convertToTangents(  );
        }
    }
    
    void default_convertToTangents(  ) {
        irr::scene::SSkinMeshBuffer::convertToTangents( );
    }

    virtual ::irr::u32 getChangedID_Index(  ) const  {
        if( bp::override func_getChangedID_Index = this->get_override( "getChangedID_Index" ) )
            return func_getChangedID_Index(  );
        else{
            return this->irr::scene::SSkinMeshBuffer::getChangedID_Index(  );
        }
    }
    
    ::irr::u32 default_getChangedID_Index(  ) const  {
        return irr::scene::SSkinMeshBuffer::getChangedID_Index( );
    }

    virtual ::irr::u32 getChangedID_Vertex(  ) const  {
        if( bp::override func_getChangedID_Vertex = this->get_override( "getChangedID_Vertex" ) )
            return func_getChangedID_Vertex(  );
        else{
            return this->irr::scene::SSkinMeshBuffer::getChangedID_Vertex(  );
        }
    }
    
    ::irr::u32 default_getChangedID_Vertex(  ) const  {
        return irr::scene::SSkinMeshBuffer::getChangedID_Vertex( );
    }

    virtual ::irr::scene::E_HARDWARE_MAPPING getHardwareMappingHint_Index(  ) const  {
        if( bp::override func_getHardwareMappingHint_Index = this->get_override( "getHardwareMappingHint_Index" ) )
            return func_getHardwareMappingHint_Index(  );
        else{
            return this->irr::scene::SSkinMeshBuffer::getHardwareMappingHint_Index(  );
        }
    }
    
    ::irr::scene::E_HARDWARE_MAPPING default_getHardwareMappingHint_Index(  ) const  {
        return irr::scene::SSkinMeshBuffer::getHardwareMappingHint_Index( );
    }

    virtual ::irr::scene::E_HARDWARE_MAPPING getHardwareMappingHint_Vertex(  ) const  {
        if( bp::override func_getHardwareMappingHint_Vertex = this->get_override( "getHardwareMappingHint_Vertex" ) )
            return func_getHardwareMappingHint_Vertex(  );
        else{
            return this->irr::scene::SSkinMeshBuffer::getHardwareMappingHint_Vertex(  );
        }
    }
    
    ::irr::scene::E_HARDWARE_MAPPING default_getHardwareMappingHint_Vertex(  ) const  {
        return irr::scene::SSkinMeshBuffer::getHardwareMappingHint_Vertex( );
    }

    virtual ::irr::u32 getIndexCount(  ) const  {
        if( bp::override func_getIndexCount = this->get_override( "getIndexCount" ) )
            return func_getIndexCount(  );
        else{
            return this->irr::scene::SSkinMeshBuffer::getIndexCount(  );
        }
    }
    
    ::irr::u32 default_getIndexCount(  ) const  {
        return irr::scene::SSkinMeshBuffer::getIndexCount( );
    }

    virtual ::irr::video::E_INDEX_TYPE getIndexType(  ) const  {
        if( bp::override func_getIndexType = this->get_override( "getIndexType" ) )
            return func_getIndexType(  );
        else{
            return this->irr::scene::SSkinMeshBuffer::getIndexType(  );
        }
    }
    
    ::irr::video::E_INDEX_TYPE default_getIndexType(  ) const  {
        return irr::scene::SSkinMeshBuffer::getIndexType( );
    }

    virtual ::irr::u16 const * getIndices(  ) const  {
        if( bp::override func_getIndices = this->get_override( "getIndices" ) )
            return func_getIndices(  );
        else{
            return this->irr::scene::SSkinMeshBuffer::getIndices(  );
        }
    }
    
    ::irr::u16 const * default_getIndices(  ) const  {
        return irr::scene::SSkinMeshBuffer::getIndices( );
    }

    virtual ::irr::u16 * getIndices(  ) {
        if( bp::override func_getIndices = this->get_override( "getIndices" ) )
            return func_getIndices(  );
        else{
            return this->irr::scene::SSkinMeshBuffer::getIndices(  );
        }
    }
    
    ::irr::u16 * default_getIndices(  ) {
        return irr::scene::SSkinMeshBuffer::getIndices( );
    }

    virtual ::irr::video::S3DVertex * getVertex( ::irr::u32 index ) {
        if( bp::override func_getVertex = this->get_override( "getVertex" ) )
            return func_getVertex( index );
        else{
            return this->irr::scene::SSkinMeshBuffer::getVertex( index );
        }
    }
    
    ::irr::video::S3DVertex * default_getVertex( ::irr::u32 index ) {
        return irr::scene::SSkinMeshBuffer::getVertex( index );
    }

    virtual ::irr::u32 getVertexCount(  ) const  {
        if( bp::override func_getVertexCount = this->get_override( "getVertexCount" ) )
            return func_getVertexCount(  );
        else{
            return this->irr::scene::SSkinMeshBuffer::getVertexCount(  );
        }
    }
    
    ::irr::u32 default_getVertexCount(  ) const  {
        return irr::scene::SSkinMeshBuffer::getVertexCount( );
    }

    virtual ::irr::video::E_VERTEX_TYPE getVertexType(  ) const  {
        if( bp::override func_getVertexType = this->get_override( "getVertexType" ) )
            return func_getVertexType(  );
        else{
            return this->irr::scene::SSkinMeshBuffer::getVertexType(  );
        }
    }
    
    ::irr::video::E_VERTEX_TYPE default_getVertexType(  ) const  {
        return irr::scene::SSkinMeshBuffer::getVertexType( );
    }

    virtual void const * getVertices(  ) const  {
        if( bp::override func_getVertices = this->get_override( "getVertices" ) )
            return func_getVertices(  );
        else{
            return this->irr::scene::SSkinMeshBuffer::getVertices(  );
        }
    }
    
    void const * default_getVertices(  ) const  {
        return irr::scene::SSkinMeshBuffer::getVertices( );
    }

    virtual void * getVertices(  ) {
        if( bp::override func_getVertices = this->get_override( "getVertices" ) )
            return func_getVertices(  );
        else{
            return this->irr::scene::SSkinMeshBuffer::getVertices(  );
        }
    }
    
    void * default_getVertices(  ) {
        return irr::scene::SSkinMeshBuffer::getVertices( );
    }

    virtual void recalculateBoundingBox(  ) {
        if( bp::override func_recalculateBoundingBox = this->get_override( "recalculateBoundingBox" ) )
            func_recalculateBoundingBox(  );
        else{
            this->irr::scene::SSkinMeshBuffer::recalculateBoundingBox(  );
        }
    }
    
    void default_recalculateBoundingBox(  ) {
        irr::scene::SSkinMeshBuffer::recalculateBoundingBox( );
    }

    virtual void setBoundingBox( ::irr::core::aabbox3df const & box ) {
        if( bp::override func_setBoundingBox = this->get_override( "setBoundingBox" ) )
            func_setBoundingBox( boost::ref(box) );
        else{
            this->irr::scene::SSkinMeshBuffer::setBoundingBox( boost::ref(box) );
        }
    }
    
    void default_setBoundingBox( ::irr::core::aabbox3df const & box ) {
        irr::scene::SSkinMeshBuffer::setBoundingBox( boost::ref(box) );
    }

    virtual void setDirty( ::irr::scene::E_BUFFER_TYPE Buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        if( bp::override func_setDirty = this->get_override( "setDirty" ) )
            func_setDirty( Buffer );
        else{
            this->irr::scene::SSkinMeshBuffer::setDirty( Buffer );
        }
    }
    
    void default_setDirty( ::irr::scene::E_BUFFER_TYPE Buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        irr::scene::SSkinMeshBuffer::setDirty( Buffer );
    }

    virtual void setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING NewMappingHint, ::irr::scene::E_BUFFER_TYPE Buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        if( bp::override func_setHardwareMappingHint = this->get_override( "setHardwareMappingHint" ) )
            func_setHardwareMappingHint( NewMappingHint, Buffer );
        else{
            this->irr::scene::SSkinMeshBuffer::setHardwareMappingHint( NewMappingHint, Buffer );
        }
    }
    
    void default_setHardwareMappingHint( ::irr::scene::E_HARDWARE_MAPPING NewMappingHint, ::irr::scene::E_BUFFER_TYPE Buffer=::irr::scene::EBT_VERTEX_AND_INDEX ) {
        irr::scene::SSkinMeshBuffer::setHardwareMappingHint( NewMappingHint, Buffer );
    }

    static bool get_BoundingBoxNeedsRecalculated(irr::scene::SSkinMeshBuffer const & inst ){
        return inst.BoundingBoxNeedsRecalculated;
    }
    
    static void set_BoundingBoxNeedsRecalculated( irr::scene::SSkinMeshBuffer & inst, bool new_value ){ 
        inst.BoundingBoxNeedsRecalculated = new_value;
    }

    static ::irr::scene::E_HARDWARE_MAPPING get_MappingHint_Index(irr::scene::SSkinMeshBuffer const & inst ){
        return inst.MappingHint_Index;
    }
    
    static void set_MappingHint_Index( irr::scene::SSkinMeshBuffer & inst, ::irr::scene::E_HARDWARE_MAPPING new_value ){ 
        inst.MappingHint_Index = new_value;
    }

    static ::irr::scene::E_HARDWARE_MAPPING get_MappingHint_Vertex(irr::scene::SSkinMeshBuffer const & inst ){
        return inst.MappingHint_Vertex;
    }
    
    static void set_MappingHint_Vertex( irr::scene::SSkinMeshBuffer & inst, ::irr::scene::E_HARDWARE_MAPPING new_value ){ 
        inst.MappingHint_Vertex = new_value;
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct SViewFrustum_wrapper : irr::scene::SViewFrustum, bp::wrapper< irr::scene::SViewFrustum > {

    SViewFrustum_wrapper( )
    : irr::scene::SViewFrustum( )
      , bp::wrapper< irr::scene::SViewFrustum >(){
        // null constructor
    
    }

    SViewFrustum_wrapper(::irr::scene::SViewFrustum const & other )
    : irr::scene::SViewFrustum( boost::ref(other) )
      , bp::wrapper< irr::scene::SViewFrustum >(){
        // copy constructor
    
    }

    SViewFrustum_wrapper(::irr::core::matrix4 const & mat )
    : irr::scene::SViewFrustum( boost::ref(mat) )
      , bp::wrapper< irr::scene::SViewFrustum >(){
        // constructor
    
    }

    static pyplusplus::containers::static_sized::array_1_t< ::irr::core::plane3d<float>, 6>
    pyplusplus_planes_wrapper( ::irr::scene::SViewFrustum & inst ){
        return pyplusplus::containers::static_sized::array_1_t< ::irr::core::plane3d<float>, 6>( inst.planes );
    }

};

struct IShader_wrapper : irr::scene::quake3::IShader, bp::wrapper< irr::scene::quake3::IShader > {

    IShader_wrapper(irr::scene::quake3::IShader const & arg )
    : irr::scene::quake3::IShader( arg )
      , bp::wrapper< irr::scene::quake3::IShader >(){
        // copy constructor
        
    }

    IShader_wrapper( )
    : irr::scene::quake3::IShader( )
      , bp::wrapper< irr::scene::quake3::IShader >(){
        // null constructor
    
    }

    static ::irr::scene::quake3::SVarGroupList * get_VarGroup(irr::scene::quake3::IShader const & inst ){
        return inst.VarGroup;
    }
    
    static void set_VarGroup( irr::scene::quake3::IShader & inst, ::irr::scene::quake3::SVarGroupList * new_value ){ 
        inst.VarGroup = new_value;
    }

};

struct IShaderManager_wrapper : irr::scene::quake3::IShaderManager, bp::wrapper< irr::scene::quake3::IShaderManager > {

    IShaderManager_wrapper(irr::scene::quake3::IShaderManager const & arg )
    : irr::scene::quake3::IShaderManager( arg )
      , bp::wrapper< irr::scene::quake3::IShaderManager >(){
        // copy constructor
        
    }

    IShaderManager_wrapper()
    : irr::scene::quake3::IShaderManager()
      , bp::wrapper< irr::scene::quake3::IShaderManager >(){
        // null constructor
        
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct Q3LevelLoadParameter_wrapper : irr::scene::quake3::Q3LevelLoadParameter, bp::wrapper< irr::scene::quake3::Q3LevelLoadParameter > {

    Q3LevelLoadParameter_wrapper(irr::scene::quake3::Q3LevelLoadParameter const & arg )
    : irr::scene::quake3::Q3LevelLoadParameter( arg )
      , bp::wrapper< irr::scene::quake3::Q3LevelLoadParameter >(){
        // copy constructor
        
    }

    Q3LevelLoadParameter_wrapper( )
    : irr::scene::quake3::Q3LevelLoadParameter( )
      , bp::wrapper< irr::scene::quake3::Q3LevelLoadParameter >(){
        // null constructor
    
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 64>
    pyplusplus_scriptDir_wrapper( ::irr::scene::quake3::Q3LevelLoadParameter & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 64>( inst.scriptDir );
    }

};

struct SVarGroupList_wrapper : irr::scene::quake3::SVarGroupList, bp::wrapper< irr::scene::quake3::SVarGroupList > {

    SVarGroupList_wrapper(irr::scene::quake3::SVarGroupList const & arg )
    : irr::scene::quake3::SVarGroupList( arg )
      , bp::wrapper< irr::scene::quake3::SVarGroupList >(){
        // copy constructor
        
    }

    SVarGroupList_wrapper( )
    : irr::scene::quake3::SVarGroupList( )
      , bp::wrapper< irr::scene::quake3::SVarGroupList >(){
        // null constructor
    
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IShaderConstantSetCallBack_wrapper : irr::video::IShaderConstantSetCallBack, bp::wrapper< irr::video::IShaderConstantSetCallBack > {

    IShaderConstantSetCallBack_wrapper()
    : irr::video::IShaderConstantSetCallBack()
      , bp::wrapper< irr::video::IShaderConstantSetCallBack >(){
        // null constructor
        
    }

    virtual void OnSetConstants( ::irr::video::IMaterialRendererServices * services, ::irr::s32 userData ){
        bp::override func_OnSetConstants = this->get_override( "OnSetConstants" );
        func_OnSetConstants( boost::python::ptr(services), userData );
    }

    virtual void OnSetMaterial( ::irr::video::SMaterial const & material ) {
        if( bp::override func_OnSetMaterial = this->get_override( "OnSetMaterial" ) )
            func_OnSetMaterial( boost::ref(material) );
        else{
            this->irr::video::IShaderConstantSetCallBack::OnSetMaterial( boost::ref(material) );
        }
    }
    
    void default_OnSetMaterial( ::irr::video::SMaterial const & material ) {
        irr::video::IShaderConstantSetCallBack::OnSetMaterial( boost::ref(material) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IGPUProgrammingServices_wrapper : irr::video::IGPUProgrammingServices, bp::wrapper< irr::video::IGPUProgrammingServices > {

    IGPUProgrammingServices_wrapper()
    : irr::video::IGPUProgrammingServices()
      , bp::wrapper< irr::video::IGPUProgrammingServices >(){
        // null constructor
        
    }

    virtual ::irr::s32 addHighLevelShaderMaterial( ::irr::c8 const * vertexShaderProgram, ::irr::c8 const * vertexShaderEntryPointName, ::irr::video::E_VERTEX_SHADER_TYPE vsCompileTarget, ::irr::c8 const * pixelShaderProgram, ::irr::c8 const * pixelShaderEntryPointName, ::irr::video::E_PIXEL_SHADER_TYPE psCompileTarget, ::irr::c8 const * geometryShaderProgram, ::irr::c8 const * geometryShaderEntryPointName="main", ::irr::video::E_GEOMETRY_SHADER_TYPE gsCompileTarget=::irr::video::EGST_GS_4_0, ::irr::scene::E_PRIMITIVE_TYPE inType=::irr::scene::EPT_TRIANGLES, ::irr::scene::E_PRIMITIVE_TYPE outType=::irr::scene::EPT_TRIANGLE_STRIP, ::irr::u32 verticesOut=0, ::irr::video::IShaderConstantSetCallBack * callback=0, ::irr::video::E_MATERIAL_TYPE baseMaterial=::irr::video::EMT_SOLID, ::irr::s32 userData=0 ){
        bp::override func_addHighLevelShaderMaterial = this->get_override( "addHighLevelShaderMaterial" );
        return func_addHighLevelShaderMaterial( vertexShaderProgram, vertexShaderEntryPointName, vsCompileTarget, pixelShaderProgram, pixelShaderEntryPointName, psCompileTarget, geometryShaderProgram, geometryShaderEntryPointName, gsCompileTarget, inType, outType, verticesOut, boost::python::ptr(callback), baseMaterial, userData );
    }

    virtual ::irr::s32 addHighLevelShaderMaterialFromFiles( ::irr::io::path const & vertexShaderProgramFileName, ::irr::c8 const * vertexShaderEntryPointName, ::irr::video::E_VERTEX_SHADER_TYPE vsCompileTarget, ::irr::io::path const & pixelShaderProgramFileName, ::irr::c8 const * pixelShaderEntryPointName, ::irr::video::E_PIXEL_SHADER_TYPE psCompileTarget, ::irr::io::path const & geometryShaderProgramFileName, ::irr::c8 const * geometryShaderEntryPointName="main", ::irr::video::E_GEOMETRY_SHADER_TYPE gsCompileTarget=::irr::video::EGST_GS_4_0, ::irr::scene::E_PRIMITIVE_TYPE inType=::irr::scene::EPT_TRIANGLES, ::irr::scene::E_PRIMITIVE_TYPE outType=::irr::scene::EPT_TRIANGLE_STRIP, ::irr::u32 verticesOut=0, ::irr::video::IShaderConstantSetCallBack * callback=0, ::irr::video::E_MATERIAL_TYPE baseMaterial=::irr::video::EMT_SOLID, ::irr::s32 userData=0 ){
        bp::override func_addHighLevelShaderMaterialFromFiles = this->get_override( "addHighLevelShaderMaterialFromFiles" );
        return func_addHighLevelShaderMaterialFromFiles( boost::ref(vertexShaderProgramFileName), vertexShaderEntryPointName, vsCompileTarget, boost::ref(pixelShaderProgramFileName), pixelShaderEntryPointName, psCompileTarget, boost::ref(geometryShaderProgramFileName), geometryShaderEntryPointName, gsCompileTarget, inType, outType, verticesOut, boost::python::ptr(callback), baseMaterial, userData );
    }

    virtual ::irr::s32 addHighLevelShaderMaterialFromFiles( ::irr::io::IReadFile * vertexShaderProgram, ::irr::c8 const * vertexShaderEntryPointName, ::irr::video::E_VERTEX_SHADER_TYPE vsCompileTarget, ::irr::io::IReadFile * pixelShaderProgram, ::irr::c8 const * pixelShaderEntryPointName, ::irr::video::E_PIXEL_SHADER_TYPE psCompileTarget, ::irr::io::IReadFile * geometryShaderProgram, ::irr::c8 const * geometryShaderEntryPointName="main", ::irr::video::E_GEOMETRY_SHADER_TYPE gsCompileTarget=::irr::video::EGST_GS_4_0, ::irr::scene::E_PRIMITIVE_TYPE inType=::irr::scene::EPT_TRIANGLES, ::irr::scene::E_PRIMITIVE_TYPE outType=::irr::scene::EPT_TRIANGLE_STRIP, ::irr::u32 verticesOut=0, ::irr::video::IShaderConstantSetCallBack * callback=0, ::irr::video::E_MATERIAL_TYPE baseMaterial=::irr::video::EMT_SOLID, ::irr::s32 userData=0 ){
        bp::override func_addHighLevelShaderMaterialFromFiles = this->get_override( "addHighLevelShaderMaterialFromFiles" );
        return func_addHighLevelShaderMaterialFromFiles( boost::python::ptr(vertexShaderProgram), vertexShaderEntryPointName, vsCompileTarget, boost::python::ptr(pixelShaderProgram), pixelShaderEntryPointName, psCompileTarget, boost::python::ptr(geometryShaderProgram), geometryShaderEntryPointName, gsCompileTarget, inType, outType, verticesOut, boost::python::ptr(callback), baseMaterial, userData );
    }

    virtual ::irr::s32 addShaderMaterial( ::irr::c8 const * vertexShaderProgram=0, ::irr::c8 const * pixelShaderProgram=0, ::irr::video::IShaderConstantSetCallBack * callback=0, ::irr::video::E_MATERIAL_TYPE baseMaterial=::irr::video::EMT_SOLID, ::irr::s32 userData=0 ){
        bp::override func_addShaderMaterial = this->get_override( "addShaderMaterial" );
        return func_addShaderMaterial( vertexShaderProgram, pixelShaderProgram, boost::python::ptr(callback), baseMaterial, userData );
    }

    virtual ::irr::s32 addShaderMaterialFromFiles( ::irr::io::IReadFile * vertexShaderProgram, ::irr::io::IReadFile * pixelShaderProgram, ::irr::video::IShaderConstantSetCallBack * callback=0, ::irr::video::E_MATERIAL_TYPE baseMaterial=::irr::video::EMT_SOLID, ::irr::s32 userData=0 ){
        bp::override func_addShaderMaterialFromFiles = this->get_override( "addShaderMaterialFromFiles" );
        return func_addShaderMaterialFromFiles( boost::python::ptr(vertexShaderProgram), boost::python::ptr(pixelShaderProgram), boost::python::ptr(callback), baseMaterial, userData );
    }

    virtual ::irr::s32 addShaderMaterialFromFiles( ::irr::io::path const & vertexShaderProgramFileName, ::irr::io::path const & pixelShaderProgramFileName, ::irr::video::IShaderConstantSetCallBack * callback=0, ::irr::video::E_MATERIAL_TYPE baseMaterial=::irr::video::EMT_SOLID, ::irr::s32 userData=0 ){
        bp::override func_addShaderMaterialFromFiles = this->get_override( "addShaderMaterialFromFiles" );
        return func_addShaderMaterialFromFiles( boost::ref(vertexShaderProgramFileName), boost::ref(pixelShaderProgramFileName), boost::python::ptr(callback), baseMaterial, userData );
    }

};

struct IImage_wrapper : irr::video::IImage, bp::wrapper< irr::video::IImage > {

    IImage_wrapper()
    : irr::video::IImage()
      , bp::wrapper< irr::video::IImage >(){
        // null constructor
        
    }

    virtual void copyTo( ::irr::video::IImage * target, ::irr::core::vector2d< int > const & pos=irr::core::vector2d<int>(0, 0) ){
        bp::override func_copyTo = this->get_override( "copyTo" );
        func_copyTo( boost::python::ptr(target), boost::ref(pos) );
    }

    virtual void copyTo( ::irr::video::IImage * target, ::irr::core::vector2d< int > const & pos, ::irr::core::rect< int > const & sourceRect, ::irr::core::rect< int > const * clipRect=0 ){
        bp::override func_copyTo = this->get_override( "copyTo" );
        func_copyTo( boost::python::ptr(target), boost::ref(pos), boost::ref(sourceRect), boost::python::ptr(clipRect) );
    }

    virtual void copyToScaling( void * target, ::irr::u32 width, ::irr::u32 height, ::irr::video::ECOLOR_FORMAT format=::irr::video::ECF_A8R8G8B8, ::irr::u32 pitch=0 ){
        bp::override func_copyToScaling = this->get_override( "copyToScaling" );
        func_copyToScaling( target, width, height, format, pitch );
    }

    virtual void copyToScaling( ::irr::video::IImage * target ){
        bp::override func_copyToScaling = this->get_override( "copyToScaling" );
        func_copyToScaling( boost::python::ptr(target) );
    }

    virtual void copyToScalingBoxFilter( ::irr::video::IImage * target, ::irr::s32 bias=0, bool blend=false ){
        bp::override func_copyToScalingBoxFilter = this->get_override( "copyToScalingBoxFilter" );
        func_copyToScalingBoxFilter( boost::python::ptr(target), bias, blend );
    }

    virtual void copyToWithAlpha( ::irr::video::IImage * target, ::irr::core::vector2d< int > const & pos, ::irr::core::rect< int > const & sourceRect, ::irr::video::SColor const & color, ::irr::core::rect< int > const * clipRect=0 ){
        bp::override func_copyToWithAlpha = this->get_override( "copyToWithAlpha" );
        func_copyToWithAlpha( boost::python::ptr(target), boost::ref(pos), boost::ref(sourceRect), boost::ref(color), boost::python::ptr(clipRect) );
    }

    virtual void fill( ::irr::video::SColor const & color ){
        bp::override func_fill = this->get_override( "fill" );
        func_fill( boost::ref(color) );
    }

    virtual ::irr::u32 getAlphaMask(  ) const {
        bp::override func_getAlphaMask = this->get_override( "getAlphaMask" );
        return func_getAlphaMask(  );
    }

    virtual ::irr::u32 getBitsPerPixel(  ) const {
        bp::override func_getBitsPerPixel = this->get_override( "getBitsPerPixel" );
        return func_getBitsPerPixel(  );
    }

    virtual ::irr::u32 getBlueMask(  ) const {
        bp::override func_getBlueMask = this->get_override( "getBlueMask" );
        return func_getBlueMask(  );
    }

    virtual ::irr::u32 getBytesPerPixel(  ) const {
        bp::override func_getBytesPerPixel = this->get_override( "getBytesPerPixel" );
        return func_getBytesPerPixel(  );
    }

    virtual ::irr::video::ECOLOR_FORMAT getColorFormat(  ) const {
        bp::override func_getColorFormat = this->get_override( "getColorFormat" );
        return func_getColorFormat(  );
    }

    virtual ::irr::core::dimension2d< unsigned int > const & getDimension(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::u32 getGreenMask(  ) const {
        bp::override func_getGreenMask = this->get_override( "getGreenMask" );
        return func_getGreenMask(  );
    }

    virtual ::irr::u32 getImageDataSizeInBytes(  ) const {
        bp::override func_getImageDataSizeInBytes = this->get_override( "getImageDataSizeInBytes" );
        return func_getImageDataSizeInBytes(  );
    }

    virtual ::irr::u32 getImageDataSizeInPixels(  ) const {
        bp::override func_getImageDataSizeInPixels = this->get_override( "getImageDataSizeInPixels" );
        return func_getImageDataSizeInPixels(  );
    }

    virtual ::irr::u32 getPitch(  ) const {
        bp::override func_getPitch = this->get_override( "getPitch" );
        return func_getPitch(  );
    }

    virtual ::irr::video::SColor getPixel( ::irr::u32 x, ::irr::u32 y ) const {
        bp::override func_getPixel = this->get_override( "getPixel" );
        return func_getPixel( x, y );
    }

    virtual ::irr::u32 getRedMask(  ) const {
        bp::override func_getRedMask = this->get_override( "getRedMask" );
        return func_getRedMask(  );
    }

    virtual void * lock(  ){
        bp::override func_lock = this->get_override( "lock" );
        return func_lock(  );
    }

    virtual void setPixel( ::irr::u32 x, ::irr::u32 y, ::irr::video::SColor const & color, bool blend=false ){
        bp::override func_setPixel = this->get_override( "setPixel" );
        func_setPixel( x, y, boost::ref(color), blend );
    }

    virtual void unlock(  ){
        bp::override func_unlock = this->get_override( "unlock" );
        func_unlock(  );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IImageLoader_wrapper : irr::video::IImageLoader, bp::wrapper< irr::video::IImageLoader > {

    IImageLoader_wrapper()
    : irr::video::IImageLoader()
      , bp::wrapper< irr::video::IImageLoader >(){
        // null constructor
        
    }

    virtual bool isALoadableFileExtension( ::irr::io::path const & filename ) const {
        bp::override func_isALoadableFileExtension = this->get_override( "isALoadableFileExtension" );
        return func_isALoadableFileExtension( boost::ref(filename) );
    }

    virtual bool isALoadableFileFormat( ::irr::io::IReadFile * file ) const {
        bp::override func_isALoadableFileFormat = this->get_override( "isALoadableFileFormat" );
        return func_isALoadableFileFormat( boost::python::ptr(file) );
    }

    virtual ::irr::video::IImage * loadImage( ::irr::io::IReadFile * file ) const {
        bp::override func_loadImage = this->get_override( "loadImage" );
        return func_loadImage( boost::python::ptr(file) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IImageWriter_wrapper : irr::video::IImageWriter, bp::wrapper< irr::video::IImageWriter > {

    IImageWriter_wrapper()
    : irr::video::IImageWriter()
      , bp::wrapper< irr::video::IImageWriter >(){
        // null constructor
        
    }

    virtual bool isAWriteableFileExtension( ::irr::io::path const & filename ) const {
        bp::override func_isAWriteableFileExtension = this->get_override( "isAWriteableFileExtension" );
        return func_isAWriteableFileExtension( boost::ref(filename) );
    }

    virtual bool writeImage( ::irr::io::IWriteFile * file, ::irr::video::IImage * image, ::irr::u32 param=0 ) const {
        bp::override func_writeImage = this->get_override( "writeImage" );
        return func_writeImage( boost::python::ptr(file), boost::python::ptr(image), param );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IMaterialRenderer_wrapper : irr::video::IMaterialRenderer, bp::wrapper< irr::video::IMaterialRenderer > {

    IMaterialRenderer_wrapper(irr::video::IMaterialRenderer const & arg )
    : irr::video::IMaterialRenderer( arg )
      , bp::wrapper< irr::video::IMaterialRenderer >(){
        // copy constructor
        
    }

    IMaterialRenderer_wrapper()
    : irr::video::IMaterialRenderer()
      , bp::wrapper< irr::video::IMaterialRenderer >(){
        // null constructor
        
    }

    virtual bool OnRender( ::irr::video::IMaterialRendererServices * service, ::irr::video::E_VERTEX_TYPE vtxtype ) {
        if( bp::override func_OnRender = this->get_override( "OnRender" ) )
            return func_OnRender( boost::python::ptr(service), vtxtype );
        else{
            return this->irr::video::IMaterialRenderer::OnRender( boost::python::ptr(service), vtxtype );
        }
    }
    
    bool default_OnRender( ::irr::video::IMaterialRendererServices * service, ::irr::video::E_VERTEX_TYPE vtxtype ) {
        return irr::video::IMaterialRenderer::OnRender( boost::python::ptr(service), vtxtype );
    }

    virtual void OnSetMaterial( ::irr::video::SMaterial const & material, ::irr::video::SMaterial const & lastMaterial, bool resetAllRenderstates, ::irr::video::IMaterialRendererServices * services ) {
        if( bp::override func_OnSetMaterial = this->get_override( "OnSetMaterial" ) )
            func_OnSetMaterial( boost::ref(material), boost::ref(lastMaterial), resetAllRenderstates, boost::python::ptr(services) );
        else{
            this->irr::video::IMaterialRenderer::OnSetMaterial( boost::ref(material), boost::ref(lastMaterial), resetAllRenderstates, boost::python::ptr(services) );
        }
    }
    
    void default_OnSetMaterial( ::irr::video::SMaterial const & material, ::irr::video::SMaterial const & lastMaterial, bool resetAllRenderstates, ::irr::video::IMaterialRendererServices * services ) {
        irr::video::IMaterialRenderer::OnSetMaterial( boost::ref(material), boost::ref(lastMaterial), resetAllRenderstates, boost::python::ptr(services) );
    }

    virtual void OnUnsetMaterial(  ) {
        if( bp::override func_OnUnsetMaterial = this->get_override( "OnUnsetMaterial" ) )
            func_OnUnsetMaterial(  );
        else{
            this->irr::video::IMaterialRenderer::OnUnsetMaterial(  );
        }
    }
    
    void default_OnUnsetMaterial(  ) {
        irr::video::IMaterialRenderer::OnUnsetMaterial( );
    }

    virtual ::irr::s32 getRenderCapability(  ) const  {
        if( bp::override func_getRenderCapability = this->get_override( "getRenderCapability" ) )
            return func_getRenderCapability(  );
        else{
            return this->irr::video::IMaterialRenderer::getRenderCapability(  );
        }
    }
    
    ::irr::s32 default_getRenderCapability(  ) const  {
        return irr::video::IMaterialRenderer::getRenderCapability( );
    }

    virtual bool isTransparent(  ) const  {
        if( bp::override func_isTransparent = this->get_override( "isTransparent" ) )
            return func_isTransparent(  );
        else{
            return this->irr::video::IMaterialRenderer::isTransparent(  );
        }
    }
    
    bool default_isTransparent(  ) const  {
        return irr::video::IMaterialRenderer::isTransparent( );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct IMaterialRendererServices_wrapper : irr::video::IMaterialRendererServices, bp::wrapper< irr::video::IMaterialRendererServices > {

    IMaterialRendererServices_wrapper()
    : irr::video::IMaterialRendererServices()
      , bp::wrapper< irr::video::IMaterialRendererServices >(){
        // null constructor
        
    }

    virtual ::irr::video::IVideoDriver * getVideoDriver(  ){
        bp::override func_getVideoDriver = this->get_override( "getVideoDriver" );
        return func_getVideoDriver(  );
    }

    virtual void setBasicRenderStates( ::irr::video::SMaterial const & material, ::irr::video::SMaterial const & lastMaterial, bool resetAllRenderstates ){
        bp::override func_setBasicRenderStates = this->get_override( "setBasicRenderStates" );
        func_setBasicRenderStates( boost::ref(material), boost::ref(lastMaterial), resetAllRenderstates );
    }

    virtual bool setPixelShaderConstant( ::irr::c8 const * name, ::irr::f32 const * floats, int count ){
        bp::override func_setPixelShaderConstant = this->get_override( "setPixelShaderConstant" );
        return func_setPixelShaderConstant( name, floats, count );
    }

    virtual void setPixelShaderConstant( ::irr::f32 const * data, ::irr::s32 startRegister, ::irr::s32 constantAmount=1 ){
        bp::override func_setPixelShaderConstant = this->get_override( "setPixelShaderConstant" );
        func_setPixelShaderConstant( data, startRegister, constantAmount );
    }

    virtual bool setVertexShaderConstant( ::irr::c8 const * name, ::irr::f32 const * floats, int count ){
        bp::override func_setVertexShaderConstant = this->get_override( "setVertexShaderConstant" );
        return func_setVertexShaderConstant( name, floats, count );
    }

    virtual void setVertexShaderConstant( ::irr::f32 const * data, ::irr::s32 startRegister, ::irr::s32 constantAmount=1 ){
        bp::override func_setVertexShaderConstant = this->get_override( "setVertexShaderConstant" );
        func_setVertexShaderConstant( data, startRegister, constantAmount );
    }

};

struct IRenderTarget_wrapper : irr::video::IRenderTarget, bp::wrapper< irr::video::IRenderTarget > {

    IRenderTarget_wrapper(irr::video::IRenderTarget const & arg )
    : irr::video::IRenderTarget( arg )
      , bp::wrapper< irr::video::IRenderTarget >(){
        // copy constructor
        
    }

    IRenderTarget_wrapper(::irr::video::ITexture * texture, ::irr::video::E_COLOR_PLANE colorMask=::irr::video::ECP_ALL, ::irr::video::E_BLEND_FACTOR blendFuncSrc=::irr::video::EBF_ONE, ::irr::video::E_BLEND_FACTOR blendFuncDst=::irr::video::EBF_ONE_MINUS_SRC_ALPHA, bool blendEnable=false )
    : irr::video::IRenderTarget( boost::python::ptr(texture), colorMask, blendFuncSrc, blendFuncDst, blendEnable )
      , bp::wrapper< irr::video::IRenderTarget >(){
        // constructor
    
    }

    IRenderTarget_wrapper(::irr::video::E_RENDER_TARGET target, ::irr::video::E_COLOR_PLANE colorMask=::irr::video::ECP_ALL, ::irr::video::E_BLEND_FACTOR blendFuncSrc=::irr::video::EBF_ONE, ::irr::video::E_BLEND_FACTOR blendFuncDst=::irr::video::EBF_ONE_MINUS_SRC_ALPHA, bool blendEnable=false )
    : irr::video::IRenderTarget( target, colorMask, blendFuncSrc, blendFuncDst, blendEnable )
      , bp::wrapper< irr::video::IRenderTarget >(){
        // constructor
    
    }

    static ::irr::video::E_BLEND_FACTOR get_BlendFuncDst(irr::video::IRenderTarget const & inst ){
        return inst.BlendFuncDst;
    }
    
    static void set_BlendFuncDst( irr::video::IRenderTarget & inst, ::irr::video::E_BLEND_FACTOR new_value ){ 
        inst.BlendFuncDst = new_value;
    }

    static ::irr::video::E_BLEND_FACTOR get_BlendFuncSrc(irr::video::IRenderTarget const & inst ){
        return inst.BlendFuncSrc;
    }
    
    static void set_BlendFuncSrc( irr::video::IRenderTarget & inst, ::irr::video::E_BLEND_FACTOR new_value ){ 
        inst.BlendFuncSrc = new_value;
    }

    static ::irr::video::E_COLOR_PLANE get_ColorMask(irr::video::IRenderTarget const & inst ){
        return inst.ColorMask;
    }
    
    static void set_ColorMask( irr::video::IRenderTarget & inst, ::irr::video::E_COLOR_PLANE new_value ){ 
        inst.ColorMask = new_value;
    }

    static ::irr::video::ITexture * get_RenderTexture(irr::video::IRenderTarget const & inst ){
        return inst.RenderTexture;
    }
    
    static void set_RenderTexture( irr::video::IRenderTarget & inst, ::irr::video::ITexture * new_value ){ 
        inst.RenderTexture = new_value;
    }

    static ::irr::video::E_RENDER_TARGET get_TargetType(irr::video::IRenderTarget const & inst ){
        return inst.TargetType;
    }
    
    static void set_TargetType( irr::video::IRenderTarget & inst, ::irr::video::E_RENDER_TARGET new_value ){ 
        inst.TargetType = new_value;
    }

};

struct IVideoModeList_wrapper : irr::video::IVideoModeList, bp::wrapper< irr::video::IVideoModeList > {

    IVideoModeList_wrapper()
    : irr::video::IVideoModeList()
      , bp::wrapper< irr::video::IVideoModeList >(){
        // null constructor
        
    }

    virtual ::irr::s32 getDesktopDepth(  ) const {
        bp::override func_getDesktopDepth = this->get_override( "getDesktopDepth" );
        return func_getDesktopDepth(  );
    }

    virtual ::irr::core::dimension2d< unsigned int > const & getDesktopResolution(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual ::irr::s32 getVideoModeCount(  ) const {
        bp::override func_getVideoModeCount = this->get_override( "getVideoModeCount" );
        return func_getVideoModeCount(  );
    }

    virtual ::irr::s32 getVideoModeDepth( ::irr::s32 modeNumber ) const {
        bp::override func_getVideoModeDepth = this->get_override( "getVideoModeDepth" );
        return func_getVideoModeDepth( modeNumber );
    }

    virtual ::irr::core::dimension2d< unsigned int > getVideoModeResolution( ::irr::s32 modeNumber ) const {
        bp::override func_getVideoModeResolution = this->get_override( "getVideoModeResolution" );
        return func_getVideoModeResolution( modeNumber );
    }

    virtual ::irr::core::dimension2d< unsigned int > getVideoModeResolution( ::irr::core::dimension2d< unsigned int > const & minSize, ::irr::core::dimension2d< unsigned int > const & maxSize ) const {
        bp::override func_getVideoModeResolution = this->get_override( "getVideoModeResolution" );
        return func_getVideoModeResolution( boost::ref(minSize), boost::ref(maxSize) );
    }

    void setDebugName( ::irr::c8 const * newName ){
        irr::IReferenceCounted::setDebugName( newName );
    }

};

struct SLight_wrapper : irr::video::SLight, bp::wrapper< irr::video::SLight > {

    SLight_wrapper(irr::video::SLight const & arg )
    : irr::video::SLight( arg )
      , bp::wrapper< irr::video::SLight >(){
        // copy constructor
        
    }

    SLight_wrapper( )
    : irr::video::SLight( )
      , bp::wrapper< irr::video::SLight >(){
        // null constructor
    
    }

    static bool get_CastShadows(irr::video::SLight const & inst ){
        return inst.CastShadows;
    }
    
    static void set_CastShadows( irr::video::SLight & inst, bool new_value ){ 
        inst.CastShadows = new_value;
    }

};

struct SMaterialLayer_wrapper : irr::video::SMaterialLayer, bp::wrapper< irr::video::SMaterialLayer > {

    SMaterialLayer_wrapper( )
    : irr::video::SMaterialLayer( )
      , bp::wrapper< irr::video::SMaterialLayer >(){
        // null constructor
    
    }

    SMaterialLayer_wrapper(::irr::video::SMaterialLayer const & other )
    : irr::video::SMaterialLayer( boost::ref(other) )
      , bp::wrapper< irr::video::SMaterialLayer >(){
        // copy constructor
    
    }

    static bool get_BilinearFilter(irr::video::SMaterialLayer const & inst ){
        return inst.BilinearFilter;
    }
    
    static void set_BilinearFilter( irr::video::SMaterialLayer & inst, bool new_value ){ 
        inst.BilinearFilter = new_value;
    }

    static ::irr::video::ITexture * get_Texture(irr::video::SMaterialLayer const & inst ){
        return inst.Texture;
    }
    
    static void set_Texture( irr::video::SMaterialLayer & inst, ::irr::video::ITexture * new_value ){ 
        inst.Texture = new_value;
    }

    static ::irr::u8 get_TextureWrapU(irr::video::SMaterialLayer const & inst ){
        return inst.TextureWrapU;
    }
    
    static void set_TextureWrapU( irr::video::SMaterialLayer & inst, ::irr::u8 new_value ){ 
        inst.TextureWrapU = new_value;
    }

    static ::irr::u8 get_TextureWrapV(irr::video::SMaterialLayer const & inst ){
        return inst.TextureWrapV;
    }
    
    static void set_TextureWrapV( irr::video::SMaterialLayer & inst, ::irr::u8 new_value ){ 
        inst.TextureWrapV = new_value;
    }

    static bool get_TrilinearFilter(irr::video::SMaterialLayer const & inst ){
        return inst.TrilinearFilter;
    }
    
    static void set_TrilinearFilter( irr::video::SMaterialLayer & inst, bool new_value ){ 
        inst.TrilinearFilter = new_value;
    }

};

namespace irr{ namespace core{ 
pyplusplus::containers::static_sized::const_array_1_t< float, 17 >
fast_atof_table_wrapper(){
    return pyplusplus::containers::static_sized::const_array_1_t< float, 17 >( ::irr::core::fast_atof_table );
}
}}

BOOST_PYTHON_MODULE(PythonSceneMgr){
    bp::enum_< AS_MOVE_TYPE>("AS_MOVE_TYPE")
        .value("AS_MT_LINER", AS_MT_LINER)
        .value("AS_MT_LOG", AS_MT_LOG)
        .value("AS_MT_SQUARE", AS_MT_SQUARE)
        .value("AS_MT_SQRT", AS_MT_SQRT)
        .value("AS_MT_POW", AS_MT_POW)
        .export_values()
        ;

    bp::enum_< irr::video::ECOLOR_FORMAT>("ECOLOR_FORMAT")
        .value("ECF_A1R5G5B5", irr::video::ECF_A1R5G5B5)
        .value("ECF_R5G6B5", irr::video::ECF_R5G6B5)
        .value("ECF_R8G8B8", irr::video::ECF_R8G8B8)
        .value("ECF_A8R8G8B8", irr::video::ECF_A8R8G8B8)
        .value("ECF_R16F", irr::video::ECF_R16F)
        .value("ECF_G16R16F", irr::video::ECF_G16R16F)
        .value("ECF_A16B16G16R16F", irr::video::ECF_A16B16G16R16F)
        .value("ECF_R32F", irr::video::ECF_R32F)
        .value("ECF_G32R32F", irr::video::ECF_G32R32F)
        .value("ECF_A32B32G32R32F", irr::video::ECF_A32B32G32R32F)
        .value("ECF_UNKNOWN", irr::video::ECF_UNKNOWN)
        .export_values()
        ;

    bp::enum_< irr::gui::ECONTEXT_MENU_CLOSE>("ECONTEXT_MENU_CLOSE")
        .value("ECMC_IGNORE", irr::gui::ECMC_IGNORE)
        .value("ECMC_REMOVE", irr::gui::ECMC_REMOVE)
        .value("ECMC_HIDE", irr::gui::ECMC_HIDE)
        .export_values()
        ;

    bp::enum_< irr::EEVENT_TYPE>("EEVENT_TYPE")
        .value("EET_GUI_EVENT", irr::EET_GUI_EVENT)
        .value("EET_MOUSE_INPUT_EVENT", irr::EET_MOUSE_INPUT_EVENT)
        .value("EET_KEY_INPUT_EVENT", irr::EET_KEY_INPUT_EVENT)
        .value("EET_JOYSTICK_INPUT_EVENT", irr::EET_JOYSTICK_INPUT_EVENT)
        .value("EET_LOG_TEXT_EVENT", irr::EET_LOG_TEXT_EVENT)
        .value("EET_USER_EVENT", irr::EET_USER_EVENT)
        .value("EGUIET_FORCE_32_BIT", irr::EGUIET_FORCE_32_BIT)
        .export_values()
        ;

    bp::enum_< irr::io::EFileSystemType>("EFileSystemType")
        .value("FILESYSTEM_NATIVE", irr::io::FILESYSTEM_NATIVE)
        .value("FILESYSTEM_VIRTUAL", irr::io::FILESYSTEM_VIRTUAL)
        .export_values()
        ;

    bp::enum_< irr::gui::EGUI_ALIGNMENT>("EGUI_ALIGNMENT")
        .value("EGUIA_UPPERLEFT", irr::gui::EGUIA_UPPERLEFT)
        .value("EGUIA_LOWERRIGHT", irr::gui::EGUIA_LOWERRIGHT)
        .value("EGUIA_CENTER", irr::gui::EGUIA_CENTER)
        .value("EGUIA_SCALE", irr::gui::EGUIA_SCALE)
        .export_values()
        ;

    bp::enum_< irr::gui::EGUI_BUTTON_STATE>("EGUI_BUTTON_STATE")
        .value("EGBS_BUTTON_UP", irr::gui::EGBS_BUTTON_UP)
        .value("EGBS_BUTTON_DOWN", irr::gui::EGBS_BUTTON_DOWN)
        .value("EGBS_BUTTON_MOUSE_OVER", irr::gui::EGBS_BUTTON_MOUSE_OVER)
        .value("EGBS_BUTTON_MOUSE_OFF", irr::gui::EGBS_BUTTON_MOUSE_OFF)
        .value("EGBS_BUTTON_FOCUSED", irr::gui::EGBS_BUTTON_FOCUSED)
        .value("EGBS_BUTTON_NOT_FOCUSED", irr::gui::EGBS_BUTTON_NOT_FOCUSED)
        .value("EGBS_COUNT", irr::gui::EGBS_COUNT)
        .export_values()
        ;

    bp::enum_< irr::gui::EGUI_COLUMN_ORDERING>("EGUI_COLUMN_ORDERING")
        .value("EGCO_NONE", irr::gui::EGCO_NONE)
        .value("EGCO_CUSTOM", irr::gui::EGCO_CUSTOM)
        .value("EGCO_ASCENDING", irr::gui::EGCO_ASCENDING)
        .value("EGCO_DESCENDING", irr::gui::EGCO_DESCENDING)
        .value("EGCO_FLIP_ASCENDING_DESCENDING", irr::gui::EGCO_FLIP_ASCENDING_DESCENDING)
        .value("EGCO_COUNT", irr::gui::EGCO_COUNT)
        .export_values()
        ;

    bp::enum_< irr::gui::EGUI_DEFAULT_COLOR>("EGUI_DEFAULT_COLOR")
        .value("EGDC_3D_DARK_SHADOW", irr::gui::EGDC_3D_DARK_SHADOW)
        .value("EGDC_3D_SHADOW", irr::gui::EGDC_3D_SHADOW)
        .value("EGDC_3D_FACE", irr::gui::EGDC_3D_FACE)
        .value("EGDC_3D_HIGH_LIGHT", irr::gui::EGDC_3D_HIGH_LIGHT)
        .value("EGDC_3D_LIGHT", irr::gui::EGDC_3D_LIGHT)
        .value("EGDC_ACTIVE_BORDER", irr::gui::EGDC_ACTIVE_BORDER)
        .value("EGDC_ACTIVE_CAPTION", irr::gui::EGDC_ACTIVE_CAPTION)
        .value("EGDC_APP_WORKSPACE", irr::gui::EGDC_APP_WORKSPACE)
        .value("EGDC_BUTTON_TEXT", irr::gui::EGDC_BUTTON_TEXT)
        .value("EGDC_GRAY_TEXT", irr::gui::EGDC_GRAY_TEXT)
        .value("EGDC_HIGH_LIGHT", irr::gui::EGDC_HIGH_LIGHT)
        .value("EGDC_HIGH_LIGHT_TEXT", irr::gui::EGDC_HIGH_LIGHT_TEXT)
        .value("EGDC_INACTIVE_BORDER", irr::gui::EGDC_INACTIVE_BORDER)
        .value("EGDC_INACTIVE_CAPTION", irr::gui::EGDC_INACTIVE_CAPTION)
        .value("EGDC_TOOLTIP", irr::gui::EGDC_TOOLTIP)
        .value("EGDC_TOOLTIP_BACKGROUND", irr::gui::EGDC_TOOLTIP_BACKGROUND)
        .value("EGDC_SCROLLBAR", irr::gui::EGDC_SCROLLBAR)
        .value("EGDC_WINDOW", irr::gui::EGDC_WINDOW)
        .value("EGDC_WINDOW_SYMBOL", irr::gui::EGDC_WINDOW_SYMBOL)
        .value("EGDC_ICON", irr::gui::EGDC_ICON)
        .value("EGDC_ICON_HIGH_LIGHT", irr::gui::EGDC_ICON_HIGH_LIGHT)
        .value("EGDC_COUNT", irr::gui::EGDC_COUNT)
        .export_values()
        ;

    bp::enum_< irr::gui::EGUI_DEFAULT_FONT>("EGUI_DEFAULT_FONT")
        .value("EGDF_DEFAULT", irr::gui::EGDF_DEFAULT)
        .value("EGDF_BUTTON", irr::gui::EGDF_BUTTON)
        .value("EGDF_WINDOW", irr::gui::EGDF_WINDOW)
        .value("EGDF_MENU", irr::gui::EGDF_MENU)
        .value("EGDF_TOOLTIP", irr::gui::EGDF_TOOLTIP)
        .value("EGDF_COUNT", irr::gui::EGDF_COUNT)
        .export_values()
        ;

    bp::enum_< irr::gui::EGUI_DEFAULT_ICON>("EGUI_DEFAULT_ICON")
        .value("EGDI_WINDOW_MAXIMIZE", irr::gui::EGDI_WINDOW_MAXIMIZE)
        .value("EGDI_WINDOW_RESTORE", irr::gui::EGDI_WINDOW_RESTORE)
        .value("EGDI_WINDOW_CLOSE", irr::gui::EGDI_WINDOW_CLOSE)
        .value("EGDI_WINDOW_MINIMIZE", irr::gui::EGDI_WINDOW_MINIMIZE)
        .value("EGDI_WINDOW_RESIZE", irr::gui::EGDI_WINDOW_RESIZE)
        .value("EGDI_CURSOR_UP", irr::gui::EGDI_CURSOR_UP)
        .value("EGDI_CURSOR_DOWN", irr::gui::EGDI_CURSOR_DOWN)
        .value("EGDI_CURSOR_LEFT", irr::gui::EGDI_CURSOR_LEFT)
        .value("EGDI_CURSOR_RIGHT", irr::gui::EGDI_CURSOR_RIGHT)
        .value("EGDI_MENU_MORE", irr::gui::EGDI_MENU_MORE)
        .value("EGDI_CHECK_BOX_CHECKED", irr::gui::EGDI_CHECK_BOX_CHECKED)
        .value("EGDI_DROP_DOWN", irr::gui::EGDI_DROP_DOWN)
        .value("EGDI_SMALL_CURSOR_UP", irr::gui::EGDI_SMALL_CURSOR_UP)
        .value("EGDI_SMALL_CURSOR_DOWN", irr::gui::EGDI_SMALL_CURSOR_DOWN)
        .value("EGDI_RADIO_BUTTON_CHECKED", irr::gui::EGDI_RADIO_BUTTON_CHECKED)
        .value("EGDI_MORE_LEFT", irr::gui::EGDI_MORE_LEFT)
        .value("EGDI_MORE_RIGHT", irr::gui::EGDI_MORE_RIGHT)
        .value("EGDI_MORE_UP", irr::gui::EGDI_MORE_UP)
        .value("EGDI_MORE_DOWN", irr::gui::EGDI_MORE_DOWN)
        .value("EGDI_EXPAND", irr::gui::EGDI_EXPAND)
        .value("EGDI_COLLAPSE", irr::gui::EGDI_COLLAPSE)
        .value("EGDI_FILE", irr::gui::EGDI_FILE)
        .value("EGDI_DIRECTORY", irr::gui::EGDI_DIRECTORY)
        .value("EGDI_COUNT", irr::gui::EGDI_COUNT)
        .export_values()
        ;

    bp::enum_< irr::gui::EGUI_DEFAULT_SIZE>("EGUI_DEFAULT_SIZE")
        .value("EGDS_SCROLLBAR_SIZE", irr::gui::EGDS_SCROLLBAR_SIZE)
        .value("EGDS_MENU_HEIGHT", irr::gui::EGDS_MENU_HEIGHT)
        .value("EGDS_WINDOW_BUTTON_WIDTH", irr::gui::EGDS_WINDOW_BUTTON_WIDTH)
        .value("EGDS_CHECK_BOX_WIDTH", irr::gui::EGDS_CHECK_BOX_WIDTH)
        .value("EGDS_MESSAGE_BOX_WIDTH", irr::gui::EGDS_MESSAGE_BOX_WIDTH)
        .value("EGDS_MESSAGE_BOX_HEIGHT", irr::gui::EGDS_MESSAGE_BOX_HEIGHT)
        .value("EGDS_BUTTON_WIDTH", irr::gui::EGDS_BUTTON_WIDTH)
        .value("EGDS_BUTTON_HEIGHT", irr::gui::EGDS_BUTTON_HEIGHT)
        .value("EGDS_TEXT_DISTANCE_X", irr::gui::EGDS_TEXT_DISTANCE_X)
        .value("EGDS_TEXT_DISTANCE_Y", irr::gui::EGDS_TEXT_DISTANCE_Y)
        .value("EGDS_TITLEBARTEXT_DISTANCE_X", irr::gui::EGDS_TITLEBARTEXT_DISTANCE_X)
        .value("EGDS_TITLEBARTEXT_DISTANCE_Y", irr::gui::EGDS_TITLEBARTEXT_DISTANCE_Y)
        .value("EGDS_MESSAGE_BOX_GAP_SPACE", irr::gui::EGDS_MESSAGE_BOX_GAP_SPACE)
        .value("EGDS_MESSAGE_BOX_MIN_TEXT_WIDTH", irr::gui::EGDS_MESSAGE_BOX_MIN_TEXT_WIDTH)
        .value("EGDS_MESSAGE_BOX_MAX_TEXT_WIDTH", irr::gui::EGDS_MESSAGE_BOX_MAX_TEXT_WIDTH)
        .value("EGDS_MESSAGE_BOX_MAX_TEST_WIDTH", irr::gui::EGDS_MESSAGE_BOX_MAX_TEST_WIDTH)
        .value("EGDS_MESSAGE_BOX_MIN_TEXT_HEIGHT", irr::gui::EGDS_MESSAGE_BOX_MIN_TEXT_HEIGHT)
        .value("EGDS_MESSAGE_BOX_MAX_TEXT_HEIGHT", irr::gui::EGDS_MESSAGE_BOX_MAX_TEXT_HEIGHT)
        .value("EGDS_COUNT", irr::gui::EGDS_COUNT)
        .export_values()
        ;

    bp::enum_< irr::gui::EGUI_DEFAULT_TEXT>("EGUI_DEFAULT_TEXT")
        .value("EGDT_MSG_BOX_OK", irr::gui::EGDT_MSG_BOX_OK)
        .value("EGDT_MSG_BOX_CANCEL", irr::gui::EGDT_MSG_BOX_CANCEL)
        .value("EGDT_MSG_BOX_YES", irr::gui::EGDT_MSG_BOX_YES)
        .value("EGDT_MSG_BOX_NO", irr::gui::EGDT_MSG_BOX_NO)
        .value("EGDT_WINDOW_CLOSE", irr::gui::EGDT_WINDOW_CLOSE)
        .value("EGDT_WINDOW_MAXIMIZE", irr::gui::EGDT_WINDOW_MAXIMIZE)
        .value("EGDT_WINDOW_MINIMIZE", irr::gui::EGDT_WINDOW_MINIMIZE)
        .value("EGDT_WINDOW_RESTORE", irr::gui::EGDT_WINDOW_RESTORE)
        .value("EGDT_COUNT", irr::gui::EGDT_COUNT)
        .export_values()
        ;

    bp::enum_< irr::gui::EGUI_ELEMENT_TYPE>("EGUI_ELEMENT_TYPE")
        .value("EGUIET_BUTTON", irr::gui::EGUIET_BUTTON)
        .value("EGUIET_CHECK_BOX", irr::gui::EGUIET_CHECK_BOX)
        .value("EGUIET_COMBO_BOX", irr::gui::EGUIET_COMBO_BOX)
        .value("EGUIET_CONTEXT_MENU", irr::gui::EGUIET_CONTEXT_MENU)
        .value("EGUIET_MENU", irr::gui::EGUIET_MENU)
        .value("EGUIET_EDIT_BOX", irr::gui::EGUIET_EDIT_BOX)
        .value("EGUIET_FILE_OPEN_DIALOG", irr::gui::EGUIET_FILE_OPEN_DIALOG)
        .value("EGUIET_COLOR_SELECT_DIALOG", irr::gui::EGUIET_COLOR_SELECT_DIALOG)
        .value("EGUIET_IN_OUT_FADER", irr::gui::EGUIET_IN_OUT_FADER)
        .value("EGUIET_IMAGE", irr::gui::EGUIET_IMAGE)
        .value("EGUIET_LIST_BOX", irr::gui::EGUIET_LIST_BOX)
        .value("EGUIET_MESH_VIEWER", irr::gui::EGUIET_MESH_VIEWER)
        .value("EGUIET_MESSAGE_BOX", irr::gui::EGUIET_MESSAGE_BOX)
        .value("EGUIET_MODAL_SCREEN", irr::gui::EGUIET_MODAL_SCREEN)
        .value("EGUIET_SCROLL_BAR", irr::gui::EGUIET_SCROLL_BAR)
        .value("EGUIET_SPIN_BOX", irr::gui::EGUIET_SPIN_BOX)
        .value("EGUIET_STATIC_TEXT", irr::gui::EGUIET_STATIC_TEXT)
        .value("EGUIET_TAB", irr::gui::EGUIET_TAB)
        .value("EGUIET_TAB_CONTROL", irr::gui::EGUIET_TAB_CONTROL)
        .value("EGUIET_TABLE", irr::gui::EGUIET_TABLE)
        .value("EGUIET_TOOL_BAR", irr::gui::EGUIET_TOOL_BAR)
        .value("EGUIET_TREE_VIEW", irr::gui::EGUIET_TREE_VIEW)
        .value("EGUIET_WINDOW", irr::gui::EGUIET_WINDOW)
        .value("EGUIET_ELEMENT", irr::gui::EGUIET_ELEMENT)
        .value("EGUIET_COUNT", irr::gui::EGUIET_COUNT)
        .value("EGUIET_FORCE_32_BIT", irr::gui::EGUIET_FORCE_32_BIT)
        .export_values()
        ;

    bp::enum_< irr::gui::EGUI_EVENT_TYPE>("EGUI_EVENT_TYPE")
        .value("EGET_ELEMENT_FOCUS_LOST", irr::gui::EGET_ELEMENT_FOCUS_LOST)
        .value("EGET_ELEMENT_FOCUSED", irr::gui::EGET_ELEMENT_FOCUSED)
        .value("EGET_ELEMENT_HOVERED", irr::gui::EGET_ELEMENT_HOVERED)
        .value("EGET_ELEMENT_LEFT", irr::gui::EGET_ELEMENT_LEFT)
        .value("EGET_ELEMENT_CLOSED", irr::gui::EGET_ELEMENT_CLOSED)
        .value("EGET_BUTTON_CLICKED", irr::gui::EGET_BUTTON_CLICKED)
        .value("EGET_SCROLL_BAR_CHANGED", irr::gui::EGET_SCROLL_BAR_CHANGED)
        .value("EGET_CHECKBOX_CHANGED", irr::gui::EGET_CHECKBOX_CHANGED)
        .value("EGET_LISTBOX_CHANGED", irr::gui::EGET_LISTBOX_CHANGED)
        .value("EGET_LISTBOX_SELECTED_AGAIN", irr::gui::EGET_LISTBOX_SELECTED_AGAIN)
        .value("EGET_FILE_SELECTED", irr::gui::EGET_FILE_SELECTED)
        .value("EGET_DIRECTORY_SELECTED", irr::gui::EGET_DIRECTORY_SELECTED)
        .value("EGET_FILE_CHOOSE_DIALOG_CANCELLED", irr::gui::EGET_FILE_CHOOSE_DIALOG_CANCELLED)
        .value("EGET_MESSAGEBOX_YES", irr::gui::EGET_MESSAGEBOX_YES)
        .value("EGET_MESSAGEBOX_NO", irr::gui::EGET_MESSAGEBOX_NO)
        .value("EGET_MESSAGEBOX_OK", irr::gui::EGET_MESSAGEBOX_OK)
        .value("EGET_MESSAGEBOX_CANCEL", irr::gui::EGET_MESSAGEBOX_CANCEL)
        .value("EGET_EDITBOX_ENTER", irr::gui::EGET_EDITBOX_ENTER)
        .value("EGET_EDITBOX_CHANGED", irr::gui::EGET_EDITBOX_CHANGED)
        .value("EGET_EDITBOX_MARKING_CHANGED", irr::gui::EGET_EDITBOX_MARKING_CHANGED)
        .value("EGET_TAB_CHANGED", irr::gui::EGET_TAB_CHANGED)
        .value("EGET_MENU_ITEM_SELECTED", irr::gui::EGET_MENU_ITEM_SELECTED)
        .value("EGET_COMBO_BOX_CHANGED", irr::gui::EGET_COMBO_BOX_CHANGED)
        .value("EGET_SPINBOX_CHANGED", irr::gui::EGET_SPINBOX_CHANGED)
        .value("EGET_TABLE_CHANGED", irr::gui::EGET_TABLE_CHANGED)
        .value("EGET_TABLE_HEADER_CHANGED", irr::gui::EGET_TABLE_HEADER_CHANGED)
        .value("EGET_TABLE_SELECTED_AGAIN", irr::gui::EGET_TABLE_SELECTED_AGAIN)
        .value("EGET_TREEVIEW_NODE_DESELECT", irr::gui::EGET_TREEVIEW_NODE_DESELECT)
        .value("EGET_TREEVIEW_NODE_SELECT", irr::gui::EGET_TREEVIEW_NODE_SELECT)
        .value("EGET_TREEVIEW_NODE_EXPAND", irr::gui::EGET_TREEVIEW_NODE_EXPAND)
        .value("EGET_TREEVIEW_NODE_COLLAPS", irr::gui::EGET_TREEVIEW_NODE_COLLAPS)
        .value("EGET_COUNT", irr::gui::EGET_COUNT)
        .export_values()
        ;

    bp::enum_< irr::gui::EGUI_FONT_TYPE>("EGUI_FONT_TYPE")
        .value("EGFT_BITMAP", irr::gui::EGFT_BITMAP)
        .value("EGFT_VECTOR", irr::gui::EGFT_VECTOR)
        .value("EGFT_OS", irr::gui::EGFT_OS)
        .value("EGFT_CUSTOM", irr::gui::EGFT_CUSTOM)
        .export_values()
        ;

    bp::enum_< irr::gui::EGUI_LISTBOX_COLOR>("EGUI_LISTBOX_COLOR")
        .value("EGUI_LBC_TEXT", irr::gui::EGUI_LBC_TEXT)
        .value("EGUI_LBC_TEXT_HIGHLIGHT", irr::gui::EGUI_LBC_TEXT_HIGHLIGHT)
        .value("EGUI_LBC_ICON", irr::gui::EGUI_LBC_ICON)
        .value("EGUI_LBC_ICON_HIGHLIGHT", irr::gui::EGUI_LBC_ICON_HIGHLIGHT)
        .value("EGUI_LBC_COUNT", irr::gui::EGUI_LBC_COUNT)
        .export_values()
        ;

    bp::enum_< irr::gui::EGUI_ORDERING_MODE>("EGUI_ORDERING_MODE")
        .value("EGOM_NONE", irr::gui::EGOM_NONE)
        .value("EGOM_ASCENDING", irr::gui::EGOM_ASCENDING)
        .value("EGOM_DESCENDING", irr::gui::EGOM_DESCENDING)
        .value("EGOM_COUNT", irr::gui::EGOM_COUNT)
        .export_values()
        ;

    bp::enum_< irr::gui::EGUI_SKIN_TYPE>("EGUI_SKIN_TYPE")
        .value("EGST_WINDOWS_CLASSIC", irr::gui::EGST_WINDOWS_CLASSIC)
        .value("EGST_WINDOWS_METALLIC", irr::gui::EGST_WINDOWS_METALLIC)
        .value("EGST_BURNING_SKIN", irr::gui::EGST_BURNING_SKIN)
        .value("EGST_UNKNOWN", irr::gui::EGST_UNKNOWN)
        .value("EGST_COUNT", irr::gui::EGST_COUNT)
        .export_values()
        ;

    bp::enum_< irr::gui::EGUI_TABLE_DRAW_FLAGS>("EGUI_TABLE_DRAW_FLAGS")
        .value("EGTDF_ROWS", irr::gui::EGTDF_ROWS)
        .value("EGTDF_COLUMNS", irr::gui::EGTDF_COLUMNS)
        .value("EGTDF_ACTIVE_ROW", irr::gui::EGTDF_ACTIVE_ROW)
        .value("EGTDF_COUNT", irr::gui::EGTDF_COUNT)
        .export_values()
        ;

    bp::enum_< irr::core::EIntersectionRelation3D>("EIntersectionRelation3D")
        .value("ISREL3D_FRONT", irr::core::ISREL3D_FRONT)
        .value("ISREL3D_BACK", irr::core::ISREL3D_BACK)
        .value("ISREL3D_PLANAR", irr::core::ISREL3D_PLANAR)
        .value("ISREL3D_SPANNING", irr::core::ISREL3D_SPANNING)
        .value("ISREL3D_CLIPPED", irr::core::ISREL3D_CLIPPED)
        .export_values()
        ;

    bp::enum_< irr::EKEY_ACTION>("EKEY_ACTION")
        .value("EKA_MOVE_FORWARD", irr::EKA_MOVE_FORWARD)
        .value("EKA_MOVE_BACKWARD", irr::EKA_MOVE_BACKWARD)
        .value("EKA_STRAFE_LEFT", irr::EKA_STRAFE_LEFT)
        .value("EKA_STRAFE_RIGHT", irr::EKA_STRAFE_RIGHT)
        .value("EKA_JUMP_UP", irr::EKA_JUMP_UP)
        .value("EKA_CROUCH", irr::EKA_CROUCH)
        .value("EKA_COUNT", irr::EKA_COUNT)
        .value("EKA_FORCE_32BIT", irr::EKA_FORCE_32BIT)
        .export_values()
        ;

    bp::enum_< irr::EKEY_CODE>("EKEY_CODE")
        .value("KEY_LBUTTON", irr::KEY_LBUTTON)
        .value("KEY_RBUTTON", irr::KEY_RBUTTON)
        .value("KEY_CANCEL", irr::KEY_CANCEL)
        .value("KEY_MBUTTON", irr::KEY_MBUTTON)
        .value("KEY_XBUTTON1", irr::KEY_XBUTTON1)
        .value("KEY_XBUTTON2", irr::KEY_XBUTTON2)
        .value("KEY_BACK", irr::KEY_BACK)
        .value("KEY_TAB", irr::KEY_TAB)
        .value("KEY_CLEAR", irr::KEY_CLEAR)
        .value("KEY_RETURN", irr::KEY_RETURN)
        .value("KEY_SHIFT", irr::KEY_SHIFT)
        .value("KEY_CONTROL", irr::KEY_CONTROL)
        .value("KEY_MENU", irr::KEY_MENU)
        .value("KEY_PAUSE", irr::KEY_PAUSE)
        .value("KEY_CAPITAL", irr::KEY_CAPITAL)
        .value("KEY_KANA", irr::KEY_KANA)
        .value("KEY_HANGUEL", irr::KEY_HANGUEL)
        .value("KEY_HANGUL", irr::KEY_HANGUL)
        .value("KEY_JUNJA", irr::KEY_JUNJA)
        .value("KEY_FINAL", irr::KEY_FINAL)
        .value("KEY_HANJA", irr::KEY_HANJA)
        .value("KEY_KANJI", irr::KEY_KANJI)
        .value("KEY_ESCAPE", irr::KEY_ESCAPE)
        .value("KEY_CONVERT", irr::KEY_CONVERT)
        .value("KEY_NONCONVERT", irr::KEY_NONCONVERT)
        .value("KEY_ACCEPT", irr::KEY_ACCEPT)
        .value("KEY_MODECHANGE", irr::KEY_MODECHANGE)
        .value("KEY_SPACE", irr::KEY_SPACE)
        .value("KEY_PRIOR", irr::KEY_PRIOR)
        .value("KEY_NEXT", irr::KEY_NEXT)
        .value("KEY_END", irr::KEY_END)
        .value("KEY_HOME", irr::KEY_HOME)
        .value("KEY_LEFT", irr::KEY_LEFT)
        .value("KEY_UP", irr::KEY_UP)
        .value("KEY_RIGHT", irr::KEY_RIGHT)
        .value("KEY_DOWN", irr::KEY_DOWN)
        .value("KEY_SELECT", irr::KEY_SELECT)
        .value("KEY_PRINT", irr::KEY_PRINT)
        .value("KEY_EXECUT", irr::KEY_EXECUT)
        .value("KEY_SNAPSHOT", irr::KEY_SNAPSHOT)
        .value("KEY_INSERT", irr::KEY_INSERT)
        .value("KEY_DELETE", irr::KEY_DELETE)
        .value("KEY_HELP", irr::KEY_HELP)
        .value("KEY_KEY_0", irr::KEY_KEY_0)
        .value("KEY_KEY_1", irr::KEY_KEY_1)
        .value("KEY_KEY_2", irr::KEY_KEY_2)
        .value("KEY_KEY_3", irr::KEY_KEY_3)
        .value("KEY_KEY_4", irr::KEY_KEY_4)
        .value("KEY_KEY_5", irr::KEY_KEY_5)
        .value("KEY_KEY_6", irr::KEY_KEY_6)
        .value("KEY_KEY_7", irr::KEY_KEY_7)
        .value("KEY_KEY_8", irr::KEY_KEY_8)
        .value("KEY_KEY_9", irr::KEY_KEY_9)
        .value("KEY_KEY_A", irr::KEY_KEY_A)
        .value("KEY_KEY_B", irr::KEY_KEY_B)
        .value("KEY_KEY_C", irr::KEY_KEY_C)
        .value("KEY_KEY_D", irr::KEY_KEY_D)
        .value("KEY_KEY_E", irr::KEY_KEY_E)
        .value("KEY_KEY_F", irr::KEY_KEY_F)
        .value("KEY_KEY_G", irr::KEY_KEY_G)
        .value("KEY_KEY_H", irr::KEY_KEY_H)
        .value("KEY_KEY_I", irr::KEY_KEY_I)
        .value("KEY_KEY_J", irr::KEY_KEY_J)
        .value("KEY_KEY_K", irr::KEY_KEY_K)
        .value("KEY_KEY_L", irr::KEY_KEY_L)
        .value("KEY_KEY_M", irr::KEY_KEY_M)
        .value("KEY_KEY_N", irr::KEY_KEY_N)
        .value("KEY_KEY_O", irr::KEY_KEY_O)
        .value("KEY_KEY_P", irr::KEY_KEY_P)
        .value("KEY_KEY_Q", irr::KEY_KEY_Q)
        .value("KEY_KEY_R", irr::KEY_KEY_R)
        .value("KEY_KEY_S", irr::KEY_KEY_S)
        .value("KEY_KEY_T", irr::KEY_KEY_T)
        .value("KEY_KEY_U", irr::KEY_KEY_U)
        .value("KEY_KEY_V", irr::KEY_KEY_V)
        .value("KEY_KEY_W", irr::KEY_KEY_W)
        .value("KEY_KEY_X", irr::KEY_KEY_X)
        .value("KEY_KEY_Y", irr::KEY_KEY_Y)
        .value("KEY_KEY_Z", irr::KEY_KEY_Z)
        .value("KEY_LWIN", irr::KEY_LWIN)
        .value("KEY_RWIN", irr::KEY_RWIN)
        .value("KEY_APPS", irr::KEY_APPS)
        .value("KEY_SLEEP", irr::KEY_SLEEP)
        .value("KEY_NUMPAD0", irr::KEY_NUMPAD0)
        .value("KEY_NUMPAD1", irr::KEY_NUMPAD1)
        .value("KEY_NUMPAD2", irr::KEY_NUMPAD2)
        .value("KEY_NUMPAD3", irr::KEY_NUMPAD3)
        .value("KEY_NUMPAD4", irr::KEY_NUMPAD4)
        .value("KEY_NUMPAD5", irr::KEY_NUMPAD5)
        .value("KEY_NUMPAD6", irr::KEY_NUMPAD6)
        .value("KEY_NUMPAD7", irr::KEY_NUMPAD7)
        .value("KEY_NUMPAD8", irr::KEY_NUMPAD8)
        .value("KEY_NUMPAD9", irr::KEY_NUMPAD9)
        .value("KEY_MULTIPLY", irr::KEY_MULTIPLY)
        .value("KEY_ADD", irr::KEY_ADD)
        .value("KEY_SEPARATOR", irr::KEY_SEPARATOR)
        .value("KEY_SUBTRACT", irr::KEY_SUBTRACT)
        .value("KEY_DECIMAL", irr::KEY_DECIMAL)
        .value("KEY_DIVIDE", irr::KEY_DIVIDE)
        .value("KEY_F1", irr::KEY_F1)
        .value("KEY_F2", irr::KEY_F2)
        .value("KEY_F3", irr::KEY_F3)
        .value("KEY_F4", irr::KEY_F4)
        .value("KEY_F5", irr::KEY_F5)
        .value("KEY_F6", irr::KEY_F6)
        .value("KEY_F7", irr::KEY_F7)
        .value("KEY_F8", irr::KEY_F8)
        .value("KEY_F9", irr::KEY_F9)
        .value("KEY_F10", irr::KEY_F10)
        .value("KEY_F11", irr::KEY_F11)
        .value("KEY_F12", irr::KEY_F12)
        .value("KEY_F13", irr::KEY_F13)
        .value("KEY_F14", irr::KEY_F14)
        .value("KEY_F15", irr::KEY_F15)
        .value("KEY_F16", irr::KEY_F16)
        .value("KEY_F17", irr::KEY_F17)
        .value("KEY_F18", irr::KEY_F18)
        .value("KEY_F19", irr::KEY_F19)
        .value("KEY_F20", irr::KEY_F20)
        .value("KEY_F21", irr::KEY_F21)
        .value("KEY_F22", irr::KEY_F22)
        .value("KEY_F23", irr::KEY_F23)
        .value("KEY_F24", irr::KEY_F24)
        .value("KEY_NUMLOCK", irr::KEY_NUMLOCK)
        .value("KEY_SCROLL", irr::KEY_SCROLL)
        .value("KEY_LSHIFT", irr::KEY_LSHIFT)
        .value("KEY_RSHIFT", irr::KEY_RSHIFT)
        .value("KEY_LCONTROL", irr::KEY_LCONTROL)
        .value("KEY_RCONTROL", irr::KEY_RCONTROL)
        .value("KEY_LMENU", irr::KEY_LMENU)
        .value("KEY_RMENU", irr::KEY_RMENU)
        .value("KEY_PLUS", irr::KEY_PLUS)
        .value("KEY_COMMA", irr::KEY_COMMA)
        .value("KEY_MINUS", irr::KEY_MINUS)
        .value("KEY_PERIOD", irr::KEY_PERIOD)
        .value("KEY_ATTN", irr::KEY_ATTN)
        .value("KEY_CRSEL", irr::KEY_CRSEL)
        .value("KEY_EXSEL", irr::KEY_EXSEL)
        .value("KEY_EREOF", irr::KEY_EREOF)
        .value("KEY_PLAY", irr::KEY_PLAY)
        .value("KEY_ZOOM", irr::KEY_ZOOM)
        .value("KEY_PA1", irr::KEY_PA1)
        .value("KEY_OEM_CLEAR", irr::KEY_OEM_CLEAR)
        .value("KEY_KEY_CODES_COUNT", irr::KEY_KEY_CODES_COUNT)
        .export_values()
        ;

    bp::enum_< irr::ELOG_LEVEL>("ELOG_LEVEL")
        .value("ELL_INFORMATION", irr::ELL_INFORMATION)
        .value("ELL_WARNING", irr::ELL_WARNING)
        .value("ELL_ERROR", irr::ELL_ERROR)
        .value("ELL_NONE", irr::ELL_NONE)
        .export_values()
        ;

    bp::enum_< irr::scene::EMD2_ANIMATION_TYPE>("EMD2_ANIMATION_TYPE")
        .value("EMAT_STAND", irr::scene::EMAT_STAND)
        .value("EMAT_RUN", irr::scene::EMAT_RUN)
        .value("EMAT_ATTACK", irr::scene::EMAT_ATTACK)
        .value("EMAT_PAIN_A", irr::scene::EMAT_PAIN_A)
        .value("EMAT_PAIN_B", irr::scene::EMAT_PAIN_B)
        .value("EMAT_PAIN_C", irr::scene::EMAT_PAIN_C)
        .value("EMAT_JUMP", irr::scene::EMAT_JUMP)
        .value("EMAT_FLIP", irr::scene::EMAT_FLIP)
        .value("EMAT_SALUTE", irr::scene::EMAT_SALUTE)
        .value("EMAT_FALLBACK", irr::scene::EMAT_FALLBACK)
        .value("EMAT_WAVE", irr::scene::EMAT_WAVE)
        .value("EMAT_POINT", irr::scene::EMAT_POINT)
        .value("EMAT_CROUCH_STAND", irr::scene::EMAT_CROUCH_STAND)
        .value("EMAT_CROUCH_WALK", irr::scene::EMAT_CROUCH_WALK)
        .value("EMAT_CROUCH_ATTACK", irr::scene::EMAT_CROUCH_ATTACK)
        .value("EMAT_CROUCH_PAIN", irr::scene::EMAT_CROUCH_PAIN)
        .value("EMAT_CROUCH_DEATH", irr::scene::EMAT_CROUCH_DEATH)
        .value("EMAT_DEATH_FALLBACK", irr::scene::EMAT_DEATH_FALLBACK)
        .value("EMAT_DEATH_FALLFORWARD", irr::scene::EMAT_DEATH_FALLFORWARD)
        .value("EMAT_DEATH_FALLBACKSLOW", irr::scene::EMAT_DEATH_FALLBACKSLOW)
        .value("EMAT_BOOM", irr::scene::EMAT_BOOM)
        .value("EMAT_COUNT", irr::scene::EMAT_COUNT)
        .export_values()
        ;

    bp::enum_< irr::scene::EMD3_ANIMATION_TYPE>("EMD3_ANIMATION_TYPE")
        .value("EMD3_BOTH_DEATH_1", irr::scene::EMD3_BOTH_DEATH_1)
        .value("EMD3_BOTH_DEAD_1", irr::scene::EMD3_BOTH_DEAD_1)
        .value("EMD3_BOTH_DEATH_2", irr::scene::EMD3_BOTH_DEATH_2)
        .value("EMD3_BOTH_DEAD_2", irr::scene::EMD3_BOTH_DEAD_2)
        .value("EMD3_BOTH_DEATH_3", irr::scene::EMD3_BOTH_DEATH_3)
        .value("EMD3_BOTH_DEAD_3", irr::scene::EMD3_BOTH_DEAD_3)
        .value("EMD3_TORSO_GESTURE", irr::scene::EMD3_TORSO_GESTURE)
        .value("EMD3_TORSO_ATTACK_1", irr::scene::EMD3_TORSO_ATTACK_1)
        .value("EMD3_TORSO_ATTACK_2", irr::scene::EMD3_TORSO_ATTACK_2)
        .value("EMD3_TORSO_DROP", irr::scene::EMD3_TORSO_DROP)
        .value("EMD3_TORSO_RAISE", irr::scene::EMD3_TORSO_RAISE)
        .value("EMD3_TORSO_STAND_1", irr::scene::EMD3_TORSO_STAND_1)
        .value("EMD3_TORSO_STAND_2", irr::scene::EMD3_TORSO_STAND_2)
        .value("EMD3_LEGS_WALK_CROUCH", irr::scene::EMD3_LEGS_WALK_CROUCH)
        .value("EMD3_LEGS_WALK", irr::scene::EMD3_LEGS_WALK)
        .value("EMD3_LEGS_RUN", irr::scene::EMD3_LEGS_RUN)
        .value("EMD3_LEGS_BACK", irr::scene::EMD3_LEGS_BACK)
        .value("EMD3_LEGS_SWIM", irr::scene::EMD3_LEGS_SWIM)
        .value("EMD3_LEGS_JUMP_1", irr::scene::EMD3_LEGS_JUMP_1)
        .value("EMD3_LEGS_LAND_1", irr::scene::EMD3_LEGS_LAND_1)
        .value("EMD3_LEGS_JUMP_2", irr::scene::EMD3_LEGS_JUMP_2)
        .value("EMD3_LEGS_LAND_2", irr::scene::EMD3_LEGS_LAND_2)
        .value("EMD3_LEGS_IDLE", irr::scene::EMD3_LEGS_IDLE)
        .value("EMD3_LEGS_IDLE_CROUCH", irr::scene::EMD3_LEGS_IDLE_CROUCH)
        .value("EMD3_LEGS_TURN", irr::scene::EMD3_LEGS_TURN)
        .value("EMD3_ANIMATION_COUNT", irr::scene::EMD3_ANIMATION_COUNT)
        .export_values()
        ;

    bp::enum_< irr::scene::EMESH_WRITER_TYPE>("EMESH_WRITER_TYPE")
        .value("EMWT_IRR_MESH", irr::scene::EMWT_IRR_MESH)
        .value("EMWT_COLLADA", irr::scene::EMWT_COLLADA)
        .value("EMWT_STL", irr::scene::EMWT_STL)
        .value("EMWT_OBJ", irr::scene::EMWT_OBJ)
        .value("EMWT_PLY", irr::scene::EMWT_PLY)
        .export_values()
        ;

    bp::enum_< irr::gui::EMESSAGE_BOX_FLAG>("EMESSAGE_BOX_FLAG")
        .value("EMBF_OK", irr::gui::EMBF_OK)
        .value("EMBF_CANCEL", irr::gui::EMBF_CANCEL)
        .value("EMBF_YES", irr::gui::EMBF_YES)
        .value("EMBF_NO", irr::gui::EMBF_NO)
        .value("EMBF_FORCE_32BIT", irr::gui::EMBF_FORCE_32BIT)
        .export_values()
        ;

    bp::enum_< irr::EMOUSE_INPUT_EVENT>("EMOUSE_INPUT_EVENT")
        .value("EMIE_LMOUSE_PRESSED_DOWN", irr::EMIE_LMOUSE_PRESSED_DOWN)
        .value("EMIE_RMOUSE_PRESSED_DOWN", irr::EMIE_RMOUSE_PRESSED_DOWN)
        .value("EMIE_MMOUSE_PRESSED_DOWN", irr::EMIE_MMOUSE_PRESSED_DOWN)
        .value("EMIE_LMOUSE_LEFT_UP", irr::EMIE_LMOUSE_LEFT_UP)
        .value("EMIE_RMOUSE_LEFT_UP", irr::EMIE_RMOUSE_LEFT_UP)
        .value("EMIE_MMOUSE_LEFT_UP", irr::EMIE_MMOUSE_LEFT_UP)
        .value("EMIE_MOUSE_MOVED", irr::EMIE_MOUSE_MOVED)
        .value("EMIE_MOUSE_WHEEL", irr::EMIE_MOUSE_WHEEL)
        .value("EMIE_LMOUSE_DOUBLE_CLICK", irr::EMIE_LMOUSE_DOUBLE_CLICK)
        .value("EMIE_RMOUSE_DOUBLE_CLICK", irr::EMIE_RMOUSE_DOUBLE_CLICK)
        .value("EMIE_MMOUSE_DOUBLE_CLICK", irr::EMIE_MMOUSE_DOUBLE_CLICK)
        .value("EMIE_LMOUSE_TRIPLE_CLICK", irr::EMIE_LMOUSE_TRIPLE_CLICK)
        .value("EMIE_RMOUSE_TRIPLE_CLICK", irr::EMIE_RMOUSE_TRIPLE_CLICK)
        .value("EMIE_MMOUSE_TRIPLE_CLICK", irr::EMIE_MMOUSE_TRIPLE_CLICK)
        .value("EMIE_COUNT", irr::EMIE_COUNT)
        .export_values()
        ;

    bp::enum_< irr::scene::ESCENE_NODE_ANIMATOR_TYPE>("ESCENE_NODE_ANIMATOR_TYPE")
        .value("ESNAT_FLY_CIRCLE", irr::scene::ESNAT_FLY_CIRCLE)
        .value("ESNAT_FLY_STRAIGHT", irr::scene::ESNAT_FLY_STRAIGHT)
        .value("ESNAT_FOLLOW_SPLINE", irr::scene::ESNAT_FOLLOW_SPLINE)
        .value("ESNAT_ROTATION", irr::scene::ESNAT_ROTATION)
        .value("ESNAT_TEXTURE", irr::scene::ESNAT_TEXTURE)
        .value("ESNAT_DELETION", irr::scene::ESNAT_DELETION)
        .value("ESNAT_COLLISION_RESPONSE", irr::scene::ESNAT_COLLISION_RESPONSE)
        .value("ESNAT_CAMERA_FPS", irr::scene::ESNAT_CAMERA_FPS)
        .value("ESNAT_CAMERA_MAYA", irr::scene::ESNAT_CAMERA_MAYA)
        .value("ESNAT_COUNT", irr::scene::ESNAT_COUNT)
        .value("ESNAT_UNKNOWN", irr::scene::ESNAT_UNKNOWN)
        .value("ESNAT_FORCE_32_BIT", irr::scene::ESNAT_FORCE_32_BIT)
        .export_values()
        ;

    bp::enum_< irr::scene::ESCENE_NODE_TYPE>("ESCENE_NODE_TYPE")
        .value("ESNT_CUBE", irr::scene::ESNT_CUBE)
        .value("ESNT_SPHERE", irr::scene::ESNT_SPHERE)
        .value("ESNT_TEXT", irr::scene::ESNT_TEXT)
        .value("ESNT_WATER_SURFACE", irr::scene::ESNT_WATER_SURFACE)
        .value("ESNT_TERRAIN", irr::scene::ESNT_TERRAIN)
        .value("ESNT_SKY_BOX", irr::scene::ESNT_SKY_BOX)
        .value("ESNT_SKY_DOME", irr::scene::ESNT_SKY_DOME)
        .value("ESNT_SHADOW_VOLUME", irr::scene::ESNT_SHADOW_VOLUME)
        .value("ESNT_OCTREE", irr::scene::ESNT_OCTREE)
        .value("ESNT_MESH", irr::scene::ESNT_MESH)
        .value("ESNT_LIGHT", irr::scene::ESNT_LIGHT)
        .value("ESNT_EMPTY", irr::scene::ESNT_EMPTY)
        .value("ESNT_DUMMY_TRANSFORMATION", irr::scene::ESNT_DUMMY_TRANSFORMATION)
        .value("ESNT_CAMERA", irr::scene::ESNT_CAMERA)
        .value("ESNT_BILLBOARD", irr::scene::ESNT_BILLBOARD)
        .value("ESNT_ANIMATED_MESH", irr::scene::ESNT_ANIMATED_MESH)
        .value("ESNT_PARTICLE_SYSTEM", irr::scene::ESNT_PARTICLE_SYSTEM)
        .value("ESNT_Q3SHADER_SCENE_NODE", irr::scene::ESNT_Q3SHADER_SCENE_NODE)
        .value("ESNT_MD3_SCENE_NODE", irr::scene::ESNT_MD3_SCENE_NODE)
        .value("ESNT_VOLUME_LIGHT", irr::scene::ESNT_VOLUME_LIGHT)
        .value("ESNT_CAMERA_MAYA", irr::scene::ESNT_CAMERA_MAYA)
        .value("ESNT_CAMERA_FPS", irr::scene::ESNT_CAMERA_FPS)
        .value("ESNT_UNKNOWN", irr::scene::ESNT_UNKNOWN)
        .value("ESNT_ANY", irr::scene::ESNT_ANY)
        .export_values()
        ;

    bp::enum_< irr::io::ETEXT_FORMAT>("ETEXT_FORMAT")
        .value("ETF_ASCII", irr::io::ETF_ASCII)
        .value("ETF_UTF8", irr::io::ETF_UTF8)
        .value("ETF_UTF16_BE", irr::io::ETF_UTF16_BE)
        .value("ETF_UTF16_LE", irr::io::ETF_UTF16_LE)
        .value("ETF_UTF32_BE", irr::io::ETF_UTF32_BE)
        .value("ETF_UTF32_LE", irr::io::ETF_UTF32_LE)
        .export_values()
        ;

    bp::enum_< irr::io::EXML_NODE>("EXML_NODE")
        .value("EXN_NONE", irr::io::EXN_NONE)
        .value("EXN_ELEMENT", irr::io::EXN_ELEMENT)
        .value("EXN_ELEMENT_END", irr::io::EXN_ELEMENT_END)
        .value("EXN_TEXT", irr::io::EXN_TEXT)
        .value("EXN_COMMENT", irr::io::EXN_COMMENT)
        .value("EXN_CDATA", irr::io::EXN_CDATA)
        .value("EXN_UNKNOWN", irr::io::EXN_UNKNOWN)
        .export_values()
        ;

    bp::enum_< irr::video::E_ALPHA_SOURCE>("E_ALPHA_SOURCE")
        .value("EAS_NONE", irr::video::EAS_NONE)
        .value("EAS_VERTEX_COLOR", irr::video::EAS_VERTEX_COLOR)
        .value("EAS_TEXTURE", irr::video::EAS_TEXTURE)
        .export_values()
        ;

    bp::enum_< irr::scene::E_ANIMATED_MESH_TYPE>("E_ANIMATED_MESH_TYPE")
        .value("EAMT_UNKNOWN", irr::scene::EAMT_UNKNOWN)
        .value("EAMT_MD2", irr::scene::EAMT_MD2)
        .value("EAMT_MD3", irr::scene::EAMT_MD3)
        .value("EAMT_OBJ", irr::scene::EAMT_OBJ)
        .value("EAMT_BSP", irr::scene::EAMT_BSP)
        .value("EAMT_3DS", irr::scene::EAMT_3DS)
        .value("EAMT_MY3D", irr::scene::EAMT_MY3D)
        .value("EAMT_LMTS", irr::scene::EAMT_LMTS)
        .value("EAMT_CSM", irr::scene::EAMT_CSM)
        .value("EAMT_OCT", irr::scene::EAMT_OCT)
        .value("EAMT_SKINNED", irr::scene::EAMT_SKINNED)
        .export_values()
        ;

    bp::enum_< irr::video::E_ANTI_ALIASING_MODE>("E_ANTI_ALIASING_MODE")
        .value("EAAM_OFF", irr::video::EAAM_OFF)
        .value("EAAM_SIMPLE", irr::video::EAAM_SIMPLE)
        .value("EAAM_QUALITY", irr::video::EAAM_QUALITY)
        .value("EAAM_LINE_SMOOTH", irr::video::EAAM_LINE_SMOOTH)
        .value("EAAM_POINT_SMOOTH", irr::video::EAAM_POINT_SMOOTH)
        .value("EAAM_FULL_BASIC", irr::video::EAAM_FULL_BASIC)
        .value("EAAM_ALPHA_TO_COVERAGE", irr::video::EAAM_ALPHA_TO_COVERAGE)
        .export_values()
        ;

    bp::enum_< irr::io::E_ATTRIBUTE_READ_WRITE_FLAGS>("E_ATTRIBUTE_READ_WRITE_FLAGS")
        .value("EARWF_FOR_FILE", irr::io::EARWF_FOR_FILE)
        .value("EARWF_FOR_EDITOR", irr::io::EARWF_FOR_EDITOR)
        .value("EARWF_USE_RELATIVE_PATHS", irr::io::EARWF_USE_RELATIVE_PATHS)
        .export_values()
        ;

    bp::enum_< irr::io::E_ATTRIBUTE_TYPE>("E_ATTRIBUTE_TYPE")
        .value("EAT_INT", irr::io::EAT_INT)
        .value("EAT_FLOAT", irr::io::EAT_FLOAT)
        .value("EAT_STRING", irr::io::EAT_STRING)
        .value("EAT_BOOL", irr::io::EAT_BOOL)
        .value("EAT_ENUM", irr::io::EAT_ENUM)
        .value("EAT_COLOR", irr::io::EAT_COLOR)
        .value("EAT_COLORF", irr::io::EAT_COLORF)
        .value("EAT_VECTOR3D", irr::io::EAT_VECTOR3D)
        .value("EAT_POSITION2D", irr::io::EAT_POSITION2D)
        .value("EAT_VECTOR2D", irr::io::EAT_VECTOR2D)
        .value("EAT_RECT", irr::io::EAT_RECT)
        .value("EAT_MATRIX", irr::io::EAT_MATRIX)
        .value("EAT_QUATERNION", irr::io::EAT_QUATERNION)
        .value("EAT_BBOX", irr::io::EAT_BBOX)
        .value("EAT_PLANE", irr::io::EAT_PLANE)
        .value("EAT_TRIANGLE3D", irr::io::EAT_TRIANGLE3D)
        .value("EAT_LINE2D", irr::io::EAT_LINE2D)
        .value("EAT_LINE3D", irr::io::EAT_LINE3D)
        .value("EAT_STRINGWARRAY", irr::io::EAT_STRINGWARRAY)
        .value("EAT_FLOATARRAY", irr::io::EAT_FLOATARRAY)
        .value("EAT_INTARRAY", irr::io::EAT_INTARRAY)
        .value("EAT_BINARY", irr::io::EAT_BINARY)
        .value("EAT_TEXTURE", irr::io::EAT_TEXTURE)
        .value("EAT_USER_POINTER", irr::io::EAT_USER_POINTER)
        .value("EAT_COUNT", irr::io::EAT_COUNT)
        .value("EAT_UNKNOWN", irr::io::EAT_UNKNOWN)
        .export_values()
        ;

    bp::enum_< irr::video::E_BLEND_FACTOR>("E_BLEND_FACTOR")
        .value("EBF_ZERO", irr::video::EBF_ZERO)
        .value("EBF_ONE", irr::video::EBF_ONE)
        .value("EBF_DST_COLOR", irr::video::EBF_DST_COLOR)
        .value("EBF_ONE_MINUS_DST_COLOR", irr::video::EBF_ONE_MINUS_DST_COLOR)
        .value("EBF_SRC_COLOR", irr::video::EBF_SRC_COLOR)
        .value("EBF_ONE_MINUS_SRC_COLOR", irr::video::EBF_ONE_MINUS_SRC_COLOR)
        .value("EBF_SRC_ALPHA", irr::video::EBF_SRC_ALPHA)
        .value("EBF_ONE_MINUS_SRC_ALPHA", irr::video::EBF_ONE_MINUS_SRC_ALPHA)
        .value("EBF_DST_ALPHA", irr::video::EBF_DST_ALPHA)
        .value("EBF_ONE_MINUS_DST_ALPHA", irr::video::EBF_ONE_MINUS_DST_ALPHA)
        .value("EBF_SRC_ALPHA_SATURATE", irr::video::EBF_SRC_ALPHA_SATURATE)
        .export_values()
        ;

    bp::enum_< irr::scene::E_BONE_ANIMATION_MODE>("E_BONE_ANIMATION_MODE")
        .value("EBAM_AUTOMATIC", irr::scene::EBAM_AUTOMATIC)
        .value("EBAM_ANIMATED", irr::scene::EBAM_ANIMATED)
        .value("EBAM_UNANIMATED", irr::scene::EBAM_UNANIMATED)
        .value("EBAM_COUNT", irr::scene::EBAM_COUNT)
        .export_values()
        ;

    bp::enum_< irr::scene::E_BONE_SKINNING_SPACE>("E_BONE_SKINNING_SPACE")
        .value("EBSS_LOCAL", irr::scene::EBSS_LOCAL)
        .value("EBSS_GLOBAL", irr::scene::EBSS_GLOBAL)
        .value("EBSS_COUNT", irr::scene::EBSS_COUNT)
        .export_values()
        ;

    bp::enum_< irr::scene::E_BUFFER_TYPE>("E_BUFFER_TYPE")
        .value("EBT_NONE", irr::scene::EBT_NONE)
        .value("EBT_VERTEX", irr::scene::EBT_VERTEX)
        .value("EBT_INDEX", irr::scene::EBT_INDEX)
        .value("EBT_VERTEX_AND_INDEX", irr::scene::EBT_VERTEX_AND_INDEX)
        .export_values()
        ;

    bp::enum_< irr::video::E_COLOR_MATERIAL>("E_COLOR_MATERIAL")
        .value("ECM_NONE", irr::video::ECM_NONE)
        .value("ECM_DIFFUSE", irr::video::ECM_DIFFUSE)
        .value("ECM_AMBIENT", irr::video::ECM_AMBIENT)
        .value("ECM_EMISSIVE", irr::video::ECM_EMISSIVE)
        .value("ECM_SPECULAR", irr::video::ECM_SPECULAR)
        .value("ECM_DIFFUSE_AND_AMBIENT", irr::video::ECM_DIFFUSE_AND_AMBIENT)
        .export_values()
        ;

    bp::enum_< irr::video::E_COLOR_PLANE>("E_COLOR_PLANE")
        .value("ECP_NONE", irr::video::ECP_NONE)
        .value("ECP_ALPHA", irr::video::ECP_ALPHA)
        .value("ECP_RED", irr::video::ECP_RED)
        .value("ECP_GREEN", irr::video::ECP_GREEN)
        .value("ECP_BLUE", irr::video::ECP_BLUE)
        .value("ECP_RGB", irr::video::ECP_RGB)
        .value("ECP_ALL", irr::video::ECP_ALL)
        .export_values()
        ;

    bp::enum_< irr::video::E_COMPARISON_FUNC>("E_COMPARISON_FUNC")
        .value("ECFN_NEVER", irr::video::ECFN_NEVER)
        .value("ECFN_LESSEQUAL", irr::video::ECFN_LESSEQUAL)
        .value("ECFN_EQUAL", irr::video::ECFN_EQUAL)
        .value("ECFN_LESS", irr::video::ECFN_LESS)
        .value("ECFN_NOTEQUAL", irr::video::ECFN_NOTEQUAL)
        .value("ECFN_GREATEREQUAL", irr::video::ECFN_GREATEREQUAL)
        .value("ECFN_GREATER", irr::video::ECFN_GREATER)
        .value("ECFN_ALWAYS", irr::video::ECFN_ALWAYS)
        .export_values()
        ;

    bp::enum_< irr::scene::E_CULLING_TYPE>("E_CULLING_TYPE")
        .value("EAC_OFF", irr::scene::EAC_OFF)
        .value("EAC_BOX", irr::scene::EAC_BOX)
        .value("EAC_FRUSTUM_BOX", irr::scene::EAC_FRUSTUM_BOX)
        .value("EAC_FRUSTUM_SPHERE", irr::scene::EAC_FRUSTUM_SPHERE)
        .export_values()
        ;

    bp::enum_< irr::scene::E_DEBUG_SCENE_TYPE>("E_DEBUG_SCENE_TYPE")
        .value("EDS_OFF", irr::scene::EDS_OFF)
        .value("EDS_BBOX", irr::scene::EDS_BBOX)
        .value("EDS_NORMALS", irr::scene::EDS_NORMALS)
        .value("EDS_SKELETON", irr::scene::EDS_SKELETON)
        .value("EDS_MESH_WIRE_OVERLAY", irr::scene::EDS_MESH_WIRE_OVERLAY)
        .value("EDS_HALF_TRANSPARENCY", irr::scene::EDS_HALF_TRANSPARENCY)
        .value("EDS_BBOX_BUFFERS", irr::scene::EDS_BBOX_BUFFERS)
        .value("EDS_BBOX_ALL", irr::scene::EDS_BBOX_ALL)
        .value("EDS_FULL", irr::scene::EDS_FULL)
        .export_values()
        ;

    bp::enum_< irr::E_DEVICE_TYPE>("E_DEVICE_TYPE")
        .value("EIDT_WIN32", irr::EIDT_WIN32)
        .value("EIDT_WINCE", irr::EIDT_WINCE)
        .value("EIDT_X11", irr::EIDT_X11)
        .value("EIDT_OSX", irr::EIDT_OSX)
        .value("EIDT_SDL", irr::EIDT_SDL)
        .value("EIDT_FRAMEBUFFER", irr::EIDT_FRAMEBUFFER)
        .value("EIDT_CONSOLE", irr::EIDT_CONSOLE)
        .value("EIDT_BEST", irr::EIDT_BEST)
        .export_values()
        ;

    bp::enum_< irr::video::E_DRIVER_TYPE>("E_DRIVER_TYPE")
        .value("EDT_NULL", irr::video::EDT_NULL)
        .value("EDT_SOFTWARE", irr::video::EDT_SOFTWARE)
        .value("EDT_BURNINGSVIDEO", irr::video::EDT_BURNINGSVIDEO)
        .value("EDT_DIRECT3D8", irr::video::EDT_DIRECT3D8)
        .value("EDT_DIRECT3D9", irr::video::EDT_DIRECT3D9)
        .value("EDT_OPENGL", irr::video::EDT_OPENGL)
        .value("EDT_COUNT", irr::video::EDT_COUNT)
        .export_values()
        ;

    bp::enum_< irr::io::E_FILE_ARCHIVE_TYPE>("E_FILE_ARCHIVE_TYPE")
        .value("EFAT_ZIP", irr::io::EFAT_ZIP)
        .value("EFAT_GZIP", irr::io::EFAT_GZIP)
        .value("EFAT_FOLDER", irr::io::EFAT_FOLDER)
        .value("EFAT_PAK", irr::io::EFAT_PAK)
        .value("EFAT_NPK", irr::io::EFAT_NPK)
        .value("EFAT_TAR", irr::io::EFAT_TAR)
        .value("EFAT_UNKNOWN", irr::io::EFAT_UNKNOWN)
        .export_values()
        ;

    bp::enum_< irr::video::E_FOG_TYPE>("E_FOG_TYPE")
        .value("EFT_FOG_EXP", irr::video::EFT_FOG_EXP)
        .value("EFT_FOG_LINEAR", irr::video::EFT_FOG_LINEAR)
        .value("EFT_FOG_EXP2", irr::video::EFT_FOG_EXP2)
        .export_values()
        ;

    bp::enum_< irr::video::E_GEOMETRY_SHADER_TYPE>("E_GEOMETRY_SHADER_TYPE")
        .value("EGST_GS_4_0", irr::video::EGST_GS_4_0)
        .value("EGST_COUNT", irr::video::EGST_COUNT)
        .export_values()
        ;

    bp::enum_< irr::scene::E_HARDWARE_MAPPING>("E_HARDWARE_MAPPING")
        .value("EHM_NEVER", irr::scene::EHM_NEVER)
        .value("EHM_STATIC", irr::scene::EHM_STATIC)
        .value("EHM_DYNAMIC", irr::scene::EHM_DYNAMIC)
        .value("EHM_STREAM", irr::scene::EHM_STREAM)
        .export_values()
        ;

    bp::enum_< irr::video::E_INDEX_TYPE>("E_INDEX_TYPE")
        .value("EIT_16BIT", irr::video::EIT_16BIT)
        .value("EIT_32BIT", irr::video::EIT_32BIT)
        .export_values()
        ;

    bp::enum_< irr::scene::E_INTERPOLATION_MODE>("E_INTERPOLATION_MODE")
        .value("EIM_CONSTANT", irr::scene::EIM_CONSTANT)
        .value("EIM_LINEAR", irr::scene::EIM_LINEAR)
        .value("EIM_COUNT", irr::scene::EIM_COUNT)
        .export_values()
        ;

    bp::enum_< irr::scene::E_JOINT_UPDATE_ON_RENDER>("E_JOINT_UPDATE_ON_RENDER")
        .value("EJUOR_NONE", irr::scene::EJUOR_NONE)
        .value("EJUOR_READ", irr::scene::EJUOR_READ)
        .value("EJUOR_CONTROL", irr::scene::EJUOR_CONTROL)
        .export_values()
        ;

    bp::enum_< irr::video::E_LIGHT_TYPE>("E_LIGHT_TYPE")
        .value("ELT_POINT", irr::video::ELT_POINT)
        .value("ELT_SPOT", irr::video::ELT_SPOT)
        .value("ELT_DIRECTIONAL", irr::video::ELT_DIRECTIONAL)
        .export_values()
        ;

    bp::enum_< irr::video::E_LOST_RESSOURCE>("E_LOST_RESSOURCE")
        .value("ELR_DEVICE", irr::video::ELR_DEVICE)
        .value("ELR_TEXTURES", irr::video::ELR_TEXTURES)
        .value("ELR_RTTS", irr::video::ELR_RTTS)
        .value("ELR_HW_BUFFERS", irr::video::ELR_HW_BUFFERS)
        .export_values()
        ;

    bp::enum_< irr::video::E_MATERIAL_FLAG>("E_MATERIAL_FLAG")
        .value("EMF_WIREFRAME", irr::video::EMF_WIREFRAME)
        .value("EMF_POINTCLOUD", irr::video::EMF_POINTCLOUD)
        .value("EMF_GOURAUD_SHADING", irr::video::EMF_GOURAUD_SHADING)
        .value("EMF_LIGHTING", irr::video::EMF_LIGHTING)
        .value("EMF_ZBUFFER", irr::video::EMF_ZBUFFER)
        .value("EMF_ZWRITE_ENABLE", irr::video::EMF_ZWRITE_ENABLE)
        .value("EMF_BACK_FACE_CULLING", irr::video::EMF_BACK_FACE_CULLING)
        .value("EMF_FRONT_FACE_CULLING", irr::video::EMF_FRONT_FACE_CULLING)
        .value("EMF_BILINEAR_FILTER", irr::video::EMF_BILINEAR_FILTER)
        .value("EMF_TRILINEAR_FILTER", irr::video::EMF_TRILINEAR_FILTER)
        .value("EMF_ANISOTROPIC_FILTER", irr::video::EMF_ANISOTROPIC_FILTER)
        .value("EMF_FOG_ENABLE", irr::video::EMF_FOG_ENABLE)
        .value("EMF_NORMALIZE_NORMALS", irr::video::EMF_NORMALIZE_NORMALS)
        .value("EMF_TEXTURE_WRAP", irr::video::EMF_TEXTURE_WRAP)
        .value("EMF_ANTI_ALIASING", irr::video::EMF_ANTI_ALIASING)
        .value("EMF_COLOR_MASK", irr::video::EMF_COLOR_MASK)
        .value("EMF_COLOR_MATERIAL", irr::video::EMF_COLOR_MATERIAL)
        .export_values()
        ;

    bp::enum_< irr::video::E_MATERIAL_TYPE>("E_MATERIAL_TYPE")
        .value("EMT_SOLID", irr::video::EMT_SOLID)
        .value("EMT_SOLID_2_LAYER", irr::video::EMT_SOLID_2_LAYER)
        .value("EMT_LIGHTMAP", irr::video::EMT_LIGHTMAP)
        .value("EMT_LIGHTMAP_ADD", irr::video::EMT_LIGHTMAP_ADD)
        .value("EMT_LIGHTMAP_M2", irr::video::EMT_LIGHTMAP_M2)
        .value("EMT_LIGHTMAP_M4", irr::video::EMT_LIGHTMAP_M4)
        .value("EMT_LIGHTMAP_LIGHTING", irr::video::EMT_LIGHTMAP_LIGHTING)
        .value("EMT_LIGHTMAP_LIGHTING_M2", irr::video::EMT_LIGHTMAP_LIGHTING_M2)
        .value("EMT_LIGHTMAP_LIGHTING_M4", irr::video::EMT_LIGHTMAP_LIGHTING_M4)
        .value("EMT_DETAIL_MAP", irr::video::EMT_DETAIL_MAP)
        .value("EMT_SPHERE_MAP", irr::video::EMT_SPHERE_MAP)
        .value("EMT_REFLECTION_2_LAYER", irr::video::EMT_REFLECTION_2_LAYER)
        .value("EMT_TRANSPARENT_ADD_COLOR", irr::video::EMT_TRANSPARENT_ADD_COLOR)
        .value("EMT_TRANSPARENT_ALPHA_CHANNEL", irr::video::EMT_TRANSPARENT_ALPHA_CHANNEL)
        .value("EMT_TRANSPARENT_ALPHA_CHANNEL_REF", irr::video::EMT_TRANSPARENT_ALPHA_CHANNEL_REF)
        .value("EMT_TRANSPARENT_VERTEX_ALPHA", irr::video::EMT_TRANSPARENT_VERTEX_ALPHA)
        .value("EMT_TRANSPARENT_REFLECTION_2_LAYER", irr::video::EMT_TRANSPARENT_REFLECTION_2_LAYER)
        .value("EMT_NORMAL_MAP_SOLID", irr::video::EMT_NORMAL_MAP_SOLID)
        .value("EMT_NORMAL_MAP_TRANSPARENT_ADD_COLOR", irr::video::EMT_NORMAL_MAP_TRANSPARENT_ADD_COLOR)
        .value("EMT_NORMAL_MAP_TRANSPARENT_VERTEX_ALPHA", irr::video::EMT_NORMAL_MAP_TRANSPARENT_VERTEX_ALPHA)
        .value("EMT_PARALLAX_MAP_SOLID", irr::video::EMT_PARALLAX_MAP_SOLID)
        .value("EMT_PARALLAX_MAP_TRANSPARENT_ADD_COLOR", irr::video::EMT_PARALLAX_MAP_TRANSPARENT_ADD_COLOR)
        .value("EMT_PARALLAX_MAP_TRANSPARENT_VERTEX_ALPHA", irr::video::EMT_PARALLAX_MAP_TRANSPARENT_VERTEX_ALPHA)
        .value("EMT_ONETEXTURE_BLEND", irr::video::EMT_ONETEXTURE_BLEND)
        .value("EMT_FORCE_32BIT", irr::video::EMT_FORCE_32BIT)
        .export_values()
        ;

    bp::enum_< irr::scene::E_MESH_WRITER_FLAGS>("E_MESH_WRITER_FLAGS")
        .value("EMWF_NONE", irr::scene::EMWF_NONE)
        .value("EMWF_WRITE_LIGHTMAPS", irr::scene::EMWF_WRITE_LIGHTMAPS)
        .value("EMWF_WRITE_COMPRESSED", irr::scene::EMWF_WRITE_COMPRESSED)
        .value("EMWF_WRITE_BINARY", irr::scene::EMWF_WRITE_BINARY)
        .export_values()
        ;

    bp::enum_< irr::video::E_MODULATE_FUNC>("E_MODULATE_FUNC")
        .value("EMFN_MODULATE_1X", irr::video::EMFN_MODULATE_1X)
        .value("EMFN_MODULATE_2X", irr::video::EMFN_MODULATE_2X)
        .value("EMFN_MODULATE_4X", irr::video::EMFN_MODULATE_4X)
        .export_values()
        ;

    bp::enum_< irr::E_MOUSE_BUTTON_STATE_MASK>("E_MOUSE_BUTTON_STATE_MASK")
        .value("EMBSM_LEFT", irr::EMBSM_LEFT)
        .value("EMBSM_RIGHT", irr::EMBSM_RIGHT)
        .value("EMBSM_MIDDLE", irr::EMBSM_MIDDLE)
        .value("EMBSM_EXTRA1", irr::EMBSM_EXTRA1)
        .value("EMBSM_EXTRA2", irr::EMBSM_EXTRA2)
        .value("EMBSM_FORCE_32_BIT", irr::EMBSM_FORCE_32_BIT)
        .export_values()
        ;

    bp::enum_< irr::scene::E_PARTICLE_AFFECTOR_TYPE>("E_PARTICLE_AFFECTOR_TYPE")
        .value("EPAT_NONE", irr::scene::EPAT_NONE)
        .value("EPAT_ATTRACT", irr::scene::EPAT_ATTRACT)
        .value("EPAT_FADE_OUT", irr::scene::EPAT_FADE_OUT)
        .value("EPAT_GRAVITY", irr::scene::EPAT_GRAVITY)
        .value("EPAT_ROTATE", irr::scene::EPAT_ROTATE)
        .value("EPAT_SCALE", irr::scene::EPAT_SCALE)
        .value("EPAT_COUNT", irr::scene::EPAT_COUNT)
        .export_values()
        ;

    bp::enum_< irr::scene::E_PARTICLE_EMITTER_TYPE>("E_PARTICLE_EMITTER_TYPE")
        .value("EPET_POINT", irr::scene::EPET_POINT)
        .value("EPET_ANIMATED_MESH", irr::scene::EPET_ANIMATED_MESH)
        .value("EPET_BOX", irr::scene::EPET_BOX)
        .value("EPET_CYLINDER", irr::scene::EPET_CYLINDER)
        .value("EPET_MESH", irr::scene::EPET_MESH)
        .value("EPET_RING", irr::scene::EPET_RING)
        .value("EPET_SPHERE", irr::scene::EPET_SPHERE)
        .value("EPET_COUNT", irr::scene::EPET_COUNT)
        .export_values()
        ;

    bp::enum_< irr::video::E_PIXEL_SHADER_TYPE>("E_PIXEL_SHADER_TYPE")
        .value("EPST_PS_1_1", irr::video::EPST_PS_1_1)
        .value("EPST_PS_1_2", irr::video::EPST_PS_1_2)
        .value("EPST_PS_1_3", irr::video::EPST_PS_1_3)
        .value("EPST_PS_1_4", irr::video::EPST_PS_1_4)
        .value("EPST_PS_2_0", irr::video::EPST_PS_2_0)
        .value("EPST_PS_2_a", irr::video::EPST_PS_2_a)
        .value("EPST_PS_2_b", irr::video::EPST_PS_2_b)
        .value("EPST_PS_3_0", irr::video::EPST_PS_3_0)
        .value("EPST_PS_4_0", irr::video::EPST_PS_4_0)
        .value("EPST_PS_4_1", irr::video::EPST_PS_4_1)
        .value("EPST_PS_5_0", irr::video::EPST_PS_5_0)
        .value("EPST_COUNT", irr::video::EPST_COUNT)
        .export_values()
        ;

    bp::enum_< irr::scene::E_PRIMITIVE_TYPE>("E_PRIMITIVE_TYPE")
        .value("EPT_POINTS", irr::scene::EPT_POINTS)
        .value("EPT_LINE_STRIP", irr::scene::EPT_LINE_STRIP)
        .value("EPT_LINE_LOOP", irr::scene::EPT_LINE_LOOP)
        .value("EPT_LINES", irr::scene::EPT_LINES)
        .value("EPT_TRIANGLE_STRIP", irr::scene::EPT_TRIANGLE_STRIP)
        .value("EPT_TRIANGLE_FAN", irr::scene::EPT_TRIANGLE_FAN)
        .value("EPT_TRIANGLES", irr::scene::EPT_TRIANGLES)
        .value("EPT_QUAD_STRIP", irr::scene::EPT_QUAD_STRIP)
        .value("EPT_QUADS", irr::scene::EPT_QUADS)
        .value("EPT_POLYGON", irr::scene::EPT_POLYGON)
        .value("EPT_POINT_SPRITES", irr::scene::EPT_POINT_SPRITES)
        .export_values()
        ;

    bp::enum_< irr::video::E_RENDER_TARGET>("E_RENDER_TARGET")
        .value("ERT_FRAME_BUFFER", irr::video::ERT_FRAME_BUFFER)
        .value("ERT_RENDER_TEXTURE", irr::video::ERT_RENDER_TEXTURE)
        .value("ERT_MULTI_RENDER_TEXTURES", irr::video::ERT_MULTI_RENDER_TEXTURES)
        .value("ERT_STEREO_LEFT_BUFFER", irr::video::ERT_STEREO_LEFT_BUFFER)
        .value("ERT_STEREO_RIGHT_BUFFER", irr::video::ERT_STEREO_RIGHT_BUFFER)
        .value("ERT_STEREO_BOTH_BUFFERS", irr::video::ERT_STEREO_BOTH_BUFFERS)
        .value("ERT_AUX_BUFFER0", irr::video::ERT_AUX_BUFFER0)
        .value("ERT_AUX_BUFFER1", irr::video::ERT_AUX_BUFFER1)
        .value("ERT_AUX_BUFFER2", irr::video::ERT_AUX_BUFFER2)
        .value("ERT_AUX_BUFFER3", irr::video::ERT_AUX_BUFFER3)
        .value("ERT_AUX_BUFFER4", irr::video::ERT_AUX_BUFFER4)
        .export_values()
        ;

    bp::enum_< irr::scene::E_SCENE_NODE_RENDER_PASS>("E_SCENE_NODE_RENDER_PASS")
        .value("ESNRP_NONE", irr::scene::ESNRP_NONE)
        .value("ESNRP_CAMERA", irr::scene::ESNRP_CAMERA)
        .value("ESNRP_LIGHT", irr::scene::ESNRP_LIGHT)
        .value("ESNRP_SKY_BOX", irr::scene::ESNRP_SKY_BOX)
        .value("ESNRP_AUTOMATIC", irr::scene::ESNRP_AUTOMATIC)
        .value("ESNRP_SOLID", irr::scene::ESNRP_SOLID)
        .value("ESNRP_TRANSPARENT", irr::scene::ESNRP_TRANSPARENT)
        .value("ESNRP_TRANSPARENT_EFFECT", irr::scene::ESNRP_TRANSPARENT_EFFECT)
        .value("ESNRP_SHADOW", irr::scene::ESNRP_SHADOW)
        .export_values()
        ;

    bp::enum_< irr::scene::E_TERRAIN_PATCH_SIZE>("E_TERRAIN_PATCH_SIZE")
        .value("ETPS_9", irr::scene::ETPS_9)
        .value("ETPS_17", irr::scene::ETPS_17)
        .value("ETPS_33", irr::scene::ETPS_33)
        .value("ETPS_65", irr::scene::ETPS_65)
        .value("ETPS_129", irr::scene::ETPS_129)
        .export_values()
        ;

    bp::enum_< irr::video::E_TEXTURE_CLAMP>("E_TEXTURE_CLAMP")
        .value("ETC_REPEAT", irr::video::ETC_REPEAT)
        .value("ETC_CLAMP", irr::video::ETC_CLAMP)
        .value("ETC_CLAMP_TO_EDGE", irr::video::ETC_CLAMP_TO_EDGE)
        .value("ETC_CLAMP_TO_BORDER", irr::video::ETC_CLAMP_TO_BORDER)
        .value("ETC_MIRROR", irr::video::ETC_MIRROR)
        .value("ETC_MIRROR_CLAMP", irr::video::ETC_MIRROR_CLAMP)
        .value("ETC_MIRROR_CLAMP_TO_EDGE", irr::video::ETC_MIRROR_CLAMP_TO_EDGE)
        .value("ETC_MIRROR_CLAMP_TO_BORDER", irr::video::ETC_MIRROR_CLAMP_TO_BORDER)
        .export_values()
        ;

    bp::enum_< irr::video::E_TEXTURE_CREATION_FLAG>("E_TEXTURE_CREATION_FLAG")
        .value("ETCF_ALWAYS_16_BIT", irr::video::ETCF_ALWAYS_16_BIT)
        .value("ETCF_ALWAYS_32_BIT", irr::video::ETCF_ALWAYS_32_BIT)
        .value("ETCF_OPTIMIZED_FOR_QUALITY", irr::video::ETCF_OPTIMIZED_FOR_QUALITY)
        .value("ETCF_OPTIMIZED_FOR_SPEED", irr::video::ETCF_OPTIMIZED_FOR_SPEED)
        .value("ETCF_CREATE_MIP_MAPS", irr::video::ETCF_CREATE_MIP_MAPS)
        .value("ETCF_NO_ALPHA_CHANNEL", irr::video::ETCF_NO_ALPHA_CHANNEL)
        .value("ETCF_ALLOW_NON_POWER_2", irr::video::ETCF_ALLOW_NON_POWER_2)
        .value("ETCF_FORCE_32_BIT_DO_NOT_USE", irr::video::ETCF_FORCE_32_BIT_DO_NOT_USE)
        .export_values()
        ;

    bp::enum_< irr::video::E_TRANSFORMATION_STATE>("E_TRANSFORMATION_STATE")
        .value("ETS_VIEW", irr::video::ETS_VIEW)
        .value("ETS_WORLD", irr::video::ETS_WORLD)
        .value("ETS_PROJECTION", irr::video::ETS_PROJECTION)
        .value("ETS_TEXTURE_0", irr::video::ETS_TEXTURE_0)
        .value("ETS_TEXTURE_1", irr::video::ETS_TEXTURE_1)
        .value("ETS_TEXTURE_2", irr::video::ETS_TEXTURE_2)
        .value("ETS_TEXTURE_3", irr::video::ETS_TEXTURE_3)
        .value("ETS_COUNT", irr::video::ETS_COUNT)
        .export_values()
        ;

    bp::enum_< irr::video::E_VERTEX_SHADER_TYPE>("E_VERTEX_SHADER_TYPE")
        .value("EVST_VS_1_1", irr::video::EVST_VS_1_1)
        .value("EVST_VS_2_0", irr::video::EVST_VS_2_0)
        .value("EVST_VS_2_a", irr::video::EVST_VS_2_a)
        .value("EVST_VS_3_0", irr::video::EVST_VS_3_0)
        .value("EVST_VS_4_0", irr::video::EVST_VS_4_0)
        .value("EVST_VS_4_1", irr::video::EVST_VS_4_1)
        .value("EVST_VS_5_0", irr::video::EVST_VS_5_0)
        .value("EVST_COUNT", irr::video::EVST_COUNT)
        .export_values()
        ;

    bp::enum_< irr::video::E_VERTEX_TYPE>("E_VERTEX_TYPE")
        .value("EVT_STANDARD", irr::video::EVT_STANDARD)
        .value("EVT_2TCOORDS", irr::video::EVT_2TCOORDS)
        .value("EVT_TANGENTS", irr::video::EVT_TANGENTS)
        .export_values()
        ;

    bp::enum_< irr::video::E_VIDEO_DRIVER_FEATURE>("E_VIDEO_DRIVER_FEATURE")
        .value("EVDF_RENDER_TO_TARGET", irr::video::EVDF_RENDER_TO_TARGET)
        .value("EVDF_HARDWARE_TL", irr::video::EVDF_HARDWARE_TL)
        .value("EVDF_MULTITEXTURE", irr::video::EVDF_MULTITEXTURE)
        .value("EVDF_BILINEAR_FILTER", irr::video::EVDF_BILINEAR_FILTER)
        .value("EVDF_MIP_MAP", irr::video::EVDF_MIP_MAP)
        .value("EVDF_MIP_MAP_AUTO_UPDATE", irr::video::EVDF_MIP_MAP_AUTO_UPDATE)
        .value("EVDF_STENCIL_BUFFER", irr::video::EVDF_STENCIL_BUFFER)
        .value("EVDF_VERTEX_SHADER_1_1", irr::video::EVDF_VERTEX_SHADER_1_1)
        .value("EVDF_VERTEX_SHADER_2_0", irr::video::EVDF_VERTEX_SHADER_2_0)
        .value("EVDF_VERTEX_SHADER_3_0", irr::video::EVDF_VERTEX_SHADER_3_0)
        .value("EVDF_PIXEL_SHADER_1_1", irr::video::EVDF_PIXEL_SHADER_1_1)
        .value("EVDF_PIXEL_SHADER_1_2", irr::video::EVDF_PIXEL_SHADER_1_2)
        .value("EVDF_PIXEL_SHADER_1_3", irr::video::EVDF_PIXEL_SHADER_1_3)
        .value("EVDF_PIXEL_SHADER_1_4", irr::video::EVDF_PIXEL_SHADER_1_4)
        .value("EVDF_PIXEL_SHADER_2_0", irr::video::EVDF_PIXEL_SHADER_2_0)
        .value("EVDF_PIXEL_SHADER_3_0", irr::video::EVDF_PIXEL_SHADER_3_0)
        .value("EVDF_ARB_VERTEX_PROGRAM_1", irr::video::EVDF_ARB_VERTEX_PROGRAM_1)
        .value("EVDF_ARB_FRAGMENT_PROGRAM_1", irr::video::EVDF_ARB_FRAGMENT_PROGRAM_1)
        .value("EVDF_ARB_GLSL", irr::video::EVDF_ARB_GLSL)
        .value("EVDF_HLSL", irr::video::EVDF_HLSL)
        .value("EVDF_TEXTURE_NSQUARE", irr::video::EVDF_TEXTURE_NSQUARE)
        .value("EVDF_TEXTURE_NPOT", irr::video::EVDF_TEXTURE_NPOT)
        .value("EVDF_FRAMEBUFFER_OBJECT", irr::video::EVDF_FRAMEBUFFER_OBJECT)
        .value("EVDF_VERTEX_BUFFER_OBJECT", irr::video::EVDF_VERTEX_BUFFER_OBJECT)
        .value("EVDF_ALPHA_TO_COVERAGE", irr::video::EVDF_ALPHA_TO_COVERAGE)
        .value("EVDF_COLOR_MASK", irr::video::EVDF_COLOR_MASK)
        .value("EVDF_MULTIPLE_RENDER_TARGETS", irr::video::EVDF_MULTIPLE_RENDER_TARGETS)
        .value("EVDF_MRT_BLEND", irr::video::EVDF_MRT_BLEND)
        .value("EVDF_MRT_COLOR_MASK", irr::video::EVDF_MRT_COLOR_MASK)
        .value("EVDF_MRT_BLEND_FUNC", irr::video::EVDF_MRT_BLEND_FUNC)
        .value("EVDF_GEOMETRY_SHADER", irr::video::EVDF_GEOMETRY_SHADER)
        .value("EVDF_COUNT", irr::video::EVDF_COUNT)
        .export_values()
        ;

    bp::enum_< RM_MOVE_TYPE>("RM_MOVE_TYPE")
        .value("RM_MT_LINER", RM_MT_LINER)
        .value("RM_MT_LOG", RM_MT_LOG)
        .export_values()
        ;

    bp::enum_< irr::core::eAllocStrategy>("eAllocStrategy")
        .value("ALLOC_STRATEGY_SAFE", irr::core::ALLOC_STRATEGY_SAFE)
        .value("ALLOC_STRATEGY_DOUBLE", irr::core::ALLOC_STRATEGY_DOUBLE)
        .value("ALLOC_STRATEGY_SQRT", irr::core::ALLOC_STRATEGY_SQRT)
        .export_values()
        ;

    bp::enum_< irr::core::eLocaleID>("eLocaleID")
        .value("IRR_LOCALE_ANSI", irr::core::IRR_LOCALE_ANSI)
        .value("IRR_LOCALE_GERMAN", irr::core::IRR_LOCALE_GERMAN)
        .export_values()
        ;

    bp::enum_< irr::scene::eMD3Models>("eMD3Models")
        .value("EMD3_HEAD", irr::scene::EMD3_HEAD)
        .value("EMD3_UPPER", irr::scene::EMD3_UPPER)
        .value("EMD3_LOWER", irr::scene::EMD3_LOWER)
        .value("EMD3_WEAPON", irr::scene::EMD3_WEAPON)
        .value("EMD3_NUMMODELS", irr::scene::EMD3_NUMMODELS)
        .export_values()
        ;

    bp::enum_< irr::scene::quake3::eQ3MeshIndex>("eQ3MeshIndex")
        .value("E_Q3_MESH_GEOMETRY", irr::scene::quake3::E_Q3_MESH_GEOMETRY)
        .value("E_Q3_MESH_ITEMS", irr::scene::quake3::E_Q3_MESH_ITEMS)
        .value("E_Q3_MESH_BILLBOARD", irr::scene::quake3::E_Q3_MESH_BILLBOARD)
        .value("E_Q3_MESH_FOG", irr::scene::quake3::E_Q3_MESH_FOG)
        .value("E_Q3_MESH_UNRESOLVED", irr::scene::quake3::E_Q3_MESH_UNRESOLVED)
        .value("E_Q3_MESH_SIZE", irr::scene::quake3::E_Q3_MESH_SIZE)
        .export_values()
        ;

    bp::enum_< irr::scene::quake3::eQ3ModifierFunction>("eQ3ModifierFunction")
        .value("TCMOD", irr::scene::quake3::TCMOD)
        .value("DEFORMVERTEXES", irr::scene::quake3::DEFORMVERTEXES)
        .value("RGBGEN", irr::scene::quake3::RGBGEN)
        .value("TCGEN", irr::scene::quake3::TCGEN)
        .value("MAP", irr::scene::quake3::MAP)
        .value("ALPHAGEN", irr::scene::quake3::ALPHAGEN)
        .value("FUNCTION2", irr::scene::quake3::FUNCTION2)
        .value("SCROLL", irr::scene::quake3::SCROLL)
        .value("SCALE", irr::scene::quake3::SCALE)
        .value("ROTATE", irr::scene::quake3::ROTATE)
        .value("STRETCH", irr::scene::quake3::STRETCH)
        .value("TURBULENCE", irr::scene::quake3::TURBULENCE)
        .value("WAVE", irr::scene::quake3::WAVE)
        .value("IDENTITY", irr::scene::quake3::IDENTITY)
        .value("VERTEX", irr::scene::quake3::VERTEX)
        .value("TEXTURE", irr::scene::quake3::TEXTURE)
        .value("LIGHTMAP", irr::scene::quake3::LIGHTMAP)
        .value("ENVIRONMENT", irr::scene::quake3::ENVIRONMENT)
        .value("DOLLAR_LIGHTMAP", irr::scene::quake3::DOLLAR_LIGHTMAP)
        .value("BULGE", irr::scene::quake3::BULGE)
        .value("AUTOSPRITE", irr::scene::quake3::AUTOSPRITE)
        .value("AUTOSPRITE2", irr::scene::quake3::AUTOSPRITE2)
        .value("TRANSFORM", irr::scene::quake3::TRANSFORM)
        .value("EXACTVERTEX", irr::scene::quake3::EXACTVERTEX)
        .value("CONSTANT", irr::scene::quake3::CONSTANT)
        .value("LIGHTINGSPECULAR", irr::scene::quake3::LIGHTINGSPECULAR)
        .value("MOVE", irr::scene::quake3::MOVE)
        .value("NORMAL", irr::scene::quake3::NORMAL)
        .value("IDENTITYLIGHTING", irr::scene::quake3::IDENTITYLIGHTING)
        .value("WAVE_MODIFIER_FUNCTION", irr::scene::quake3::WAVE_MODIFIER_FUNCTION)
        .value("SINUS", irr::scene::quake3::SINUS)
        .value("COSINUS", irr::scene::quake3::COSINUS)
        .value("SQUARE", irr::scene::quake3::SQUARE)
        .value("TRIANGLE", irr::scene::quake3::TRIANGLE)
        .value("SAWTOOTH", irr::scene::quake3::SAWTOOTH)
        .value("SAWTOOTH_INVERSE", irr::scene::quake3::SAWTOOTH_INVERSE)
        .value("NOISE", irr::scene::quake3::NOISE)
        .value("UNKNOWN", irr::scene::quake3::UNKNOWN)
        .export_values()
        ;

    { //::irr::core::dimension2d< float >
        typedef bp::class_< irr::core::dimension2d< float > > dimension2df_exposer_t;
        dimension2df_exposer_t dimension2df_exposer = dimension2df_exposer_t( "dimension2df", bp::init< >() );
        bp::scope dimension2df_scope( dimension2df_exposer );
        dimension2df_exposer.def( bp::init< float const &, float const & >(( bp::arg("width"), bp::arg("height") )) );
        dimension2df_exposer.def( bp::init< irr::core::vector2d< float > const & >(( bp::arg("other") )) );
        bp::implicitly_convertible< irr::core::vector2d< float > const &, irr::core::dimension2d< float > >();
        { //::irr::core::dimension2d< float >::getArea
        
            typedef irr::core::dimension2d< float > exported_class_t;
            typedef float ( exported_class_t::*getArea_function_type )(  ) const;
            
            dimension2df_exposer.def( 
                "getArea"
                , getArea_function_type( &::irr::core::dimension2d< float >::getArea ) );
        
        }
        { //::irr::core::dimension2d< float >::getInterpolated
        
            typedef irr::core::dimension2d< float > exported_class_t;
            typedef ::irr::core::dimension2d< float > ( exported_class_t::*getInterpolated_function_type )( ::irr::core::dimension2d< float > const &,::irr::f32 ) const;
            
            dimension2df_exposer.def( 
                "getInterpolated"
                , getInterpolated_function_type( &::irr::core::dimension2d< float >::getInterpolated )
                , ( bp::arg("other"), bp::arg("d") ) );
        
        }
        { //::irr::core::dimension2d< float >::getOptimalSize
        
            typedef irr::core::dimension2d< float > exported_class_t;
            typedef ::irr::core::dimension2d< float > ( exported_class_t::*getOptimalSize_function_type )( bool,bool,bool,::irr::u32 ) const;
            
            dimension2df_exposer.def( 
                "getOptimalSize"
                , getOptimalSize_function_type( &::irr::core::dimension2d< float >::getOptimalSize )
                , ( bp::arg("requirePowerOfTwo")=(bool)(true), bp::arg("requireSquare")=(bool)(false), bp::arg("larger")=(bool)(true), bp::arg("maxValue")=(::irr::u32)(0) ) );
        
        }
        dimension2df_exposer.def( bp::self != bp::self );
        dimension2df_exposer.def( bp::self != bp::other< irr::core::vector2d< float > >() );
        dimension2df_exposer.def( bp::self * bp::other< float >() );
        dimension2df_exposer.def( bp::self *= bp::other< float >() );
        dimension2df_exposer.def( bp::self + bp::self );
        dimension2df_exposer.def( bp::self += bp::self );
        dimension2df_exposer.def( bp::self -= bp::self );
        dimension2df_exposer.def( bp::self / bp::other< float >() );
        dimension2df_exposer.def( bp::self /= bp::other< float >() );
        dimension2df_exposer.def( bp::self == bp::self );
        dimension2df_exposer.def( bp::self == bp::other< irr::core::vector2d< float > >() );
        { //::irr::core::dimension2d< float >::set
        
            typedef irr::core::dimension2d< float > exported_class_t;
            typedef ::irr::core::dimension2d< float > & ( exported_class_t::*set_function_type )( float const &,float const & ) ;
            
            dimension2df_exposer.def( 
                "set"
                , set_function_type( &::irr::core::dimension2d< float >::set )
                , ( bp::arg("width"), bp::arg("height") )
                    /* undefined call policies */ );
        
        }
        dimension2df_exposer.def_readwrite( "Height", &irr::core::dimension2d< float >::Height );
        dimension2df_exposer.def_readwrite( "Width", &irr::core::dimension2d< float >::Width );
    }

    { //::irr::core::vector3d< float >
        typedef bp::class_< irr::core::vector3d< float > > vector3df_exposer_t;
        vector3df_exposer_t vector3df_exposer = vector3df_exposer_t( "vector3df", bp::init< >() );
        bp::scope vector3df_scope( vector3df_exposer );
        vector3df_exposer.def( bp::init< float, float, float >(( bp::arg("nx"), bp::arg("ny"), bp::arg("nz") )) );
        vector3df_exposer.def( bp::init< float >(( bp::arg("n") )) );
        bp::implicitly_convertible< float, irr::core::vector3d< float > >();
        vector3df_exposer.def( bp::init< irr::core::vector3d< float > const & >(( bp::arg("other") )) );
        { //::irr::core::vector3d< float >::crossProduct
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef ::irr::core::vector3d< float > ( exported_class_t::*crossProduct_function_type )( ::irr::core::vector3d< float > const & ) const;
            
            vector3df_exposer.def( 
                "crossProduct"
                , crossProduct_function_type( &::irr::core::vector3d< float >::crossProduct )
                , ( bp::arg("p") ) );
        
        }
        { //::irr::core::vector3d< float >::dotProduct
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef float ( exported_class_t::*dotProduct_function_type )( ::irr::core::vector3d< float > const & ) const;
            
            vector3df_exposer.def( 
                "dotProduct"
                , dotProduct_function_type( &::irr::core::vector3d< float >::dotProduct )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector3d< float >::equals
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef bool ( exported_class_t::*equals_function_type )( ::irr::core::vector3d< float > const &,float const ) const;
            
            vector3df_exposer.def( 
                "equals"
                , equals_function_type( &::irr::core::vector3d< float >::equals )
                , ( bp::arg("other"), bp::arg("tolerance")=( irr::core::ROUNDING_ERROR_f32 ) ) );
        
        }
        { //::irr::core::vector3d< float >::getAs4Values
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef void ( exported_class_t::*getAs4Values_function_type )( float * ) const;
            
            vector3df_exposer.def( 
                "getAs4Values"
                , getAs4Values_function_type( &::irr::core::vector3d< float >::getAs4Values )
                , ( bp::arg("array") ) );
        
        }
        { //::irr::core::vector3d< float >::getDistanceFrom
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef float ( exported_class_t::*getDistanceFrom_function_type )( ::irr::core::vector3d< float > const & ) const;
            
            vector3df_exposer.def( 
                "getDistanceFrom"
                , getDistanceFrom_function_type( &::irr::core::vector3d< float >::getDistanceFrom )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector3d< float >::getDistanceFromSQ
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef float ( exported_class_t::*getDistanceFromSQ_function_type )( ::irr::core::vector3d< float > const & ) const;
            
            vector3df_exposer.def( 
                "getDistanceFromSQ"
                , getDistanceFromSQ_function_type( &::irr::core::vector3d< float >::getDistanceFromSQ )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector3d< float >::getHorizontalAngle
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef ::irr::core::vector3d< float > ( exported_class_t::*getHorizontalAngle_function_type )(  ) const;
            
            vector3df_exposer.def( 
                "getHorizontalAngle"
                , getHorizontalAngle_function_type( &::irr::core::vector3d< float >::getHorizontalAngle ) );
        
        }
        { //::irr::core::vector3d< float >::getInterpolated
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef ::irr::core::vector3d< float > ( exported_class_t::*getInterpolated_function_type )( ::irr::core::vector3d< float > const &,::irr::f64 ) const;
            
            vector3df_exposer.def( 
                "getInterpolated"
                , getInterpolated_function_type( &::irr::core::vector3d< float >::getInterpolated )
                , ( bp::arg("other"), bp::arg("d") ) );
        
        }
        { //::irr::core::vector3d< float >::getInterpolated_quadratic
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef ::irr::core::vector3d< float > ( exported_class_t::*getInterpolated_quadratic_function_type )( ::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const &,::irr::f64 ) const;
            
            vector3df_exposer.def( 
                "getInterpolated_quadratic"
                , getInterpolated_quadratic_function_type( &::irr::core::vector3d< float >::getInterpolated_quadratic )
                , ( bp::arg("v2"), bp::arg("v3"), bp::arg("d") ) );
        
        }
        { //::irr::core::vector3d< float >::getLength
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef float ( exported_class_t::*getLength_function_type )(  ) const;
            
            vector3df_exposer.def( 
                "getLength"
                , getLength_function_type( &::irr::core::vector3d< float >::getLength ) );
        
        }
        { //::irr::core::vector3d< float >::getLengthSQ
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef float ( exported_class_t::*getLengthSQ_function_type )(  ) const;
            
            vector3df_exposer.def( 
                "getLengthSQ"
                , getLengthSQ_function_type( &::irr::core::vector3d< float >::getLengthSQ ) );
        
        }
        { //::irr::core::vector3d< float >::getSphericalCoordinateAngles
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef ::irr::core::vector3d< float > ( exported_class_t::*getSphericalCoordinateAngles_function_type )(  ) ;
            
            vector3df_exposer.def( 
                "getSphericalCoordinateAngles"
                , getSphericalCoordinateAngles_function_type( &::irr::core::vector3d< float >::getSphericalCoordinateAngles ) );
        
        }
        { //::irr::core::vector3d< float >::interpolate
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef ::irr::core::vector3d< float > & ( exported_class_t::*interpolate_function_type )( ::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const &,::irr::f64 ) ;
            
            vector3df_exposer.def( 
                "interpolate"
                , interpolate_function_type( &::irr::core::vector3d< float >::interpolate )
                , ( bp::arg("a"), bp::arg("b"), bp::arg("d") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector3d< float >::invert
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef ::irr::core::vector3d< float > & ( exported_class_t::*invert_function_type )(  ) ;
            
            vector3df_exposer.def( 
                "invert"
                , invert_function_type( &::irr::core::vector3d< float >::invert )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector3d< float >::isBetweenPoints
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef bool ( exported_class_t::*isBetweenPoints_function_type )( ::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const & ) const;
            
            vector3df_exposer.def( 
                "isBetweenPoints"
                , isBetweenPoints_function_type( &::irr::core::vector3d< float >::isBetweenPoints )
                , ( bp::arg("begin"), bp::arg("end") ) );
        
        }
        { //::irr::core::vector3d< float >::normalize
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef ::irr::core::vector3d< float > & ( exported_class_t::*normalize_function_type )(  ) ;
            
            vector3df_exposer.def( 
                "normalize"
                , normalize_function_type( &::irr::core::vector3d< float >::normalize )
                    /* undefined call policies */ );
        
        }
        vector3df_exposer.def( bp::self != bp::self );
        vector3df_exposer.def( bp::self * bp::self );
        vector3df_exposer.def( bp::self * bp::other< float >() );
        vector3df_exposer.def( bp::self *= bp::self );
        vector3df_exposer.def( bp::self *= bp::other< float >() );
        vector3df_exposer.def( bp::self + bp::self );
        vector3df_exposer.def( bp::self + bp::other< float >() );
        vector3df_exposer.def( bp::self += bp::self );
        vector3df_exposer.def( bp::self += bp::other< float >() );
        vector3df_exposer.def( -bp::self );
        vector3df_exposer.def( bp::self - bp::self );
        vector3df_exposer.def( bp::self - bp::other< float >() );
        vector3df_exposer.def( bp::self -= bp::self );
        vector3df_exposer.def( bp::self -= bp::other< float >() );
        vector3df_exposer.def( bp::self / bp::self );
        vector3df_exposer.def( bp::self / bp::other< float >() );
        vector3df_exposer.def( bp::self /= bp::self );
        vector3df_exposer.def( bp::self /= bp::other< float >() );
        vector3df_exposer.def( bp::self < bp::self );
        vector3df_exposer.def( bp::self <= bp::self );
        { //::irr::core::vector3d< float >::operator=
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef ::irr::core::vector3d< float > & ( exported_class_t::*assign_function_type )( ::irr::core::vector3d< float > const & ) ;
            
            vector3df_exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::vector3d< float >::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        vector3df_exposer.def( bp::self == bp::self );
        vector3df_exposer.def( bp::self > bp::self );
        vector3df_exposer.def( bp::self >= bp::self );
        { //::irr::core::vector3d< float >::rotateXYBy
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef void ( exported_class_t::*rotateXYBy_function_type )( ::irr::f64,::irr::core::vector3d< float > const & ) ;
            
            vector3df_exposer.def( 
                "rotateXYBy"
                , rotateXYBy_function_type( &::irr::core::vector3d< float >::rotateXYBy )
                , ( bp::arg("degrees"), bp::arg("center")=irr::core::vector3d<T>() ) );
        
        }
        { //::irr::core::vector3d< float >::rotateXZBy
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef void ( exported_class_t::*rotateXZBy_function_type )( ::irr::f64,::irr::core::vector3d< float > const & ) ;
            
            vector3df_exposer.def( 
                "rotateXZBy"
                , rotateXZBy_function_type( &::irr::core::vector3d< float >::rotateXZBy )
                , ( bp::arg("degrees"), bp::arg("center")=irr::core::vector3d<T>() ) );
        
        }
        { //::irr::core::vector3d< float >::rotateYZBy
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef void ( exported_class_t::*rotateYZBy_function_type )( ::irr::f64,::irr::core::vector3d< float > const & ) ;
            
            vector3df_exposer.def( 
                "rotateYZBy"
                , rotateYZBy_function_type( &::irr::core::vector3d< float >::rotateYZBy )
                , ( bp::arg("degrees"), bp::arg("center")=irr::core::vector3d<T>() ) );
        
        }
        { //::irr::core::vector3d< float >::rotationToDirection
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef ::irr::core::vector3d< float > ( exported_class_t::*rotationToDirection_function_type )( ::irr::core::vector3d< float > const & ) const;
            
            vector3df_exposer.def( 
                "rotationToDirection"
                , rotationToDirection_function_type( &::irr::core::vector3d< float >::rotationToDirection )
                , ( bp::arg("forwards")=irr::core::vector3d<T>(0, 0, 1) ) );
        
        }
        { //::irr::core::vector3d< float >::set
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef ::irr::core::vector3d< float > & ( exported_class_t::*set_function_type )( float const,float const,float const ) ;
            
            vector3df_exposer.def( 
                "set"
                , set_function_type( &::irr::core::vector3d< float >::set )
                , ( bp::arg("nx"), bp::arg("ny"), bp::arg("nz") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector3d< float >::set
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef ::irr::core::vector3d< float > & ( exported_class_t::*set_function_type )( ::irr::core::vector3d< float > const & ) ;
            
            vector3df_exposer.def( 
                "set"
                , set_function_type( &::irr::core::vector3d< float >::set )
                , ( bp::arg("p") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector3d< float >::setLength
        
            typedef irr::core::vector3d< float > exported_class_t;
            typedef ::irr::core::vector3d< float > & ( exported_class_t::*setLength_function_type )( float ) ;
            
            vector3df_exposer.def( 
                "setLength"
                , setLength_function_type( &::irr::core::vector3d< float >::setLength )
                , ( bp::arg("newlength") )
                    /* undefined call policies */ );
        
        }
        vector3df_exposer.def_readwrite( "X", &irr::core::vector3d< float >::X );
        vector3df_exposer.def_readwrite( "Y", &irr::core::vector3d< float >::Y );
        vector3df_exposer.def_readwrite( "Z", &irr::core::vector3d< float >::Z );
    }

    bp::class_< IReferenceCounted_wrapper >( "IReferenceCounted", bp::init< >() )    
        .def( 
            "drop"
            , (bool ( ::irr::IReferenceCounted::* )(  ) const)( &::irr::IReferenceCounted::drop ) )    
        .def( 
            "getDebugName"
            , (::irr::c8 const * ( ::irr::IReferenceCounted::* )(  ) const)( &::irr::IReferenceCounted::getDebugName ) )    
        .def( 
            "getReferenceCount"
            , (::irr::s32 ( ::irr::IReferenceCounted::* )(  ) const)( &::irr::IReferenceCounted::getReferenceCount ) )    
        .def( 
            "grab"
            , (void ( ::irr::IReferenceCounted::* )(  ) const)( &::irr::IReferenceCounted::grab ) )    
        .def( 
            "setDebugName"
            , (void ( IReferenceCounted_wrapper::* )( ::irr::c8 const * ) )(&IReferenceCounted_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< irr::io::SAttributeReadWriteOptions >( "SAttributeReadWriteOptions", bp::init< >() )    
        .def_readwrite( "Flags", &irr::io::SAttributeReadWriteOptions::Flags );

    bp::class_< IAttributeExchangingObject_wrapper, bp::bases< irr::IReferenceCounted > >( "IAttributeExchangingObject" )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( IAttributeExchangingObject_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IAttributeExchangingObject_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( IAttributeExchangingObject_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IAttributeExchangingObject_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IAttributeExchangingObject_wrapper::* )( ::irr::c8 const * ) )(&IAttributeExchangingObject_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< irr::SKeyMap >( "SKeyMap" )    
        .def_readwrite( "Action", &irr::SKeyMap::Action )    
        .def_readwrite( "KeyCode", &irr::SKeyMap::KeyCode );

    { //::irr::core::dimension2d< unsigned int >
        typedef bp::class_< irr::core::dimension2d< unsigned int > > dimension2du_exposer_t;
        dimension2du_exposer_t dimension2du_exposer = dimension2du_exposer_t( "dimension2du", bp::init< >() );
        bp::scope dimension2du_scope( dimension2du_exposer );
        dimension2du_exposer.def( bp::init< unsigned int const &, unsigned int const & >(( bp::arg("width"), bp::arg("height") )) );
        dimension2du_exposer.def( bp::init< irr::core::vector2d< unsigned int > const & >(( bp::arg("other") )) );
        bp::implicitly_convertible< irr::core::vector2d< unsigned int > const &, irr::core::dimension2d< unsigned int > >();
        { //::irr::core::dimension2d< unsigned int >::getArea
        
            typedef irr::core::dimension2d< unsigned int > exported_class_t;
            typedef unsigned int ( exported_class_t::*getArea_function_type )(  ) const;
            
            dimension2du_exposer.def( 
                "getArea"
                , getArea_function_type( &::irr::core::dimension2d< unsigned int >::getArea ) );
        
        }
        { //::irr::core::dimension2d< unsigned int >::getInterpolated
        
            typedef irr::core::dimension2d< unsigned int > exported_class_t;
            typedef ::irr::core::dimension2d< unsigned int > ( exported_class_t::*getInterpolated_function_type )( ::irr::core::dimension2d< unsigned int > const &,::irr::f32 ) const;
            
            dimension2du_exposer.def( 
                "getInterpolated"
                , getInterpolated_function_type( &::irr::core::dimension2d< unsigned int >::getInterpolated )
                , ( bp::arg("other"), bp::arg("d") ) );
        
        }
        { //::irr::core::dimension2d< unsigned int >::getOptimalSize
        
            typedef irr::core::dimension2d< unsigned int > exported_class_t;
            typedef ::irr::core::dimension2d< unsigned int > ( exported_class_t::*getOptimalSize_function_type )( bool,bool,bool,::irr::u32 ) const;
            
            dimension2du_exposer.def( 
                "getOptimalSize"
                , getOptimalSize_function_type( &::irr::core::dimension2d< unsigned int >::getOptimalSize )
                , ( bp::arg("requirePowerOfTwo")=(bool)(true), bp::arg("requireSquare")=(bool)(false), bp::arg("larger")=(bool)(true), bp::arg("maxValue")=(::irr::u32)(0) ) );
        
        }
        dimension2du_exposer.def( bp::self != bp::self );
        dimension2du_exposer.def( bp::self != bp::other< irr::core::vector2d< unsigned int > >() );
        dimension2du_exposer.def( bp::self * bp::other< unsigned int >() );
        dimension2du_exposer.def( bp::self *= bp::other< unsigned int >() );
        dimension2du_exposer.def( bp::self + bp::self );
        dimension2du_exposer.def( bp::self += bp::self );
        dimension2du_exposer.def( bp::self -= bp::self );
        dimension2du_exposer.def( bp::self / bp::other< unsigned int >() );
        dimension2du_exposer.def( bp::self /= bp::other< unsigned int >() );
        dimension2du_exposer.def( bp::self == bp::self );
        dimension2du_exposer.def( bp::self == bp::other< irr::core::vector2d< unsigned int > >() );
        { //::irr::core::dimension2d< unsigned int >::set
        
            typedef irr::core::dimension2d< unsigned int > exported_class_t;
            typedef ::irr::core::dimension2d< unsigned int > & ( exported_class_t::*set_function_type )( unsigned int const &,unsigned int const & ) ;
            
            dimension2du_exposer.def( 
                "set"
                , set_function_type( &::irr::core::dimension2d< unsigned int >::set )
                , ( bp::arg("width"), bp::arg("height") )
                    /* undefined call policies */ );
        
        }
        dimension2du_exposer.def_readwrite( "Height", &irr::core::dimension2d< unsigned int >::Height );
        dimension2du_exposer.def_readwrite( "Width", &irr::core::dimension2d< unsigned int >::Width );
    }

    bp::class_< ISceneUserDataSerializer_wrapper, boost::noncopyable >( "ISceneUserDataSerializer" )    
        .def( 
            "OnCreateNode"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneUserDataSerializer::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneUserDataSerializer::OnCreateNode) )
            , ( bp::arg("node") ) )    
        .def( 
            "OnReadUserData"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneUserDataSerializer::* )( ::irr::scene::ISceneNode *,::irr::io::IAttributes * ) )(&::irr::scene::ISceneUserDataSerializer::OnReadUserData) )
            , ( bp::arg("forSceneNode"), bp::arg("userData") ) )    
        .def( 
            "createUserData"
            , bp::pure_virtual( (::irr::io::IAttributes * ( ::irr::scene::ISceneUserDataSerializer::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneUserDataSerializer::createUserData) )
            , ( bp::arg("forSceneNode") )
                /* undefined call policies */ );

    { //::irr::video::SColor
        typedef bp::class_< irr::video::SColor > SColor_exposer_t;
        SColor_exposer_t SColor_exposer = SColor_exposer_t( "SColor", bp::init< >() );
        bp::scope SColor_scope( SColor_exposer );
        SColor_exposer.def( bp::init< irr::u32, irr::u32, irr::u32, irr::u32 >(( bp::arg("a"), bp::arg("r"), bp::arg("g"), bp::arg("b") )) );
        SColor_exposer.def( bp::init< irr::u32 >(( bp::arg("clr") )) );
        bp::implicitly_convertible< irr::u32, irr::video::SColor >();
        { //::irr::video::SColor::getAlpha
        
            typedef ::irr::u32 ( ::irr::video::SColor::*getAlpha_function_type )(  ) const;
            
            SColor_exposer.def( 
                "getAlpha"
                , getAlpha_function_type( &::irr::video::SColor::getAlpha ) );
        
        }
        { //::irr::video::SColor::getAverage
        
            typedef ::irr::u32 ( ::irr::video::SColor::*getAverage_function_type )(  ) const;
            
            SColor_exposer.def( 
                "getAverage"
                , getAverage_function_type( &::irr::video::SColor::getAverage ) );
        
        }
        { //::irr::video::SColor::getBlue
        
            typedef ::irr::u32 ( ::irr::video::SColor::*getBlue_function_type )(  ) const;
            
            SColor_exposer.def( 
                "getBlue"
                , getBlue_function_type( &::irr::video::SColor::getBlue ) );
        
        }
        { //::irr::video::SColor::getGreen
        
            typedef ::irr::u32 ( ::irr::video::SColor::*getGreen_function_type )(  ) const;
            
            SColor_exposer.def( 
                "getGreen"
                , getGreen_function_type( &::irr::video::SColor::getGreen ) );
        
        }
        { //::irr::video::SColor::getInterpolated
        
            typedef ::irr::video::SColor ( ::irr::video::SColor::*getInterpolated_function_type )( ::irr::video::SColor const &,::irr::f32 ) const;
            
            SColor_exposer.def( 
                "getInterpolated"
                , getInterpolated_function_type( &::irr::video::SColor::getInterpolated )
                , ( bp::arg("other"), bp::arg("d") ) );
        
        }
        { //::irr::video::SColor::getInterpolated_quadratic
        
            typedef ::irr::video::SColor ( ::irr::video::SColor::*getInterpolated_quadratic_function_type )( ::irr::video::SColor const &,::irr::video::SColor const &,::irr::f32 ) const;
            
            SColor_exposer.def( 
                "getInterpolated_quadratic"
                , getInterpolated_quadratic_function_type( &::irr::video::SColor::getInterpolated_quadratic )
                , ( bp::arg("c1"), bp::arg("c2"), bp::arg("d") ) );
        
        }
        { //::irr::video::SColor::getLightness
        
            typedef ::irr::f32 ( ::irr::video::SColor::*getLightness_function_type )(  ) const;
            
            SColor_exposer.def( 
                "getLightness"
                , getLightness_function_type( &::irr::video::SColor::getLightness ) );
        
        }
        { //::irr::video::SColor::getLuminance
        
            typedef ::irr::f32 ( ::irr::video::SColor::*getLuminance_function_type )(  ) const;
            
            SColor_exposer.def( 
                "getLuminance"
                , getLuminance_function_type( &::irr::video::SColor::getLuminance ) );
        
        }
        { //::irr::video::SColor::getRed
        
            typedef ::irr::u32 ( ::irr::video::SColor::*getRed_function_type )(  ) const;
            
            SColor_exposer.def( 
                "getRed"
                , getRed_function_type( &::irr::video::SColor::getRed ) );
        
        }
        SColor_exposer.def( bp::self != bp::self );
        SColor_exposer.def( bp::self + bp::self );
        SColor_exposer.def( bp::self < bp::self );
        SColor_exposer.def( bp::self == bp::self );
        { //::irr::video::SColor::set
        
            typedef void ( ::irr::video::SColor::*set_function_type )( ::irr::u32,::irr::u32,::irr::u32,::irr::u32 ) ;
            
            SColor_exposer.def( 
                "set"
                , set_function_type( &::irr::video::SColor::set )
                , ( bp::arg("a"), bp::arg("r"), bp::arg("g"), bp::arg("b") ) );
        
        }
        { //::irr::video::SColor::set
        
            typedef void ( ::irr::video::SColor::*set_function_type )( ::irr::u32 ) ;
            
            SColor_exposer.def( 
                "set"
                , set_function_type( &::irr::video::SColor::set )
                , ( bp::arg("col") ) );
        
        }
        { //::irr::video::SColor::setAlpha
        
            typedef void ( ::irr::video::SColor::*setAlpha_function_type )( ::irr::u32 ) ;
            
            SColor_exposer.def( 
                "setAlpha"
                , setAlpha_function_type( &::irr::video::SColor::setAlpha )
                , ( bp::arg("a") ) );
        
        }
        { //::irr::video::SColor::setBlue
        
            typedef void ( ::irr::video::SColor::*setBlue_function_type )( ::irr::u32 ) ;
            
            SColor_exposer.def( 
                "setBlue"
                , setBlue_function_type( &::irr::video::SColor::setBlue )
                , ( bp::arg("b") ) );
        
        }
        { //::irr::video::SColor::setGreen
        
            typedef void ( ::irr::video::SColor::*setGreen_function_type )( ::irr::u32 ) ;
            
            SColor_exposer.def( 
                "setGreen"
                , setGreen_function_type( &::irr::video::SColor::setGreen )
                , ( bp::arg("g") ) );
        
        }
        { //::irr::video::SColor::setRed
        
            typedef void ( ::irr::video::SColor::*setRed_function_type )( ::irr::u32 ) ;
            
            SColor_exposer.def( 
                "setRed"
                , setRed_function_type( &::irr::video::SColor::setRed )
                , ( bp::arg("r") ) );
        
        }
        { //::irr::video::SColor::toA1R5G5B5
        
            typedef ::irr::u16 ( ::irr::video::SColor::*toA1R5G5B5_function_type )(  ) const;
            
            SColor_exposer.def( 
                "toA1R5G5B5"
                , toA1R5G5B5_function_type( &::irr::video::SColor::toA1R5G5B5 ) );
        
        }
        { //::irr::video::SColor::toOpenGLColor
        
            typedef void ( ::irr::video::SColor::*toOpenGLColor_function_type )( ::irr::u8 * ) const;
            
            SColor_exposer.def( 
                "toOpenGLColor"
                , toOpenGLColor_function_type( &::irr::video::SColor::toOpenGLColor )
                , ( bp::arg("dest") ) );
        
        }
        SColor_exposer.def_readwrite( "color", &irr::video::SColor::color );
    }

    { //::irr::video::SColorf
        typedef bp::class_< irr::video::SColorf > SColorf_exposer_t;
        SColorf_exposer_t SColorf_exposer = SColorf_exposer_t( "SColorf", bp::init< >() );
        bp::scope SColorf_scope( SColorf_exposer );
        SColorf_exposer.def( bp::init< irr::f32, irr::f32, irr::f32, bp::optional< irr::f32 > >(( bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a")=1.0e+0f )) );
        SColorf_exposer.def( bp::init< irr::video::SColor >(( bp::arg("c") )) );
        bp::implicitly_convertible< irr::video::SColor, irr::video::SColorf >();
        { //::irr::video::SColorf::getAlpha
        
            typedef ::irr::f32 ( ::irr::video::SColorf::*getAlpha_function_type )(  ) const;
            
            SColorf_exposer.def( 
                "getAlpha"
                , getAlpha_function_type( &::irr::video::SColorf::getAlpha ) );
        
        }
        { //::irr::video::SColorf::getBlue
        
            typedef ::irr::f32 ( ::irr::video::SColorf::*getBlue_function_type )(  ) const;
            
            SColorf_exposer.def( 
                "getBlue"
                , getBlue_function_type( &::irr::video::SColorf::getBlue ) );
        
        }
        { //::irr::video::SColorf::getGreen
        
            typedef ::irr::f32 ( ::irr::video::SColorf::*getGreen_function_type )(  ) const;
            
            SColorf_exposer.def( 
                "getGreen"
                , getGreen_function_type( &::irr::video::SColorf::getGreen ) );
        
        }
        { //::irr::video::SColorf::getInterpolated
        
            typedef ::irr::video::SColorf ( ::irr::video::SColorf::*getInterpolated_function_type )( ::irr::video::SColorf const &,::irr::f32 ) const;
            
            SColorf_exposer.def( 
                "getInterpolated"
                , getInterpolated_function_type( &::irr::video::SColorf::getInterpolated )
                , ( bp::arg("other"), bp::arg("d") ) );
        
        }
        { //::irr::video::SColorf::getInterpolated_quadratic
        
            typedef ::irr::video::SColorf ( ::irr::video::SColorf::*getInterpolated_quadratic_function_type )( ::irr::video::SColorf const &,::irr::video::SColorf const &,::irr::f32 ) const;
            
            SColorf_exposer.def( 
                "getInterpolated_quadratic"
                , getInterpolated_quadratic_function_type( &::irr::video::SColorf::getInterpolated_quadratic )
                , ( bp::arg("c1"), bp::arg("c2"), bp::arg("d") ) );
        
        }
        { //::irr::video::SColorf::getRed
        
            typedef ::irr::f32 ( ::irr::video::SColorf::*getRed_function_type )(  ) const;
            
            SColorf_exposer.def( 
                "getRed"
                , getRed_function_type( &::irr::video::SColorf::getRed ) );
        
        }
        { //::irr::video::SColorf::set
        
            typedef void ( ::irr::video::SColorf::*set_function_type )( ::irr::f32,::irr::f32,::irr::f32 ) ;
            
            SColorf_exposer.def( 
                "set"
                , set_function_type( &::irr::video::SColorf::set )
                , ( bp::arg("rr"), bp::arg("gg"), bp::arg("bb") ) );
        
        }
        { //::irr::video::SColorf::set
        
            typedef void ( ::irr::video::SColorf::*set_function_type )( ::irr::f32,::irr::f32,::irr::f32,::irr::f32 ) ;
            
            SColorf_exposer.def( 
                "set"
                , set_function_type( &::irr::video::SColorf::set )
                , ( bp::arg("aa"), bp::arg("rr"), bp::arg("gg"), bp::arg("bb") ) );
        
        }
        { //::irr::video::SColorf::setColorComponentValue
        
            typedef void ( ::irr::video::SColorf::*setColorComponentValue_function_type )( ::irr::s32,::irr::f32 ) ;
            
            SColorf_exposer.def( 
                "setColorComponentValue"
                , setColorComponentValue_function_type( &::irr::video::SColorf::setColorComponentValue )
                , ( bp::arg("index"), bp::arg("value") ) );
        
        }
        { //::irr::video::SColorf::toSColor
        
            typedef ::irr::video::SColor ( ::irr::video::SColorf::*toSColor_function_type )(  ) const;
            
            SColorf_exposer.def( 
                "toSColor"
                , toSColor_function_type( &::irr::video::SColorf::toSColor ) );
        
        }
        SColorf_exposer.def_readwrite( "a", &irr::video::SColorf::a );
        SColorf_exposer.def_readwrite( "b", &irr::video::SColorf::b );
        SColorf_exposer.def_readwrite( "g", &irr::video::SColorf::g );
        SColorf_exposer.def_readwrite( "r", &irr::video::SColorf::r );
    }

    { //::irr::video::SMaterial
        typedef bp::class_< SMaterial_wrapper > SMaterial_exposer_t;
        SMaterial_exposer_t SMaterial_exposer = SMaterial_exposer_t( "SMaterial", bp::init< >() );
        bp::scope SMaterial_scope( SMaterial_exposer );
        SMaterial_exposer.def( bp::init< irr::video::SMaterial const & >(( bp::arg("other") )) );
        { //::irr::video::SMaterial::getFlag
        
            typedef bool ( ::irr::video::SMaterial::*getFlag_function_type )( ::irr::video::E_MATERIAL_FLAG ) const;
            
            SMaterial_exposer.def( 
                "getFlag"
                , getFlag_function_type( &::irr::video::SMaterial::getFlag )
                , ( bp::arg("flag") ) );
        
        }
        { //::irr::video::SMaterial::getTexture
        
            typedef ::irr::video::ITexture * ( ::irr::video::SMaterial::*getTexture_function_type )( ::irr::u32 ) const;
            
            SMaterial_exposer.def( 
                "getTexture"
                , getTexture_function_type( &::irr::video::SMaterial::getTexture )
                , ( bp::arg("i") )
                    /* undefined call policies */ );
        
        }
        { //::irr::video::SMaterial::getTextureMatrix
        
            typedef ::irr::core::matrix4 & ( ::irr::video::SMaterial::*getTextureMatrix_function_type )( ::irr::u32 ) ;
            
            SMaterial_exposer.def( 
                "getTextureMatrix"
                , getTextureMatrix_function_type( &::irr::video::SMaterial::getTextureMatrix )
                , ( bp::arg("i") )
                    /* undefined call policies */ );
        
        }
        { //::irr::video::SMaterial::getTextureMatrix
        
            typedef ::irr::core::matrix4 const & ( ::irr::video::SMaterial::*getTextureMatrix_function_type )( ::irr::u32 ) const;
            
            SMaterial_exposer.def( 
                "getTextureMatrix"
                , getTextureMatrix_function_type( &::irr::video::SMaterial::getTextureMatrix )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::video::SMaterial::isTransparent
        
            typedef bool ( ::irr::video::SMaterial::*isTransparent_function_type )(  ) const;
            
            SMaterial_exposer.def( 
                "isTransparent"
                , isTransparent_function_type( &::irr::video::SMaterial::isTransparent ) );
        
        }
        SMaterial_exposer.def( bp::self != bp::self );
        { //::irr::video::SMaterial::operator=
        
            typedef ::irr::video::SMaterial & ( ::irr::video::SMaterial::*assign_function_type )( ::irr::video::SMaterial const & ) ;
            
            SMaterial_exposer.def( 
                "assign"
                , assign_function_type( &::irr::video::SMaterial::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        SMaterial_exposer.def( bp::self == bp::self );
        { //::irr::video::SMaterial::setFlag
        
            typedef void ( ::irr::video::SMaterial::*setFlag_function_type )( ::irr::video::E_MATERIAL_FLAG,bool ) ;
            
            SMaterial_exposer.def( 
                "setFlag"
                , setFlag_function_type( &::irr::video::SMaterial::setFlag )
                , ( bp::arg("flag"), bp::arg("value") ) );
        
        }
        { //::irr::video::SMaterial::setTexture
        
            typedef void ( ::irr::video::SMaterial::*setTexture_function_type )( ::irr::u32,::irr::video::ITexture * ) ;
            
            SMaterial_exposer.def( 
                "setTexture"
                , setTexture_function_type( &::irr::video::SMaterial::setTexture )
                , ( bp::arg("i"), bp::arg("tex") ) );
        
        }
        { //::irr::video::SMaterial::setTextureMatrix
        
            typedef void ( ::irr::video::SMaterial::*setTextureMatrix_function_type )( ::irr::u32,::irr::core::matrix4 const & ) ;
            
            SMaterial_exposer.def( 
                "setTextureMatrix"
                , setTextureMatrix_function_type( &::irr::video::SMaterial::setTextureMatrix )
                , ( bp::arg("i"), bp::arg("mat") ) );
        
        }
        SMaterial_exposer.def_readwrite( "AmbientColor", &irr::video::SMaterial::AmbientColor );
        SMaterial_exposer.def_readwrite( "AntiAliasing", &irr::video::SMaterial::AntiAliasing );
        SMaterial_exposer.add_property( "BackfaceCulling"
                    , bp::make_function( (bool (*)( ::irr::video::SMaterial const & ))(&SMaterial_wrapper::get_BackfaceCulling) )
                    , bp::make_function( (void (*)( ::irr::video::SMaterial &,bool ))(&SMaterial_wrapper::set_BackfaceCulling) ) );
        SMaterial_exposer.add_property( "ColorMask"
                    , bp::make_function( (::irr::u8 (*)( ::irr::video::SMaterial const & ))(&SMaterial_wrapper::get_ColorMask) )
                    , bp::make_function( (void (*)( ::irr::video::SMaterial &,::irr::u8 ))(&SMaterial_wrapper::set_ColorMask) ) );
        SMaterial_exposer.add_property( "ColorMaterial"
                    , bp::make_function( (::irr::u8 (*)( ::irr::video::SMaterial const & ))(&SMaterial_wrapper::get_ColorMaterial) )
                    , bp::make_function( (void (*)( ::irr::video::SMaterial &,::irr::u8 ))(&SMaterial_wrapper::set_ColorMaterial) ) );
        SMaterial_exposer.def_readwrite( "DiffuseColor", &irr::video::SMaterial::DiffuseColor );
        SMaterial_exposer.def_readwrite( "EmissiveColor", &irr::video::SMaterial::EmissiveColor );
        SMaterial_exposer.add_property( "FogEnable"
                    , bp::make_function( (bool (*)( ::irr::video::SMaterial const & ))(&SMaterial_wrapper::get_FogEnable) )
                    , bp::make_function( (void (*)( ::irr::video::SMaterial &,bool ))(&SMaterial_wrapper::set_FogEnable) ) );
        SMaterial_exposer.add_property( "FrontfaceCulling"
                    , bp::make_function( (bool (*)( ::irr::video::SMaterial const & ))(&SMaterial_wrapper::get_FrontfaceCulling) )
                    , bp::make_function( (void (*)( ::irr::video::SMaterial &,bool ))(&SMaterial_wrapper::set_FrontfaceCulling) ) );
        SMaterial_exposer.add_property( "GouraudShading"
                    , bp::make_function( (bool (*)( ::irr::video::SMaterial const & ))(&SMaterial_wrapper::get_GouraudShading) )
                    , bp::make_function( (void (*)( ::irr::video::SMaterial &,bool ))(&SMaterial_wrapper::set_GouraudShading) ) );
        SMaterial_exposer.add_property( "Lighting"
                    , bp::make_function( (bool (*)( ::irr::video::SMaterial const & ))(&SMaterial_wrapper::get_Lighting) )
                    , bp::make_function( (void (*)( ::irr::video::SMaterial &,bool ))(&SMaterial_wrapper::set_Lighting) ) );
        SMaterial_exposer.def_readwrite( "MaterialType", &irr::video::SMaterial::MaterialType );
        SMaterial_exposer.def_readwrite( "MaterialTypeParam", &irr::video::SMaterial::MaterialTypeParam );
        SMaterial_exposer.def_readwrite( "MaterialTypeParam2", &irr::video::SMaterial::MaterialTypeParam2 );
        SMaterial_exposer.add_property( "NormalizeNormals"
                    , bp::make_function( (bool (*)( ::irr::video::SMaterial const & ))(&SMaterial_wrapper::get_NormalizeNormals) )
                    , bp::make_function( (void (*)( ::irr::video::SMaterial &,bool ))(&SMaterial_wrapper::set_NormalizeNormals) ) );
        SMaterial_exposer.add_property( "PointCloud"
                    , bp::make_function( (bool (*)( ::irr::video::SMaterial const & ))(&SMaterial_wrapper::get_PointCloud) )
                    , bp::make_function( (void (*)( ::irr::video::SMaterial &,bool ))(&SMaterial_wrapper::set_PointCloud) ) );
        SMaterial_exposer.def_readwrite( "Shininess", &irr::video::SMaterial::Shininess );
        SMaterial_exposer.def_readwrite( "SpecularColor", &irr::video::SMaterial::SpecularColor );
        pyplusplus::containers::static_sized::register_array_1< ::irr::video::SMaterialLayer, 4, bp::return_internal_reference< > >( "__array_1__scope_irr_scope_video_scope_SMaterialLayer_4" );
        { //irr::video::SMaterial::TextureLayer [variable], type=irr::video::SMaterialLayer[4]
        
            typedef pyplusplus::containers::static_sized::array_1_t< ::irr::video::SMaterialLayer, 4> ( *array_wrapper_creator )( ::irr::video::SMaterial & );
            
            SMaterial_exposer.add_property( "TextureLayer"
                , bp::make_function( array_wrapper_creator(&SMaterial_wrapper::pyplusplus_TextureLayer_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        SMaterial_exposer.def_readwrite( "Thickness", &irr::video::SMaterial::Thickness );
        SMaterial_exposer.add_property( "Wireframe"
                    , bp::make_function( (bool (*)( ::irr::video::SMaterial const & ))(&SMaterial_wrapper::get_Wireframe) )
                    , bp::make_function( (void (*)( ::irr::video::SMaterial &,bool ))(&SMaterial_wrapper::set_Wireframe) ) );
        SMaterial_exposer.def_readwrite( "ZBuffer", &irr::video::SMaterial::ZBuffer );
        SMaterial_exposer.add_property( "ZWriteEnable"
                    , bp::make_function( (bool (*)( ::irr::video::SMaterial const & ))(&SMaterial_wrapper::get_ZWriteEnable) )
                    , bp::make_function( (void (*)( ::irr::video::SMaterial &,bool ))(&SMaterial_wrapper::set_ZWriteEnable) ) );
    }

    bp::class_< ISceneManager_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "ISceneManager" )    
        .def( 
            "addAnimatedMeshSceneNode"
            , bp::pure_virtual( (::irr::scene::IAnimatedMeshSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::IAnimatedMesh *,::irr::scene::ISceneNode *,::irr::s32,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::core::vector3df const &,bool ) )(&::irr::scene::ISceneManager::addAnimatedMeshSceneNode) )
            , ( bp::arg("mesh"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f), bp::arg("alsoAddIfMeshPointerZero")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "addArrowMesh"
            , bp::pure_virtual( (::irr::scene::IAnimatedMesh * ( ::irr::scene::ISceneManager::* )( ::irr::io::path const &,::irr::video::SColor,::irr::video::SColor,::irr::u32,::irr::u32,::irr::f32,::irr::f32,::irr::f32,::irr::f32 ) )(&::irr::scene::ISceneManager::addArrowMesh) )
            , ( bp::arg("name"), bp::arg("vtxColor0")=4294967295u, bp::arg("vtxColor1")=4294967295u, bp::arg("tesselationCylinder")=(::irr::u32)(4), bp::arg("tesselationCone")=(::irr::u32)(8), bp::arg("height")=1.0e+0f, bp::arg("cylinderHeight")=6.0000002384185791015625e-1f, bp::arg("width0")=5.00000007450580596923828125e-2f, bp::arg("width1")=3.00000011920928955078125e-1f )
                /* undefined call policies */ )    
        .def( 
            "addBillboardSceneNode"
            , bp::pure_virtual( (::irr::scene::IBillboardSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::ISceneNode *,::irr::core::dimension2d< float > const &,::irr::core::vector3df const &,::irr::s32,::irr::video::SColor,::irr::video::SColor ) )(&::irr::scene::ISceneManager::addBillboardSceneNode) )
            , ( bp::arg("parent")=bp::object(), bp::arg("size")=irr::core::dimension2d<float>(((const float&)((const float*)(&1.0e+1f))), ((const float&)((const float*)(&1.0e+1f)))), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("colorTop")=4294967295u, bp::arg("colorBottom")=4294967295u )
                /* undefined call policies */ )    
        .def( 
            "addBillboardTextSceneNode"
            , bp::pure_virtual( (::irr::scene::IBillboardTextSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::gui::IGUIFont *,wchar_t const *,::irr::scene::ISceneNode *,::irr::core::dimension2d< float > const &,::irr::core::vector3df const &,::irr::s32,::irr::video::SColor,::irr::video::SColor ) )(&::irr::scene::ISceneManager::addBillboardTextSceneNode) )
            , ( bp::arg("font"), bp::arg("text"), bp::arg("parent")=bp::object(), bp::arg("size")=irr::core::dimension2d<float>(((const float&)((const float*)(&1.0e+1f))), ((const float&)((const float*)(&1.0e+1f)))), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("colorTop")=4294967295u, bp::arg("colorBottom")=4294967295u )
                /* undefined call policies */ )    
        .def( 
            "addCameraSceneNode"
            , bp::pure_virtual( (::irr::scene::ICameraSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::ISceneNode *,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::s32,bool ) )(&::irr::scene::ISceneManager::addCameraSceneNode) )
            , ( bp::arg("parent")=bp::object(), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("lookat")=irr::core::vector3d<float>(0.0f, 0.0f, 1.0e+2f), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("makeActive")=(bool)(true) )
                /* undefined call policies */ )    
        .def( 
            "addCameraSceneNodeFPS"
            , bp::pure_virtual( (::irr::scene::ICameraSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::ISceneNode *,::irr::f32,::irr::f32,::irr::s32,::irr::SKeyMap *,::irr::s32,bool,::irr::f32,bool,bool ) )(&::irr::scene::ISceneManager::addCameraSceneNodeFPS) )
            , ( bp::arg("parent")=bp::object(), bp::arg("rotateSpeed")=1.0e+2f, bp::arg("moveSpeed")=5.0e-1f, bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("keyMapArray")=bp::object(), bp::arg("keyMapSize")=(::irr::s32)(0), bp::arg("noVerticalMovement")=(bool)(false), bp::arg("jumpSpeed")=0.0f, bp::arg("invertMouse")=(bool)(false), bp::arg("makeActive")=(bool)(true) )
                /* undefined call policies */ )    
        .def( 
            "addCameraSceneNodeMaya"
            , bp::pure_virtual( (::irr::scene::ICameraSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::ISceneNode *,::irr::f32,::irr::f32,::irr::f32,::irr::s32,bool ) )(&::irr::scene::ISceneManager::addCameraSceneNodeMaya) )
            , ( bp::arg("parent")=bp::object(), bp::arg("rotateSpeed")=-1.5e+3f, bp::arg("zoomSpeed")=2.0e+2f, bp::arg("translationSpeed")=1.5e+3f, bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("makeActive")=(bool)(true) )
                /* undefined call policies */ )    
        .def( 
            "addCubeSceneNode"
            , bp::pure_virtual( (::irr::scene::IMeshSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::f32,::irr::scene::ISceneNode *,::irr::s32,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::core::vector3df const & ) )(&::irr::scene::ISceneManager::addCubeSceneNode) )
            , ( bp::arg("size")=1.0e+1f, bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )
                /* undefined call policies */ )    
        .def( 
            "addDummyTransformationSceneNode"
            , bp::pure_virtual( (::irr::scene::IDummyTransformationSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::ISceneNode *,::irr::s32 ) )(&::irr::scene::ISceneManager::addDummyTransformationSceneNode) )
            , ( bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addEmptySceneNode"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::ISceneNode *,::irr::s32 ) )(&::irr::scene::ISceneManager::addEmptySceneNode) )
            , ( bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addExternalMeshLoader"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneManager::* )( ::irr::scene::IMeshLoader * ) )(&::irr::scene::ISceneManager::addExternalMeshLoader) )
            , ( bp::arg("externalLoader") ) )    
        .def( 
            "addHillPlaneMesh"
            , bp::pure_virtual( (::irr::scene::IAnimatedMesh * ( ::irr::scene::ISceneManager::* )( ::irr::io::path const &,::irr::core::dimension2d< float > const &,::irr::core::dimension2d< unsigned int > const &,::irr::video::SMaterial *,::irr::f32,::irr::core::dimension2d< float > const &,::irr::core::dimension2d< float > const & ) )(&::irr::scene::ISceneManager::addHillPlaneMesh) )
            , ( bp::arg("name"), bp::arg("tileSize"), bp::arg("tileCount"), bp::arg("material")=bp::object(), bp::arg("hillHeight")=0.0f, bp::arg("countHills")=irr::core::dimension2d<float>(((const float&)((const float*)(&0.0f))), ((const float&)((const float*)(&0.0f)))), bp::arg("textureRepeatCount")=irr::core::dimension2d<float>(((const float&)((const float*)(&1.0e+0f))), ((const float&)((const float*)(&1.0e+0f)))) )
                /* undefined call policies */ )    
        .def( 
            "addLightSceneNode"
            , bp::pure_virtual( (::irr::scene::ILightSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::ISceneNode *,::irr::core::vector3df const &,::irr::video::SColorf,::irr::f32,::irr::s32 ) )(&::irr::scene::ISceneManager::addLightSceneNode) )
            , ( bp::arg("parent")=bp::object(), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("color")=irr::video::SColorf(1.0e+0f, 1.0e+0f, 1.0e+0f, 1.0e+0f), bp::arg("radius")=1.0e+2f, bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addMeshSceneNode"
            , bp::pure_virtual( (::irr::scene::IMeshSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::IMesh *,::irr::scene::ISceneNode *,::irr::s32,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::core::vector3df const &,bool ) )(&::irr::scene::ISceneManager::addMeshSceneNode) )
            , ( bp::arg("mesh"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f), bp::arg("alsoAddIfMeshPointerZero")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "addOctTreeSceneNode"
            , (::irr::scene::IMeshSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::IAnimatedMesh *,::irr::scene::ISceneNode *,::irr::s32,::irr::s32,bool ) )( &::irr::scene::ISceneManager::addOctTreeSceneNode )
            , ( bp::arg("mesh"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("minimalPolysPerNode")=(::irr::s32)(512), bp::arg("alsoAddIfMeshPointerZero")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "addOctTreeSceneNode"
            , (::irr::scene::IMeshSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::IMesh *,::irr::scene::ISceneNode *,::irr::s32,::irr::s32,bool ) )( &::irr::scene::ISceneManager::addOctTreeSceneNode )
            , ( bp::arg("mesh"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("minimalPolysPerNode")=(::irr::s32)(256), bp::arg("alsoAddIfMeshPointerZero")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "addOctreeSceneNode"
            , bp::pure_virtual( (::irr::scene::IMeshSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::IAnimatedMesh *,::irr::scene::ISceneNode *,::irr::s32,::irr::s32,bool ) )(&::irr::scene::ISceneManager::addOctreeSceneNode) )
            , ( bp::arg("mesh"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("minimalPolysPerNode")=(::irr::s32)(512), bp::arg("alsoAddIfMeshPointerZero")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "addOctreeSceneNode"
            , bp::pure_virtual( (::irr::scene::IMeshSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::IMesh *,::irr::scene::ISceneNode *,::irr::s32,::irr::s32,bool ) )(&::irr::scene::ISceneManager::addOctreeSceneNode) )
            , ( bp::arg("mesh"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("minimalPolysPerNode")=(::irr::s32)(256), bp::arg("alsoAddIfMeshPointerZero")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "addParticleSystemSceneNode"
            , bp::pure_virtual( (::irr::scene::IParticleSystemSceneNode * ( ::irr::scene::ISceneManager::* )( bool,::irr::scene::ISceneNode *,::irr::s32,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::core::vector3df const & ) )(&::irr::scene::ISceneManager::addParticleSystemSceneNode) )
            , ( bp::arg("withDefaultEmitter")=(bool)(true), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )
                /* undefined call policies */ )    
        .def( 
            "addQuake3SceneNode"
            , bp::pure_virtual( (::irr::scene::IMeshSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::IMeshBuffer const *,::irr::scene::quake3::IShader const *,::irr::scene::ISceneNode *,::irr::s32 ) )(&::irr::scene::ISceneManager::addQuake3SceneNode) )
            , ( bp::arg("meshBuffer"), bp::arg("shader"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addSceneNode"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneManager::* )( char const *,::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneManager::addSceneNode) )
            , ( bp::arg("sceneNodeTypeName"), bp::arg("parent")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "addSkyBoxSceneNode"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::video::ITexture *,::irr::video::ITexture *,::irr::video::ITexture *,::irr::video::ITexture *,::irr::video::ITexture *,::irr::video::ITexture *,::irr::scene::ISceneNode *,::irr::s32 ) )(&::irr::scene::ISceneManager::addSkyBoxSceneNode) )
            , ( bp::arg("top"), bp::arg("bottom"), bp::arg("left"), bp::arg("right"), bp::arg("front"), bp::arg("back"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addSkyDomeSceneNode"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::video::ITexture *,::irr::u32,::irr::u32,::irr::f32,::irr::f32,::irr::f32,::irr::scene::ISceneNode *,::irr::s32 ) )(&::irr::scene::ISceneManager::addSkyDomeSceneNode) )
            , ( bp::arg("texture"), bp::arg("horiRes")=(::irr::u32)(16), bp::arg("vertRes")=(::irr::u32)(8), bp::arg("texturePercentage")=9.0000000000000002220446049250313080847263336181640625e-1, bp::arg("spherePercentage")=2.0e+0, bp::arg("radius")=1.0e+3f, bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addSphereMesh"
            , bp::pure_virtual( (::irr::scene::IAnimatedMesh * ( ::irr::scene::ISceneManager::* )( ::irr::io::path const &,::irr::f32,::irr::u32,::irr::u32 ) )(&::irr::scene::ISceneManager::addSphereMesh) )
            , ( bp::arg("name"), bp::arg("radius")=5.0e+0f, bp::arg("polyCountX")=(::irr::u32)(16), bp::arg("polyCountY")=(::irr::u32)(16) )
                /* undefined call policies */ )    
        .def( 
            "addSphereSceneNode"
            , bp::pure_virtual( (::irr::scene::IMeshSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::f32,::irr::s32,::irr::scene::ISceneNode *,::irr::s32,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::core::vector3df const & ) )(&::irr::scene::ISceneManager::addSphereSceneNode) )
            , ( bp::arg("radius")=5.0e+0f, bp::arg("polyCount")=(::irr::s32)(16), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )
                /* undefined call policies */ )    
        .def( 
            "addTerrainMesh"
            , bp::pure_virtual( (::irr::scene::IAnimatedMesh * ( ::irr::scene::ISceneManager::* )( ::irr::io::path const &,::irr::video::IImage *,::irr::video::IImage *,::irr::core::dimension2d< float > const &,::irr::f32,::irr::core::dimension2d< unsigned int > const & ) )(&::irr::scene::ISceneManager::addTerrainMesh) )
            , ( bp::arg("meshname"), bp::arg("texture"), bp::arg("heightmap"), bp::arg("stretchSize")=irr::core::dimension2d<float>(((const float&)((const float*)(&1.0e+1f))), ((const float&)((const float*)(&1.0e+1f)))), bp::arg("maxHeight")=2.0e+2f, bp::arg("defaultVertexBlockSize")=irr::core::dimension2d<unsigned int>(((const unsigned int&)((const unsigned int*)(&64u))), ((const unsigned int&)((const unsigned int*)(&64u)))) )
                /* undefined call policies */ )    
        .def( 
            "addTerrainSceneNode"
            , bp::pure_virtual( (::irr::scene::ITerrainSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::io::path const &,::irr::scene::ISceneNode *,::irr::s32,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::video::SColor,::irr::s32,::irr::scene::E_TERRAIN_PATCH_SIZE,::irr::s32,bool ) )(&::irr::scene::ISceneManager::addTerrainSceneNode) )
            , ( bp::arg("heightMapFileName"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f), bp::arg("vertexColor")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("maxLOD")=(::irr::s32)(5), bp::arg("patchSize")=::irr::scene::ETPS_17, bp::arg("smoothFactor")=(::irr::s32)(0), bp::arg("addAlsoIfHeightmapEmpty")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "addTerrainSceneNode"
            , bp::pure_virtual( (::irr::scene::ITerrainSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::io::IReadFile *,::irr::scene::ISceneNode *,::irr::s32,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::video::SColor,::irr::s32,::irr::scene::E_TERRAIN_PATCH_SIZE,::irr::s32,bool ) )(&::irr::scene::ISceneManager::addTerrainSceneNode) )
            , ( bp::arg("heightMapFile"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f), bp::arg("vertexColor")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("maxLOD")=(::irr::s32)(5), bp::arg("patchSize")=::irr::scene::ETPS_17, bp::arg("smoothFactor")=(::irr::s32)(0), bp::arg("addAlsoIfHeightmapEmpty")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "addTextSceneNode"
            , bp::pure_virtual( (::irr::scene::ITextSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::gui::IGUIFont *,wchar_t const *,::irr::video::SColor,::irr::scene::ISceneNode *,::irr::core::vector3df const &,::irr::s32 ) )(&::irr::scene::ISceneManager::addTextSceneNode) )
            , ( bp::arg("font"), bp::arg("text"), bp::arg("color")=irr::video::SColor(100u, 255u, 255u, 255u), bp::arg("parent")=bp::object(), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addToDeletionQueue"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneManager::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneManager::addToDeletionQueue) )
            , ( bp::arg("node") ) )    
        .def( 
            "addVolumeLightMesh"
            , bp::pure_virtual( (::irr::scene::IAnimatedMesh * ( ::irr::scene::ISceneManager::* )( ::irr::io::path const &,::irr::u32 const,::irr::u32 const,::irr::video::SColor const,::irr::video::SColor const ) )(&::irr::scene::ISceneManager::addVolumeLightMesh) )
            , ( bp::arg("name"), bp::arg("SubdivideU")=(::irr::u32 const)(32), bp::arg("SubdivideV")=(::irr::u32 const)(32), bp::arg("FootColor")=irr::video::SColor(51u, 0u, 230u, 180u), bp::arg("TailColor")=irr::video::SColor(0u, 0u, 0u, 0u) )
                /* undefined call policies */ )    
        .def( 
            "addVolumeLightSceneNode"
            , bp::pure_virtual( (::irr::scene::IVolumeLightSceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::ISceneNode *,::irr::s32,::irr::u32 const,::irr::u32 const,::irr::video::SColor const,::irr::video::SColor const,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::core::vector3df const & ) )(&::irr::scene::ISceneManager::addVolumeLightSceneNode) )
            , ( bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("subdivU")=(::irr::u32 const)(32), bp::arg("subdivV")=(::irr::u32 const)(32), bp::arg("foot")=irr::video::SColor(51u, 0u, 230u, 180u), bp::arg("tail")=irr::video::SColor(0u, 0u, 0u, 0u), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )
                /* undefined call policies */ )    
        .def( 
            "addWaterSurfaceSceneNode"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::IMesh *,::irr::f32,::irr::f32,::irr::f32,::irr::scene::ISceneNode *,::irr::s32,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::core::vector3df const & ) )(&::irr::scene::ISceneManager::addWaterSurfaceSceneNode) )
            , ( bp::arg("mesh"), bp::arg("waveHeight")=2.0e+0f, bp::arg("waveSpeed")=3.0e+2f, bp::arg("waveLength")=1.0e+1f, bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )
                /* undefined call policies */ )    
        .def( 
            "clear"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneManager::* )(  ) )(&::irr::scene::ISceneManager::clear) ) )    
        .def( 
            "createCollisionResponseAnimator"
            , bp::pure_virtual( (::irr::scene::ISceneNodeAnimatorCollisionResponse * ( ::irr::scene::ISceneManager::* )( ::irr::scene::ITriangleSelector *,::irr::scene::ISceneNode *,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::f32 ) )(&::irr::scene::ISceneManager::createCollisionResponseAnimator) )
            , ( bp::arg("world"), bp::arg("sceneNode"), bp::arg("ellipsoidRadius")=irr::core::vector3d<float>(3.0e+1f, 6.0e+1f, 3.0e+1f), bp::arg("gravityPerSecond")=irr::core::vector3d<float>(0.0f, -1.0e+1f, 0.0f), bp::arg("ellipsoidTranslation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("slidingValue")=5.000000237487256526947021484375e-4f )
                /* undefined call policies */ )    
        .def( 
            "createDeleteAnimator"
            , bp::pure_virtual( (::irr::scene::ISceneNodeAnimator * ( ::irr::scene::ISceneManager::* )( ::irr::u32 ) )(&::irr::scene::ISceneManager::createDeleteAnimator) )
            , ( bp::arg("timeMs") )
                /* undefined call policies */ )    
        .def( 
            "createFlyCircleAnimator"
            , bp::pure_virtual( (::irr::scene::ISceneNodeAnimator * ( ::irr::scene::ISceneManager::* )( ::irr::core::vector3df const &,::irr::f32,::irr::f32,::irr::core::vector3df const &,::irr::f32,::irr::f32 ) )(&::irr::scene::ISceneManager::createFlyCircleAnimator) )
            , ( bp::arg("center")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("radius")=1.0e+2f, bp::arg("speed")=1.000000047497451305389404296875e-3f, bp::arg("direction")=irr::core::vector3d<float>(0.0f, 1.0e+0f, 0.0f), bp::arg("startPosition")=0.0f, bp::arg("radiusEllipsoid")=0.0f )
                /* undefined call policies */ )    
        .def( 
            "createFlyStraightAnimator"
            , bp::pure_virtual( (::irr::scene::ISceneNodeAnimator * ( ::irr::scene::ISceneManager::* )( ::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::u32,bool,bool ) )(&::irr::scene::ISceneManager::createFlyStraightAnimator) )
            , ( bp::arg("startPoint"), bp::arg("endPoint"), bp::arg("timeForWay"), bp::arg("loop")=(bool)(false), bp::arg("pingpong")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "createFollowSplineAnimator"
            , bp::pure_virtual( (::irr::scene::ISceneNodeAnimator * ( ::irr::scene::ISceneManager::* )( ::irr::s32,::irr::core::array< irr::core::vector3d< float >, irr::core::irrAllocator< irr::core::vector3d< float > > > const &,::irr::f32,::irr::f32,bool,bool ) )(&::irr::scene::ISceneManager::createFollowSplineAnimator) )
            , ( bp::arg("startTime"), bp::arg("points"), bp::arg("speed")=1.0e+0f, bp::arg("tightness")=5.0e-1f, bp::arg("loop")=(bool)(true), bp::arg("pingpong")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "createMeshWriter"
            , bp::pure_virtual( (::irr::scene::IMeshWriter * ( ::irr::scene::ISceneManager::* )( ::irr::scene::EMESH_WRITER_TYPE ) )(&::irr::scene::ISceneManager::createMeshWriter) )
            , ( bp::arg("type") )
                /* undefined call policies */ )    
        .def( 
            "createMetaTriangleSelector"
            , bp::pure_virtual( (::irr::scene::IMetaTriangleSelector * ( ::irr::scene::ISceneManager::* )(  ) )(&::irr::scene::ISceneManager::createMetaTriangleSelector) )
                /* undefined call policies */ )    
        .def( 
            "createNewSceneManager"
            , bp::pure_virtual( (::irr::scene::ISceneManager * ( ::irr::scene::ISceneManager::* )( bool ) )(&::irr::scene::ISceneManager::createNewSceneManager) )
            , ( bp::arg("cloneContent")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "createOctTreeTriangleSelector"
            , (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneManager::* )( ::irr::scene::IMesh *,::irr::scene::ISceneNode *,::irr::s32 ) )( &::irr::scene::ISceneManager::createOctTreeTriangleSelector )
            , ( bp::arg("mesh"), bp::arg("node"), bp::arg("minimalPolysPerNode")=(::irr::s32)(32) )
                /* undefined call policies */ )    
        .def( 
            "createOctreeTriangleSelector"
            , bp::pure_virtual( (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneManager::* )( ::irr::scene::IMesh *,::irr::scene::ISceneNode *,::irr::s32 ) )(&::irr::scene::ISceneManager::createOctreeTriangleSelector) )
            , ( bp::arg("mesh"), bp::arg("node"), bp::arg("minimalPolysPerNode")=(::irr::s32)(32) )
                /* undefined call policies */ )    
        .def( 
            "createRotationAnimator"
            , bp::pure_virtual( (::irr::scene::ISceneNodeAnimator * ( ::irr::scene::ISceneManager::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneManager::createRotationAnimator) )
            , ( bp::arg("rotationSpeed") )
                /* undefined call policies */ )    
        .def( 
            "createSkinnedMesh"
            , bp::pure_virtual( (::irr::scene::ISkinnedMesh * ( ::irr::scene::ISceneManager::* )(  ) )(&::irr::scene::ISceneManager::createSkinnedMesh) )
                /* undefined call policies */ )    
        .def( 
            "createTerrainTriangleSelector"
            , bp::pure_virtual( (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneManager::* )( ::irr::scene::ITerrainSceneNode *,::irr::s32 ) )(&::irr::scene::ISceneManager::createTerrainTriangleSelector) )
            , ( bp::arg("node"), bp::arg("LOD")=(::irr::s32)(0) )
                /* undefined call policies */ )    
        .def( 
            "createTextureAnimator"
            , bp::pure_virtual( (::irr::scene::ISceneNodeAnimator * ( ::irr::scene::ISceneManager::* )( ::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > const &,::irr::s32,bool ) )(&::irr::scene::ISceneManager::createTextureAnimator) )
            , ( bp::arg("textures"), bp::arg("timePerFrame"), bp::arg("loop")=(bool)(true) )
                /* undefined call policies */ )    
        .def( 
            "createTriangleSelector"
            , bp::pure_virtual( (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneManager::* )( ::irr::scene::IMesh *,::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneManager::createTriangleSelector) )
            , ( bp::arg("mesh"), bp::arg("node") )
                /* undefined call policies */ )    
        .def( 
            "createTriangleSelector"
            , bp::pure_virtual( (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneManager::* )( ::irr::scene::IAnimatedMeshSceneNode * ) )(&::irr::scene::ISceneManager::createTriangleSelector) )
            , ( bp::arg("node") )
                /* undefined call policies */ )    
        .def( 
            "createTriangleSelectorFromBoundingBox"
            , bp::pure_virtual( (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneManager::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneManager::createTriangleSelectorFromBoundingBox) )
            , ( bp::arg("node") )
                /* undefined call policies */ )    
        .def( 
            "drawAll"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneManager::* )(  ) )(&::irr::scene::ISceneManager::drawAll) ) )    
        .def( 
            "getActiveCamera"
            , bp::pure_virtual( (::irr::scene::ICameraSceneNode * ( ::irr::scene::ISceneManager::* )(  ) const)(&::irr::scene::ISceneManager::getActiveCamera) )
                /* undefined call policies */ )    
        .def( 
            "getAmbientLight"
            , bp::pure_virtual( (::irr::video::SColorf const & ( ::irr::scene::ISceneManager::* )(  ) const)(&::irr::scene::ISceneManager::getAmbientLight) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getAnimatorTypeName"
            , bp::pure_virtual( (::irr::c8 const * ( ::irr::scene::ISceneManager::* )( ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE ) )(&::irr::scene::ISceneManager::getAnimatorTypeName) )
            , ( bp::arg("type") ) )    
        .def( 
            "getDefaultSceneNodeAnimatorFactory"
            , bp::pure_virtual( (::irr::scene::ISceneNodeAnimatorFactory * ( ::irr::scene::ISceneManager::* )(  ) )(&::irr::scene::ISceneManager::getDefaultSceneNodeAnimatorFactory) )
                /* undefined call policies */ )    
        .def( 
            "getDefaultSceneNodeFactory"
            , bp::pure_virtual( (::irr::scene::ISceneNodeFactory * ( ::irr::scene::ISceneManager::* )(  ) )(&::irr::scene::ISceneManager::getDefaultSceneNodeFactory) )
                /* undefined call policies */ )    
        .def( 
            "getFileSystem"
            , bp::pure_virtual( (::irr::io::IFileSystem * ( ::irr::scene::ISceneManager::* )(  ) )(&::irr::scene::ISceneManager::getFileSystem) )
                /* undefined call policies */ )    
        .def( 
            "getGUIEnvironment"
            , bp::pure_virtual( (::irr::gui::IGUIEnvironment * ( ::irr::scene::ISceneManager::* )(  ) )(&::irr::scene::ISceneManager::getGUIEnvironment) )
                /* undefined call policies */ )    
        .def( 
            "getGeometryCreator"
            , bp::pure_virtual( (::irr::scene::IGeometryCreator const * ( ::irr::scene::ISceneManager::* )(  ) const)(&::irr::scene::ISceneManager::getGeometryCreator) )
                /* undefined call policies */ )    
        .def( 
            "getMesh"
            , bp::pure_virtual( (::irr::scene::IAnimatedMesh * ( ::irr::scene::ISceneManager::* )( ::irr::io::path const & ) )(&::irr::scene::ISceneManager::getMesh) )
            , ( bp::arg("filename") )
                /* undefined call policies */ )    
        .def( 
            "getMesh"
            , bp::pure_virtual( (::irr::scene::IAnimatedMesh * ( ::irr::scene::ISceneManager::* )( ::irr::io::IReadFile * ) )(&::irr::scene::ISceneManager::getMesh) )
            , ( bp::arg("file") )
                /* undefined call policies */ )    
        .def( 
            "getMeshCache"
            , bp::pure_virtual( (::irr::scene::IMeshCache * ( ::irr::scene::ISceneManager::* )(  ) )(&::irr::scene::ISceneManager::getMeshCache) )
                /* undefined call policies */ )    
        .def( 
            "getMeshManipulator"
            , bp::pure_virtual( (::irr::scene::IMeshManipulator * ( ::irr::scene::ISceneManager::* )(  ) )(&::irr::scene::ISceneManager::getMeshManipulator) )
                /* undefined call policies */ )    
        .def( 
            "getParameters"
            , bp::pure_virtual( (::irr::io::IAttributes * ( ::irr::scene::ISceneManager::* )(  ) )(&::irr::scene::ISceneManager::getParameters) )
                /* undefined call policies */ )    
        .def( 
            "getRegisteredSceneNodeAnimatorFactoryCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::ISceneManager::* )(  ) const)(&::irr::scene::ISceneManager::getRegisteredSceneNodeAnimatorFactoryCount) ) )    
        .def( 
            "getRegisteredSceneNodeFactoryCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::ISceneManager::* )(  ) const)(&::irr::scene::ISceneManager::getRegisteredSceneNodeFactoryCount) ) )    
        .def( 
            "getRootSceneNode"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneManager::* )(  ) )(&::irr::scene::ISceneManager::getRootSceneNode) )
                /* undefined call policies */ )    
        .def( 
            "getSceneCollisionManager"
            , bp::pure_virtual( (::irr::scene::ISceneCollisionManager * ( ::irr::scene::ISceneManager::* )(  ) )(&::irr::scene::ISceneManager::getSceneCollisionManager) )
                /* undefined call policies */ )    
        .def( 
            "getSceneNodeAnimatorFactory"
            , bp::pure_virtual( (::irr::scene::ISceneNodeAnimatorFactory * ( ::irr::scene::ISceneManager::* )( ::irr::u32 ) )(&::irr::scene::ISceneManager::getSceneNodeAnimatorFactory) )
            , ( bp::arg("index") )
                /* undefined call policies */ )    
        .def( 
            "getSceneNodeFactory"
            , bp::pure_virtual( (::irr::scene::ISceneNodeFactory * ( ::irr::scene::ISceneManager::* )( ::irr::u32 ) )(&::irr::scene::ISceneManager::getSceneNodeFactory) )
            , ( bp::arg("index") )
                /* undefined call policies */ )    
        .def( 
            "getSceneNodeFromId"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::s32,::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneManager::getSceneNodeFromId) )
            , ( bp::arg("id"), bp::arg("start")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "getSceneNodeFromName"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::c8 const *,::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneManager::getSceneNodeFromName) )
            , ( bp::arg("name"), bp::arg("start")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "getSceneNodeFromType"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneManager::* )( ::irr::scene::ESCENE_NODE_TYPE,::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneManager::getSceneNodeFromType) )
            , ( bp::arg("type"), bp::arg("start")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "getSceneNodeRenderPass"
            , bp::pure_virtual( (::irr::scene::E_SCENE_NODE_RENDER_PASS ( ::irr::scene::ISceneManager::* )(  ) const)(&::irr::scene::ISceneManager::getSceneNodeRenderPass) ) )    
        .def( 
            "getSceneNodeTypeName"
            , bp::pure_virtual( (::irr::c8 const * ( ::irr::scene::ISceneManager::* )( ::irr::scene::ESCENE_NODE_TYPE ) )(&::irr::scene::ISceneManager::getSceneNodeTypeName) )
            , ( bp::arg("type") ) )    
        .def( 
            "getSceneNodesFromType"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneManager::* )( ::irr::scene::ESCENE_NODE_TYPE,::irr::core::array< irr::scene::ISceneNode*, irr::core::irrAllocator< irr::scene::ISceneNode* > > &,::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneManager::getSceneNodesFromType) )
            , ( bp::arg("type"), bp::arg("outNodes"), bp::arg("start")=bp::object() ) )    
        .def( 
            "getShadowColor"
            , bp::pure_virtual( (::irr::video::SColor ( ::irr::scene::ISceneManager::* )(  ) const)(&::irr::scene::ISceneManager::getShadowColor) ) )    
        .def( 
            "getVideoDriver"
            , bp::pure_virtual( (::irr::video::IVideoDriver * ( ::irr::scene::ISceneManager::* )(  ) )(&::irr::scene::ISceneManager::getVideoDriver) )
                /* undefined call policies */ )    
        .def( 
            "isCulled"
            , bp::pure_virtual( (bool ( ::irr::scene::ISceneManager::* )( ::irr::scene::ISceneNode const * ) const)(&::irr::scene::ISceneManager::isCulled) )
            , ( bp::arg("node") ) )    
        .def( 
            "loadScene"
            , bp::pure_virtual( (bool ( ::irr::scene::ISceneManager::* )( ::irr::io::path const &,::irr::scene::ISceneUserDataSerializer * ) )(&::irr::scene::ISceneManager::loadScene) )
            , ( bp::arg("filename"), bp::arg("userDataSerializer")=bp::object() ) )    
        .def( 
            "loadScene"
            , bp::pure_virtual( (bool ( ::irr::scene::ISceneManager::* )( ::irr::io::IReadFile *,::irr::scene::ISceneUserDataSerializer * ) )(&::irr::scene::ISceneManager::loadScene) )
            , ( bp::arg("file"), bp::arg("userDataSerializer")=bp::object() ) )    
        .def( 
            "postEventFromUser"
            , bp::pure_virtual( (bool ( ::irr::scene::ISceneManager::* )( ::irr::SEvent const & ) )(&::irr::scene::ISceneManager::postEventFromUser) )
            , ( bp::arg("event") ) )    
        .def( 
            "registerNodeForRendering"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::ISceneManager::* )( ::irr::scene::ISceneNode *,::irr::scene::E_SCENE_NODE_RENDER_PASS ) )(&::irr::scene::ISceneManager::registerNodeForRendering) )
            , ( bp::arg("node"), bp::arg("pass")=::irr::scene::ESNRP_AUTOMATIC ) )    
        .def( 
            "registerSceneNodeAnimatorFactory"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneManager::* )( ::irr::scene::ISceneNodeAnimatorFactory * ) )(&::irr::scene::ISceneManager::registerSceneNodeAnimatorFactory) )
            , ( bp::arg("factoryToAdd") ) )    
        .def( 
            "registerSceneNodeFactory"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneManager::* )( ::irr::scene::ISceneNodeFactory * ) )(&::irr::scene::ISceneManager::registerSceneNodeFactory) )
            , ( bp::arg("factoryToAdd") ) )    
        .def( 
            "saveScene"
            , bp::pure_virtual( (bool ( ::irr::scene::ISceneManager::* )( ::irr::io::path const &,::irr::scene::ISceneUserDataSerializer * ) )(&::irr::scene::ISceneManager::saveScene) )
            , ( bp::arg("filename"), bp::arg("userDataSerializer")=bp::object() ) )    
        .def( 
            "saveScene"
            , bp::pure_virtual( (bool ( ::irr::scene::ISceneManager::* )( ::irr::io::IWriteFile *,::irr::scene::ISceneUserDataSerializer * ) )(&::irr::scene::ISceneManager::saveScene) )
            , ( bp::arg("file"), bp::arg("userDataSerializer")=bp::object() ) )    
        .def( 
            "setActiveCamera"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneManager::* )( ::irr::scene::ICameraSceneNode * ) )(&::irr::scene::ISceneManager::setActiveCamera) )
            , ( bp::arg("camera") ) )    
        .def( 
            "setAmbientLight"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneManager::* )( ::irr::video::SColorf const & ) )(&::irr::scene::ISceneManager::setAmbientLight) )
            , ( bp::arg("ambientColor") ) )    
        .def( 
            "setLightManager"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneManager::* )( ::irr::scene::ILightManager * ) )(&::irr::scene::ISceneManager::setLightManager) )
            , ( bp::arg("lightManager") ) )    
        .def( 
            "setShadowColor"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneManager::* )( ::irr::video::SColor ) )(&::irr::scene::ISceneManager::setShadowColor) )
            , ( bp::arg("color")=irr::video::SColor(150u, 0u, 0u, 0u) ) )    
        .def( 
            "setDebugName"
            , (void ( ISceneManager_wrapper::* )( ::irr::c8 const * ) )(&ISceneManager_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< ISceneNode_wrapper, bp::bases< irr::io::IAttributeExchangingObject >, boost::noncopyable >( "ISceneNode", bp::init< irr::scene::ISceneNode *, irr::scene::ISceneManager *, bp::optional< irr::s32, irr::core::vector3df const &, irr::core::vector3df const &, irr::core::vector3df const & > >(( bp::arg("parent"), bp::arg("mgr"), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )) )    
        .def( 
            "OnAnimate"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::OnAnimate)
            , (void ( ISceneNode_wrapper::* )( ::irr::u32 ) )(&ISceneNode_wrapper::default_OnAnimate)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "OnRegisterSceneNode"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::OnRegisterSceneNode)
            , (void ( ISceneNode_wrapper::* )(  ) )(&ISceneNode_wrapper::default_OnRegisterSceneNode) )    
        .def( 
            "addAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::addAnimator)
            , (void ( ISceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&ISceneNode_wrapper::default_addAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::addChild)
            , (void ( ISceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&ISceneNode_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "clone"
            , (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNode::clone)
            , (::irr::scene::ISceneNode * ( ISceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&ISceneNode_wrapper::default_clone)
            , ( bp::arg("newParent")=bp::object(), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "cloneMembers"
            , (void ( ISceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&ISceneNode_wrapper::cloneMembers)
            , ( bp::arg("toCopyFrom"), bp::arg("newManager") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::scene::ISceneNode::deserializeAttributes)
            , (void ( ISceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&ISceneNode_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getAbsolutePosition"
            , (::irr::core::vector3df ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsolutePosition)
            , (::irr::core::vector3df ( ISceneNode_wrapper::* )(  ) const)(&ISceneNode_wrapper::default_getAbsolutePosition) )    
        .def( 
            "getAbsoluteTransformation"
            , (::irr::core::matrix4 const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsoluteTransformation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getAnimators"
            , (::irr::core::list<irr::scene::ISceneNodeAnimator*> const & ( ::irr::scene::ISceneNode::* )(  ) const)( &::irr::scene::ISceneNode::getAnimators )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getAutomaticCulling"
            , (::irr::scene::E_CULLING_TYPE ( ::irr::scene::ISceneNode::* )(  ) const)( &::irr::scene::ISceneNode::getAutomaticCulling ) )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::scene::ISceneNode*> const & ( ::irr::scene::ISceneNode::* )(  ) const)( &::irr::scene::ISceneNode::getChildren )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getID)
            , (::irr::s32 ( ISceneNode_wrapper::* )(  ) const)(&ISceneNode_wrapper::default_getID) )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::getMaterial)
            , ( bp::arg("num") )
                /* undefined call policies */ )    
        .def( 
            "getMaterialCount"
            , (::irr::u32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getMaterialCount)
            , (::irr::u32 ( ISceneNode_wrapper::* )(  ) const)(&ISceneNode_wrapper::default_getMaterialCount) )    
        .def( 
            "getName"
            , (::irr::c8 const * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getName)
            , (::irr::c8 const * ( ISceneNode_wrapper::* )(  ) const)(&ISceneNode_wrapper::default_getName) )    
        .def( 
            "getParent"
            , (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNode::* )(  ) const)( &::irr::scene::ISceneNode::getParent )
                /* undefined call policies */ )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRelativeTransformation"
            , (::irr::core::matrix4 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRelativeTransformation)
            , (::irr::core::matrix4 ( ISceneNode_wrapper::* )(  ) const)(&ISceneNode_wrapper::default_getRelativeTransformation) )    
        .def( 
            "getRotation"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRotation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getScale"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSceneManager"
            , (::irr::scene::ISceneManager * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getSceneManager)
            , (::irr::scene::ISceneManager * ( ISceneNode_wrapper::* )(  ) const)(&ISceneNode_wrapper::default_getSceneManager)
                /* undefined call policies */ )    
        .def( 
            "getTransformedBoundingBox"
            , (::irr::core::aabbox3d< float > const ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTransformedBoundingBox)
            , (::irr::core::aabbox3d< float > const ( ISceneNode_wrapper::* )(  ) const)(&ISceneNode_wrapper::default_getTransformedBoundingBox) )    
        .def( 
            "getTriangleSelector"
            , (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTriangleSelector)
            , (::irr::scene::ITriangleSelector * ( ISceneNode_wrapper::* )(  ) const)(&ISceneNode_wrapper::default_getTriangleSelector)
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_TYPE ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getType)
            , (::irr::scene::ESCENE_NODE_TYPE ( ISceneNode_wrapper::* )(  ) const)(&ISceneNode_wrapper::default_getType) )    
        .def( 
            "isDebugDataVisible"
            , (::irr::s32 ( ::irr::scene::ISceneNode::* )(  ) const)( &::irr::scene::ISceneNode::isDebugDataVisible ) )    
        .def( 
            "isDebugObject"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)( &::irr::scene::ISceneNode::isDebugObject ) )    
        .def( 
            "isTrulyVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isTrulyVisible)
            , (bool ( ISceneNode_wrapper::* )(  ) const)(&ISceneNode_wrapper::default_isTrulyVisible) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isVisible)
            , (bool ( ISceneNode_wrapper::* )(  ) const)(&ISceneNode_wrapper::default_isVisible) )    
        .def( 
            "remove"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::remove)
            , (void ( ISceneNode_wrapper::* )(  ) )(&ISceneNode_wrapper::default_remove) )    
        .def( 
            "removeAll"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAll)
            , (void ( ISceneNode_wrapper::* )(  ) )(&ISceneNode_wrapper::default_removeAll) )    
        .def( 
            "removeAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::removeAnimator)
            , (void ( ISceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&ISceneNode_wrapper::default_removeAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "removeAnimators"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAnimators)
            , (void ( ISceneNode_wrapper::* )(  ) )(&ISceneNode_wrapper::default_removeAnimators) )    
        .def( 
            "removeChild"
            , (bool ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::removeChild)
            , (bool ( ISceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&ISceneNode_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "render"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::render) ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::scene::ISceneNode::serializeAttributes)
            , (void ( ISceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&ISceneNode_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setAutomaticCulling"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::E_CULLING_TYPE ) )( &::irr::scene::ISceneNode::setAutomaticCulling )
            , ( bp::arg("state") ) )    
        .def( 
            "setDebugDataVisible"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setDebugDataVisible)
            , (void ( ISceneNode_wrapper::* )( ::irr::s32 ) )(&ISceneNode_wrapper::default_setDebugDataVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "setID"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setID)
            , (void ( ISceneNode_wrapper::* )( ::irr::s32 ) )(&ISceneNode_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setIsDebugObject"
            , (void ( ::irr::scene::ISceneNode::* )( bool ) )( &::irr::scene::ISceneNode::setIsDebugObject )
            , ( bp::arg("debugObject") ) )    
        .def( 
            "setMaterialFlag"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::video::E_MATERIAL_FLAG,bool ) )( &::irr::scene::ISceneNode::setMaterialFlag )
            , ( bp::arg("flag"), bp::arg("newvalue") ) )    
        .def( 
            "setMaterialTexture"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::u32,::irr::video::ITexture * ) )( &::irr::scene::ISceneNode::setMaterialTexture )
            , ( bp::arg("textureLayer"), bp::arg("texture") ) )    
        .def( 
            "setMaterialType"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::video::E_MATERIAL_TYPE ) )( &::irr::scene::ISceneNode::setMaterialType )
            , ( bp::arg("newType") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::ISceneNode::setName)
            , (void ( ISceneNode_wrapper::* )( ::irr::c8 const * ) )(&ISceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::stringc const & ) )(&::irr::scene::ISceneNode::setName)
            , (void ( ISceneNode_wrapper::* )( ::irr::core::stringc const & ) )(&ISceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setParent"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::setParent)
            , (void ( ISceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&ISceneNode_wrapper::default_setParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "setPosition"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setPosition)
            , (void ( ISceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&ISceneNode_wrapper::default_setPosition)
            , ( bp::arg("newpos") ) )    
        .def( 
            "setRotation"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setRotation)
            , (void ( ISceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&ISceneNode_wrapper::default_setRotation)
            , ( bp::arg("rotation") ) )    
        .def( 
            "setScale"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setScale)
            , (void ( ISceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&ISceneNode_wrapper::default_setScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "setSceneManager"
            , (void ( ISceneNode_wrapper::* )( ::irr::scene::ISceneManager * ) )(&ISceneNode_wrapper::setSceneManager)
            , ( bp::arg("newManager") ) )    
        .def( 
            "setTriangleSelector"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::ISceneNode::setTriangleSelector)
            , (void ( ISceneNode_wrapper::* )( ::irr::scene::ITriangleSelector * ) )(&ISceneNode_wrapper::default_setTriangleSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::scene::ISceneNode::* )( bool ) )(&::irr::scene::ISceneNode::setVisible)
            , (void ( ISceneNode_wrapper::* )( bool ) )(&ISceneNode_wrapper::default_setVisible)
            , ( bp::arg("isVisible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::updateAbsolutePosition)
            , (void ( ISceneNode_wrapper::* )(  ) )(&ISceneNode_wrapper::default_updateAbsolutePosition) )    
        .def( 
            "setDebugName"
            , (void ( ISceneNode_wrapper::* )( ::irr::c8 const * ) )(&ISceneNode_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< MySceneManager >( "MySceneManager", bp::init< >() )    
        .def( 
            "addBillboardSceneNode"
            , (::irr::scene::IBillboardSceneNode * ( ::MySceneManager::* )( ::irr::scene::ISceneNode *,::irr::core::dimension2d< float > const &,::irr::core::vector3df const &,::irr::s32,::irr::video::SColor,::irr::video::SColor ) )( &::MySceneManager::addBillboardSceneNode )
            , ( bp::arg("parent")=bp::object(), bp::arg("size")=irr::core::dimension2d<float>(((const float&)((const float*)(&1.0e+1f))), ((const float&)((const float*)(&1.0e+1f)))), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("colorTop")=4294967295u, bp::arg("colorBottom")=4294967295u )
                /* undefined call policies */ )    
        .def( 
            "addBulletSceneNode"
            , (::IWeapon * ( ::MySceneManager::* )( ::std::wstring &,int,::irr::u32 ) )( &::MySceneManager::addBulletSceneNode )
            , ( bp::arg("textureFileName"), bp::arg("velocity")=(int)(1000), bp::arg("interval")=(::irr::u32)(100) )
                /* undefined call policies */ )    
        .def( 
            "addFrigateSceneNode"
            , (::IShip * ( ::MySceneManager::* )( ::std::wstring &,int ) )( &::MySceneManager::addFrigateSceneNode )
            , ( bp::arg("meshFileName"), bp::arg("id")=(int)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addParticleSystemSceneNode"
            , (::irr::scene::IParticleSystemSceneNode * ( ::MySceneManager::* )( bool,::irr::scene::ISceneNode *,::irr::s32,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::core::vector3df const & ) )( &::MySceneManager::addParticleSystemSceneNode )
            , ( bp::arg("withDefaultEmitter")=(bool)(true), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )
                /* undefined call policies */ )    
        .def( 
            "addSkyBoxSceneNode"
            , (::irr::scene::ISceneNode * ( ::MySceneManager::* )( ::irr::video::ITexture *,::irr::video::ITexture *,::irr::video::ITexture *,::irr::video::ITexture *,::irr::video::ITexture *,::irr::video::ITexture *,::irr::scene::ISceneNode *,::irr::s32 ) )( &::MySceneManager::addSkyBoxSceneNode )
            , ( bp::arg("top"), bp::arg("bottom"), bp::arg("left"), bp::arg("right"), bp::arg("front"), bp::arg("back"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "createAutoTrackAnimator"
            , (::irr::scene::ISceneNodeAnimator * ( ::MySceneManager::* )( ::irr::scene::ISceneNode * ) )( &::MySceneManager::createAutoTrackAnimator )
            , ( bp::arg("target") )
                /* undefined call policies */ )    
        .def( 
            "createCollisionResponseAnimator"
            , (::irr::scene::ISceneNodeAnimatorCollisionResponse * ( ::MySceneManager::* )( ::irr::scene::ITriangleSelector *,::irr::scene::ISceneNode *,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::f32 ) )( &::MySceneManager::createCollisionResponseAnimator )
            , ( bp::arg("world"), bp::arg("sceneNode"), bp::arg("ellipsoidRadius")=irr::core::vector3d<float>(3.0e+1f, 6.0e+1f, 3.0e+1f), bp::arg("gravityPerSecond")=irr::core::vector3d<float>(0.0f, -1.0e+1f, 0.0f), bp::arg("ellipsoidTranslation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("slidingValue")=5.000000237487256526947021484375e-4f )
                /* undefined call policies */ )    
        .def( 
            "createDeleteAnimator"
            , (::irr::scene::ISceneNodeAnimator * ( ::MySceneManager::* )( ::irr::u32 ) )( &::MySceneManager::createDeleteAnimator )
            , ( bp::arg("timeMs") )
                /* undefined call policies */ )    
        .def( 
            "createFlyCircleAnimator"
            , (::irr::scene::ISceneNodeAnimator * ( ::MySceneManager::* )( ::irr::core::vector3df const &,::irr::f32,::irr::f32,::irr::core::vector3df const &,::irr::f32,::irr::f32 ) )( &::MySceneManager::createFlyCircleAnimator )
            , ( bp::arg("center")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("radius")=1.0e+2f, bp::arg("speed")=1.000000047497451305389404296875e-3f, bp::arg("direction")=irr::core::vector3d<float>(0.0f, 1.0e+0f, 0.0f), bp::arg("startPosition")=0.0f, bp::arg("radiusEllipsoid")=0.0f )
                /* undefined call policies */ )    
        .def( 
            "createFlyStraightAnimator"
            , (::irr::scene::ISceneNodeAnimator * ( ::MySceneManager::* )( ::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::u32,bool,bool ) )( &::MySceneManager::createFlyStraightAnimator )
            , ( bp::arg("startPoint"), bp::arg("endPoint"), bp::arg("timeForWay"), bp::arg("loop")=(bool)(false), bp::arg("pingpong")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "createFollowFlameAnimator"
            , (::irr::scene::ISceneNodeAnimator * ( ::MySceneManager::* )(  ) )( &::MySceneManager::createFollowFlameAnimator )
                /* undefined call policies */ )    
        .def( 
            "createFollowSplineAnimator"
            , (::irr::scene::ISceneNodeAnimator * ( ::MySceneManager::* )( ::irr::s32,::irr::core::array< irr::core::vector3d< float >, irr::core::irrAllocator< irr::core::vector3d< float > > > const &,::irr::f32,::irr::f32,bool,bool ) )( &::MySceneManager::createFollowSplineAnimator )
            , ( bp::arg("startTime"), bp::arg("points"), bp::arg("speed")=1.0e+0f, bp::arg("tightness")=5.0e-1f, bp::arg("loop")=(bool)(true), bp::arg("pingpong")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "createRelateCameraMoveAnimator"
            , (::irr::scene::ISceneNodeAnimator * ( ::MySceneManager::* )( ::irr::u32,::irr::u32,::irr::scene::ICameraSceneNode *,::irr::core::vector3df,::irr::core::vector3df,::RM_MOVE_TYPE,::irr::f32 ) )( &::MySceneManager::createRelateCameraMoveAnimator )
            , ( bp::arg("delay"), bp::arg("duration"), bp::arg("camera"), bp::arg("start"), bp::arg("end"), bp::arg("moveType")=::RM_MT_LINER, bp::arg("factor")=0 )
                /* undefined call policies */ )    
        .def( 
            "createRelateCameraStayAnimator"
            , (::irr::scene::ISceneNodeAnimator * ( ::MySceneManager::* )( ::irr::u32,::irr::u32,::irr::scene::ICameraSceneNode *,::irr::core::vector3df,bool ) )( &::MySceneManager::createRelateCameraStayAnimator )
            , ( bp::arg("delay"), bp::arg("duration"), bp::arg("camera"), bp::arg("position"), bp::arg("loop")=(bool)(true) )
                /* undefined call policies */ )    
        .def( 
            "createRotationAnimator"
            , (::irr::scene::ISceneNodeAnimator * ( ::MySceneManager::* )( ::irr::core::vector3df const & ) )( &::MySceneManager::createRotationAnimator )
            , ( bp::arg("rotationSpeed") )
                /* undefined call policies */ )    
        .def( 
            "createScaleAnimator"
            , (::irr::scene::ISceneNodeAnimator * ( ::MySceneManager::* )( ::irr::u32,::irr::u32,::irr::core::vector3df,::AS_MOVE_TYPE,::irr::f32 ) )( &::MySceneManager::createScaleAnimator )
            , ( bp::arg("delay"), bp::arg("duration"), bp::arg("scale"), bp::arg("type")=::AS_MT_LINER, bp::arg("factor")=0 )
                /* undefined call policies */ )    
        .def( 
            "createSelfDelFlyStraightAnimator"
            , (::irr::scene::ISceneNodeAnimator * ( ::MySceneManager::* )( ::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::u32 ) )( &::MySceneManager::createSelfDelFlyStraightAnimator )
            , ( bp::arg("startPoint"), bp::arg("endPoint"), bp::arg("timeForWay") )
                /* undefined call policies */ )    
        .def( 
            "createShakeAnimatorAnimator"
            , (::irr::scene::ISceneNodeAnimator * ( ::MySceneManager::* )( ::irr::u32,::irr::u32,::irr::f32,::irr::f32 ) )( &::MySceneManager::createShakeAnimatorAnimator )
            , ( bp::arg("delay"), bp::arg("duration"), bp::arg("ampFrom"), bp::arg("ampTo")=0 )
                /* undefined call policies */ )    
        .def( 
            "createTextureAnimator"
            , (::irr::scene::ISceneNodeAnimator * ( ::MySceneManager::* )( ::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > const &,::irr::s32,bool ) )( &::MySceneManager::createTextureAnimator )
            , ( bp::arg("textures"), bp::arg("timePerFrame"), bp::arg("loop")=(bool)(true) )
                /* undefined call policies */ )    
        .def( 
            "createTheBeginMoveAnimator"
            , (::irr::scene::ISceneNodeAnimator * ( ::MySceneManager::* )( ::irr::core::vector3df,::irr::core::vector3df,::irr::u32,::irr::u32,int ) )( &::MySceneManager::createTheBeginMoveAnimator )
            , ( bp::arg("thebeginpoint"), bp::arg("theendpoint"), bp::arg("delay"), bp::arg("duration"), bp::arg("circle_n") )
                /* undefined call policies */ )    
        .def( 
            "getMesh"
            , (::irr::scene::IAnimatedMesh * ( ::MySceneManager::* )( ::std::wstring const & ) )( &::MySceneManager::getMesh )
            , ( bp::arg("filename") )
                /* undefined call policies */ )    
        .def( 
            "getRootSceneNode"
            , (::irr::scene::ISceneNode * ( ::MySceneManager::* )(  ) )( &::MySceneManager::getRootSceneNode )
                /* undefined call policies */ )    
        .def( 
            "getSceneNodeFromId"
            , (::irr::scene::ISceneNode * ( ::MySceneManager::* )( ::irr::s32,::irr::scene::ISceneNode * ) )( &::MySceneManager::getSceneNodeFromId )
            , ( bp::arg("id"), bp::arg("start")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "getSceneNodeFromName"
            , (::irr::scene::ISceneNode * ( ::MySceneManager::* )( ::irr::c8 const *,::irr::scene::ISceneNode * ) )( &::MySceneManager::getSceneNodeFromName )
            , ( bp::arg("name"), bp::arg("start")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "getTexture"
            , (::irr::video::ITexture * ( ::MySceneManager::* )( ::std::wstring const & ) )( &::MySceneManager::getTexture )
            , ( bp::arg("filename") )
                /* undefined call policies */ );

				bp::class_< IEventReceiver_wrapper, boost::noncopyable >( "IEventReceiver" )    
					.def( 
					"OnEvent"
					, bp::pure_virtual( (bool ( ::irr::IEventReceiver::* )( ::irr::SEvent const & ) )(&::irr::IEventReceiver::OnEvent) )
					, ( bp::arg("event") ) );

    bp::class_< ISceneNodeAnimator_wrapper, bp::bases< irr::io::IAttributeExchangingObject, irr::IEventReceiver >, boost::noncopyable >( "ISceneNodeAnimator" )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )( ::irr::SEvent const & ) )(&::irr::scene::ISceneNodeAnimator::OnEvent)
            , (bool ( ISceneNodeAnimator_wrapper::* )( ::irr::SEvent const & ) )(&ISceneNodeAnimator_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "animateNode"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimator::* )( ::irr::scene::ISceneNode *,::irr::u32 ) )(&::irr::scene::ISceneNodeAnimator::animateNode) )
            , ( bp::arg("node"), bp::arg("timeMs") ) )    
        .def( 
            "createClone"
            , bp::pure_virtual( (::irr::scene::ISceneNodeAnimator * ( ::irr::scene::ISceneNodeAnimator::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNodeAnimator::createClone) )
            , ( bp::arg("node"), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_ANIMATOR_TYPE ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::getType)
            , (::irr::scene::ESCENE_NODE_ANIMATOR_TYPE ( ISceneNodeAnimator_wrapper::* )(  ) const)(&ISceneNodeAnimator_wrapper::default_getType) )    
        .def( 
            "hasFinished"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::hasFinished)
            , (bool ( ISceneNodeAnimator_wrapper::* )(  ) const)(&ISceneNodeAnimator_wrapper::default_hasFinished) )    
        .def( 
            "isEventReceiverEnabled"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::isEventReceiverEnabled)
            , (bool ( ISceneNodeAnimator_wrapper::* )(  ) const)(&ISceneNodeAnimator_wrapper::default_isEventReceiverEnabled) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( ISceneNodeAnimator_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&ISceneNodeAnimator_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( ISceneNodeAnimator_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&ISceneNodeAnimator_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( ISceneNodeAnimator_wrapper::* )( ::irr::c8 const * ) )(&ISceneNodeAnimator_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< MySceneNodeAnimatorScale_wrapper, bp::bases< irr::scene::ISceneNodeAnimator > >( "MySceneNodeAnimatorScale", bp::init< irr::u32, irr::u32, irr::core::vector3df, bp::optional< AS_MOVE_TYPE, irr::f32 > >(( bp::arg("delay"), bp::arg("duration"), bp::arg("scale"), bp::arg("type")=::AS_MT_LINER, bp::arg("factor")=0 )) )    
        .def( 
            "animateNode"
            , (void ( ::MySceneNodeAnimatorScale::* )( ::irr::scene::ISceneNode *,::irr::u32 ) )(&::MySceneNodeAnimatorScale::animateNode)
            , (void ( MySceneNodeAnimatorScale_wrapper::* )( ::irr::scene::ISceneNode *,::irr::u32 ) )(&MySceneNodeAnimatorScale_wrapper::default_animateNode)
            , ( bp::arg("node"), bp::arg("timeMs") ) )    
        .def( 
            "createClone"
            , (::irr::scene::ISceneNodeAnimator * ( ::MySceneNodeAnimatorScale::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::MySceneNodeAnimatorScale::createClone)
            , (::irr::scene::ISceneNodeAnimator * ( MySceneNodeAnimatorScale_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&MySceneNodeAnimatorScale_wrapper::default_createClone)
            , ( bp::arg("node"), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )( ::irr::SEvent const & ) )(&::irr::scene::ISceneNodeAnimator::OnEvent)
            , (bool ( MySceneNodeAnimatorScale_wrapper::* )( ::irr::SEvent const & ) )(&MySceneNodeAnimatorScale_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( MySceneNodeAnimatorScale_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&MySceneNodeAnimatorScale_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_ANIMATOR_TYPE ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::getType)
            , (::irr::scene::ESCENE_NODE_ANIMATOR_TYPE ( MySceneNodeAnimatorScale_wrapper::* )(  ) const)(&MySceneNodeAnimatorScale_wrapper::default_getType) )    
        .def( 
            "hasFinished"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::hasFinished)
            , (bool ( MySceneNodeAnimatorScale_wrapper::* )(  ) const)(&MySceneNodeAnimatorScale_wrapper::default_hasFinished) )    
        .def( 
            "isEventReceiverEnabled"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::isEventReceiverEnabled)
            , (bool ( MySceneNodeAnimatorScale_wrapper::* )(  ) const)(&MySceneNodeAnimatorScale_wrapper::default_isEventReceiverEnabled) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( MySceneNodeAnimatorScale_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&MySceneNodeAnimatorScale_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( MySceneNodeAnimatorScale_wrapper::* )( ::irr::c8 const * ) )(&MySceneNodeAnimatorScale_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< RelateCameraAnimatorMove_wrapper, bp::bases< irr::scene::ISceneNodeAnimator > >( "RelateCameraAnimatorMove", bp::init< irr::u32, irr::u32, irr::scene::ICameraSceneNode *, irr::core::vector3df, irr::core::vector3df, bp::optional< RM_MOVE_TYPE, irr::f32 > >(( bp::arg("delay"), bp::arg("duration"), bp::arg("camera"), bp::arg("start"), bp::arg("end"), bp::arg("moveType")=::RM_MT_LINER, bp::arg("factor")=0 )) )    
        .def( 
            "animateNode"
            , (void ( ::RelateCameraAnimatorMove::* )( ::irr::scene::ISceneNode *,::irr::u32 ) )(&::RelateCameraAnimatorMove::animateNode)
            , (void ( RelateCameraAnimatorMove_wrapper::* )( ::irr::scene::ISceneNode *,::irr::u32 ) )(&RelateCameraAnimatorMove_wrapper::default_animateNode)
            , ( bp::arg("node"), bp::arg("timeMs") ) )    
        .def( 
            "createClone"
            , (::irr::scene::ISceneNodeAnimator * ( ::RelateCameraAnimatorMove::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::RelateCameraAnimatorMove::createClone)
            , (::irr::scene::ISceneNodeAnimator * ( RelateCameraAnimatorMove_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&RelateCameraAnimatorMove_wrapper::default_createClone)
            , ( bp::arg("node"), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )( ::irr::SEvent const & ) )(&::irr::scene::ISceneNodeAnimator::OnEvent)
            , (bool ( RelateCameraAnimatorMove_wrapper::* )( ::irr::SEvent const & ) )(&RelateCameraAnimatorMove_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( RelateCameraAnimatorMove_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&RelateCameraAnimatorMove_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_ANIMATOR_TYPE ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::getType)
            , (::irr::scene::ESCENE_NODE_ANIMATOR_TYPE ( RelateCameraAnimatorMove_wrapper::* )(  ) const)(&RelateCameraAnimatorMove_wrapper::default_getType) )    
        .def( 
            "hasFinished"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::hasFinished)
            , (bool ( RelateCameraAnimatorMove_wrapper::* )(  ) const)(&RelateCameraAnimatorMove_wrapper::default_hasFinished) )    
        .def( 
            "isEventReceiverEnabled"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::isEventReceiverEnabled)
            , (bool ( RelateCameraAnimatorMove_wrapper::* )(  ) const)(&RelateCameraAnimatorMove_wrapper::default_isEventReceiverEnabled) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( RelateCameraAnimatorMove_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&RelateCameraAnimatorMove_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( RelateCameraAnimatorMove_wrapper::* )( ::irr::c8 const * ) )(&RelateCameraAnimatorMove_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< ILogger_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "ILogger" )    
        .def( 
            "getLogLevel"
            , bp::pure_virtual( (::irr::ELOG_LEVEL ( ::irr::ILogger::* )(  ) const)(&::irr::ILogger::getLogLevel) ) )    
        .def( 
            "log"
            , bp::pure_virtual( (void ( ::irr::ILogger::* )( ::irr::c8 const *,::irr::ELOG_LEVEL ) )(&::irr::ILogger::log) )
            , ( bp::arg("text"), bp::arg("ll")=::irr::ELL_INFORMATION ) )    
        .def( 
            "log"
            , bp::pure_virtual( (void ( ::irr::ILogger::* )( ::irr::c8 const *,::irr::c8 const *,::irr::ELOG_LEVEL ) )(&::irr::ILogger::log) )
            , ( bp::arg("text"), bp::arg("hint"), bp::arg("ll")=::irr::ELL_INFORMATION ) )    
        .def( 
            "log"
            , bp::pure_virtual( (void ( ::irr::ILogger::* )( ::irr::c8 const *,wchar_t const *,::irr::ELOG_LEVEL ) )(&::irr::ILogger::log) )
            , ( bp::arg("text"), bp::arg("hint"), bp::arg("ll")=::irr::ELL_INFORMATION ) )    
        .def( 
            "log"
            , bp::pure_virtual( (void ( ::irr::ILogger::* )( wchar_t const *,wchar_t const *,::irr::ELOG_LEVEL ) )(&::irr::ILogger::log) )
            , ( bp::arg("text"), bp::arg("hint"), bp::arg("ll")=::irr::ELL_INFORMATION ) )    
        .def( 
            "log"
            , bp::pure_virtual( (void ( ::irr::ILogger::* )( wchar_t const *,::irr::ELOG_LEVEL ) )(&::irr::ILogger::log) )
            , ( bp::arg("text"), bp::arg("ll")=::irr::ELL_INFORMATION ) )    
        .def( 
            "setLogLevel"
            , bp::pure_virtual( (void ( ::irr::ILogger::* )( ::irr::ELOG_LEVEL ) )(&::irr::ILogger::setLogLevel) )
            , ( bp::arg("ll") ) )    
        .def( 
            "setDebugName"
            , (void ( ILogger_wrapper::* )( ::irr::c8 const * ) )(&ILogger_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IOSOperator_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IOSOperator" )    
        .def( 
            "copyToClipboard"
            , bp::pure_virtual( (void ( ::irr::IOSOperator::* )( ::irr::c8 const * ) const)(&::irr::IOSOperator::copyToClipboard) )
            , ( bp::arg("text") ) )    
        .def( 
            "getOperationSystemVersion"
            , bp::pure_virtual( (wchar_t const * ( ::irr::IOSOperator::* )(  ) const)(&::irr::IOSOperator::getOperationSystemVersion) )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getProcessorSpeedMHz"
            , bp::pure_virtual( (bool ( ::irr::IOSOperator::* )( ::irr::u32 * ) const)(&::irr::IOSOperator::getProcessorSpeedMHz) )
            , ( bp::arg("MHz") ) )    
        .def( 
            "getSystemMemory"
            , bp::pure_virtual( (bool ( ::irr::IOSOperator::* )( ::irr::u32 *,::irr::u32 * ) const)(&::irr::IOSOperator::getSystemMemory) )
            , ( bp::arg("Total"), bp::arg("Avail") ) )    
        .def( 
            "getTextFromClipboard"
            , bp::pure_virtual( (::irr::c8 const * ( ::irr::IOSOperator::* )(  ) const)(&::irr::IOSOperator::getTextFromClipboard) ) )    
        .def( 
            "setDebugName"
            , (void ( IOSOperator_wrapper::* )( ::irr::c8 const * ) )(&IOSOperator_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< ITimer_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "ITimer" )    
        .def( 
            "getRealTime"
            , bp::pure_virtual( (::irr::u32 ( ::irr::ITimer::* )(  ) const)(&::irr::ITimer::getRealTime) ) )    
        .def( 
            "getSpeed"
            , bp::pure_virtual( (::irr::f32 ( ::irr::ITimer::* )(  ) const)(&::irr::ITimer::getSpeed) ) )    
        .def( 
            "getTime"
            , bp::pure_virtual( (::irr::u32 ( ::irr::ITimer::* )(  ) const)(&::irr::ITimer::getTime) ) )    
        .def( 
            "isStopped"
            , bp::pure_virtual( (bool ( ::irr::ITimer::* )(  ) const)(&::irr::ITimer::isStopped) ) )    
        .def( 
            "setSpeed"
            , bp::pure_virtual( (void ( ::irr::ITimer::* )( ::irr::f32 ) )(&::irr::ITimer::setSpeed) )
            , ( bp::arg("speed")=1.0e+0f ) )    
        .def( 
            "setTime"
            , bp::pure_virtual( (void ( ::irr::ITimer::* )( ::irr::u32 ) )(&::irr::ITimer::setTime) )
            , ( bp::arg("time") ) )    
        .def( 
            "start"
            , bp::pure_virtual( (void ( ::irr::ITimer::* )(  ) )(&::irr::ITimer::start) ) )    
        .def( 
            "stop"
            , bp::pure_virtual( (void ( ::irr::ITimer::* )(  ) )(&::irr::ITimer::stop) ) )    
        .def( 
            "tick"
            , bp::pure_virtual( (void ( ::irr::ITimer::* )(  ) )(&::irr::ITimer::tick) ) )    
        .def( 
            "setDebugName"
            , (void ( ITimer_wrapper::* )( ::irr::c8 const * ) )(&ITimer_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IrrlichtDevice_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IrrlichtDevice" )    
        .def( 
            "activateJoysticks"
            , bp::pure_virtual( (bool ( ::irr::IrrlichtDevice::* )( ::irr::core::array< irr::SJoystickInfo, irr::core::irrAllocator< irr::SJoystickInfo > > & ) )(&::irr::IrrlichtDevice::activateJoysticks) )
            , ( bp::arg("joystickInfo") ) )    
        .def( 
            "clearSystemMessages"
            , bp::pure_virtual( (void ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::clearSystemMessages) ) )    
        .def( 
            "closeDevice"
            , bp::pure_virtual( (void ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::closeDevice) ) )    
        .def( 
            "getColorFormat"
            , bp::pure_virtual( (::irr::video::ECOLOR_FORMAT ( ::irr::IrrlichtDevice::* )(  ) const)(&::irr::IrrlichtDevice::getColorFormat) ) )    
        .def( 
            "getCursorControl"
            , bp::pure_virtual( (::irr::gui::ICursorControl * ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::getCursorControl) )
                /* undefined call policies */ )    
        .def( 
            "getEventReceiver"
            , bp::pure_virtual( (::irr::IEventReceiver * ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::getEventReceiver) )
                /* undefined call policies */ )    
        .def( 
            "getFileSystem"
            , bp::pure_virtual( (::irr::io::IFileSystem * ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::getFileSystem) )
                /* undefined call policies */ )    
        .def( 
            "getGUIEnvironment"
            , bp::pure_virtual( (::irr::gui::IGUIEnvironment * ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::getGUIEnvironment) )
                /* undefined call policies */ )    
        .def( 
            "getGammaRamp"
            , bp::pure_virtual( (bool ( ::irr::IrrlichtDevice::* )( ::irr::f32 &,::irr::f32 &,::irr::f32 &,::irr::f32 &,::irr::f32 & ) )(&::irr::IrrlichtDevice::getGammaRamp) )
            , ( bp::arg("red"), bp::arg("green"), bp::arg("blue"), bp::arg("brightness"), bp::arg("contrast") ) )    
        .def( 
            "getLogger"
            , bp::pure_virtual( (::irr::ILogger * ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::getLogger) )
                /* undefined call policies */ )    
        .def( 
            "getOSOperator"
            , bp::pure_virtual( (::irr::IOSOperator * ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::getOSOperator) )
                /* undefined call policies */ )    
        .def( 
            "getSceneManager"
            , bp::pure_virtual( (::irr::scene::ISceneManager * ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::getSceneManager) )
                /* undefined call policies */ )    
        .def( 
            "getTimer"
            , bp::pure_virtual( (::irr::ITimer * ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::getTimer) )
                /* undefined call policies */ )    
        .def( 
            "getType"
            , bp::pure_virtual( (::irr::E_DEVICE_TYPE ( ::irr::IrrlichtDevice::* )(  ) const)(&::irr::IrrlichtDevice::getType) ) )    
        .def( 
            "getVersion"
            , bp::pure_virtual( (::irr::c8 const * ( ::irr::IrrlichtDevice::* )(  ) const)(&::irr::IrrlichtDevice::getVersion) ) )    
        .def( 
            "getVideoDriver"
            , bp::pure_virtual( (::irr::video::IVideoDriver * ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::getVideoDriver) )
                /* undefined call policies */ )    
        .def( 
            "getVideoModeList"
            , bp::pure_virtual( (::irr::video::IVideoModeList * ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::getVideoModeList) )
                /* undefined call policies */ )    
        .def( 
            "isDriverSupported"
            , (bool (*)( ::irr::video::E_DRIVER_TYPE ))( &::irr::IrrlichtDevice::isDriverSupported )
            , ( bp::arg("driver") ) )    
        .def( 
            "isFullscreen"
            , bp::pure_virtual( (bool ( ::irr::IrrlichtDevice::* )(  ) const)(&::irr::IrrlichtDevice::isFullscreen) ) )    
        .def( 
            "isWindowActive"
            , bp::pure_virtual( (bool ( ::irr::IrrlichtDevice::* )(  ) const)(&::irr::IrrlichtDevice::isWindowActive) ) )    
        .def( 
            "isWindowFocused"
            , bp::pure_virtual( (bool ( ::irr::IrrlichtDevice::* )(  ) const)(&::irr::IrrlichtDevice::isWindowFocused) ) )    
        .def( 
            "isWindowMinimized"
            , bp::pure_virtual( (bool ( ::irr::IrrlichtDevice::* )(  ) const)(&::irr::IrrlichtDevice::isWindowMinimized) ) )    
        .def( 
            "maximizeWindow"
            , bp::pure_virtual( (void ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::maximizeWindow) ) )    
        .def( 
            "minimizeWindow"
            , bp::pure_virtual( (void ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::minimizeWindow) ) )    
        .def( 
            "postEventFromUser"
            , bp::pure_virtual( (bool ( ::irr::IrrlichtDevice::* )( ::irr::SEvent const & ) )(&::irr::IrrlichtDevice::postEventFromUser) )
            , ( bp::arg("event") ) )    
        .def( 
            "restoreWindow"
            , bp::pure_virtual( (void ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::restoreWindow) ) )    
        .def( 
            "run"
            , bp::pure_virtual( (bool ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::run) ) )    
        .def( 
            "setEventReceiver"
            , bp::pure_virtual( (void ( ::irr::IrrlichtDevice::* )( ::irr::IEventReceiver * ) )(&::irr::IrrlichtDevice::setEventReceiver) )
            , ( bp::arg("receiver") ) )    
        .def( 
            "setGammaRamp"
            , bp::pure_virtual( (bool ( ::irr::IrrlichtDevice::* )( ::irr::f32,::irr::f32,::irr::f32,::irr::f32,::irr::f32 ) )(&::irr::IrrlichtDevice::setGammaRamp) )
            , ( bp::arg("red"), bp::arg("green"), bp::arg("blue"), bp::arg("relativebrightness"), bp::arg("relativecontrast") ) )    
        .def( 
            "setInputReceivingSceneManager"
            , bp::pure_virtual( (void ( ::irr::IrrlichtDevice::* )( ::irr::scene::ISceneManager * ) )(&::irr::IrrlichtDevice::setInputReceivingSceneManager) )
            , ( bp::arg("sceneManager") ) )    
        .def( 
            "setResizable"
            , bp::pure_virtual( (void ( ::irr::IrrlichtDevice::* )( bool ) )(&::irr::IrrlichtDevice::setResizable) )
            , ( bp::arg("resize")=(bool)(false) ) )    
        .def( 
            "setWindowCaption"
            , bp::pure_virtual( (void ( ::irr::IrrlichtDevice::* )( wchar_t const * ) )(&::irr::IrrlichtDevice::setWindowCaption) )
            , ( bp::arg("text") ) )    
        .def( 
            "sleep"
            , bp::pure_virtual( (void ( ::irr::IrrlichtDevice::* )( ::irr::u32,bool ) )(&::irr::IrrlichtDevice::sleep) )
            , ( bp::arg("timeMs"), bp::arg("pauseTimer")=(bool)(false) ) )    
        .def( 
            "yield"
            , bp::pure_virtual( (void ( ::irr::IrrlichtDevice::* )(  ) )(&::irr::IrrlichtDevice::yield) ) )    
        .def( 
            "setDebugName"
            , (void ( IrrlichtDevice_wrapper::* )( ::irr::c8 const * ) )(&IrrlichtDevice_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .staticmethod( "isDriverSupported" );

    { //::irr::SEvent
        typedef bp::class_< SEvent_wrapper > SEvent_exposer_t;
        SEvent_exposer_t SEvent_exposer = SEvent_exposer_t( "SEvent" );
        bp::scope SEvent_scope( SEvent_exposer );
        SEvent_exposer.def_readwrite( "GUIEvent", &irr::SEvent::GUIEvent );
        SEvent_exposer.def_readwrite( "JoystickEvent", &irr::SEvent::JoystickEvent );
        SEvent_exposer.def_readwrite( "KeyInput", &irr::SEvent::KeyInput );
        SEvent_exposer.def_readwrite( "LogEvent", &irr::SEvent::LogEvent );
        SEvent_exposer.def_readwrite( "MouseInput", &irr::SEvent::MouseInput );
        SEvent_exposer.def_readwrite( "UserEvent", &irr::SEvent::UserEvent );
        bp::class_< SEvent_wrapper::SGUIEvent_wrapper >( "SGUIEvent" )    
            .add_property( "Caller"
                        , bp::make_function( (::irr::gui::IGUIElement * (*)( ::irr::SEvent::SGUIEvent const & ))(&SEvent_wrapper::SGUIEvent_wrapper::get_Caller), bp::return_internal_reference< >() )
                        , bp::make_function( (void (*)( ::irr::SEvent::SGUIEvent &,::irr::gui::IGUIElement * ))(&SEvent_wrapper::SGUIEvent_wrapper::set_Caller), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
            .add_property( "Element"
                        , bp::make_function( (::irr::gui::IGUIElement * (*)( ::irr::SEvent::SGUIEvent const & ))(&SEvent_wrapper::SGUIEvent_wrapper::get_Element), bp::return_internal_reference< >() )
                        , bp::make_function( (void (*)( ::irr::SEvent::SGUIEvent &,::irr::gui::IGUIElement * ))(&SEvent_wrapper::SGUIEvent_wrapper::set_Element), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
            .def_readwrite( "EventType", &irr::SEvent::SGUIEvent::EventType );
        { //::irr::SEvent::SJoystickEvent
            typedef bp::class_< SEvent_wrapper::SJoystickEvent_wrapper > SJoystickEvent_exposer_t;
            SJoystickEvent_exposer_t SJoystickEvent_exposer = SJoystickEvent_exposer_t( "SJoystickEvent" );
            bp::scope SJoystickEvent_scope( SJoystickEvent_exposer );
            bp::scope().attr("NUMBER_OF_BUTTONS") = (int)irr::SEvent::SJoystickEvent::NUMBER_OF_BUTTONS;
            bp::scope().attr("AXIS_X") = (int)irr::SEvent::SJoystickEvent::AXIS_X;
            bp::scope().attr("AXIS_Y") = (int)irr::SEvent::SJoystickEvent::AXIS_Y;
            bp::scope().attr("AXIS_Z") = (int)irr::SEvent::SJoystickEvent::AXIS_Z;
            bp::scope().attr("AXIS_R") = (int)irr::SEvent::SJoystickEvent::AXIS_R;
            bp::scope().attr("AXIS_U") = (int)irr::SEvent::SJoystickEvent::AXIS_U;
            bp::scope().attr("AXIS_V") = (int)irr::SEvent::SJoystickEvent::AXIS_V;
            bp::scope().attr("NUMBER_OF_AXES") = (int)irr::SEvent::SJoystickEvent::NUMBER_OF_AXES;
            { //::irr::SEvent::SJoystickEvent::IsButtonPressed
            
                typedef bool ( ::irr::SEvent::SJoystickEvent::*IsButtonPressed_function_type )( ::irr::u32 ) const;
                
                SJoystickEvent_exposer.def( 
                    "IsButtonPressed"
                    , IsButtonPressed_function_type( &::irr::SEvent::SJoystickEvent::IsButtonPressed )
                    , ( bp::arg("button") ) );
            
            }
            pyplusplus::containers::static_sized::register_array_1< short int, 6 >( "__array_1_short_int_6" );
            { //irr::SEvent::SJoystickEvent::Axis [variable], type=irr::s16[6]
            
                typedef pyplusplus::containers::static_sized::array_1_t< short int, 6> ( *array_wrapper_creator )( ::irr::SEvent::SJoystickEvent & );
                
                SJoystickEvent_exposer.add_property( "Axis"
                    , bp::make_function( array_wrapper_creator(&SEvent_wrapper::SJoystickEvent_wrapper::pyplusplus_Axis_wrapper)
                                        , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
            }
            SJoystickEvent_exposer.def_readwrite( "ButtonStates", &irr::SEvent::SJoystickEvent::ButtonStates );
            SJoystickEvent_exposer.def_readwrite( "Joystick", &irr::SEvent::SJoystickEvent::Joystick );
            SJoystickEvent_exposer.def_readwrite( "POV", &irr::SEvent::SJoystickEvent::POV );
        }
        bp::class_< SEvent_wrapper::SKeyInput_wrapper >( "SKeyInput" )    
            .def_readwrite( "Char", &irr::SEvent::SKeyInput::Char )    
            .add_property( "Control"
                        , bp::make_function( (bool (*)( ::irr::SEvent::SKeyInput const & ))(&SEvent_wrapper::SKeyInput_wrapper::get_Control) )
                        , bp::make_function( (void (*)( ::irr::SEvent::SKeyInput &,bool ))(&SEvent_wrapper::SKeyInput_wrapper::set_Control) ) )    
            .def_readwrite( "Key", &irr::SEvent::SKeyInput::Key )    
            .add_property( "PressedDown"
                        , bp::make_function( (bool (*)( ::irr::SEvent::SKeyInput const & ))(&SEvent_wrapper::SKeyInput_wrapper::get_PressedDown) )
                        , bp::make_function( (void (*)( ::irr::SEvent::SKeyInput &,bool ))(&SEvent_wrapper::SKeyInput_wrapper::set_PressedDown) ) )    
            .add_property( "Shift"
                        , bp::make_function( (bool (*)( ::irr::SEvent::SKeyInput const & ))(&SEvent_wrapper::SKeyInput_wrapper::get_Shift) )
                        , bp::make_function( (void (*)( ::irr::SEvent::SKeyInput &,bool ))(&SEvent_wrapper::SKeyInput_wrapper::set_Shift) ) );
        bp::class_< irr::SEvent::SLogEvent >( "SLogEvent" )    
            .def_readwrite( "Level", &irr::SEvent::SLogEvent::Level );
        bp::class_< SEvent_wrapper::SMouseInput_wrapper >( "SMouseInput" )    
            .def( 
                "isLeftPressed"
                , (bool ( ::irr::SEvent::SMouseInput::* )(  ) const)( &::irr::SEvent::SMouseInput::isLeftPressed ) )    
            .def( 
                "isMiddlePressed"
                , (bool ( ::irr::SEvent::SMouseInput::* )(  ) const)( &::irr::SEvent::SMouseInput::isMiddlePressed ) )    
            .def( 
                "isRightPressed"
                , (bool ( ::irr::SEvent::SMouseInput::* )(  ) const)( &::irr::SEvent::SMouseInput::isRightPressed ) )    
            .def_readwrite( "ButtonStates", &irr::SEvent::SMouseInput::ButtonStates )    
            .add_property( "Control"
                        , bp::make_function( (bool (*)( ::irr::SEvent::SMouseInput const & ))(&SEvent_wrapper::SMouseInput_wrapper::get_Control) )
                        , bp::make_function( (void (*)( ::irr::SEvent::SMouseInput &,bool ))(&SEvent_wrapper::SMouseInput_wrapper::set_Control) ) )    
            .def_readwrite( "Event", &irr::SEvent::SMouseInput::Event )    
            .add_property( "Shift"
                        , bp::make_function( (bool (*)( ::irr::SEvent::SMouseInput const & ))(&SEvent_wrapper::SMouseInput_wrapper::get_Shift) )
                        , bp::make_function( (void (*)( ::irr::SEvent::SMouseInput &,bool ))(&SEvent_wrapper::SMouseInput_wrapper::set_Shift) ) )    
            .def_readwrite( "Wheel", &irr::SEvent::SMouseInput::Wheel )    
            .def_readwrite( "X", &irr::SEvent::SMouseInput::X )    
            .def_readwrite( "Y", &irr::SEvent::SMouseInput::Y );
        bp::class_< irr::SEvent::SUserEvent >( "SUserEvent" )    
            .def_readwrite( "UserData1", &irr::SEvent::SUserEvent::UserData1 )    
            .def_readwrite( "UserData2", &irr::SEvent::SUserEvent::UserData2 );
        SEvent_exposer.def_readwrite( "EventType", &irr::SEvent::EventType );
    }

    { //::irr::SIrrlichtCreationParameters
        typedef bp::class_< SIrrlichtCreationParameters_wrapper > SIrrlichtCreationParameters_exposer_t;
        SIrrlichtCreationParameters_exposer_t SIrrlichtCreationParameters_exposer = SIrrlichtCreationParameters_exposer_t( "SIrrlichtCreationParameters", bp::init< >() );
        bp::scope SIrrlichtCreationParameters_scope( SIrrlichtCreationParameters_exposer );
        SIrrlichtCreationParameters_exposer.def( bp::init< irr::SIrrlichtCreationParameters const & >(( bp::arg("other") )) );
        { //::irr::SIrrlichtCreationParameters::operator=
        
            typedef ::irr::SIrrlichtCreationParameters & ( ::irr::SIrrlichtCreationParameters::*assign_function_type )( ::irr::SIrrlichtCreationParameters const & ) ;
            
            SIrrlichtCreationParameters_exposer.def( 
                "assign"
                , assign_function_type( &::irr::SIrrlichtCreationParameters::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        SIrrlichtCreationParameters_exposer.def_readwrite( "AntiAlias", &irr::SIrrlichtCreationParameters::AntiAlias );
        SIrrlichtCreationParameters_exposer.def_readwrite( "Bits", &irr::SIrrlichtCreationParameters::Bits );
        SIrrlichtCreationParameters_exposer.def_readwrite( "DeviceType", &irr::SIrrlichtCreationParameters::DeviceType );
        SIrrlichtCreationParameters_exposer.def_readwrite( "Doublebuffer", &irr::SIrrlichtCreationParameters::Doublebuffer );
        SIrrlichtCreationParameters_exposer.def_readwrite( "DriverType", &irr::SIrrlichtCreationParameters::DriverType );
        SIrrlichtCreationParameters_exposer.add_property( "EventReceiver"
                    , bp::make_function( (::irr::IEventReceiver * (*)( ::irr::SIrrlichtCreationParameters const & ))(&SIrrlichtCreationParameters_wrapper::get_EventReceiver), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::irr::SIrrlichtCreationParameters &,::irr::IEventReceiver * ))(&SIrrlichtCreationParameters_wrapper::set_EventReceiver), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        SIrrlichtCreationParameters_exposer.def_readwrite( "Fullscreen", &irr::SIrrlichtCreationParameters::Fullscreen );
        SIrrlichtCreationParameters_exposer.def_readwrite( "HighPrecisionFPU", &irr::SIrrlichtCreationParameters::HighPrecisionFPU );
        SIrrlichtCreationParameters_exposer.def_readwrite( "IgnoreInput", &irr::SIrrlichtCreationParameters::IgnoreInput );
        SIrrlichtCreationParameters_exposer.def_readwrite( "LoggingLevel", &irr::SIrrlichtCreationParameters::LoggingLevel );
        SIrrlichtCreationParameters_exposer.def_readwrite( "Stencilbuffer", &irr::SIrrlichtCreationParameters::Stencilbuffer );
        SIrrlichtCreationParameters_exposer.def_readwrite( "Stereobuffer", &irr::SIrrlichtCreationParameters::Stereobuffer );
        SIrrlichtCreationParameters_exposer.def_readwrite( "Vsync", &irr::SIrrlichtCreationParameters::Vsync );
        SIrrlichtCreationParameters_exposer.def_readwrite( "WindowSize", &irr::SIrrlichtCreationParameters::WindowSize );
        SIrrlichtCreationParameters_exposer.def_readwrite( "WithAlphaChannel", &irr::SIrrlichtCreationParameters::WithAlphaChannel );
        SIrrlichtCreationParameters_exposer.def_readwrite( "ZBufferBits", &irr::SIrrlichtCreationParameters::ZBufferBits );
    }

    { //::irr::SJoystickInfo
        typedef bp::class_< irr::SJoystickInfo > SJoystickInfo_exposer_t;
        SJoystickInfo_exposer_t SJoystickInfo_exposer = SJoystickInfo_exposer_t( "SJoystickInfo" );
        bp::scope SJoystickInfo_scope( SJoystickInfo_exposer );
        bp::scope().attr("POV_HAT_PRESENT") = (int)irr::SJoystickInfo::POV_HAT_PRESENT;
        bp::scope().attr("POV_HAT_ABSENT") = (int)irr::SJoystickInfo::POV_HAT_ABSENT;
        bp::scope().attr("POV_HAT_UNKNOWN") = (int)irr::SJoystickInfo::POV_HAT_UNKNOWN;
        SJoystickInfo_exposer.def_readwrite( "Axes", &irr::SJoystickInfo::Axes );
        SJoystickInfo_exposer.def_readwrite( "Buttons", &irr::SJoystickInfo::Buttons );
        SJoystickInfo_exposer.def_readwrite( "Joystick", &irr::SJoystickInfo::Joystick );
        SJoystickInfo_exposer.def_readwrite( "Name", &irr::SJoystickInfo::Name );
        SJoystickInfo_exposer.def_readwrite( "PovHat", &irr::SJoystickInfo::PovHat );
    }

    { //::irr::core::CMatrix4< float >
        typedef bp::class_< irr::core::CMatrix4< float >, boost::noncopyable > matrix4_exposer_t;
        matrix4_exposer_t matrix4_exposer = matrix4_exposer_t( "matrix4", bp::init< bp::optional< irr::core::CMatrix4< float >::eConstructor > >(( bp::arg("constructor")=(long)(irr::core::CMatrix4<T>::EM4CONST_IDENTITY) )) );
        bp::scope matrix4_scope( matrix4_exposer );
        bp::enum_< irr::core::CMatrix4<float>::eConstructor>("eConstructor")
            .value("EM4CONST_NOTHING", irr::core::CMatrix4<float>::EM4CONST_NOTHING)
            .value("EM4CONST_COPY", irr::core::CMatrix4<float>::EM4CONST_COPY)
            .value("EM4CONST_IDENTITY", irr::core::CMatrix4<float>::EM4CONST_IDENTITY)
            .value("EM4CONST_TRANSPOSED", irr::core::CMatrix4<float>::EM4CONST_TRANSPOSED)
            .value("EM4CONST_INVERSE", irr::core::CMatrix4<float>::EM4CONST_INVERSE)
            .value("EM4CONST_INVERSE_TRANSPOSED", irr::core::CMatrix4<float>::EM4CONST_INVERSE_TRANSPOSED)
            .export_values()
            ;
        bp::implicitly_convertible< irr::core::CMatrix4< float >::eConstructor, irr::core::CMatrix4< float > >();
        matrix4_exposer.def( bp::init< irr::core::CMatrix4< float > const &, bp::optional< irr::core::CMatrix4< float >::eConstructor > >(( bp::arg("other"), bp::arg("constructor")=(long)(irr::core::CMatrix4<T>::EM4CONST_COPY) )) );
        bp::implicitly_convertible< irr::core::CMatrix4< float > const &, irr::core::CMatrix4< float > >();
        { //::irr::core::CMatrix4< float >::buildAxisAlignedBillboard
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*buildAxisAlignedBillboard_function_type )( ::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const & ) ;
            
            matrix4_exposer.def( 
                "buildAxisAlignedBillboard"
                , buildAxisAlignedBillboard_function_type( &::irr::core::CMatrix4< float >::buildAxisAlignedBillboard )
                , ( bp::arg("camPos"), bp::arg("center"), bp::arg("translation"), bp::arg("axis"), bp::arg("from") ) );
        
        }
        { //::irr::core::CMatrix4< float >::buildCameraLookAtMatrixLH
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*buildCameraLookAtMatrixLH_function_type )( ::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const & ) ;
            
            matrix4_exposer.def( 
                "buildCameraLookAtMatrixLH"
                , buildCameraLookAtMatrixLH_function_type( &::irr::core::CMatrix4< float >::buildCameraLookAtMatrixLH )
                , ( bp::arg("position"), bp::arg("target"), bp::arg("upVector") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::buildCameraLookAtMatrixRH
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*buildCameraLookAtMatrixRH_function_type )( ::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const & ) ;
            
            matrix4_exposer.def( 
                "buildCameraLookAtMatrixRH"
                , buildCameraLookAtMatrixRH_function_type( &::irr::core::CMatrix4< float >::buildCameraLookAtMatrixRH )
                , ( bp::arg("position"), bp::arg("target"), bp::arg("upVector") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::buildNDCToDCMatrix
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*buildNDCToDCMatrix_function_type )( ::irr::core::rect< int > const &,::irr::f32 ) ;
            
            matrix4_exposer.def( 
                "buildNDCToDCMatrix"
                , buildNDCToDCMatrix_function_type( &::irr::core::CMatrix4< float >::buildNDCToDCMatrix )
                , ( bp::arg("viewport"), bp::arg("zScale") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::buildProjectionMatrixOrthoLH
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*buildProjectionMatrixOrthoLH_function_type )( ::irr::f32,::irr::f32,::irr::f32,::irr::f32 ) ;
            
            matrix4_exposer.def( 
                "buildProjectionMatrixOrthoLH"
                , buildProjectionMatrixOrthoLH_function_type( &::irr::core::CMatrix4< float >::buildProjectionMatrixOrthoLH )
                , ( bp::arg("widthOfViewVolume"), bp::arg("heightOfViewVolume"), bp::arg("zNear"), bp::arg("zFar") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::buildProjectionMatrixOrthoRH
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*buildProjectionMatrixOrthoRH_function_type )( ::irr::f32,::irr::f32,::irr::f32,::irr::f32 ) ;
            
            matrix4_exposer.def( 
                "buildProjectionMatrixOrthoRH"
                , buildProjectionMatrixOrthoRH_function_type( &::irr::core::CMatrix4< float >::buildProjectionMatrixOrthoRH )
                , ( bp::arg("widthOfViewVolume"), bp::arg("heightOfViewVolume"), bp::arg("zNear"), bp::arg("zFar") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::buildProjectionMatrixPerspectiveFovLH
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*buildProjectionMatrixPerspectiveFovLH_function_type )( ::irr::f32,::irr::f32,::irr::f32,::irr::f32 ) ;
            
            matrix4_exposer.def( 
                "buildProjectionMatrixPerspectiveFovLH"
                , buildProjectionMatrixPerspectiveFovLH_function_type( &::irr::core::CMatrix4< float >::buildProjectionMatrixPerspectiveFovLH )
                , ( bp::arg("fieldOfViewRadians"), bp::arg("aspectRatio"), bp::arg("zNear"), bp::arg("zFar") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::buildProjectionMatrixPerspectiveFovRH
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*buildProjectionMatrixPerspectiveFovRH_function_type )( ::irr::f32,::irr::f32,::irr::f32,::irr::f32 ) ;
            
            matrix4_exposer.def( 
                "buildProjectionMatrixPerspectiveFovRH"
                , buildProjectionMatrixPerspectiveFovRH_function_type( &::irr::core::CMatrix4< float >::buildProjectionMatrixPerspectiveFovRH )
                , ( bp::arg("fieldOfViewRadians"), bp::arg("aspectRatio"), bp::arg("zNear"), bp::arg("zFar") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::buildProjectionMatrixPerspectiveLH
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*buildProjectionMatrixPerspectiveLH_function_type )( ::irr::f32,::irr::f32,::irr::f32,::irr::f32 ) ;
            
            matrix4_exposer.def( 
                "buildProjectionMatrixPerspectiveLH"
                , buildProjectionMatrixPerspectiveLH_function_type( &::irr::core::CMatrix4< float >::buildProjectionMatrixPerspectiveLH )
                , ( bp::arg("widthOfViewVolume"), bp::arg("heightOfViewVolume"), bp::arg("zNear"), bp::arg("zFar") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::buildProjectionMatrixPerspectiveRH
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*buildProjectionMatrixPerspectiveRH_function_type )( ::irr::f32,::irr::f32,::irr::f32,::irr::f32 ) ;
            
            matrix4_exposer.def( 
                "buildProjectionMatrixPerspectiveRH"
                , buildProjectionMatrixPerspectiveRH_function_type( &::irr::core::CMatrix4< float >::buildProjectionMatrixPerspectiveRH )
                , ( bp::arg("widthOfViewVolume"), bp::arg("heightOfViewVolume"), bp::arg("zNear"), bp::arg("zFar") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::buildRotateFromTo
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*buildRotateFromTo_function_type )( ::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const & ) ;
            
            matrix4_exposer.def( 
                "buildRotateFromTo"
                , buildRotateFromTo_function_type( &::irr::core::CMatrix4< float >::buildRotateFromTo )
                , ( bp::arg("from"), bp::arg("to") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::buildShadowMatrix
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*buildShadowMatrix_function_type )( ::irr::core::vector3d< float > const &,::irr::core::plane3d< float >,::irr::f32 ) ;
            
            matrix4_exposer.def( 
                "buildShadowMatrix"
                , buildShadowMatrix_function_type( &::irr::core::CMatrix4< float >::buildShadowMatrix )
                , ( bp::arg("light"), bp::arg("plane"), bp::arg("point")=1.0e+0f )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::buildTextureTransform
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*buildTextureTransform_function_type )( ::irr::f32,::irr::core::vector2d< float > const &,::irr::core::vector2d< float > const &,::irr::core::vector2d< float > const & ) ;
            
            matrix4_exposer.def( 
                "buildTextureTransform"
                , buildTextureTransform_function_type( &::irr::core::CMatrix4< float >::buildTextureTransform )
                , ( bp::arg("rotateRad"), bp::arg("rotatecenter"), bp::arg("translate"), bp::arg("scale") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::equals
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef bool ( exported_class_t::*equals_function_type )( ::irr::core::CMatrix4< float > const &,float const ) const;
            
            matrix4_exposer.def( 
                "equals"
                , equals_function_type( &::irr::core::CMatrix4< float >::equals )
                , ( bp::arg("other"), bp::arg("tolerance")=( irr::core::ROUNDING_ERROR_f64 ) ) );
        
        }
        { //::irr::core::CMatrix4< float >::getDefinitelyIdentityMatrix
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef bool ( exported_class_t::*getDefinitelyIdentityMatrix_function_type )(  ) const;
            
            matrix4_exposer.def( 
                "getDefinitelyIdentityMatrix"
                , getDefinitelyIdentityMatrix_function_type( &::irr::core::CMatrix4< float >::getDefinitelyIdentityMatrix ) );
        
        }
        { //::irr::core::CMatrix4< float >::getInverse
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef bool ( exported_class_t::*getInverse_function_type )( ::irr::core::CMatrix4< float > & ) const;
            
            matrix4_exposer.def( 
                "getInverse"
                , getInverse_function_type( &::irr::core::CMatrix4< float >::getInverse )
                , ( bp::arg("out") ) );
        
        }
        { //::irr::core::CMatrix4< float >::getInversePrimitive
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef bool ( exported_class_t::*getInversePrimitive_function_type )( ::irr::core::CMatrix4< float > & ) const;
            
            matrix4_exposer.def( 
                "getInversePrimitive"
                , getInversePrimitive_function_type( &::irr::core::CMatrix4< float >::getInversePrimitive )
                , ( bp::arg("out") ) );
        
        }
        { //::irr::core::CMatrix4< float >::getRotationDegrees
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::vector3d< float > ( exported_class_t::*getRotationDegrees_function_type )(  ) const;
            
            matrix4_exposer.def( 
                "getRotationDegrees"
                , getRotationDegrees_function_type( &::irr::core::CMatrix4< float >::getRotationDegrees ) );
        
        }
        { //::irr::core::CMatrix4< float >::getScale
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::vector3d< float > ( exported_class_t::*getScale_function_type )(  ) const;
            
            matrix4_exposer.def( 
                "getScale"
                , getScale_function_type( &::irr::core::CMatrix4< float >::getScale ) );
        
        }
        { //::irr::core::CMatrix4< float >::getTranslation
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::vector3d< float > ( exported_class_t::*getTranslation_function_type )(  ) const;
            
            matrix4_exposer.def( 
                "getTranslation"
                , getTranslation_function_type( &::irr::core::CMatrix4< float >::getTranslation ) );
        
        }
        { //::irr::core::CMatrix4< float >::getTransposed
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > ( exported_class_t::*getTransposed_function_type )(  ) const;
            
            matrix4_exposer.def( 
                "getTransposed"
                , getTransposed_function_type( &::irr::core::CMatrix4< float >::getTransposed ) );
        
        }
        { //::irr::core::CMatrix4< float >::getTransposed
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*getTransposed_function_type )( ::irr::core::CMatrix4< float > & ) const;
            
            matrix4_exposer.def( 
                "getTransposed"
                , getTransposed_function_type( &::irr::core::CMatrix4< float >::getTransposed )
                , ( bp::arg("o") ) );
        
        }
        { //::irr::core::CMatrix4< float >::interpolate
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > ( exported_class_t::*interpolate_function_type )( ::irr::core::CMatrix4< float > const &,::irr::f32 ) const;
            
            matrix4_exposer.def( 
                "interpolate"
                , interpolate_function_type( &::irr::core::CMatrix4< float >::interpolate )
                , ( bp::arg("b"), bp::arg("time") ) );
        
        }
        { //::irr::core::CMatrix4< float >::inverseRotateVect
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*inverseRotateVect_function_type )( ::irr::core::vector3d< float > & ) const;
            
            matrix4_exposer.def( 
                "inverseRotateVect"
                , inverseRotateVect_function_type( &::irr::core::CMatrix4< float >::inverseRotateVect )
                , ( bp::arg("vect") ) );
        
        }
        { //::irr::core::CMatrix4< float >::inverseTranslateVect
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*inverseTranslateVect_function_type )( ::irr::core::vector3d< float > & ) const;
            
            matrix4_exposer.def( 
                "inverseTranslateVect"
                , inverseTranslateVect_function_type( &::irr::core::CMatrix4< float >::inverseTranslateVect )
                , ( bp::arg("vect") ) );
        
        }
        { //::irr::core::CMatrix4< float >::isIdentity
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef bool ( exported_class_t::*isIdentity_function_type )(  ) const;
            
            matrix4_exposer.def( 
                "isIdentity"
                , isIdentity_function_type( &::irr::core::CMatrix4< float >::isIdentity ) );
        
        }
        { //::irr::core::CMatrix4< float >::isIdentity_integer_base
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef bool ( exported_class_t::*isIdentity_integer_base_function_type )(  ) const;
            
            matrix4_exposer.def( 
                "isIdentity_integer_base"
                , isIdentity_integer_base_function_type( &::irr::core::CMatrix4< float >::isIdentity_integer_base ) );
        
        }
        { //::irr::core::CMatrix4< float >::isOrthogonal
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef bool ( exported_class_t::*isOrthogonal_function_type )(  ) const;
            
            matrix4_exposer.def( 
                "isOrthogonal"
                , isOrthogonal_function_type( &::irr::core::CMatrix4< float >::isOrthogonal ) );
        
        }
        { //::irr::core::CMatrix4< float >::makeIdentity
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*makeIdentity_function_type )(  ) ;
            
            matrix4_exposer.def( 
                "makeIdentity"
                , makeIdentity_function_type( &::irr::core::CMatrix4< float >::makeIdentity )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::makeInverse
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef bool ( exported_class_t::*makeInverse_function_type )(  ) ;
            
            matrix4_exposer.def( 
                "makeInverse"
                , makeInverse_function_type( &::irr::core::CMatrix4< float >::makeInverse ) );
        
        }
        { //::irr::core::CMatrix4< float >::multiplyWith1x4Matrix
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*multiplyWith1x4Matrix_function_type )( float * ) const;
            
            matrix4_exposer.def( 
                "multiplyWith1x4Matrix"
                , multiplyWith1x4Matrix_function_type( &::irr::core::CMatrix4< float >::multiplyWith1x4Matrix )
                , ( bp::arg("matrix") ) );
        
        }
        matrix4_exposer.def( bp::self != bp::self );
        { //::irr::core::CMatrix4< float >::operator()
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef float & ( exported_class_t::*__call___function_type )( ::irr::s32 const,::irr::s32 const ) ;
            
            matrix4_exposer.def( 
                "__call__"
                , __call___function_type( &::irr::core::CMatrix4< float >::operator() )
                , ( bp::arg("row"), bp::arg("col") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::operator()
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef float const & ( exported_class_t::*__call___function_type )( ::irr::s32 const,::irr::s32 const ) const;
            
            matrix4_exposer.def( 
                "__call__"
                , __call___function_type( &::irr::core::CMatrix4< float >::operator() )
                , ( bp::arg("row"), bp::arg("col") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        matrix4_exposer.def( bp::self * bp::other< float >() );
        matrix4_exposer.def( bp::self * bp::self );
        matrix4_exposer.def( bp::self *= bp::other< float >() );
        matrix4_exposer.def( bp::self *= bp::self );
        matrix4_exposer.def( bp::self + bp::self );
        matrix4_exposer.def( bp::self += bp::self );
        matrix4_exposer.def( bp::self - bp::self );
        matrix4_exposer.def( bp::self -= bp::self );
        { //::irr::core::CMatrix4< float >::operator=
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*assign_function_type )( ::irr::core::CMatrix4< float > const & ) ;
            
            matrix4_exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::CMatrix4< float >::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::irr::core::CMatrix4< float >::operator=
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*assign_function_type )( float const & ) ;
            
            matrix4_exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::CMatrix4< float >::operator= )
                , ( bp::arg("scalar") )
                , bp::return_self< >() );
        
        }
        matrix4_exposer.def( bp::self == bp::self );
        { //::irr::core::CMatrix4< float >::operator[]
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef float & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            matrix4_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::CMatrix4< float >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::irr::core::CMatrix4< float >::operator[]
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef float const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            matrix4_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::CMatrix4< float >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::CMatrix4< float >::pointer
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef float const * ( exported_class_t::*pointer_function_type )(  ) const;
            
            matrix4_exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::CMatrix4< float >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::pointer
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef float * ( exported_class_t::*pointer_function_type )(  ) ;
            
            matrix4_exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::CMatrix4< float >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::rotateVect
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*rotateVect_function_type )( ::irr::core::vector3d< float > & ) const;
            
            matrix4_exposer.def( 
                "rotateVect"
                , rotateVect_function_type( &::irr::core::CMatrix4< float >::rotateVect )
                , ( bp::arg("vect") ) );
        
        }
        { //::irr::core::CMatrix4< float >::rotateVect
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*rotateVect_function_type )( ::irr::core::vector3d< float > &,::irr::core::vector3d< float > const & ) const;
            
            matrix4_exposer.def( 
                "rotateVect"
                , rotateVect_function_type( &::irr::core::CMatrix4< float >::rotateVect )
                , ( bp::arg("out"), bp::arg("in") ) );
        
        }
        { //::irr::core::CMatrix4< float >::rotateVect
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*rotateVect_function_type )( float *,::irr::core::vector3d< float > const & ) const;
            
            matrix4_exposer.def( 
                "rotateVect"
                , rotateVect_function_type( &::irr::core::CMatrix4< float >::rotateVect )
                , ( bp::arg("out"), bp::arg("in") ) );
        
        }
        { //::irr::core::CMatrix4< float >::setDefinitelyIdentityMatrix
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*setDefinitelyIdentityMatrix_function_type )( bool ) ;
            
            matrix4_exposer.def( 
                "setDefinitelyIdentityMatrix"
                , setDefinitelyIdentityMatrix_function_type( &::irr::core::CMatrix4< float >::setDefinitelyIdentityMatrix )
                , ( bp::arg("isDefinitelyIdentityMatrix") ) );
        
        }
        { //::irr::core::CMatrix4< float >::setInverseRotationDegrees
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setInverseRotationDegrees_function_type )( ::irr::core::vector3d< float > const & ) ;
            
            matrix4_exposer.def( 
                "setInverseRotationDegrees"
                , setInverseRotationDegrees_function_type( &::irr::core::CMatrix4< float >::setInverseRotationDegrees )
                , ( bp::arg("rotation") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::setInverseRotationRadians
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setInverseRotationRadians_function_type )( ::irr::core::vector3d< float > const & ) ;
            
            matrix4_exposer.def( 
                "setInverseRotationRadians"
                , setInverseRotationRadians_function_type( &::irr::core::CMatrix4< float >::setInverseRotationRadians )
                , ( bp::arg("rotation") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::setInverseTranslation
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setInverseTranslation_function_type )( ::irr::core::vector3d< float > const & ) ;
            
            matrix4_exposer.def( 
                "setInverseTranslation"
                , setInverseTranslation_function_type( &::irr::core::CMatrix4< float >::setInverseTranslation )
                , ( bp::arg("translation") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::setM
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setM_function_type )( float const * ) ;
            
            matrix4_exposer.def( 
                "setM"
                , setM_function_type( &::irr::core::CMatrix4< float >::setM )
                , ( bp::arg("data") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::setRotationCenter
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*setRotationCenter_function_type )( ::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const & ) ;
            
            matrix4_exposer.def( 
                "setRotationCenter"
                , setRotationCenter_function_type( &::irr::core::CMatrix4< float >::setRotationCenter )
                , ( bp::arg("center"), bp::arg("translation") ) );
        
        }
        { //::irr::core::CMatrix4< float >::setRotationDegrees
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setRotationDegrees_function_type )( ::irr::core::vector3d< float > const & ) ;
            
            matrix4_exposer.def( 
                "setRotationDegrees"
                , setRotationDegrees_function_type( &::irr::core::CMatrix4< float >::setRotationDegrees )
                , ( bp::arg("rotation") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::setRotationRadians
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setRotationRadians_function_type )( ::irr::core::vector3d< float > const & ) ;
            
            matrix4_exposer.def( 
                "setRotationRadians"
                , setRotationRadians_function_type( &::irr::core::CMatrix4< float >::setRotationRadians )
                , ( bp::arg("rotation") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::setScale
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setScale_function_type )( float const ) ;
            
            matrix4_exposer.def( 
                "setScale"
                , setScale_function_type( &::irr::core::CMatrix4< float >::setScale )
                , ( bp::arg("scale") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::setScale
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setScale_function_type )( ::irr::core::vector3d< float > const & ) ;
            
            matrix4_exposer.def( 
                "setScale"
                , setScale_function_type( &::irr::core::CMatrix4< float >::setScale )
                , ( bp::arg("scale") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::setTextureRotationCenter
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setTextureRotationCenter_function_type )( ::irr::f32 ) ;
            
            matrix4_exposer.def( 
                "setTextureRotationCenter"
                , setTextureRotationCenter_function_type( &::irr::core::CMatrix4< float >::setTextureRotationCenter )
                , ( bp::arg("rotateRad") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::setTextureScale
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setTextureScale_function_type )( ::irr::f32,::irr::f32 ) ;
            
            matrix4_exposer.def( 
                "setTextureScale"
                , setTextureScale_function_type( &::irr::core::CMatrix4< float >::setTextureScale )
                , ( bp::arg("sx"), bp::arg("sy") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::setTextureScaleCenter
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setTextureScaleCenter_function_type )( ::irr::f32,::irr::f32 ) ;
            
            matrix4_exposer.def( 
                "setTextureScaleCenter"
                , setTextureScaleCenter_function_type( &::irr::core::CMatrix4< float >::setTextureScaleCenter )
                , ( bp::arg("sx"), bp::arg("sy") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::setTextureTranslate
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setTextureTranslate_function_type )( ::irr::f32,::irr::f32 ) ;
            
            matrix4_exposer.def( 
                "setTextureTranslate"
                , setTextureTranslate_function_type( &::irr::core::CMatrix4< float >::setTextureTranslate )
                , ( bp::arg("x"), bp::arg("y") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::setTextureTranslateTransposed
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setTextureTranslateTransposed_function_type )( ::irr::f32,::irr::f32 ) ;
            
            matrix4_exposer.def( 
                "setTextureTranslateTransposed"
                , setTextureTranslateTransposed_function_type( &::irr::core::CMatrix4< float >::setTextureTranslateTransposed )
                , ( bp::arg("x"), bp::arg("y") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::setTranslation
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setTranslation_function_type )( ::irr::core::vector3d< float > const & ) ;
            
            matrix4_exposer.def( 
                "setTranslation"
                , setTranslation_function_type( &::irr::core::CMatrix4< float >::setTranslation )
                , ( bp::arg("translation") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::setbyproduct
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setbyproduct_function_type )( ::irr::core::CMatrix4< float > const &,::irr::core::CMatrix4< float > const & ) ;
            
            matrix4_exposer.def( 
                "setbyproduct"
                , setbyproduct_function_type( &::irr::core::CMatrix4< float >::setbyproduct )
                , ( bp::arg("other_a"), bp::arg("other_b") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::setbyproduct_nocheck
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*setbyproduct_nocheck_function_type )( ::irr::core::CMatrix4< float > const &,::irr::core::CMatrix4< float > const & ) ;
            
            matrix4_exposer.def( 
                "setbyproduct_nocheck"
                , setbyproduct_nocheck_function_type( &::irr::core::CMatrix4< float >::setbyproduct_nocheck )
                , ( bp::arg("other_a"), bp::arg("other_b") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::CMatrix4< float >::transformBox
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*transformBox_function_type )( ::irr::core::aabbox3d< float > & ) const;
            
            matrix4_exposer.def( 
                "transformBox"
                , transformBox_function_type( &::irr::core::CMatrix4< float >::transformBox )
                , ( bp::arg("box") ) );
        
        }
        { //::irr::core::CMatrix4< float >::transformBoxEx
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*transformBoxEx_function_type )( ::irr::core::aabbox3d< float > & ) const;
            
            matrix4_exposer.def( 
                "transformBoxEx"
                , transformBoxEx_function_type( &::irr::core::CMatrix4< float >::transformBoxEx )
                , ( bp::arg("box") ) );
        
        }
        { //::irr::core::CMatrix4< float >::transformPlane
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*transformPlane_function_type )( ::irr::core::plane3d< float > & ) const;
            
            matrix4_exposer.def( 
                "transformPlane"
                , transformPlane_function_type( &::irr::core::CMatrix4< float >::transformPlane )
                , ( bp::arg("plane") ) );
        
        }
        { //::irr::core::CMatrix4< float >::transformPlane
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*transformPlane_function_type )( ::irr::core::plane3d< float > const &,::irr::core::plane3d< float > & ) const;
            
            matrix4_exposer.def( 
                "transformPlane"
                , transformPlane_function_type( &::irr::core::CMatrix4< float >::transformPlane )
                , ( bp::arg("in"), bp::arg("out") ) );
        
        }
        { //::irr::core::CMatrix4< float >::transformVect
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*transformVect_function_type )( ::irr::core::vector3d< float > & ) const;
            
            matrix4_exposer.def( 
                "transformVect"
                , transformVect_function_type( &::irr::core::CMatrix4< float >::transformVect )
                , ( bp::arg("vect") ) );
        
        }
        { //::irr::core::CMatrix4< float >::transformVect
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*transformVect_function_type )( ::irr::core::vector3d< float > &,::irr::core::vector3d< float > const & ) const;
            
            matrix4_exposer.def( 
                "transformVect"
                , transformVect_function_type( &::irr::core::CMatrix4< float >::transformVect )
                , ( bp::arg("out"), bp::arg("in") ) );
        
        }
        { //::irr::core::CMatrix4< float >::transformVect
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*transformVect_function_type )( float *,::irr::core::vector3d< float > const & ) const;
            
            matrix4_exposer.def( 
                "transformVect"
                , transformVect_function_type( &::irr::core::CMatrix4< float >::transformVect )
                , ( bp::arg("out"), bp::arg("in") ) );
        
        }
        { //::irr::core::CMatrix4< float >::translateVect
        
            typedef irr::core::CMatrix4< float > exported_class_t;
            typedef void ( exported_class_t::*translateVect_function_type )( ::irr::core::vector3d< float > & ) const;
            
            matrix4_exposer.def( 
                "translateVect"
                , translateVect_function_type( &::irr::core::CMatrix4< float >::translateVect )
                , ( bp::arg("vect") ) );
        
        }
    }

    { //::irr::core::aabbox3d< float >
        typedef bp::class_< irr::core::aabbox3d< float > > aabbox3df_exposer_t;
        aabbox3df_exposer_t aabbox3df_exposer = aabbox3df_exposer_t( "aabbox3df", bp::init< >() );
        bp::scope aabbox3df_scope( aabbox3df_exposer );
        aabbox3df_exposer.def( bp::init< irr::core::vector3d< float > const &, irr::core::vector3d< float > const & >(( bp::arg("min"), bp::arg("max") )) );
        aabbox3df_exposer.def( bp::init< irr::core::vector3d< float > const & >(( bp::arg("init") )) );
        bp::implicitly_convertible< irr::core::vector3d< float > const &, irr::core::aabbox3d< float > >();
        aabbox3df_exposer.def( bp::init< float, float, float, float, float, float >(( bp::arg("minx"), bp::arg("miny"), bp::arg("minz"), bp::arg("maxx"), bp::arg("maxy"), bp::arg("maxz") )) );
        { //::irr::core::aabbox3d< float >::addInternalBox
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef void ( exported_class_t::*addInternalBox_function_type )( ::irr::core::aabbox3d< float > const & ) ;
            
            aabbox3df_exposer.def( 
                "addInternalBox"
                , addInternalBox_function_type( &::irr::core::aabbox3d< float >::addInternalBox )
                , ( bp::arg("b") ) );
        
        }
        { //::irr::core::aabbox3d< float >::addInternalPoint
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef void ( exported_class_t::*addInternalPoint_function_type )( ::irr::core::vector3d< float > const & ) ;
            
            aabbox3df_exposer.def( 
                "addInternalPoint"
                , addInternalPoint_function_type( &::irr::core::aabbox3d< float >::addInternalPoint )
                , ( bp::arg("p") ) );
        
        }
        { //::irr::core::aabbox3d< float >::addInternalPoint
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef void ( exported_class_t::*addInternalPoint_function_type )( float,float,float ) ;
            
            aabbox3df_exposer.def( 
                "addInternalPoint"
                , addInternalPoint_function_type( &::irr::core::aabbox3d< float >::addInternalPoint )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("z") ) );
        
        }
        { //::irr::core::aabbox3d< float >::classifyPlaneRelation
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef ::irr::core::EIntersectionRelation3D ( exported_class_t::*classifyPlaneRelation_function_type )( ::irr::core::plane3d< float > const & ) const;
            
            aabbox3df_exposer.def( 
                "classifyPlaneRelation"
                , classifyPlaneRelation_function_type( &::irr::core::aabbox3d< float >::classifyPlaneRelation )
                , ( bp::arg("plane") ) );
        
        }
        { //::irr::core::aabbox3d< float >::getArea
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef float ( exported_class_t::*getArea_function_type )(  ) const;
            
            aabbox3df_exposer.def( 
                "getArea"
                , getArea_function_type( &::irr::core::aabbox3d< float >::getArea ) );
        
        }
        { //::irr::core::aabbox3d< float >::getCenter
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef ::irr::core::vector3d< float > ( exported_class_t::*getCenter_function_type )(  ) const;
            
            aabbox3df_exposer.def( 
                "getCenter"
                , getCenter_function_type( &::irr::core::aabbox3d< float >::getCenter ) );
        
        }
        { //::irr::core::aabbox3d< float >::getEdges
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef void ( exported_class_t::*getEdges_function_type )( ::irr::core::vector3d< float > * ) const;
            
            aabbox3df_exposer.def( 
                "getEdges"
                , getEdges_function_type( &::irr::core::aabbox3d< float >::getEdges )
                , ( bp::arg("edges") ) );
        
        }
        { //::irr::core::aabbox3d< float >::getExtent
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef ::irr::core::vector3d< float > ( exported_class_t::*getExtent_function_type )(  ) const;
            
            aabbox3df_exposer.def( 
                "getExtent"
                , getExtent_function_type( &::irr::core::aabbox3d< float >::getExtent ) );
        
        }
        { //::irr::core::aabbox3d< float >::getInterpolated
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef ::irr::core::aabbox3d< float > ( exported_class_t::*getInterpolated_function_type )( ::irr::core::aabbox3d< float > const &,::irr::f32 ) const;
            
            aabbox3df_exposer.def( 
                "getInterpolated"
                , getInterpolated_function_type( &::irr::core::aabbox3d< float >::getInterpolated )
                , ( bp::arg("other"), bp::arg("d") ) );
        
        }
        { //::irr::core::aabbox3d< float >::getVolume
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef float ( exported_class_t::*getVolume_function_type )(  ) const;
            
            aabbox3df_exposer.def( 
                "getVolume"
                , getVolume_function_type( &::irr::core::aabbox3d< float >::getVolume ) );
        
        }
        { //::irr::core::aabbox3d< float >::intersectsWithBox
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef bool ( exported_class_t::*intersectsWithBox_function_type )( ::irr::core::aabbox3d< float > const & ) const;
            
            aabbox3df_exposer.def( 
                "intersectsWithBox"
                , intersectsWithBox_function_type( &::irr::core::aabbox3d< float >::intersectsWithBox )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::aabbox3d< float >::intersectsWithLine
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef bool ( exported_class_t::*intersectsWithLine_function_type )( ::irr::core::line3d< float > const & ) const;
            
            aabbox3df_exposer.def( 
                "intersectsWithLine"
                , intersectsWithLine_function_type( &::irr::core::aabbox3d< float >::intersectsWithLine )
                , ( bp::arg("line") ) );
        
        }
        { //::irr::core::aabbox3d< float >::intersectsWithLine
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef bool ( exported_class_t::*intersectsWithLine_function_type )( ::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const &,float ) const;
            
            aabbox3df_exposer.def( 
                "intersectsWithLine"
                , intersectsWithLine_function_type( &::irr::core::aabbox3d< float >::intersectsWithLine )
                , ( bp::arg("linemiddle"), bp::arg("linevect"), bp::arg("halflength") ) );
        
        }
        { //::irr::core::aabbox3d< float >::isEmpty
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef bool ( exported_class_t::*isEmpty_function_type )(  ) const;
            
            aabbox3df_exposer.def( 
                "isEmpty"
                , isEmpty_function_type( &::irr::core::aabbox3d< float >::isEmpty ) );
        
        }
        { //::irr::core::aabbox3d< float >::isFullInside
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef bool ( exported_class_t::*isFullInside_function_type )( ::irr::core::aabbox3d< float > const & ) const;
            
            aabbox3df_exposer.def( 
                "isFullInside"
                , isFullInside_function_type( &::irr::core::aabbox3d< float >::isFullInside )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::aabbox3d< float >::isPointInside
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef bool ( exported_class_t::*isPointInside_function_type )( ::irr::core::vector3d< float > const & ) const;
            
            aabbox3df_exposer.def( 
                "isPointInside"
                , isPointInside_function_type( &::irr::core::aabbox3d< float >::isPointInside )
                , ( bp::arg("p") ) );
        
        }
        { //::irr::core::aabbox3d< float >::isPointTotalInside
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef bool ( exported_class_t::*isPointTotalInside_function_type )( ::irr::core::vector3d< float > const & ) const;
            
            aabbox3df_exposer.def( 
                "isPointTotalInside"
                , isPointTotalInside_function_type( &::irr::core::aabbox3d< float >::isPointTotalInside )
                , ( bp::arg("p") ) );
        
        }
        aabbox3df_exposer.def( bp::self != bp::self );
        aabbox3df_exposer.def( bp::self == bp::self );
        { //::irr::core::aabbox3d< float >::repair
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef void ( exported_class_t::*repair_function_type )(  ) ;
            
            aabbox3df_exposer.def( 
                "repair"
                , repair_function_type( &::irr::core::aabbox3d< float >::repair ) );
        
        }
        { //::irr::core::aabbox3d< float >::reset
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef void ( exported_class_t::*reset_function_type )( float,float,float ) ;
            
            aabbox3df_exposer.def( 
                "reset"
                , reset_function_type( &::irr::core::aabbox3d< float >::reset )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("z") ) );
        
        }
        { //::irr::core::aabbox3d< float >::reset
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef void ( exported_class_t::*reset_function_type )( ::irr::core::aabbox3d< float > const & ) ;
            
            aabbox3df_exposer.def( 
                "reset"
                , reset_function_type( &::irr::core::aabbox3d< float >::reset )
                , ( bp::arg("initValue") ) );
        
        }
        { //::irr::core::aabbox3d< float >::reset
        
            typedef irr::core::aabbox3d< float > exported_class_t;
            typedef void ( exported_class_t::*reset_function_type )( ::irr::core::vector3d< float > const & ) ;
            
            aabbox3df_exposer.def( 
                "reset"
                , reset_function_type( &::irr::core::aabbox3d< float >::reset )
                , ( bp::arg("initValue") ) );
        
        }
        aabbox3df_exposer.def_readwrite( "MaxEdge", &irr::core::aabbox3d< float >::MaxEdge );
        aabbox3df_exposer.def_readwrite( "MinEdge", &irr::core::aabbox3d< float >::MinEdge );
    }

    { //::irr::core::array< int, irr::core::irrAllocator< int > >
        typedef bp::class_< irr::core::array< int, irr::core::irrAllocator< int > > > array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer_t;
        array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer_t array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer = array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer_t( "array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater_", bp::init< >() );
        bp::scope array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__scope( array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer );
        array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< int, irr::core::irrAllocator< int > > >();
        array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( bp::init< irr::core::array< int, irr::core::irrAllocator< int > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::allocated_size
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::allocated_size ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::binary_search
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( int const & ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::binary_search
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( int const & ) const;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::binary_search
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( int const &,::irr::s32,::irr::s32 ) const;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::binary_search_multi
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( int const &,::irr::s32 & ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::clear
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::clear ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::const_pointer
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef int const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::empty
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::empty ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::erase
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::erase
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::getLast
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef int & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::getLast
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef int const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::insert
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( int const &,::irr::u32 ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::linear_reverse_search
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( int const & ) const;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::linear_search
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( int const & ) const;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::operator=
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef ::irr::core::array< int, irr::core::irrAllocator< int > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< int, irr::core::irrAllocator< int > > const & ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::operator[]
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef int & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::operator[]
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef int const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::pointer
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef int * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::push_back
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( int const & ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::push_front
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( int const & ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::reallocate
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::setAllocStrategy
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::set_free_when_destroyed
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::set_pointer
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( int *,::irr::u32,bool,bool ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::set_sorted
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::set_used
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::size
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::size ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::sort
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::sort ) );
        
        }
        { //::irr::core::array< int, irr::core::irrAllocator< int > >::swap
        
            typedef irr::core::array< int, irr::core::irrAllocator< int > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< int, irr::core::irrAllocator< int > > & ) ;
            
            array_less__int_comma__irr_scope_core_scope_irrAllocator_less__int__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< int, irr::core::irrAllocator< int > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >
        typedef bp::class_< irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > > array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer_t;
        array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer_t array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer = array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer_t( "array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__scope( array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer );
        array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > >();
        array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( bp::init< irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::allocated_size
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::binary_search
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::core::CMatrix4< float > const & ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::binary_search
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::core::CMatrix4< float > const & ) const;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::binary_search
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::core::CMatrix4< float > const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::binary_search_multi
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::core::CMatrix4< float > const &,::irr::s32 & ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::clear
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::clear ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::const_pointer
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef ::irr::core::CMatrix4< float > const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::empty
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::empty ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::erase
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::erase
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::getLast
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::getLast
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef ::irr::core::CMatrix4< float > const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::insert
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::core::CMatrix4< float > const &,::irr::u32 ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::linear_reverse_search
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::core::CMatrix4< float > const & ) const;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::linear_search
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::core::CMatrix4< float > const & ) const;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::operator=
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef ::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > const & ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::operator[]
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef ::irr::core::CMatrix4< float > & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::operator[]
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef ::irr::core::CMatrix4< float > const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::pointer
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef ::irr::core::CMatrix4< float > * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::push_back
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::core::CMatrix4< float > const & ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::push_front
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::core::CMatrix4< float > const & ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::reallocate
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::setAllocStrategy
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::set_pointer
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::core::CMatrix4< float > *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::set_sorted
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::set_used
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::size
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::size ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::sort
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::sort ) );
        
        }
        { //::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::swap
        
            typedef irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > > & ) ;
            
            array_less__irr_scope_core_scope_CMatrix4_less__float__greater__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::core::CMatrix4< float >, irr::core::irrAllocator< irr::core::CMatrix4< float > > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >
        typedef bp::class_< irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > > tStringList_exposer_t;
        tStringList_exposer_t tStringList_exposer = tStringList_exposer_t( "tStringList", bp::init< >() );
        bp::scope tStringList_scope( tStringList_exposer );
        tStringList_exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > >();
        tStringList_exposer.def( bp::init< irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::allocated_size
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            tStringList_exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::binary_search
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const & ) ;
            
            tStringList_exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::binary_search
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const & ) const;
            
            tStringList_exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::binary_search
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const &,::irr::s32,::irr::s32 ) const;
            
            tStringList_exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::binary_search_multi
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const &,::irr::s32 & ) ;
            
            tStringList_exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::clear
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            tStringList_exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::clear ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::const_pointer
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef ::irr::core::string< char, irr::core::irrAllocator< char > > const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            tStringList_exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::empty
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            tStringList_exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::empty ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::erase
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            tStringList_exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::erase
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            tStringList_exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::getLast
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef ::irr::core::string< char, irr::core::irrAllocator< char > > & ( exported_class_t::*getLast_function_type )(  ) ;
            
            tStringList_exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::getLast
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef ::irr::core::string< char, irr::core::irrAllocator< char > > const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            tStringList_exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::insert
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const &,::irr::u32 ) ;
            
            tStringList_exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::linear_reverse_search
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const & ) const;
            
            tStringList_exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::linear_search
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const & ) const;
            
            tStringList_exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        tStringList_exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::operator=
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef ::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > const & ) ;
            
            tStringList_exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        tStringList_exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::operator[]
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef ::irr::core::string< char, irr::core::irrAllocator< char > > & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            tStringList_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::operator[]
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef ::irr::core::string< char, irr::core::irrAllocator< char > > const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            tStringList_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::pointer
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef ::irr::core::string< char, irr::core::irrAllocator< char > > * ( exported_class_t::*pointer_function_type )(  ) ;
            
            tStringList_exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::push_back
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const & ) ;
            
            tStringList_exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::push_front
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const & ) ;
            
            tStringList_exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::reallocate
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            tStringList_exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::setAllocStrategy
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            tStringList_exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            tStringList_exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::set_pointer
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > *,::irr::u32,bool,bool ) ;
            
            tStringList_exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::set_sorted
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            tStringList_exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::set_used
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            tStringList_exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::size
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            tStringList_exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::size ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::sort
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            tStringList_exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::sort ) );
        
        }
        { //::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::swap
        
            typedef irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > & ) ;
            
            tStringList_exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >
        typedef bp::class_< irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > > array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer_t;
        array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer_t array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer = array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer_t( "array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__scope( array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer );
        array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > >();
        array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( bp::init< irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::allocated_size
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::binary_search
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::gui::SGUISpriteFrame const & ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::binary_search
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::gui::SGUISpriteFrame const & ) const;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::binary_search
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::gui::SGUISpriteFrame const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::binary_search_multi
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::gui::SGUISpriteFrame const &,::irr::s32 & ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::clear
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::clear ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::const_pointer
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef ::irr::gui::SGUISpriteFrame const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::empty
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::empty ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::erase
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::erase
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::getLast
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef ::irr::gui::SGUISpriteFrame & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::getLast
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef ::irr::gui::SGUISpriteFrame const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::insert
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::gui::SGUISpriteFrame const &,::irr::u32 ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::linear_reverse_search
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::gui::SGUISpriteFrame const & ) const;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::linear_search
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::gui::SGUISpriteFrame const & ) const;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::operator=
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef ::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > const & ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::operator[]
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef ::irr::gui::SGUISpriteFrame & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::operator[]
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef ::irr::gui::SGUISpriteFrame const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::pointer
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef ::irr::gui::SGUISpriteFrame * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::push_back
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::gui::SGUISpriteFrame const & ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::push_front
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::gui::SGUISpriteFrame const & ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::reallocate
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::setAllocStrategy
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::set_pointer
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::gui::SGUISpriteFrame *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::set_sorted
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::set_used
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::size
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::size ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::sort
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::sort ) );
        
        }
        { //::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::swap
        
            typedef irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > > & ) ;
            
            array_less__irr_scope_gui_scope_SGUISpriteFrame_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::gui::SGUISpriteFrame, irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >
        typedef bp::class_< irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > > array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer_t;
        array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer_t array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer = array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer_t( "array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__scope( array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer );
        array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > >();
        array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( bp::init< irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::allocated_size
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::binary_search
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::IBoneSceneNode * const & ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::binary_search
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::IBoneSceneNode * const & ) const;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::binary_search
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::IBoneSceneNode * const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::binary_search_multi
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::scene::IBoneSceneNode * const &,::irr::s32 & ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::clear
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::clear ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::const_pointer
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef ::irr::scene::IBoneSceneNode * const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::empty
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::empty ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::erase
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::erase
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::getLast
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef ::irr::scene::IBoneSceneNode * & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::getLast
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef ::irr::scene::IBoneSceneNode * const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::insert
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::scene::IBoneSceneNode * const &,::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::linear_reverse_search
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::scene::IBoneSceneNode * const & ) const;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::linear_search
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::scene::IBoneSceneNode * const & ) const;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::operator=
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef ::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > const & ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::operator[]
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef ::irr::scene::IBoneSceneNode * & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::operator[]
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef ::irr::scene::IBoneSceneNode * const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::pointer
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef ::irr::scene::IBoneSceneNode * * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::push_back
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::IBoneSceneNode * const & ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::push_front
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::IBoneSceneNode * const & ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::reallocate
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::setAllocStrategy
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::set_pointer
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::scene::IBoneSceneNode * *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::set_sorted
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::set_used
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::size
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::size ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::sort
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::sort ) );
        
        }
        { //::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::swap
        
            typedef irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > > & ) ;
            
            array_less__irr_scope_scene_scope_IBoneSceneNode_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::scene::IBoneSceneNode*, irr::core::irrAllocator< irr::scene::IBoneSceneNode* > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >
        typedef bp::class_< irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > > array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer_t;
        array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer_t array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer = array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer_t( "array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__scope( array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer );
        array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > >();
        array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( bp::init< irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::allocated_size
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::binary_search
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::IMesh * const & ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::binary_search
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::IMesh * const & ) const;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::binary_search
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::IMesh * const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::binary_search_multi
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::scene::IMesh * const &,::irr::s32 & ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::clear
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::clear ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::const_pointer
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef ::irr::scene::IMesh * const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::empty
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::empty ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::erase
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::erase
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::getLast
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef ::irr::scene::IMesh * & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::getLast
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef ::irr::scene::IMesh * const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::insert
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::scene::IMesh * const &,::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::linear_reverse_search
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::scene::IMesh * const & ) const;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::linear_search
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::scene::IMesh * const & ) const;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::operator=
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef ::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > const & ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::operator[]
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef ::irr::scene::IMesh * & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::operator[]
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef ::irr::scene::IMesh * const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::pointer
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef ::irr::scene::IMesh * * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::push_back
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::IMesh * const & ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::push_front
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::IMesh * const & ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::reallocate
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::setAllocStrategy
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::set_pointer
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::scene::IMesh * *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::set_sorted
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::set_used
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::size
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::size ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::sort
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::sort ) );
        
        }
        { //::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::swap
        
            typedef irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > > & ) ;
            
            array_less__irr_scope_scene_scope_IMesh_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::scene::IMesh*, irr::core::irrAllocator< irr::scene::IMesh* > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >
        typedef bp::class_< irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > > array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer_t;
        array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer_t array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer = array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer_t( "array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__scope( array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer );
        array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > >();
        array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( bp::init< irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::allocated_size
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::binary_search
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::IMeshBuffer * const & ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::binary_search
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::IMeshBuffer * const & ) const;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::binary_search
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::IMeshBuffer * const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::binary_search_multi
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::scene::IMeshBuffer * const &,::irr::s32 & ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::clear
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::clear ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::const_pointer
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef ::irr::scene::IMeshBuffer * const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::empty
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::empty ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::erase
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::erase
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::getLast
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef ::irr::scene::IMeshBuffer * & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::getLast
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef ::irr::scene::IMeshBuffer * const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::insert
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::scene::IMeshBuffer * const &,::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::linear_reverse_search
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::scene::IMeshBuffer * const & ) const;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::linear_search
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::scene::IMeshBuffer * const & ) const;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::operator=
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef ::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > const & ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::operator[]
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef ::irr::scene::IMeshBuffer * & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::operator[]
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef ::irr::scene::IMeshBuffer * const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::pointer
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef ::irr::scene::IMeshBuffer * * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::push_back
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::IMeshBuffer * const & ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::push_front
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::IMeshBuffer * const & ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::reallocate
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::setAllocStrategy
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::set_pointer
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::scene::IMeshBuffer * *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::set_sorted
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::set_used
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::size
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::size ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::sort
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::sort ) );
        
        }
        { //::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::swap
        
            typedef irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > > & ) ;
            
            array_less__irr_scope_scene_scope_IMeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::scene::IMeshBuffer*, irr::core::irrAllocator< irr::scene::IMeshBuffer* > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >
        typedef bp::class_< irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > > array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer_t;
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer_t array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer = array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer_t( "array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__scope( array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer );
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > >();
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( bp::init< irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::allocated_size
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::binary_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::ISkinnedMesh::SJoint * const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::binary_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::ISkinnedMesh::SJoint * const & ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::binary_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::ISkinnedMesh::SJoint * const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::binary_search_multi
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::scene::ISkinnedMesh::SJoint * const &,::irr::s32 & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::clear
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::clear ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::const_pointer
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SJoint * const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::empty
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::empty ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::erase
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::erase
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::getLast
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SJoint * & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::getLast
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SJoint * const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::insert
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::scene::ISkinnedMesh::SJoint * const &,::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::linear_reverse_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::scene::ISkinnedMesh::SJoint * const & ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::linear_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::scene::ISkinnedMesh::SJoint * const & ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::operator=
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef ::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::operator[]
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SJoint * & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::operator[]
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SJoint * const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::pointer
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SJoint * * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::push_back
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::ISkinnedMesh::SJoint * const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::push_front
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::ISkinnedMesh::SJoint * const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::reallocate
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::setAllocStrategy
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::set_pointer
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::scene::ISkinnedMesh::SJoint * *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::set_sorted
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::set_used
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::size
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::size ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::sort
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::sort ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::swap
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > > & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >
        typedef bp::class_< irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > > array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer_t;
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer_t array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer = array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer_t( "array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__scope( array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer );
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > >();
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( bp::init< irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::allocated_size
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::binary_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::ISkinnedMesh::SPositionKey const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::binary_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::ISkinnedMesh::SPositionKey const & ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::binary_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::ISkinnedMesh::SPositionKey const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::binary_search_multi
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::scene::ISkinnedMesh::SPositionKey const &,::irr::s32 & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::clear
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::clear ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::const_pointer
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SPositionKey const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::empty
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::empty ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::erase
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::erase
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::getLast
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SPositionKey & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::getLast
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SPositionKey const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::insert
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::scene::ISkinnedMesh::SPositionKey const &,::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::linear_reverse_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::scene::ISkinnedMesh::SPositionKey const & ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::linear_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::scene::ISkinnedMesh::SPositionKey const & ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::operator=
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef ::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::operator[]
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SPositionKey & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::operator[]
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SPositionKey const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::pointer
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SPositionKey * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::push_back
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::ISkinnedMesh::SPositionKey const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::push_front
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::ISkinnedMesh::SPositionKey const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::reallocate
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::setAllocStrategy
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::set_pointer
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::scene::ISkinnedMesh::SPositionKey *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::set_sorted
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::set_used
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::size
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::size ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::sort
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::sort ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::swap
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > > & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SPositionKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >
        typedef bp::class_< irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > > array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer_t;
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer_t array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer = array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer_t( "array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__scope( array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer );
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > >();
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( bp::init< irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::allocated_size
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::binary_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::ISkinnedMesh::SRotationKey const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::binary_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::ISkinnedMesh::SRotationKey const & ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::binary_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::ISkinnedMesh::SRotationKey const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::binary_search_multi
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::scene::ISkinnedMesh::SRotationKey const &,::irr::s32 & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::clear
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::clear ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::const_pointer
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SRotationKey const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::empty
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::empty ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::erase
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::erase
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::getLast
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SRotationKey & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::getLast
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SRotationKey const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::insert
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::scene::ISkinnedMesh::SRotationKey const &,::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::linear_reverse_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::scene::ISkinnedMesh::SRotationKey const & ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::linear_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::scene::ISkinnedMesh::SRotationKey const & ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::operator=
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef ::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::operator[]
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SRotationKey & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::operator[]
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SRotationKey const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::pointer
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SRotationKey * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::push_back
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::ISkinnedMesh::SRotationKey const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::push_front
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::ISkinnedMesh::SRotationKey const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::reallocate
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::setAllocStrategy
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::set_pointer
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::scene::ISkinnedMesh::SRotationKey *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::set_sorted
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::set_used
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::size
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::size ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::sort
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::sort ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::swap
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > > & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SRotationKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >
        typedef bp::class_< irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > > array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer_t;
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer_t array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer = array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer_t( "array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__scope( array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer );
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > >();
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( bp::init< irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::allocated_size
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::binary_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::ISkinnedMesh::SScaleKey const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::binary_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::ISkinnedMesh::SScaleKey const & ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::binary_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::ISkinnedMesh::SScaleKey const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::binary_search_multi
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::scene::ISkinnedMesh::SScaleKey const &,::irr::s32 & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::clear
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::clear ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::const_pointer
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SScaleKey const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::empty
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::empty ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::erase
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::erase
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::getLast
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SScaleKey & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::getLast
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SScaleKey const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::insert
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::scene::ISkinnedMesh::SScaleKey const &,::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::linear_reverse_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::scene::ISkinnedMesh::SScaleKey const & ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::linear_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::scene::ISkinnedMesh::SScaleKey const & ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::operator=
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef ::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::operator[]
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SScaleKey & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::operator[]
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SScaleKey const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::pointer
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SScaleKey * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::push_back
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::ISkinnedMesh::SScaleKey const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::push_front
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::ISkinnedMesh::SScaleKey const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::reallocate
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::setAllocStrategy
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::set_pointer
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::scene::ISkinnedMesh::SScaleKey *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::set_sorted
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::set_used
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::size
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::size ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::sort
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::sort ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::swap
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > > & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SScaleKey, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >
        typedef bp::class_< irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > > array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer_t;
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer_t array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer = array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer_t( "array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__scope( array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer );
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > >();
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( bp::init< irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::allocated_size
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::binary_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::ISkinnedMesh::SWeight const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::binary_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::ISkinnedMesh::SWeight const & ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::binary_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::ISkinnedMesh::SWeight const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::binary_search_multi
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::scene::ISkinnedMesh::SWeight const &,::irr::s32 & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::clear
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::clear ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::const_pointer
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SWeight const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::empty
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::empty ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::erase
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::erase
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::getLast
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SWeight & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::getLast
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SWeight const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::insert
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::scene::ISkinnedMesh::SWeight const &,::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::linear_reverse_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::scene::ISkinnedMesh::SWeight const & ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::linear_search
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::scene::ISkinnedMesh::SWeight const & ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::operator=
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef ::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::operator[]
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SWeight & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::operator[]
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SWeight const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::pointer
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef ::irr::scene::ISkinnedMesh::SWeight * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::push_back
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::ISkinnedMesh::SWeight const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::push_front
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::ISkinnedMesh::SWeight const & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::reallocate
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::setAllocStrategy
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::set_pointer
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::scene::ISkinnedMesh::SWeight *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::set_sorted
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::set_used
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::size
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::size ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::sort
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::sort ) );
        
        }
        { //::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::swap
        
            typedef irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > > & ) ;
            
            array_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::scene::ISkinnedMesh::SWeight, irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >
        typedef bp::class_< irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > > array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer_t;
        array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer_t array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer = array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer_t( "array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__scope( array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer );
        array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > >();
        array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( bp::init< irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::allocated_size
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::binary_search
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::SMD3MeshBuffer * const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::binary_search
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::SMD3MeshBuffer * const & ) const;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::binary_search
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::SMD3MeshBuffer * const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::binary_search_multi
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::scene::SMD3MeshBuffer * const &,::irr::s32 & ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::clear
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::clear ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::const_pointer
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef ::irr::scene::SMD3MeshBuffer * const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::empty
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::empty ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::erase
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::erase
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::getLast
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef ::irr::scene::SMD3MeshBuffer * & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::getLast
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef ::irr::scene::SMD3MeshBuffer * const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::insert
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::scene::SMD3MeshBuffer * const &,::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::linear_reverse_search
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::scene::SMD3MeshBuffer * const & ) const;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::linear_search
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::scene::SMD3MeshBuffer * const & ) const;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::operator=
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef ::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::operator[]
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef ::irr::scene::SMD3MeshBuffer * & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::operator[]
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef ::irr::scene::SMD3MeshBuffer * const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::pointer
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef ::irr::scene::SMD3MeshBuffer * * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::push_back
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::SMD3MeshBuffer * const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::push_front
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::SMD3MeshBuffer * const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::reallocate
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::setAllocStrategy
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::set_pointer
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::scene::SMD3MeshBuffer * *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::set_sorted
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::set_used
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::size
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::size ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::sort
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::sort ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::swap
        
            typedef irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > > & ) ;
            
            array_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr__comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::scene::SMD3MeshBuffer*, irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >
        typedef bp::class_< irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > > array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer_t;
        array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer_t array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer = array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer_t( "array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__scope( array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer );
        array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > >();
        array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( bp::init< irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::allocated_size
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::binary_search
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::SMD3QuaternionTag const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::binary_search
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::SMD3QuaternionTag const & ) const;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::binary_search
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::SMD3QuaternionTag const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::binary_search_multi
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::scene::SMD3QuaternionTag const &,::irr::s32 & ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::clear
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::clear ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::const_pointer
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef ::irr::scene::SMD3QuaternionTag const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::empty
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::empty ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::erase
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::erase
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::getLast
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef ::irr::scene::SMD3QuaternionTag & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::getLast
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef ::irr::scene::SMD3QuaternionTag const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::insert
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::scene::SMD3QuaternionTag const &,::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::linear_reverse_search
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::scene::SMD3QuaternionTag const & ) const;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::linear_search
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::scene::SMD3QuaternionTag const & ) const;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::operator=
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef ::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::operator[]
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef ::irr::scene::SMD3QuaternionTag & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::operator[]
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef ::irr::scene::SMD3QuaternionTag const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::pointer
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef ::irr::scene::SMD3QuaternionTag * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::push_back
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::SMD3QuaternionTag const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::push_front
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::SMD3QuaternionTag const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::reallocate
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::setAllocStrategy
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::set_pointer
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::scene::SMD3QuaternionTag *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::set_sorted
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::set_used
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::size
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::size ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::sort
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::sort ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::swap
        
            typedef irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > > & ) ;
            
            array_less__irr_scope_scene_scope_SMD3QuaternionTag_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::scene::SMD3QuaternionTag, irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >
        typedef bp::class_< irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > > array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer_t;
        array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer_t array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer = array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer_t( "array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__scope( array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer );
        array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > >();
        array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( bp::init< irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::allocated_size
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::binary_search
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::SMD3TexCoord const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::binary_search
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::SMD3TexCoord const & ) const;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::binary_search
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::SMD3TexCoord const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::binary_search_multi
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::scene::SMD3TexCoord const &,::irr::s32 & ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::clear
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::clear ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::const_pointer
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef ::irr::scene::SMD3TexCoord const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::empty
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::empty ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::erase
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::erase
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::getLast
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef ::irr::scene::SMD3TexCoord & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::getLast
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef ::irr::scene::SMD3TexCoord const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::insert
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::scene::SMD3TexCoord const &,::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::linear_reverse_search
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::scene::SMD3TexCoord const & ) const;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::linear_search
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::scene::SMD3TexCoord const & ) const;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::operator=
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef ::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::operator[]
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef ::irr::scene::SMD3TexCoord & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::operator[]
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef ::irr::scene::SMD3TexCoord const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::pointer
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef ::irr::scene::SMD3TexCoord * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::push_back
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::SMD3TexCoord const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::push_front
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::SMD3TexCoord const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::reallocate
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::setAllocStrategy
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::set_pointer
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::scene::SMD3TexCoord *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::set_sorted
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::set_used
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::size
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::size ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::sort
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::sort ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::swap
        
            typedef irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > > & ) ;
            
            array_less__irr_scope_scene_scope_SMD3TexCoord_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::scene::SMD3TexCoord, irr::core::irrAllocator< irr::scene::SMD3TexCoord > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >
        typedef bp::class_< irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > > array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer_t;
        array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer_t array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer = array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer_t( "array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__scope( array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer );
        array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > >();
        array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( bp::init< irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::allocated_size
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::binary_search
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::SMD3Vertex const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::binary_search
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::SMD3Vertex const & ) const;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::binary_search
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::SMD3Vertex const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::binary_search_multi
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::scene::SMD3Vertex const &,::irr::s32 & ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::clear
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::clear ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::const_pointer
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef ::irr::scene::SMD3Vertex const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::empty
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::empty ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::erase
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::erase
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::getLast
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef ::irr::scene::SMD3Vertex & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::getLast
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef ::irr::scene::SMD3Vertex const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::insert
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::scene::SMD3Vertex const &,::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::linear_reverse_search
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::scene::SMD3Vertex const & ) const;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::linear_search
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::scene::SMD3Vertex const & ) const;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::operator=
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef ::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::operator[]
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef ::irr::scene::SMD3Vertex & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::operator[]
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef ::irr::scene::SMD3Vertex const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::pointer
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef ::irr::scene::SMD3Vertex * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::push_back
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::SMD3Vertex const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::push_front
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::SMD3Vertex const & ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::reallocate
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::setAllocStrategy
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::set_pointer
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::scene::SMD3Vertex *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::set_sorted
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::set_used
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::size
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::size ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::sort
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::sort ) );
        
        }
        { //::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::swap
        
            typedef irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > > & ) ;
            
            array_less__irr_scope_scene_scope_SMD3Vertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::scene::SMD3Vertex, irr::core::irrAllocator< irr::scene::SMD3Vertex > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >
        typedef bp::class_< irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > > array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer_t;
        array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer_t array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer = array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer_t( "array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__scope( array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer );
        array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > >();
        array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( bp::init< irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::allocated_size
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::binary_search
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::quake3::SVarGroup const & ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::binary_search
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::quake3::SVarGroup const & ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::binary_search
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::quake3::SVarGroup const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::binary_search_multi
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::scene::quake3::SVarGroup const &,::irr::s32 & ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::clear
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::clear ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::const_pointer
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef ::irr::scene::quake3::SVarGroup const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::empty
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::empty ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::erase
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::erase
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::getLast
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef ::irr::scene::quake3::SVarGroup & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::getLast
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef ::irr::scene::quake3::SVarGroup const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::insert
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::scene::quake3::SVarGroup const &,::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::linear_reverse_search
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::scene::quake3::SVarGroup const & ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::linear_search
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::scene::quake3::SVarGroup const & ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::operator=
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef ::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > const & ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::operator[]
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef ::irr::scene::quake3::SVarGroup & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::operator[]
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef ::irr::scene::quake3::SVarGroup const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::pointer
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef ::irr::scene::quake3::SVarGroup * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::push_back
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::quake3::SVarGroup const & ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::push_front
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::quake3::SVarGroup const & ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::reallocate
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::setAllocStrategy
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::set_pointer
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::scene::quake3::SVarGroup *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::set_sorted
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::set_used
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::size
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::size ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::sort
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::sort ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::swap
        
            typedef irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > > & ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVarGroup_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::scene::quake3::SVarGroup, irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >
        typedef bp::class_< irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > > array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer_t;
        array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer_t array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer = array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer_t( "array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__scope( array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer );
        array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > >();
        array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( bp::init< irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::allocated_size
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::binary_search
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::quake3::SVariable const & ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::binary_search
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::quake3::SVariable const & ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::binary_search
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::scene::quake3::SVariable const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::binary_search_multi
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::scene::quake3::SVariable const &,::irr::s32 & ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::clear
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::clear ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::const_pointer
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef ::irr::scene::quake3::SVariable const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::empty
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::empty ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::erase
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::erase
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::getLast
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef ::irr::scene::quake3::SVariable & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::getLast
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef ::irr::scene::quake3::SVariable const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::insert
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::scene::quake3::SVariable const &,::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::linear_reverse_search
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::scene::quake3::SVariable const & ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::linear_search
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::scene::quake3::SVariable const & ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::operator=
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef ::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > const & ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::operator[]
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef ::irr::scene::quake3::SVariable & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::operator[]
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef ::irr::scene::quake3::SVariable const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::pointer
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef ::irr::scene::quake3::SVariable * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::push_back
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::quake3::SVariable const & ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::push_front
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::quake3::SVariable const & ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::reallocate
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::setAllocStrategy
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::set_pointer
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::scene::quake3::SVariable *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::set_sorted
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::set_used
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::size
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::size ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::sort
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::sort ) );
        
        }
        { //::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::swap
        
            typedef irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > > & ) ;
            
            array_less__irr_scope_scene_scope_quake3_scope_SVariable_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::scene::quake3::SVariable, irr::core::irrAllocator< irr::scene::quake3::SVariable > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >
        typedef bp::class_< irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > > tTexArray_exposer_t;
        tTexArray_exposer_t tTexArray_exposer = tTexArray_exposer_t( "tTexArray", bp::init< >() );
        bp::scope tTexArray_scope( tTexArray_exposer );
        tTexArray_exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > >();
        tTexArray_exposer.def( bp::init< irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::allocated_size
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            tTexArray_exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::binary_search
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::video::ITexture * const & ) ;
            
            tTexArray_exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::binary_search
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::video::ITexture * const & ) const;
            
            tTexArray_exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::binary_search
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::video::ITexture * const &,::irr::s32,::irr::s32 ) const;
            
            tTexArray_exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::binary_search_multi
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::video::ITexture * const &,::irr::s32 & ) ;
            
            tTexArray_exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::clear
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            tTexArray_exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::clear ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::const_pointer
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef ::irr::video::ITexture * const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            tTexArray_exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::empty
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            tTexArray_exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::empty ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::erase
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            tTexArray_exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::erase
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            tTexArray_exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::getLast
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef ::irr::video::ITexture * & ( exported_class_t::*getLast_function_type )(  ) ;
            
            tTexArray_exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::getLast
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef ::irr::video::ITexture * const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            tTexArray_exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::insert
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::video::ITexture * const &,::irr::u32 ) ;
            
            tTexArray_exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::linear_reverse_search
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::video::ITexture * const & ) const;
            
            tTexArray_exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::linear_search
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::video::ITexture * const & ) const;
            
            tTexArray_exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        tTexArray_exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::operator=
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef ::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > const & ) ;
            
            tTexArray_exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        tTexArray_exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::operator[]
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef ::irr::video::ITexture * & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            tTexArray_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::operator[]
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef ::irr::video::ITexture * const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            tTexArray_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::pointer
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef ::irr::video::ITexture * * ( exported_class_t::*pointer_function_type )(  ) ;
            
            tTexArray_exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::push_back
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::video::ITexture * const & ) ;
            
            tTexArray_exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::push_front
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::video::ITexture * const & ) ;
            
            tTexArray_exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::reallocate
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            tTexArray_exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::setAllocStrategy
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            tTexArray_exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            tTexArray_exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::set_pointer
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::video::ITexture * *,::irr::u32,bool,bool ) ;
            
            tTexArray_exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::set_sorted
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            tTexArray_exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::set_used
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            tTexArray_exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::size
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            tTexArray_exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::size ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::sort
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            tTexArray_exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::sort ) );
        
        }
        { //::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::swap
        
            typedef irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > > & ) ;
            
            tTexArray_exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::video::ITexture*, irr::core::irrAllocator< irr::video::ITexture* > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >
        typedef bp::class_< irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > > array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer_t;
        array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer_t array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer = array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer_t( "array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__scope( array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer );
        array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > >();
        array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( bp::init< irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::allocated_size
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::binary_search
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::video::S3DVertex const & ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::binary_search
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::video::S3DVertex const & ) const;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::binary_search
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::video::S3DVertex const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::binary_search_multi
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::video::S3DVertex const &,::irr::s32 & ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::clear
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::clear ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::const_pointer
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef ::irr::video::S3DVertex const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::empty
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::empty ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::erase
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::erase
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::getLast
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef ::irr::video::S3DVertex & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::getLast
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef ::irr::video::S3DVertex const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::insert
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::video::S3DVertex const &,::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::linear_reverse_search
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::video::S3DVertex const & ) const;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::linear_search
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::video::S3DVertex const & ) const;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::operator=
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef ::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > const & ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::operator[]
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef ::irr::video::S3DVertex & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::operator[]
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef ::irr::video::S3DVertex const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::pointer
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef ::irr::video::S3DVertex * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::push_back
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::video::S3DVertex const & ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::push_front
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::video::S3DVertex const & ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::reallocate
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::setAllocStrategy
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::set_pointer
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::video::S3DVertex *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::set_sorted
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::set_used
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::size
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::size ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::sort
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::sort ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::swap
        
            typedef irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > & ) ;
            
            array_less__irr_scope_video_scope_S3DVertex_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >
        typedef bp::class_< irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > > array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer_t;
        array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer_t array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer = array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer_t( "array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__scope( array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer );
        array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > >();
        array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( bp::init< irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::allocated_size
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::binary_search
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::video::S3DVertex2TCoords const & ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::binary_search
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::video::S3DVertex2TCoords const & ) const;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::binary_search
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::video::S3DVertex2TCoords const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::binary_search_multi
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::video::S3DVertex2TCoords const &,::irr::s32 & ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::clear
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::clear ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::const_pointer
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef ::irr::video::S3DVertex2TCoords const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::empty
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::empty ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::erase
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::erase
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::getLast
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef ::irr::video::S3DVertex2TCoords & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::getLast
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef ::irr::video::S3DVertex2TCoords const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::insert
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::video::S3DVertex2TCoords const &,::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::linear_reverse_search
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::video::S3DVertex2TCoords const & ) const;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::linear_search
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::video::S3DVertex2TCoords const & ) const;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::operator=
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef ::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > const & ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::operator[]
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef ::irr::video::S3DVertex2TCoords & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::operator[]
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef ::irr::video::S3DVertex2TCoords const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::pointer
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef ::irr::video::S3DVertex2TCoords * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::push_back
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::video::S3DVertex2TCoords const & ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::push_front
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::video::S3DVertex2TCoords const & ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::reallocate
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::setAllocStrategy
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::set_pointer
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::video::S3DVertex2TCoords *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::set_sorted
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::set_used
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::size
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::size ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::sort
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::sort ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::swap
        
            typedef irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > & ) ;
            
            array_less__irr_scope_video_scope_S3DVertex2TCoords_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::video::S3DVertex2TCoords, irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >
        typedef bp::class_< irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > > array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer_t;
        array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer_t array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer = array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer_t( "array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__scope( array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer );
        array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > >();
        array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( bp::init< irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::allocated_size
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::binary_search
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::video::S3DVertexTangents const & ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::binary_search
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::video::S3DVertexTangents const & ) const;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::binary_search
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::video::S3DVertexTangents const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::binary_search_multi
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::video::S3DVertexTangents const &,::irr::s32 & ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::clear
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::clear ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::const_pointer
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef ::irr::video::S3DVertexTangents const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::empty
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::empty ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::erase
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::erase
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::getLast
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef ::irr::video::S3DVertexTangents & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::getLast
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef ::irr::video::S3DVertexTangents const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::insert
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::video::S3DVertexTangents const &,::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::linear_reverse_search
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::video::S3DVertexTangents const & ) const;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::linear_search
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::video::S3DVertexTangents const & ) const;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::operator=
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef ::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > const & ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::operator[]
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef ::irr::video::S3DVertexTangents & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::operator[]
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef ::irr::video::S3DVertexTangents const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::pointer
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef ::irr::video::S3DVertexTangents * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::push_back
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::video::S3DVertexTangents const & ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::push_front
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::video::S3DVertexTangents const & ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::reallocate
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::setAllocStrategy
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::set_pointer
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::video::S3DVertexTangents *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::set_sorted
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::set_used
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::size
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::size ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::sort
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::sort ) );
        
        }
        { //::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::swap
        
            typedef irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > > & ) ;
            
            array_less__irr_scope_video_scope_S3DVertexTangents_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::video::S3DVertexTangents, irr::core::irrAllocator< irr::video::S3DVertexTangents > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >
        typedef bp::class_< irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > > array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer_t;
        array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer_t array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer = array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer_t( "array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater_", bp::init< >() );
        bp::scope array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__scope( array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer );
        array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > >();
        array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( bp::init< irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::allocated_size
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::allocated_size ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::binary_search
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::video::SMaterial const & ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::binary_search
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::video::SMaterial const & ) const;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::binary_search
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( ::irr::video::SMaterial const &,::irr::s32,::irr::s32 ) const;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::binary_search_multi
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( ::irr::video::SMaterial const &,::irr::s32 & ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::clear
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::clear ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::const_pointer
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef ::irr::video::SMaterial const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::empty
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::empty ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::erase
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::erase
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::getLast
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef ::irr::video::SMaterial & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::getLast
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef ::irr::video::SMaterial const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::insert
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( ::irr::video::SMaterial const &,::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::linear_reverse_search
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( ::irr::video::SMaterial const & ) const;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::linear_search
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( ::irr::video::SMaterial const & ) const;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::operator=
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef ::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > const & ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::operator[]
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef ::irr::video::SMaterial & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::operator[]
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef ::irr::video::SMaterial const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::pointer
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef ::irr::video::SMaterial * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::push_back
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::video::SMaterial const & ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::push_front
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::video::SMaterial const & ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::reallocate
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::setAllocStrategy
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::set_free_when_destroyed
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::set_pointer
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( ::irr::video::SMaterial *,::irr::u32,bool,bool ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::set_sorted
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::set_used
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::size
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::size ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::sort
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::sort ) );
        
        }
        { //::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::swap
        
            typedef irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > > & ) ;
            
            array_less__irr_scope_video_scope_SMaterial_comma__irr_scope_core_scope_irrAllocator_less__irr_scope_video_scope_SMaterial__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< irr::video::SMaterial, irr::core::irrAllocator< irr::video::SMaterial > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >
        typedef bp::class_< irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > > array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer_t;
        array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer_t array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer = array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer_t( "array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater_", bp::init< >() );
        bp::scope array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__scope( array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer );
        array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > >();
        array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( bp::init< irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::allocated_size
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::allocated_size ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::binary_search
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( unsigned int const & ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::binary_search
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( unsigned int const & ) const;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::binary_search
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( unsigned int const &,::irr::s32,::irr::s32 ) const;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::binary_search_multi
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( unsigned int const &,::irr::s32 & ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::clear
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::clear ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::const_pointer
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef unsigned int const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::empty
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::empty ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::erase
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::erase
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::getLast
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef unsigned int & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::getLast
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef unsigned int const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::insert
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( unsigned int const &,::irr::u32 ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::linear_reverse_search
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( unsigned int const & ) const;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::linear_search
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( unsigned int const & ) const;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::operator=
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef ::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > const & ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::operator[]
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef unsigned int & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::operator[]
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef unsigned int const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::pointer
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef unsigned int * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::push_back
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( unsigned int const & ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::push_front
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( unsigned int const & ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::reallocate
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::setAllocStrategy
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::set_free_when_destroyed
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::set_pointer
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( unsigned int *,::irr::u32,bool,bool ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::set_sorted
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::set_used
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::size
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::size ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::sort
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::sort ) );
        
        }
        { //::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::swap
        
            typedef irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > & ) ;
            
            array_less__unsigned_int_comma__irr_scope_core_scope_irrAllocator_less__unsigned_int__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >
        typedef bp::class_< irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > > array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer_t;
        array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer_t array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer = array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer_t( "array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater_", bp::init< >() );
        bp::scope array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__scope( array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer );
        array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( bp::init< irr::u32 >(( bp::arg("start_count") )) );
        bp::implicitly_convertible< irr::u32, irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > >();
        array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( bp::init< irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > const & >(( bp::arg("other") )) );
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::allocated_size
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*allocated_size_function_type )(  ) const;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "allocated_size"
                , allocated_size_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::allocated_size ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::binary_search
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( short unsigned int const & ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::binary_search
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( short unsigned int const & ) const;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::binary_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::binary_search
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_function_type )( short unsigned int const &,::irr::s32,::irr::s32 ) const;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "binary_search"
                , binary_search_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::binary_search )
                , ( bp::arg("element"), bp::arg("left"), bp::arg("right") ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::binary_search_multi
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*binary_search_multi_function_type )( short unsigned int const &,::irr::s32 & ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "binary_search_multi"
                , binary_search_multi_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::binary_search_multi )
                , ( bp::arg("element"), bp::arg("last") ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::clear
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::clear ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::const_pointer
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef short unsigned int const * ( exported_class_t::*const_pointer_function_type )(  ) const;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "const_pointer"
                , const_pointer_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::const_pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::empty
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::empty ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::erase
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::erase
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32,::irr::s32 ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::erase )
                , ( bp::arg("index"), bp::arg("count") ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::getLast
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef short unsigned int & ( exported_class_t::*getLast_function_type )(  ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::getLast )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::getLast
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef short unsigned int const & ( exported_class_t::*getLast_function_type )(  ) const;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::getLast )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::insert
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef void ( exported_class_t::*insert_function_type )( short unsigned int const &,::irr::u32 ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "insert"
                , insert_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::insert )
                , ( bp::arg("element"), bp::arg("index")=(::irr::u32)(0) ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::linear_reverse_search
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_reverse_search_function_type )( short unsigned int const & ) const;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "linear_reverse_search"
                , linear_reverse_search_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::linear_reverse_search )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::linear_search
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*linear_search_function_type )( short unsigned int const & ) const;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "linear_search"
                , linear_search_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::linear_search )
                , ( bp::arg("element") ) );
        
        }
        array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( bp::self != bp::self );
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::operator=
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef ::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > const & ( exported_class_t::*assign_function_type )( ::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > const & ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::operator= )
                , ( bp::arg("other") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::operator[]
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef short unsigned int & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::operator[]
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef short unsigned int const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 ) const;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::pointer
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef short unsigned int * ( exported_class_t::*pointer_function_type )(  ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "pointer"
                , pointer_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::pointer )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::push_back
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( short unsigned int const & ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::push_front
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( short unsigned int const & ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::reallocate
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef void ( exported_class_t::*reallocate_function_type )( ::irr::u32 ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "reallocate"
                , reallocate_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::reallocate )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::setAllocStrategy
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef void ( exported_class_t::*setAllocStrategy_function_type )( ::irr::core::eAllocStrategy ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "setAllocStrategy"
                , setAllocStrategy_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::setAllocStrategy )
                , ( bp::arg("newStrategy")=irr::core::ALLOC_STRATEGY_DOUBLE ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::set_free_when_destroyed
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef void ( exported_class_t::*set_free_when_destroyed_function_type )( bool ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "set_free_when_destroyed"
                , set_free_when_destroyed_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::set_free_when_destroyed )
                , ( bp::arg("f") ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::set_pointer
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef void ( exported_class_t::*set_pointer_function_type )( short unsigned int *,::irr::u32,bool,bool ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "set_pointer"
                , set_pointer_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::set_pointer )
                , ( bp::arg("newPointer"), bp::arg("size"), bp::arg("_is_sorted")=(bool)(false), bp::arg("_free_when_destroyed")=(bool)(true) ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::set_sorted
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef void ( exported_class_t::*set_sorted_function_type )( bool ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "set_sorted"
                , set_sorted_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::set_sorted )
                , ( bp::arg("_is_sorted") ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::set_used
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef void ( exported_class_t::*set_used_function_type )( ::irr::u32 ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::set_used )
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::size
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::size ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::sort
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef void ( exported_class_t::*sort_function_type )(  ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "sort"
                , sort_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::sort ) );
        
        }
        { //::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::swap
        
            typedef irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > > & ) ;
            
            array_less__unsigned_short_comma__irr_scope_core_scope_irrAllocator_less__unsigned_short__greater___greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::array< unsigned short, irr::core::irrAllocator< unsigned short > >::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::dimension2d< int >
        typedef bp::class_< irr::core::dimension2d< int > > dimension2di_exposer_t;
        dimension2di_exposer_t dimension2di_exposer = dimension2di_exposer_t( "dimension2di", bp::init< >() );
        bp::scope dimension2di_scope( dimension2di_exposer );
        dimension2di_exposer.def( bp::init< int const &, int const & >(( bp::arg("width"), bp::arg("height") )) );
        dimension2di_exposer.def( bp::init< irr::core::vector2d< int > const & >(( bp::arg("other") )) );
        bp::implicitly_convertible< irr::core::vector2d< int > const &, irr::core::dimension2d< int > >();
        { //::irr::core::dimension2d< int >::getArea
        
            typedef irr::core::dimension2d< int > exported_class_t;
            typedef int ( exported_class_t::*getArea_function_type )(  ) const;
            
            dimension2di_exposer.def( 
                "getArea"
                , getArea_function_type( &::irr::core::dimension2d< int >::getArea ) );
        
        }
        { //::irr::core::dimension2d< int >::getInterpolated
        
            typedef irr::core::dimension2d< int > exported_class_t;
            typedef ::irr::core::dimension2d< int > ( exported_class_t::*getInterpolated_function_type )( ::irr::core::dimension2d< int > const &,::irr::f32 ) const;
            
            dimension2di_exposer.def( 
                "getInterpolated"
                , getInterpolated_function_type( &::irr::core::dimension2d< int >::getInterpolated )
                , ( bp::arg("other"), bp::arg("d") ) );
        
        }
        { //::irr::core::dimension2d< int >::getOptimalSize
        
            typedef irr::core::dimension2d< int > exported_class_t;
            typedef ::irr::core::dimension2d< int > ( exported_class_t::*getOptimalSize_function_type )( bool,bool,bool,::irr::u32 ) const;
            
            dimension2di_exposer.def( 
                "getOptimalSize"
                , getOptimalSize_function_type( &::irr::core::dimension2d< int >::getOptimalSize )
                , ( bp::arg("requirePowerOfTwo")=(bool)(true), bp::arg("requireSquare")=(bool)(false), bp::arg("larger")=(bool)(true), bp::arg("maxValue")=(::irr::u32)(0) ) );
        
        }
        dimension2di_exposer.def( bp::self != bp::self );
        dimension2di_exposer.def( bp::self != bp::other< irr::core::vector2d< int > >() );
        dimension2di_exposer.def( bp::self * bp::other< int >() );
        dimension2di_exposer.def( bp::self *= bp::other< int >() );
        dimension2di_exposer.def( bp::self + bp::self );
        dimension2di_exposer.def( bp::self += bp::self );
        dimension2di_exposer.def( bp::self -= bp::self );
        dimension2di_exposer.def( bp::self / bp::other< int >() );
        dimension2di_exposer.def( bp::self /= bp::other< int >() );
        dimension2di_exposer.def( bp::self == bp::self );
        dimension2di_exposer.def( bp::self == bp::other< irr::core::vector2d< int > >() );
        { //::irr::core::dimension2d< int >::set
        
            typedef irr::core::dimension2d< int > exported_class_t;
            typedef ::irr::core::dimension2d< int > & ( exported_class_t::*set_function_type )( int const &,int const & ) ;
            
            dimension2di_exposer.def( 
                "set"
                , set_function_type( &::irr::core::dimension2d< int >::set )
                , ( bp::arg("width"), bp::arg("height") )
                    /* undefined call policies */ );
        
        }
        dimension2di_exposer.def_readwrite( "Height", &irr::core::dimension2d< int >::Height );
        dimension2di_exposer.def_readwrite( "Width", &irr::core::dimension2d< int >::Width );
    }

    bp::class_< irrAllocator_less__char__greater__wrapper >( "irrAllocator_less__char__greater_" )    
        .def( 
            "allocate"
            , (char * ( ::irr::core::irrAllocator<char>::* )( ::size_t ) )( &::irr::core::irrAllocator< char >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<char>::* )( char *,char const & ) )( &::irr::core::irrAllocator< char >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<char>::* )( char * ) )( &::irr::core::irrAllocator< char >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<char>::* )( char * ) )( &::irr::core::irrAllocator< char >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__char__greater__wrapper::* )( void * ) )(&irrAllocator_less__char__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__char__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__char__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__int__greater__wrapper >( "irrAllocator_less__int__greater_" )    
        .def( 
            "allocate"
            , (int * ( ::irr::core::irrAllocator<int>::* )( ::size_t ) )( &::irr::core::irrAllocator< int >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<int>::* )( int *,int const & ) )( &::irr::core::irrAllocator< int >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<int>::* )( int * ) )( &::irr::core::irrAllocator< int >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<int>::* )( int * ) )( &::irr::core::irrAllocator< int >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__int__greater__wrapper::* )( void * ) )(&irrAllocator_less__int__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__int__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__int__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater__wrapper >( "irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater_" )    
        .def( 
            "allocate"
            , (::irr::core::CMatrix4< float > * ( ::irr::core::irrAllocator<irr::core::CMatrix4<float> >::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::core::CMatrix4< float > >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::core::CMatrix4<float> >::* )( ::irr::core::CMatrix4< float > *,::irr::core::CMatrix4< float > const & ) )( &::irr::core::irrAllocator< irr::core::CMatrix4< float > >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::core::CMatrix4<float> >::* )( ::irr::core::CMatrix4< float > * ) )( &::irr::core::irrAllocator< irr::core::CMatrix4< float > >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::core::CMatrix4<float> >::* )( ::irr::core::CMatrix4< float > * ) )( &::irr::core::irrAllocator< irr::core::CMatrix4< float > >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_core_scope_CMatrix4_less__float__greater___greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__scope_SKListNode__greater__wrapper >( "irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__scope_SKListNode__greater_" )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__scope_SKListNode__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__scope_SKListNode__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__scope_SKListNode__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__scope_SKListNode__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNode_ptr__greater__scope_SKListNode__greater__wrapper >( "irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNode_ptr__greater__scope_SKListNode__greater_" )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNode_ptr__greater__scope_SKListNode__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNode_ptr__greater__scope_SKListNode__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNode_ptr__greater__scope_SKListNode__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNode_ptr__greater__scope_SKListNode__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNodeAnimator_ptr__greater__scope_SKListNode__greater__wrapper >( "irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNodeAnimator_ptr__greater__scope_SKListNode__greater_" )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNodeAnimator_ptr__greater__scope_SKListNode__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNodeAnimator_ptr__greater__scope_SKListNode__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNodeAnimator_ptr__greater__scope_SKListNode__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_core_scope_list_less_irr_scope_scene_scope_ISceneNodeAnimator_ptr__greater__scope_SKListNode__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_core_scope_string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater___greater__wrapper >( "irrAllocator_less__irr_scope_core_scope_string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater___greater_" )    
        .def( 
            "allocate"
            , (::irr::core::string< char, irr::core::irrAllocator< char > > * ( ::irr::core::irrAllocator<irr::core::string<char, irr::core::irrAllocator<char> > >::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::core::string<char, irr::core::irrAllocator<char> > >::* )( ::irr::core::string< char, irr::core::irrAllocator< char > > *,::irr::core::string< char, irr::core::irrAllocator< char > > const & ) )( &::irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::core::string<char, irr::core::irrAllocator<char> > >::* )( ::irr::core::string< char, irr::core::irrAllocator< char > > * ) )( &::irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::core::string<char, irr::core::irrAllocator<char> > >::* )( ::irr::core::string< char, irr::core::irrAllocator< char > > * ) )( &::irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_core_scope_string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater___greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_core_scope_string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater___greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_core_scope_string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater___greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_core_scope_string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater___greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater__wrapper >( "irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater_" )    
        .def( 
            "allocate"
            , (::irr::gui::SGUISpriteFrame * ( ::irr::core::irrAllocator<irr::gui::SGUISpriteFrame>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::gui::SGUISpriteFrame >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::gui::SGUISpriteFrame>::* )( ::irr::gui::SGUISpriteFrame *,::irr::gui::SGUISpriteFrame const & ) )( &::irr::core::irrAllocator< irr::gui::SGUISpriteFrame >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::gui::SGUISpriteFrame>::* )( ::irr::gui::SGUISpriteFrame * ) )( &::irr::core::irrAllocator< irr::gui::SGUISpriteFrame >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::gui::SGUISpriteFrame>::* )( ::irr::gui::SGUISpriteFrame * ) )( &::irr::core::irrAllocator< irr::gui::SGUISpriteFrame >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_gui_scope_SGUISpriteFrame__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater__wrapper >( "irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater_" )    
        .def( 
            "allocate"
            , (::irr::scene::IBoneSceneNode * * ( ::irr::core::irrAllocator<irr::scene::IBoneSceneNode*>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::scene::IBoneSceneNode* >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::scene::IBoneSceneNode*>::* )( ::irr::scene::IBoneSceneNode * *,::irr::scene::IBoneSceneNode * const & ) )( &::irr::core::irrAllocator< irr::scene::IBoneSceneNode* >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::scene::IBoneSceneNode*>::* )( ::irr::scene::IBoneSceneNode * * ) )( &::irr::core::irrAllocator< irr::scene::IBoneSceneNode* >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::scene::IBoneSceneNode*>::* )( ::irr::scene::IBoneSceneNode * * ) )( &::irr::core::irrAllocator< irr::scene::IBoneSceneNode* >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_scene_scope_IBoneSceneNode_ptr___greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater__wrapper >( "irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater_" )    
        .def( 
            "allocate"
            , (::irr::scene::IMesh * * ( ::irr::core::irrAllocator<irr::scene::IMesh*>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::scene::IMesh* >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::scene::IMesh*>::* )( ::irr::scene::IMesh * *,::irr::scene::IMesh * const & ) )( &::irr::core::irrAllocator< irr::scene::IMesh* >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::scene::IMesh*>::* )( ::irr::scene::IMesh * * ) )( &::irr::core::irrAllocator< irr::scene::IMesh* >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::scene::IMesh*>::* )( ::irr::scene::IMesh * * ) )( &::irr::core::irrAllocator< irr::scene::IMesh* >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_scene_scope_IMesh_ptr___greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater__wrapper >( "irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater_" )    
        .def( 
            "allocate"
            , (::irr::scene::IMeshBuffer * * ( ::irr::core::irrAllocator<irr::scene::IMeshBuffer*>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::scene::IMeshBuffer* >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::scene::IMeshBuffer*>::* )( ::irr::scene::IMeshBuffer * *,::irr::scene::IMeshBuffer * const & ) )( &::irr::core::irrAllocator< irr::scene::IMeshBuffer* >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::scene::IMeshBuffer*>::* )( ::irr::scene::IMeshBuffer * * ) )( &::irr::core::irrAllocator< irr::scene::IMeshBuffer* >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::scene::IMeshBuffer*>::* )( ::irr::scene::IMeshBuffer * * ) )( &::irr::core::irrAllocator< irr::scene::IMeshBuffer* >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_scene_scope_IMeshBuffer_ptr___greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater__wrapper >( "irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater_" )    
        .def( 
            "allocate"
            , (::irr::scene::ISkinnedMesh::SJoint * * ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SJoint*>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SJoint*>::* )( ::irr::scene::ISkinnedMesh::SJoint * *,::irr::scene::ISkinnedMesh::SJoint * const & ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SJoint*>::* )( ::irr::scene::ISkinnedMesh::SJoint * * ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SJoint*>::* )( ::irr::scene::ISkinnedMesh::SJoint * * ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint* >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SJoint_ptr___greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater__wrapper >( "irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater_" )    
        .def( 
            "allocate"
            , (::irr::scene::ISkinnedMesh::SPositionKey * ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SPositionKey>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SPositionKey>::* )( ::irr::scene::ISkinnedMesh::SPositionKey *,::irr::scene::ISkinnedMesh::SPositionKey const & ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SPositionKey>::* )( ::irr::scene::ISkinnedMesh::SPositionKey * ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SPositionKey>::* )( ::irr::scene::ISkinnedMesh::SPositionKey * ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SPositionKey >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SPositionKey__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater__wrapper >( "irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater_" )    
        .def( 
            "allocate"
            , (::irr::scene::ISkinnedMesh::SRotationKey * ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SRotationKey>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SRotationKey>::* )( ::irr::scene::ISkinnedMesh::SRotationKey *,::irr::scene::ISkinnedMesh::SRotationKey const & ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SRotationKey>::* )( ::irr::scene::ISkinnedMesh::SRotationKey * ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SRotationKey>::* )( ::irr::scene::ISkinnedMesh::SRotationKey * ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SRotationKey >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SRotationKey__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater__wrapper >( "irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater_" )    
        .def( 
            "allocate"
            , (::irr::scene::ISkinnedMesh::SScaleKey * ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SScaleKey>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SScaleKey>::* )( ::irr::scene::ISkinnedMesh::SScaleKey *,::irr::scene::ISkinnedMesh::SScaleKey const & ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SScaleKey>::* )( ::irr::scene::ISkinnedMesh::SScaleKey * ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SScaleKey>::* )( ::irr::scene::ISkinnedMesh::SScaleKey * ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SScaleKey >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SScaleKey__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater__wrapper >( "irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater_" )    
        .def( 
            "allocate"
            , (::irr::scene::ISkinnedMesh::SWeight * ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SWeight>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SWeight>::* )( ::irr::scene::ISkinnedMesh::SWeight *,::irr::scene::ISkinnedMesh::SWeight const & ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SWeight>::* )( ::irr::scene::ISkinnedMesh::SWeight * ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::scene::ISkinnedMesh::SWeight>::* )( ::irr::scene::ISkinnedMesh::SWeight * ) )( &::irr::core::irrAllocator< irr::scene::ISkinnedMesh::SWeight >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_scene_scope_ISkinnedMesh_scope_SWeight__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater__wrapper >( "irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater_" )    
        .def( 
            "allocate"
            , (::irr::scene::SMD3MeshBuffer * * ( ::irr::core::irrAllocator<irr::scene::SMD3MeshBuffer*>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::scene::SMD3MeshBuffer*>::* )( ::irr::scene::SMD3MeshBuffer * *,::irr::scene::SMD3MeshBuffer * const & ) )( &::irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::scene::SMD3MeshBuffer*>::* )( ::irr::scene::SMD3MeshBuffer * * ) )( &::irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::scene::SMD3MeshBuffer*>::* )( ::irr::scene::SMD3MeshBuffer * * ) )( &::irr::core::irrAllocator< irr::scene::SMD3MeshBuffer* >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_scene_scope_SMD3MeshBuffer_ptr___greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater__wrapper >( "irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater_" )    
        .def( 
            "allocate"
            , (::irr::scene::SMD3QuaternionTag * ( ::irr::core::irrAllocator<irr::scene::SMD3QuaternionTag>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::scene::SMD3QuaternionTag >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::scene::SMD3QuaternionTag>::* )( ::irr::scene::SMD3QuaternionTag *,::irr::scene::SMD3QuaternionTag const & ) )( &::irr::core::irrAllocator< irr::scene::SMD3QuaternionTag >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::scene::SMD3QuaternionTag>::* )( ::irr::scene::SMD3QuaternionTag * ) )( &::irr::core::irrAllocator< irr::scene::SMD3QuaternionTag >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::scene::SMD3QuaternionTag>::* )( ::irr::scene::SMD3QuaternionTag * ) )( &::irr::core::irrAllocator< irr::scene::SMD3QuaternionTag >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_scene_scope_SMD3QuaternionTag__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater__wrapper >( "irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater_" )    
        .def( 
            "allocate"
            , (::irr::scene::SMD3TexCoord * ( ::irr::core::irrAllocator<irr::scene::SMD3TexCoord>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::scene::SMD3TexCoord >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::scene::SMD3TexCoord>::* )( ::irr::scene::SMD3TexCoord *,::irr::scene::SMD3TexCoord const & ) )( &::irr::core::irrAllocator< irr::scene::SMD3TexCoord >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::scene::SMD3TexCoord>::* )( ::irr::scene::SMD3TexCoord * ) )( &::irr::core::irrAllocator< irr::scene::SMD3TexCoord >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::scene::SMD3TexCoord>::* )( ::irr::scene::SMD3TexCoord * ) )( &::irr::core::irrAllocator< irr::scene::SMD3TexCoord >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_scene_scope_SMD3TexCoord__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater__wrapper >( "irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater_" )    
        .def( 
            "allocate"
            , (::irr::scene::SMD3Vertex * ( ::irr::core::irrAllocator<irr::scene::SMD3Vertex>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::scene::SMD3Vertex >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::scene::SMD3Vertex>::* )( ::irr::scene::SMD3Vertex *,::irr::scene::SMD3Vertex const & ) )( &::irr::core::irrAllocator< irr::scene::SMD3Vertex >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::scene::SMD3Vertex>::* )( ::irr::scene::SMD3Vertex * ) )( &::irr::core::irrAllocator< irr::scene::SMD3Vertex >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::scene::SMD3Vertex>::* )( ::irr::scene::SMD3Vertex * ) )( &::irr::core::irrAllocator< irr::scene::SMD3Vertex >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_scene_scope_SMD3Vertex__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater__wrapper >( "irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater_" )    
        .def( 
            "allocate"
            , (::irr::scene::quake3::SVarGroup * ( ::irr::core::irrAllocator<irr::scene::quake3::SVarGroup>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::scene::quake3::SVarGroup >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::scene::quake3::SVarGroup>::* )( ::irr::scene::quake3::SVarGroup *,::irr::scene::quake3::SVarGroup const & ) )( &::irr::core::irrAllocator< irr::scene::quake3::SVarGroup >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::scene::quake3::SVarGroup>::* )( ::irr::scene::quake3::SVarGroup * ) )( &::irr::core::irrAllocator< irr::scene::quake3::SVarGroup >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::scene::quake3::SVarGroup>::* )( ::irr::scene::quake3::SVarGroup * ) )( &::irr::core::irrAllocator< irr::scene::quake3::SVarGroup >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVarGroup__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater__wrapper >( "irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater_" )    
        .def( 
            "allocate"
            , (::irr::scene::quake3::SVariable * ( ::irr::core::irrAllocator<irr::scene::quake3::SVariable>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::scene::quake3::SVariable >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::scene::quake3::SVariable>::* )( ::irr::scene::quake3::SVariable *,::irr::scene::quake3::SVariable const & ) )( &::irr::core::irrAllocator< irr::scene::quake3::SVariable >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::scene::quake3::SVariable>::* )( ::irr::scene::quake3::SVariable * ) )( &::irr::core::irrAllocator< irr::scene::quake3::SVariable >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::scene::quake3::SVariable>::* )( ::irr::scene::quake3::SVariable * ) )( &::irr::core::irrAllocator< irr::scene::quake3::SVariable >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_scene_scope_quake3_scope_SVariable__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_video_scope_ITexture_ptr___greater__wrapper >( "irrAllocator_less__irr_scope_video_scope_ITexture_ptr___greater_" )    
        .def( 
            "allocate"
            , (::irr::video::ITexture * * ( ::irr::core::irrAllocator<irr::video::ITexture*>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::video::ITexture* >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::video::ITexture*>::* )( ::irr::video::ITexture * *,::irr::video::ITexture * const & ) )( &::irr::core::irrAllocator< irr::video::ITexture* >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::video::ITexture*>::* )( ::irr::video::ITexture * * ) )( &::irr::core::irrAllocator< irr::video::ITexture* >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::video::ITexture*>::* )( ::irr::video::ITexture * * ) )( &::irr::core::irrAllocator< irr::video::ITexture* >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_video_scope_ITexture_ptr___greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_video_scope_ITexture_ptr___greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_video_scope_ITexture_ptr___greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_video_scope_ITexture_ptr___greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater__wrapper >( "irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater_" )    
        .def( 
            "allocate"
            , (::irr::video::S3DVertex2TCoords * ( ::irr::core::irrAllocator<irr::video::S3DVertex2TCoords>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::video::S3DVertex2TCoords >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::video::S3DVertex2TCoords>::* )( ::irr::video::S3DVertex2TCoords *,::irr::video::S3DVertex2TCoords const & ) )( &::irr::core::irrAllocator< irr::video::S3DVertex2TCoords >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::video::S3DVertex2TCoords>::* )( ::irr::video::S3DVertex2TCoords * ) )( &::irr::core::irrAllocator< irr::video::S3DVertex2TCoords >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::video::S3DVertex2TCoords>::* )( ::irr::video::S3DVertex2TCoords * ) )( &::irr::core::irrAllocator< irr::video::S3DVertex2TCoords >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_video_scope_S3DVertex2TCoords__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_video_scope_S3DVertex__greater__wrapper >( "irrAllocator_less__irr_scope_video_scope_S3DVertex__greater_" )    
        .def( 
            "allocate"
            , (::irr::video::S3DVertex * ( ::irr::core::irrAllocator<irr::video::S3DVertex>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::video::S3DVertex >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::video::S3DVertex>::* )( ::irr::video::S3DVertex *,::irr::video::S3DVertex const & ) )( &::irr::core::irrAllocator< irr::video::S3DVertex >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::video::S3DVertex>::* )( ::irr::video::S3DVertex * ) )( &::irr::core::irrAllocator< irr::video::S3DVertex >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::video::S3DVertex>::* )( ::irr::video::S3DVertex * ) )( &::irr::core::irrAllocator< irr::video::S3DVertex >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_video_scope_S3DVertex__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_video_scope_S3DVertex__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_video_scope_S3DVertex__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_video_scope_S3DVertex__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater__wrapper >( "irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater_" )    
        .def( 
            "allocate"
            , (::irr::video::S3DVertexTangents * ( ::irr::core::irrAllocator<irr::video::S3DVertexTangents>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::video::S3DVertexTangents >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::video::S3DVertexTangents>::* )( ::irr::video::S3DVertexTangents *,::irr::video::S3DVertexTangents const & ) )( &::irr::core::irrAllocator< irr::video::S3DVertexTangents >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::video::S3DVertexTangents>::* )( ::irr::video::S3DVertexTangents * ) )( &::irr::core::irrAllocator< irr::video::S3DVertexTangents >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::video::S3DVertexTangents>::* )( ::irr::video::S3DVertexTangents * ) )( &::irr::core::irrAllocator< irr::video::S3DVertexTangents >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_video_scope_S3DVertexTangents__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__irr_scope_video_scope_SMaterial__greater__wrapper >( "irrAllocator_less__irr_scope_video_scope_SMaterial__greater_" )    
        .def( 
            "allocate"
            , (::irr::video::SMaterial * ( ::irr::core::irrAllocator<irr::video::SMaterial>::* )( ::size_t ) )( &::irr::core::irrAllocator< irr::video::SMaterial >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<irr::video::SMaterial>::* )( ::irr::video::SMaterial *,::irr::video::SMaterial const & ) )( &::irr::core::irrAllocator< irr::video::SMaterial >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<irr::video::SMaterial>::* )( ::irr::video::SMaterial * ) )( &::irr::core::irrAllocator< irr::video::SMaterial >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<irr::video::SMaterial>::* )( ::irr::video::SMaterial * ) )( &::irr::core::irrAllocator< irr::video::SMaterial >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__irr_scope_video_scope_SMaterial__greater__wrapper::* )( void * ) )(&irrAllocator_less__irr_scope_video_scope_SMaterial__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__irr_scope_video_scope_SMaterial__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__irr_scope_video_scope_SMaterial__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__unsigned_int__greater__wrapper >( "irrAllocator_less__unsigned_int__greater_" )    
        .def( 
            "allocate"
            , (unsigned int * ( ::irr::core::irrAllocator<unsigned int>::* )( ::size_t ) )( &::irr::core::irrAllocator< unsigned int >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<unsigned int>::* )( unsigned int *,unsigned int const & ) )( &::irr::core::irrAllocator< unsigned int >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<unsigned int>::* )( unsigned int * ) )( &::irr::core::irrAllocator< unsigned int >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<unsigned int>::* )( unsigned int * ) )( &::irr::core::irrAllocator< unsigned int >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__unsigned_int__greater__wrapper::* )( void * ) )(&irrAllocator_less__unsigned_int__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__unsigned_int__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__unsigned_int__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__unsigned_short__greater__wrapper >( "irrAllocator_less__unsigned_short__greater_" )    
        .def( 
            "allocate"
            , (short unsigned int * ( ::irr::core::irrAllocator<unsigned short>::* )( ::size_t ) )( &::irr::core::irrAllocator< unsigned short >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<unsigned short>::* )( short unsigned int *,short unsigned int const & ) )( &::irr::core::irrAllocator< unsigned short >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<unsigned short>::* )( short unsigned int * ) )( &::irr::core::irrAllocator< unsigned short >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<unsigned short>::* )( short unsigned int * ) )( &::irr::core::irrAllocator< unsigned short >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__unsigned_short__greater__wrapper::* )( void * ) )(&irrAllocator_less__unsigned_short__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__unsigned_short__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__unsigned_short__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irrAllocator_less__wchar_t__greater__wrapper >( "irrAllocator_less__wchar_t__greater_" )    
        .def( 
            "allocate"
            , (wchar_t * ( ::irr::core::irrAllocator<wchar_t>::* )( ::size_t ) )( &::irr::core::irrAllocator< wchar_t >::allocate )
            , ( bp::arg("cnt") )
                /* undefined call policies */ )    
        .def( 
            "construct"
            , (void ( ::irr::core::irrAllocator<wchar_t>::* )( wchar_t *,wchar_t const & ) )( &::irr::core::irrAllocator< wchar_t >::construct )
            , ( bp::arg("ptr"), bp::arg("e") ) )    
        .def( 
            "deallocate"
            , (void ( ::irr::core::irrAllocator<wchar_t>::* )( wchar_t * ) )( &::irr::core::irrAllocator< wchar_t >::deallocate )
            , ( bp::arg("ptr") ) )    
        .def( 
            "destruct"
            , (void ( ::irr::core::irrAllocator<wchar_t>::* )( wchar_t * ) )( &::irr::core::irrAllocator< wchar_t >::destruct )
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_delete"
            , (void ( irrAllocator_less__wchar_t__greater__wrapper::* )( void * ) )(&irrAllocator_less__wchar_t__greater__wrapper::default_internal_delete)
            , ( bp::arg("ptr") ) )    
        .def( 
            "internal_new"
            , (void * ( irrAllocator_less__wchar_t__greater__wrapper::* )( ::size_t ) )(&irrAllocator_less__wchar_t__greater__wrapper::default_internal_new)
            , ( bp::arg("cnt") )
            , bp::return_value_policy< bp::return_opaque_pointer >() );

    bp::class_< irr::core::line3d< float > >( "line3df", bp::init< >() )    
        .def( bp::init< float, float, float, float, float, float >(( bp::arg("xa"), bp::arg("ya"), bp::arg("za"), bp::arg("xb"), bp::arg("yb"), bp::arg("zb") )) )    
        .def( bp::init< irr::core::vector3d< float > const &, irr::core::vector3d< float > const & >(( bp::arg("start"), bp::arg("end") )) )    
        .def( 
            "getClosestPoint"
            , (::irr::core::vector3d< float > ( ::irr::core::line3d<float>::* )( ::irr::core::vector3d< float > const & ) const)( &::irr::core::line3d< float >::getClosestPoint )
            , ( bp::arg("point") ) )    
        .def( 
            "getIntersectionWithSphere"
            , (bool ( ::irr::core::line3d<float>::* )( ::irr::core::vector3d< float >,float,::irr::f64 & ) const)( &::irr::core::line3d< float >::getIntersectionWithSphere )
            , ( bp::arg("sorigin"), bp::arg("sradius"), bp::arg("outdistance") ) )    
        .def( 
            "getLength"
            , (float ( ::irr::core::line3d<float>::* )(  ) const)( &::irr::core::line3d< float >::getLength ) )    
        .def( 
            "getLengthSQ"
            , (float ( ::irr::core::line3d<float>::* )(  ) const)( &::irr::core::line3d< float >::getLengthSQ ) )    
        .def( 
            "getMiddle"
            , (::irr::core::vector3d< float > ( ::irr::core::line3d<float>::* )(  ) const)( &::irr::core::line3d< float >::getMiddle ) )    
        .def( 
            "getVector"
            , (::irr::core::vector3d< float > ( ::irr::core::line3d<float>::* )(  ) const)( &::irr::core::line3d< float >::getVector ) )    
        .def( 
            "isPointBetweenStartAndEnd"
            , (bool ( ::irr::core::line3d<float>::* )( ::irr::core::vector3d< float > const & ) const)( &::irr::core::line3d< float >::isPointBetweenStartAndEnd )
            , ( bp::arg("point") ) )    
        .def( bp::self != bp::self )    
        .def( bp::self + bp::other< irr::core::vector3d< float > >() )    
        .def( bp::self += bp::other< irr::core::vector3d< float > >() )    
        .def( bp::self - bp::other< irr::core::vector3d< float > >() )    
        .def( bp::self -= bp::other< irr::core::vector3d< float > >() )    
        .def( bp::self == bp::self )    
        .def( 
            "setLine"
            , (void ( ::irr::core::line3d<float>::* )( float const &,float const &,float const &,float const &,float const &,float const & ) )( &::irr::core::line3d< float >::setLine )
            , ( bp::arg("xa"), bp::arg("ya"), bp::arg("za"), bp::arg("xb"), bp::arg("yb"), bp::arg("zb") ) )    
        .def( 
            "setLine"
            , (void ( ::irr::core::line3d<float>::* )( ::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const & ) )( &::irr::core::line3d< float >::setLine )
            , ( bp::arg("nstart"), bp::arg("nend") ) )    
        .def( 
            "setLine"
            , (void ( ::irr::core::line3d<float>::* )( ::irr::core::line3d< float > const & ) )( &::irr::core::line3d< float >::setLine )
            , ( bp::arg("line") ) )    
        .def_readwrite( "end", &irr::core::line3d< float >::end )    
        .def_readwrite( "start", &irr::core::line3d< float >::start );

    { //::irr::core::list<irr::gui::IGUIElement*>
        typedef bp::class_< irr::core::list<irr::gui::IGUIElement*> > list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer_t;
        list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer_t list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer = list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer_t( "list_less_irr_scope_gui_scope_IGUIElement_ptr__greater_", bp::init< >() );
        bp::scope list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__scope( list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer );
        { //::irr::core::list<irr::gui::IGUIElement*>::ConstIterator
            typedef bp::class_< irr::core::list<irr::gui::IGUIElement*>::ConstIterator > ConstIterator_exposer_t;
            ConstIterator_exposer_t ConstIterator_exposer = ConstIterator_exposer_t( "ConstIterator", bp::init< >() );
            bp::scope ConstIterator_scope( ConstIterator_exposer );
            ConstIterator_exposer.def( bp::init< irr::core::list<irr::gui::IGUIElement*>::Iterator const & >(( bp::arg("iter") )) );
            bp::implicitly_convertible< irr::core::list<irr::gui::IGUIElement*>::Iterator const &, irr::core::list<irr::gui::IGUIElement*>::ConstIterator >();
            ConstIterator_exposer.def( bp::self != bp::self );
            ConstIterator_exposer.def( bp::self != bp::other< irr::core::list<irr::gui::IGUIElement*>::Iterator >() );
            ConstIterator_exposer.def( bp::self + bp::other< irr::s32 >() );
            ConstIterator_exposer.def( bp::self += bp::other< irr::s32 >() );
            ConstIterator_exposer.def( bp::self - bp::other< irr::s32 >() );
            ConstIterator_exposer.def( bp::self -= bp::other< irr::s32 >() );
            { //::irr::core::list<irr::gui::IGUIElement*>::ConstIterator::operator=
            
                typedef ::irr::core::list<irr::gui::IGUIElement*>::ConstIterator & ( ::irr::core::list<irr::gui::IGUIElement*>::ConstIterator::*assign_function_type )( ::irr::core::list<irr::gui::IGUIElement*>::Iterator const & ) ;
                
                ConstIterator_exposer.def( 
                    "assign"
                    , assign_function_type( &::irr::core::list<irr::gui::IGUIElement*>::ConstIterator::operator= )
                    , ( bp::arg("iterator") )
                    , bp::return_self< >() );
            
            }
            ConstIterator_exposer.def( bp::self == bp::self );
            ConstIterator_exposer.def( bp::self == bp::other< irr::core::list<irr::gui::IGUIElement*>::Iterator >() );
        }
        bp::class_< irr::core::list<irr::gui::IGUIElement*>::Iterator >( "Iterator", bp::init< >() )    
            .def( bp::self != bp::self )    
            .def( bp::self != bp::other< irr::core::list<irr::gui::IGUIElement*>::ConstIterator >() )    
            .def( bp::self + bp::other< irr::s32 >() )    
            .def( bp::self += bp::other< irr::s32 >() )    
            .def( bp::self - bp::other< irr::s32 >() )    
            .def( bp::self -= bp::other< irr::s32 >() )    
            .def( bp::self == bp::self )    
            .def( bp::self == bp::other< irr::core::list<irr::gui::IGUIElement*>::ConstIterator >() );
        list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( bp::init< irr::core::list<irr::gui::IGUIElement*> const & >(( bp::arg("other") )) );
        { //::irr::core::list<irr::gui::IGUIElement*>::begin
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef ::irr::core::list<irr::gui::IGUIElement*>::Iterator ( exported_class_t::*begin_function_type )(  ) ;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "begin"
                , begin_function_type( &::irr::core::list<irr::gui::IGUIElement*>::begin ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::begin
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef ::irr::core::list<irr::gui::IGUIElement*>::ConstIterator ( exported_class_t::*begin_function_type )(  ) const;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "begin"
                , begin_function_type( &::irr::core::list<irr::gui::IGUIElement*>::begin ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::clear
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::list<irr::gui::IGUIElement*>::clear ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::empty
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::list<irr::gui::IGUIElement*>::empty ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::end
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef ::irr::core::list<irr::gui::IGUIElement*>::Iterator ( exported_class_t::*end_function_type )(  ) ;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "end"
                , end_function_type( &::irr::core::list<irr::gui::IGUIElement*>::end ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::end
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef ::irr::core::list<irr::gui::IGUIElement*>::ConstIterator ( exported_class_t::*end_function_type )(  ) const;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "end"
                , end_function_type( &::irr::core::list<irr::gui::IGUIElement*>::end ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::erase
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef ::irr::core::list<irr::gui::IGUIElement*>::Iterator ( exported_class_t::*erase_function_type )( ::irr::core::list<irr::gui::IGUIElement*>::Iterator & ) ;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::list<irr::gui::IGUIElement*>::erase )
                , ( bp::arg("it") ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::getLast
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef ::irr::core::list<irr::gui::IGUIElement*>::Iterator ( exported_class_t::*getLast_function_type )(  ) ;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::list<irr::gui::IGUIElement*>::getLast ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::getLast
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef ::irr::core::list<irr::gui::IGUIElement*>::ConstIterator ( exported_class_t::*getLast_function_type )(  ) const;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::list<irr::gui::IGUIElement*>::getLast ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::getSize
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*getSize_function_type )(  ) const;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "getSize"
                , getSize_function_type( &::irr::core::list<irr::gui::IGUIElement*>::getSize ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::insert_after
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef void ( exported_class_t::*insert_after_function_type )( ::irr::core::list<irr::gui::IGUIElement*>::Iterator const &,::irr::gui::IGUIElement * const & ) ;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "insert_after"
                , insert_after_function_type( &::irr::core::list<irr::gui::IGUIElement*>::insert_after )
                , ( bp::arg("it"), bp::arg("element") ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::insert_before
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef void ( exported_class_t::*insert_before_function_type )( ::irr::core::list<irr::gui::IGUIElement*>::Iterator const &,::irr::gui::IGUIElement * const & ) ;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "insert_before"
                , insert_before_function_type( &::irr::core::list<irr::gui::IGUIElement*>::insert_before )
                , ( bp::arg("it"), bp::arg("element") ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::operator=
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef void ( exported_class_t::*assign_function_type )( ::irr::core::list<irr::gui::IGUIElement*> const & ) ;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::list<irr::gui::IGUIElement*>::operator= )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::push_back
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::gui::IGUIElement * const & ) ;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::list<irr::gui::IGUIElement*>::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::push_front
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::gui::IGUIElement * const & ) ;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::list<irr::gui::IGUIElement*>::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::size
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::list<irr::gui::IGUIElement*>::size ) );
        
        }
        { //::irr::core::list<irr::gui::IGUIElement*>::swap
        
            typedef irr::core::list<irr::gui::IGUIElement*> exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::list<irr::gui::IGUIElement*> & ) ;
            
            list_less_irr_scope_gui_scope_IGUIElement_ptr__greater__exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::list<irr::gui::IGUIElement*>::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::list<irr::scene::ISceneNode*>
        typedef bp::class_< irr::core::list<irr::scene::ISceneNode*> > ISceneNodeList_exposer_t;
        ISceneNodeList_exposer_t ISceneNodeList_exposer = ISceneNodeList_exposer_t( "ISceneNodeList", bp::init< >() );
        bp::scope ISceneNodeList_scope( ISceneNodeList_exposer );
        { //::irr::core::list<irr::scene::ISceneNode*>::ConstIterator
            typedef bp::class_< irr::core::list<irr::scene::ISceneNode*>::ConstIterator > ConstIterator_exposer_t;
            ConstIterator_exposer_t ConstIterator_exposer = ConstIterator_exposer_t( "ConstIterator", bp::init< >() );
            bp::scope ConstIterator_scope( ConstIterator_exposer );
            ConstIterator_exposer.def( bp::init< irr::core::list<irr::scene::ISceneNode*>::Iterator const & >(( bp::arg("iter") )) );
            bp::implicitly_convertible< irr::core::list<irr::scene::ISceneNode*>::Iterator const &, irr::core::list<irr::scene::ISceneNode*>::ConstIterator >();
            ConstIterator_exposer.def( bp::self != bp::self );
            ConstIterator_exposer.def( bp::self != bp::other< irr::core::list<irr::scene::ISceneNode*>::Iterator >() );
            ConstIterator_exposer.def( bp::self + bp::other< irr::s32 >() );
            ConstIterator_exposer.def( bp::self += bp::other< irr::s32 >() );
            ConstIterator_exposer.def( bp::self - bp::other< irr::s32 >() );
            ConstIterator_exposer.def( bp::self -= bp::other< irr::s32 >() );
            { //::irr::core::list<irr::scene::ISceneNode*>::ConstIterator::operator=
            
                typedef ::irr::core::list<irr::scene::ISceneNode*>::ConstIterator & ( ::irr::core::list<irr::scene::ISceneNode*>::ConstIterator::*assign_function_type )( ::irr::core::list<irr::scene::ISceneNode*>::Iterator const & ) ;
                
                ConstIterator_exposer.def( 
                    "assign"
                    , assign_function_type( &::irr::core::list<irr::scene::ISceneNode*>::ConstIterator::operator= )
                    , ( bp::arg("iterator") )
                    , bp::return_self< >() );
            
            }
            ConstIterator_exposer.def( bp::self == bp::self );
            ConstIterator_exposer.def( bp::self == bp::other< irr::core::list<irr::scene::ISceneNode*>::Iterator >() );
        }
        bp::class_< irr::core::list<irr::scene::ISceneNode*>::Iterator >( "Iterator", bp::init< >() )    
            .def( bp::self != bp::self )    
            .def( bp::self != bp::other< irr::core::list<irr::scene::ISceneNode*>::ConstIterator >() )    
            .def( bp::self + bp::other< irr::s32 >() )    
            .def( bp::self += bp::other< irr::s32 >() )    
            .def( bp::self - bp::other< irr::s32 >() )    
            .def( bp::self -= bp::other< irr::s32 >() )    
            .def( bp::self == bp::self )    
            .def( bp::self == bp::other< irr::core::list<irr::scene::ISceneNode*>::ConstIterator >() );
        ISceneNodeList_exposer.def( bp::init< irr::core::list<irr::scene::ISceneNode*> const & >(( bp::arg("other") )) );
        { //::irr::core::list<irr::scene::ISceneNode*>::begin
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef ::irr::core::list<irr::scene::ISceneNode*>::Iterator ( exported_class_t::*begin_function_type )(  ) ;
            
            ISceneNodeList_exposer.def( 
                "begin"
                , begin_function_type( &::irr::core::list<irr::scene::ISceneNode*>::begin ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::begin
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef ::irr::core::list<irr::scene::ISceneNode*>::ConstIterator ( exported_class_t::*begin_function_type )(  ) const;
            
            ISceneNodeList_exposer.def( 
                "begin"
                , begin_function_type( &::irr::core::list<irr::scene::ISceneNode*>::begin ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::clear
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            ISceneNodeList_exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::list<irr::scene::ISceneNode*>::clear ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::empty
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            ISceneNodeList_exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::list<irr::scene::ISceneNode*>::empty ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::end
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef ::irr::core::list<irr::scene::ISceneNode*>::Iterator ( exported_class_t::*end_function_type )(  ) ;
            
            ISceneNodeList_exposer.def( 
                "end"
                , end_function_type( &::irr::core::list<irr::scene::ISceneNode*>::end ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::end
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef ::irr::core::list<irr::scene::ISceneNode*>::ConstIterator ( exported_class_t::*end_function_type )(  ) const;
            
            ISceneNodeList_exposer.def( 
                "end"
                , end_function_type( &::irr::core::list<irr::scene::ISceneNode*>::end ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::erase
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef ::irr::core::list<irr::scene::ISceneNode*>::Iterator ( exported_class_t::*erase_function_type )( ::irr::core::list<irr::scene::ISceneNode*>::Iterator & ) ;
            
            ISceneNodeList_exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::list<irr::scene::ISceneNode*>::erase )
                , ( bp::arg("it") ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::getLast
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef ::irr::core::list<irr::scene::ISceneNode*>::Iterator ( exported_class_t::*getLast_function_type )(  ) ;
            
            ISceneNodeList_exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::list<irr::scene::ISceneNode*>::getLast ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::getLast
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef ::irr::core::list<irr::scene::ISceneNode*>::ConstIterator ( exported_class_t::*getLast_function_type )(  ) const;
            
            ISceneNodeList_exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::list<irr::scene::ISceneNode*>::getLast ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::getSize
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*getSize_function_type )(  ) const;
            
            ISceneNodeList_exposer.def( 
                "getSize"
                , getSize_function_type( &::irr::core::list<irr::scene::ISceneNode*>::getSize ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::insert_after
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef void ( exported_class_t::*insert_after_function_type )( ::irr::core::list<irr::scene::ISceneNode*>::Iterator const &,::irr::scene::ISceneNode * const & ) ;
            
            ISceneNodeList_exposer.def( 
                "insert_after"
                , insert_after_function_type( &::irr::core::list<irr::scene::ISceneNode*>::insert_after )
                , ( bp::arg("it"), bp::arg("element") ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::insert_before
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef void ( exported_class_t::*insert_before_function_type )( ::irr::core::list<irr::scene::ISceneNode*>::Iterator const &,::irr::scene::ISceneNode * const & ) ;
            
            ISceneNodeList_exposer.def( 
                "insert_before"
                , insert_before_function_type( &::irr::core::list<irr::scene::ISceneNode*>::insert_before )
                , ( bp::arg("it"), bp::arg("element") ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::operator=
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef void ( exported_class_t::*assign_function_type )( ::irr::core::list<irr::scene::ISceneNode*> const & ) ;
            
            ISceneNodeList_exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::list<irr::scene::ISceneNode*>::operator= )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::push_back
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::ISceneNode * const & ) ;
            
            ISceneNodeList_exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::list<irr::scene::ISceneNode*>::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::push_front
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::ISceneNode * const & ) ;
            
            ISceneNodeList_exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::list<irr::scene::ISceneNode*>::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::size
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            ISceneNodeList_exposer.def( 
                "size"
                , size_function_type( &::irr::core::list<irr::scene::ISceneNode*>::size ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNode*>::swap
        
            typedef irr::core::list<irr::scene::ISceneNode*> exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::list<irr::scene::ISceneNode*> & ) ;
            
            ISceneNodeList_exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::list<irr::scene::ISceneNode*>::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    { //::irr::core::list<irr::scene::ISceneNodeAnimator*>
        typedef bp::class_< irr::core::list<irr::scene::ISceneNodeAnimator*> > ISceneNodeAnimatorList_exposer_t;
        ISceneNodeAnimatorList_exposer_t ISceneNodeAnimatorList_exposer = ISceneNodeAnimatorList_exposer_t( "ISceneNodeAnimatorList", bp::init< >() );
        bp::scope ISceneNodeAnimatorList_scope( ISceneNodeAnimatorList_exposer );
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::ConstIterator
            typedef bp::class_< irr::core::list<irr::scene::ISceneNodeAnimator*>::ConstIterator > ConstIterator_exposer_t;
            ConstIterator_exposer_t ConstIterator_exposer = ConstIterator_exposer_t( "ConstIterator", bp::init< >() );
            bp::scope ConstIterator_scope( ConstIterator_exposer );
            ConstIterator_exposer.def( bp::init< irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator const & >(( bp::arg("iter") )) );
            bp::implicitly_convertible< irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator const &, irr::core::list<irr::scene::ISceneNodeAnimator*>::ConstIterator >();
            ConstIterator_exposer.def( bp::self != bp::self );
            ConstIterator_exposer.def( bp::self != bp::other< irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator >() );
            ConstIterator_exposer.def( bp::self + bp::other< irr::s32 >() );
            ConstIterator_exposer.def( bp::self += bp::other< irr::s32 >() );
            ConstIterator_exposer.def( bp::self - bp::other< irr::s32 >() );
            ConstIterator_exposer.def( bp::self -= bp::other< irr::s32 >() );
            { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::ConstIterator::operator=
            
                typedef ::irr::core::list<irr::scene::ISceneNodeAnimator*>::ConstIterator & ( ::irr::core::list<irr::scene::ISceneNodeAnimator*>::ConstIterator::*assign_function_type )( ::irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator const & ) ;
                
                ConstIterator_exposer.def( 
                    "assign"
                    , assign_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::ConstIterator::operator= )
                    , ( bp::arg("iterator") )
                    , bp::return_self< >() );
            
            }
            ConstIterator_exposer.def( bp::self == bp::self );
            ConstIterator_exposer.def( bp::self == bp::other< irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator >() );
        }
        bp::class_< irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator >( "Iterator", bp::init< >() )    
            .def( bp::self != bp::self )    
            .def( bp::self != bp::other< irr::core::list<irr::scene::ISceneNodeAnimator*>::ConstIterator >() )    
            .def( bp::self + bp::other< irr::s32 >() )    
            .def( bp::self += bp::other< irr::s32 >() )    
            .def( bp::self - bp::other< irr::s32 >() )    
            .def( bp::self -= bp::other< irr::s32 >() )    
            .def( bp::self == bp::self )    
            .def( bp::self == bp::other< irr::core::list<irr::scene::ISceneNodeAnimator*>::ConstIterator >() );
        ISceneNodeAnimatorList_exposer.def( bp::init< irr::core::list<irr::scene::ISceneNodeAnimator*> const & >(( bp::arg("other") )) );
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::begin
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef ::irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator ( exported_class_t::*begin_function_type )(  ) ;
            
            ISceneNodeAnimatorList_exposer.def( 
                "begin"
                , begin_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::begin ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::begin
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef ::irr::core::list<irr::scene::ISceneNodeAnimator*>::ConstIterator ( exported_class_t::*begin_function_type )(  ) const;
            
            ISceneNodeAnimatorList_exposer.def( 
                "begin"
                , begin_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::begin ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::clear
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            ISceneNodeAnimatorList_exposer.def( 
                "clear"
                , clear_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::clear ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::empty
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            ISceneNodeAnimatorList_exposer.def( 
                "empty"
                , empty_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::empty ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::end
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef ::irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator ( exported_class_t::*end_function_type )(  ) ;
            
            ISceneNodeAnimatorList_exposer.def( 
                "end"
                , end_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::end ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::end
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef ::irr::core::list<irr::scene::ISceneNodeAnimator*>::ConstIterator ( exported_class_t::*end_function_type )(  ) const;
            
            ISceneNodeAnimatorList_exposer.def( 
                "end"
                , end_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::end ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::erase
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef ::irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator ( exported_class_t::*erase_function_type )( ::irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator & ) ;
            
            ISceneNodeAnimatorList_exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::erase )
                , ( bp::arg("it") ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::getLast
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef ::irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator ( exported_class_t::*getLast_function_type )(  ) ;
            
            ISceneNodeAnimatorList_exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::getLast ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::getLast
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef ::irr::core::list<irr::scene::ISceneNodeAnimator*>::ConstIterator ( exported_class_t::*getLast_function_type )(  ) const;
            
            ISceneNodeAnimatorList_exposer.def( 
                "getLast"
                , getLast_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::getLast ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::getSize
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*getSize_function_type )(  ) const;
            
            ISceneNodeAnimatorList_exposer.def( 
                "getSize"
                , getSize_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::getSize ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::insert_after
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef void ( exported_class_t::*insert_after_function_type )( ::irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator const &,::irr::scene::ISceneNodeAnimator * const & ) ;
            
            ISceneNodeAnimatorList_exposer.def( 
                "insert_after"
                , insert_after_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::insert_after )
                , ( bp::arg("it"), bp::arg("element") ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::insert_before
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef void ( exported_class_t::*insert_before_function_type )( ::irr::core::list<irr::scene::ISceneNodeAnimator*>::Iterator const &,::irr::scene::ISceneNodeAnimator * const & ) ;
            
            ISceneNodeAnimatorList_exposer.def( 
                "insert_before"
                , insert_before_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::insert_before )
                , ( bp::arg("it"), bp::arg("element") ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::operator=
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef void ( exported_class_t::*assign_function_type )( ::irr::core::list<irr::scene::ISceneNodeAnimator*> const & ) ;
            
            ISceneNodeAnimatorList_exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::operator= )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::push_back
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef void ( exported_class_t::*push_back_function_type )( ::irr::scene::ISceneNodeAnimator * const & ) ;
            
            ISceneNodeAnimatorList_exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::push_back )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::push_front
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef void ( exported_class_t::*push_front_function_type )( ::irr::scene::ISceneNodeAnimator * const & ) ;
            
            ISceneNodeAnimatorList_exposer.def( 
                "push_front"
                , push_front_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::push_front )
                , ( bp::arg("element") ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::size
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            ISceneNodeAnimatorList_exposer.def( 
                "size"
                , size_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::size ) );
        
        }
        { //::irr::core::list<irr::scene::ISceneNodeAnimator*>::swap
        
            typedef irr::core::list<irr::scene::ISceneNodeAnimator*> exported_class_t;
            typedef void ( exported_class_t::*swap_function_type )( ::irr::core::list<irr::scene::ISceneNodeAnimator*> & ) ;
            
            ISceneNodeAnimatorList_exposer.def( 
                "swap"
                , swap_function_type( &::irr::core::list<irr::scene::ISceneNodeAnimator*>::swap )
                , ( bp::arg("other") ) );
        
        }
    }

    bp::class_< irr::core::myposition >( "myposition", bp::init< >() )    
        .def( bp::init< irr::core::vector2d< int >, irr::core::vector2d< int >, irr::core::vector2d< int >, irr::core::vector2d< int > >(( bp::arg("lu"), bp::arg("ru"), bp::arg("rl"), bp::arg("ll") )) )    
        .def( 
            "getHeight"
            , (::irr::s32 ( ::irr::core::myposition::* )(  ) const)( &::irr::core::myposition::getHeight ) )    
        .def( 
            "getWidth"
            , (::irr::s32 ( ::irr::core::myposition::* )(  ) const)( &::irr::core::myposition::getWidth ) )    
        .def_readwrite( "LeftLower", &irr::core::myposition::LeftLower )    
        .def_readwrite( "LeftUpper", &irr::core::myposition::LeftUpper )    
        .def_readwrite( "RightLower", &irr::core::myposition::RightLower )    
        .def_readwrite( "RightUpper", &irr::core::myposition::RightUpper );

    bp::class_< irr::core::plane3d< float > >( "plane3df", bp::init< >() )    
        .def( bp::init< irr::core::vector3d< float > const &, irr::core::vector3d< float > const & >(( bp::arg("MPoint"), bp::arg("Normal") )) )    
        .def( bp::init< float, float, float, float, float, float >(( bp::arg("px"), bp::arg("py"), bp::arg("pz"), bp::arg("nx"), bp::arg("ny"), bp::arg("nz") )) )    
        .def( bp::init< irr::core::vector3d< float > const &, irr::core::vector3d< float > const &, irr::core::vector3d< float > const & >(( bp::arg("point1"), bp::arg("point2"), bp::arg("point3") )) )    
        .def( bp::init< irr::core::vector3d< float > const &, float >(( bp::arg("normal"), bp::arg("d") )) )    
        .def( 
            "classifyPointRelation"
            , (::irr::core::EIntersectionRelation3D ( ::irr::core::plane3d<float>::* )( ::irr::core::vector3d< float > const & ) const)( &::irr::core::plane3d< float >::classifyPointRelation )
            , ( bp::arg("point") ) )    
        .def( 
            "existsIntersection"
            , (bool ( ::irr::core::plane3d<float>::* )( ::irr::core::plane3d< float > const & ) const)( &::irr::core::plane3d< float >::existsIntersection )
            , ( bp::arg("other") ) )    
        .def( 
            "getDistanceTo"
            , (float ( ::irr::core::plane3d<float>::* )( ::irr::core::vector3d< float > const & ) const)( &::irr::core::plane3d< float >::getDistanceTo )
            , ( bp::arg("point") ) )    
        .def( 
            "getIntersectionWithLimitedLine"
            , (bool ( ::irr::core::plane3d<float>::* )( ::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const &,::irr::core::vector3d< float > & ) const)( &::irr::core::plane3d< float >::getIntersectionWithLimitedLine )
            , ( bp::arg("linePoint1"), bp::arg("linePoint2"), bp::arg("outIntersection") ) )    
        .def( 
            "getIntersectionWithLine"
            , (bool ( ::irr::core::plane3d<float>::* )( ::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const &,::irr::core::vector3d< float > & ) const)( &::irr::core::plane3d< float >::getIntersectionWithLine )
            , ( bp::arg("linePoint"), bp::arg("lineVect"), bp::arg("outIntersection") ) )    
        .def( 
            "getIntersectionWithPlane"
            , (bool ( ::irr::core::plane3d<float>::* )( ::irr::core::plane3d< float > const &,::irr::core::vector3d< float > &,::irr::core::vector3d< float > & ) const)( &::irr::core::plane3d< float >::getIntersectionWithPlane )
            , ( bp::arg("other"), bp::arg("outLinePoint"), bp::arg("outLineVect") ) )    
        .def( 
            "getIntersectionWithPlanes"
            , (bool ( ::irr::core::plane3d<float>::* )( ::irr::core::plane3d< float > const &,::irr::core::plane3d< float > const &,::irr::core::vector3d< float > & ) const)( &::irr::core::plane3d< float >::getIntersectionWithPlanes )
            , ( bp::arg("o1"), bp::arg("o2"), bp::arg("outPoint") ) )    
        .def( 
            "getKnownIntersectionWithLine"
            , (::irr::f32 ( ::irr::core::plane3d<float>::* )( ::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const & ) const)( &::irr::core::plane3d< float >::getKnownIntersectionWithLine )
            , ( bp::arg("linePoint1"), bp::arg("linePoint2") ) )    
        .def( 
            "getMemberPoint"
            , (::irr::core::vector3d< float > ( ::irr::core::plane3d<float>::* )(  ) const)( &::irr::core::plane3d< float >::getMemberPoint ) )    
        .def( 
            "isFrontFacing"
            , (bool ( ::irr::core::plane3d<float>::* )( ::irr::core::vector3d< float > const & ) const)( &::irr::core::plane3d< float >::isFrontFacing )
            , ( bp::arg("lookDirection") ) )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "recalculateD"
            , (void ( ::irr::core::plane3d<float>::* )( ::irr::core::vector3d< float > const & ) )( &::irr::core::plane3d< float >::recalculateD )
            , ( bp::arg("MPoint") ) )    
        .def( 
            "setPlane"
            , (void ( ::irr::core::plane3d<float>::* )( ::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const & ) )( &::irr::core::plane3d< float >::setPlane )
            , ( bp::arg("point"), bp::arg("nvector") ) )    
        .def( 
            "setPlane"
            , (void ( ::irr::core::plane3d<float>::* )( ::irr::core::vector3d< float > const &,float ) )( &::irr::core::plane3d< float >::setPlane )
            , ( bp::arg("nvect"), bp::arg("d") ) )    
        .def( 
            "setPlane"
            , (void ( ::irr::core::plane3d<float>::* )( ::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const &,::irr::core::vector3d< float > const & ) )( &::irr::core::plane3d< float >::setPlane )
            , ( bp::arg("point1"), bp::arg("point2"), bp::arg("point3") ) )    
        .def_readwrite( "D", &irr::core::plane3d< float >::D )    
        .def_readwrite( "Normal", &irr::core::plane3d< float >::Normal );

    { //::irr::core::quaternion
        typedef bp::class_< irr::core::quaternion > quaternion_exposer_t;
        quaternion_exposer_t quaternion_exposer = quaternion_exposer_t( "quaternion", bp::init< >() );
        bp::scope quaternion_scope( quaternion_exposer );
        quaternion_exposer.def( bp::init< irr::f32, irr::f32, irr::f32, irr::f32 >(( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("w") )) );
        quaternion_exposer.def( bp::init< irr::f32, irr::f32, irr::f32 >(( bp::arg("x"), bp::arg("y"), bp::arg("z") )) );
        quaternion_exposer.def( bp::init< irr::core::vector3df const & >(( bp::arg("vec") )) );
        bp::implicitly_convertible< irr::core::vector3df const &, irr::core::quaternion >();
        quaternion_exposer.def( bp::init< irr::core::matrix4 const & >(( bp::arg("mat") )) );
        bp::implicitly_convertible< irr::core::matrix4 const &, irr::core::quaternion >();
        { //::irr::core::quaternion::dotProduct
        
            typedef ::irr::f32 ( ::irr::core::quaternion::*dotProduct_function_type )( ::irr::core::quaternion const & ) const;
            
            quaternion_exposer.def( 
                "dotProduct"
                , dotProduct_function_type( &::irr::core::quaternion::dotProduct )
                , ( bp::arg("q2") ) );
        
        }
        { //::irr::core::quaternion::equals
        
            typedef bool ( ::irr::core::quaternion::*equals_function_type )( ::irr::core::quaternion const &,::irr::f32 const ) const;
            
            quaternion_exposer.def( 
                "equals"
                , equals_function_type( &::irr::core::quaternion::equals )
                , ( bp::arg("other"), bp::arg("tolerance")=irr::core::ROUNDING_ERROR_f32 ) );
        
        }
        { //::irr::core::quaternion::fromAngleAxis
        
            typedef ::irr::core::quaternion & ( ::irr::core::quaternion::*fromAngleAxis_function_type )( ::irr::f32,::irr::core::vector3df const & ) ;
            
            quaternion_exposer.def( 
                "fromAngleAxis"
                , fromAngleAxis_function_type( &::irr::core::quaternion::fromAngleAxis )
                , ( bp::arg("angle"), bp::arg("axis") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::quaternion::getMatrix
        
            typedef ::irr::core::matrix4 ( ::irr::core::quaternion::*getMatrix_function_type )(  ) const;
            
            quaternion_exposer.def( 
                "getMatrix"
                , getMatrix_function_type( &::irr::core::quaternion::getMatrix ) );
        
        }
        { //::irr::core::quaternion::getMatrix
        
            typedef void ( ::irr::core::quaternion::*getMatrix_function_type )( ::irr::core::matrix4 &,::irr::core::vector3df const & ) const;
            
            quaternion_exposer.def( 
                "getMatrix"
                , getMatrix_function_type( &::irr::core::quaternion::getMatrix )
                , ( bp::arg("dest"), bp::arg("center") ) );
        
        }
        { //::irr::core::quaternion::getMatrixCenter
        
            typedef void ( ::irr::core::quaternion::*getMatrixCenter_function_type )( ::irr::core::matrix4 &,::irr::core::vector3df const &,::irr::core::vector3df const & ) const;
            
            quaternion_exposer.def( 
                "getMatrixCenter"
                , getMatrixCenter_function_type( &::irr::core::quaternion::getMatrixCenter )
                , ( bp::arg("dest"), bp::arg("center"), bp::arg("translation") ) );
        
        }
        { //::irr::core::quaternion::getMatrix_transposed
        
            typedef void ( ::irr::core::quaternion::*getMatrix_transposed_function_type )( ::irr::core::matrix4 & ) const;
            
            quaternion_exposer.def( 
                "getMatrix_transposed"
                , getMatrix_transposed_function_type( &::irr::core::quaternion::getMatrix_transposed )
                , ( bp::arg("dest") ) );
        
        }
        { //::irr::core::quaternion::makeIdentity
        
            typedef ::irr::core::quaternion & ( ::irr::core::quaternion::*makeIdentity_function_type )(  ) ;
            
            quaternion_exposer.def( 
                "makeIdentity"
                , makeIdentity_function_type( &::irr::core::quaternion::makeIdentity )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::quaternion::makeInverse
        
            typedef ::irr::core::quaternion & ( ::irr::core::quaternion::*makeInverse_function_type )(  ) ;
            
            quaternion_exposer.def( 
                "makeInverse"
                , makeInverse_function_type( &::irr::core::quaternion::makeInverse )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::quaternion::normalize
        
            typedef ::irr::core::quaternion & ( ::irr::core::quaternion::*normalize_function_type )(  ) ;
            
            quaternion_exposer.def( 
                "normalize"
                , normalize_function_type( &::irr::core::quaternion::normalize )
                    /* undefined call policies */ );
        
        }
        quaternion_exposer.def( bp::self != bp::self );
        quaternion_exposer.def( bp::self * bp::self );
        quaternion_exposer.def( bp::self * bp::other< irr::f32 >() );
        quaternion_exposer.def( bp::self * bp::other< irr::core::vector3d< float > >() );
        quaternion_exposer.def( bp::self *= bp::other< irr::f32 >() );
        quaternion_exposer.def( bp::self *= bp::self );
        quaternion_exposer.def( bp::self + bp::self );
        { //::irr::core::quaternion::operator=
        
            typedef ::irr::core::quaternion & ( ::irr::core::quaternion::*assign_function_type )( ::irr::core::quaternion const & ) ;
            
            quaternion_exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::quaternion::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::irr::core::quaternion::operator=
        
            typedef ::irr::core::quaternion & ( ::irr::core::quaternion::*assign_function_type )( ::irr::core::matrix4 const & ) ;
            
            quaternion_exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::quaternion::operator= )
                , ( bp::arg("m") )
                , bp::return_self< >() );
        
        }
        quaternion_exposer.def( bp::self == bp::self );
        { //::irr::core::quaternion::rotationFromTo
        
            typedef ::irr::core::quaternion & ( ::irr::core::quaternion::*rotationFromTo_function_type )( ::irr::core::vector3df const &,::irr::core::vector3df const & ) ;
            
            quaternion_exposer.def( 
                "rotationFromTo"
                , rotationFromTo_function_type( &::irr::core::quaternion::rotationFromTo )
                , ( bp::arg("from"), bp::arg("to") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::quaternion::set
        
            typedef ::irr::core::quaternion & ( ::irr::core::quaternion::*set_function_type )( ::irr::f32,::irr::f32,::irr::f32,::irr::f32 ) ;
            
            quaternion_exposer.def( 
                "set"
                , set_function_type( &::irr::core::quaternion::set )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("w") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::quaternion::set
        
            typedef ::irr::core::quaternion & ( ::irr::core::quaternion::*set_function_type )( ::irr::f32,::irr::f32,::irr::f32 ) ;
            
            quaternion_exposer.def( 
                "set"
                , set_function_type( &::irr::core::quaternion::set )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("z") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::quaternion::set
        
            typedef ::irr::core::quaternion & ( ::irr::core::quaternion::*set_function_type )( ::irr::core::vector3df const & ) ;
            
            quaternion_exposer.def( 
                "set"
                , set_function_type( &::irr::core::quaternion::set )
                , ( bp::arg("vec") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::quaternion::set
        
            typedef ::irr::core::quaternion & ( ::irr::core::quaternion::*set_function_type )( ::irr::core::quaternion const & ) ;
            
            quaternion_exposer.def( 
                "set"
                , set_function_type( &::irr::core::quaternion::set )
                , ( bp::arg("quat") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::quaternion::slerp
        
            typedef ::irr::core::quaternion & ( ::irr::core::quaternion::*slerp_function_type )( ::irr::core::quaternion,::irr::core::quaternion,::irr::f32 ) ;
            
            quaternion_exposer.def( 
                "slerp"
                , slerp_function_type( &::irr::core::quaternion::slerp )
                , ( bp::arg("q1"), bp::arg("q2"), bp::arg("time") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::quaternion::toAngleAxis
        
            typedef void ( ::irr::core::quaternion::*toAngleAxis_function_type )( ::irr::f32 &,::irr::core::vector3df & ) const;
            
            quaternion_exposer.def( 
                "toAngleAxis"
                , toAngleAxis_function_type( &::irr::core::quaternion::toAngleAxis )
                , ( bp::arg("angle"), bp::arg("axis") ) );
        
        }
        { //::irr::core::quaternion::toEuler
        
            typedef void ( ::irr::core::quaternion::*toEuler_function_type )( ::irr::core::vector3df & ) const;
            
            quaternion_exposer.def( 
                "toEuler"
                , toEuler_function_type( &::irr::core::quaternion::toEuler )
                , ( bp::arg("euler") ) );
        
        }
        quaternion_exposer.def_readwrite( "W", &irr::core::quaternion::W );
        quaternion_exposer.def_readwrite( "X", &irr::core::quaternion::X );
        quaternion_exposer.def_readwrite( "Y", &irr::core::quaternion::Y );
        quaternion_exposer.def_readwrite( "Z", &irr::core::quaternion::Z );
    }

    bp::class_< irr::core::rect< float > >( "rectf", bp::init< >() )    
        .def( bp::init< float, float, float, float >(( bp::arg("x"), bp::arg("y"), bp::arg("x2"), bp::arg("y2") )) )    
        .def( bp::init< irr::core::vector2d< float > const &, irr::core::vector2d< float > const & >(( bp::arg("upperLeft"), bp::arg("lowerRight") )) )    
        .def( 
            "addInternalPoint"
            , (void ( ::irr::core::rect<float>::* )( ::irr::core::vector2d< float > const & ) )( &::irr::core::rect< float >::addInternalPoint )
            , ( bp::arg("p") ) )    
        .def( 
            "addInternalPoint"
            , (void ( ::irr::core::rect<float>::* )( float,float ) )( &::irr::core::rect< float >::addInternalPoint )
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "clipAgainst"
            , (void ( ::irr::core::rect<float>::* )( ::irr::core::rect< float > const & ) )( &::irr::core::rect< float >::clipAgainst )
            , ( bp::arg("other") ) )    
        .def( 
            "constrainTo"
            , (bool ( ::irr::core::rect<float>::* )( ::irr::core::rect< float > const & ) )( &::irr::core::rect< float >::constrainTo )
            , ( bp::arg("other") ) )    
        .def( 
            "getArea"
            , (float ( ::irr::core::rect<float>::* )(  ) const)( &::irr::core::rect< float >::getArea ) )    
        .def( 
            "getCenter"
            , (::irr::core::vector2d< float > ( ::irr::core::rect<float>::* )(  ) const)( &::irr::core::rect< float >::getCenter ) )    
        .def( 
            "getHeight"
            , (float ( ::irr::core::rect<float>::* )(  ) const)( &::irr::core::rect< float >::getHeight ) )    
        .def( 
            "getSize"
            , (::irr::core::dimension2d< float > ( ::irr::core::rect<float>::* )(  ) const)( &::irr::core::rect< float >::getSize ) )    
        .def( 
            "getWidth"
            , (float ( ::irr::core::rect<float>::* )(  ) const)( &::irr::core::rect< float >::getWidth ) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::core::rect<float>::* )( ::irr::core::vector2d< float > const & ) const)( &::irr::core::rect< float >::isPointInside )
            , ( bp::arg("pos") ) )    
        .def( 
            "isRectCollided"
            , (bool ( ::irr::core::rect<float>::* )( ::irr::core::rect< float > const & ) const)( &::irr::core::rect< float >::isRectCollided )
            , ( bp::arg("other") ) )    
        .def( 
            "isValid"
            , (bool ( ::irr::core::rect<float>::* )(  ) const)( &::irr::core::rect< float >::isValid ) )    
        .def( bp::self != bp::self )    
        .def( bp::self + bp::other< irr::core::vector2d< float > >() )    
        .def( bp::self += bp::other< irr::core::vector2d< float > >() )    
        .def( bp::self - bp::other< irr::core::vector2d< float > >() )    
        .def( bp::self -= bp::other< irr::core::vector2d< float > >() )    
        .def( bp::self < bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "repair"
            , (void ( ::irr::core::rect<float>::* )(  ) )( &::irr::core::rect< float >::repair ) )    
        .def_readwrite( "LowerRightCorner", &irr::core::rect< float >::LowerRightCorner )    
        .def_readwrite( "UpperLeftCorner", &irr::core::rect< float >::UpperLeftCorner );

    bp::class_< irr::core::rect< int > >( "recti", bp::init< >() )    
        .def( bp::init< int, int, int, int >(( bp::arg("x"), bp::arg("y"), bp::arg("x2"), bp::arg("y2") )) )    
        .def( bp::init< irr::core::vector2d< int > const &, irr::core::vector2d< int > const & >(( bp::arg("upperLeft"), bp::arg("lowerRight") )) )    
        .def( 
            "addInternalPoint"
            , (void ( ::irr::core::rect<int>::* )( ::irr::core::vector2d< int > const & ) )( &::irr::core::rect< int >::addInternalPoint )
            , ( bp::arg("p") ) )    
        .def( 
            "addInternalPoint"
            , (void ( ::irr::core::rect<int>::* )( int,int ) )( &::irr::core::rect< int >::addInternalPoint )
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "clipAgainst"
            , (void ( ::irr::core::rect<int>::* )( ::irr::core::rect< int > const & ) )( &::irr::core::rect< int >::clipAgainst )
            , ( bp::arg("other") ) )    
        .def( 
            "constrainTo"
            , (bool ( ::irr::core::rect<int>::* )( ::irr::core::rect< int > const & ) )( &::irr::core::rect< int >::constrainTo )
            , ( bp::arg("other") ) )    
        .def( 
            "getArea"
            , (int ( ::irr::core::rect<int>::* )(  ) const)( &::irr::core::rect< int >::getArea ) )    
        .def( 
            "getCenter"
            , (::irr::core::vector2d< int > ( ::irr::core::rect<int>::* )(  ) const)( &::irr::core::rect< int >::getCenter ) )    
        .def( 
            "getHeight"
            , (int ( ::irr::core::rect<int>::* )(  ) const)( &::irr::core::rect< int >::getHeight ) )    
        .def( 
            "getSize"
            , (::irr::core::dimension2d< int > ( ::irr::core::rect<int>::* )(  ) const)( &::irr::core::rect< int >::getSize ) )    
        .def( 
            "getWidth"
            , (int ( ::irr::core::rect<int>::* )(  ) const)( &::irr::core::rect< int >::getWidth ) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::core::rect<int>::* )( ::irr::core::vector2d< int > const & ) const)( &::irr::core::rect< int >::isPointInside )
            , ( bp::arg("pos") ) )    
        .def( 
            "isRectCollided"
            , (bool ( ::irr::core::rect<int>::* )( ::irr::core::rect< int > const & ) const)( &::irr::core::rect< int >::isRectCollided )
            , ( bp::arg("other") ) )    
        .def( 
            "isValid"
            , (bool ( ::irr::core::rect<int>::* )(  ) const)( &::irr::core::rect< int >::isValid ) )    
        .def( bp::self != bp::self )    
        .def( bp::self + bp::other< irr::core::vector2d< int > >() )    
        .def( bp::self += bp::other< irr::core::vector2d< int > >() )    
        .def( bp::self - bp::other< irr::core::vector2d< int > >() )    
        .def( bp::self -= bp::other< irr::core::vector2d< int > >() )    
        .def( bp::self < bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "repair"
            , (void ( ::irr::core::rect<int>::* )(  ) )( &::irr::core::rect< int >::repair ) )    
        .def_readwrite( "LowerRightCorner", &irr::core::rect< int >::LowerRightCorner )    
        .def_readwrite( "UpperLeftCorner", &irr::core::rect< int >::UpperLeftCorner );

    { //::irr::core::string< char, irr::core::irrAllocator< char > >
        typedef bp::class_< irr::core::string< char, irr::core::irrAllocator< char > > > string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer_t;
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer_t string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer = string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer_t( "string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater_", bp::init< >() );
        bp::scope string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__scope( string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer );
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::init< irr::core::string< char, irr::core::irrAllocator< char > > const & >(( bp::arg("other") )) );
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::init< double >(( bp::arg("number") )) );
        bp::implicitly_convertible< double const, irr::core::string< char, irr::core::irrAllocator< char > > >();
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::init< int >(( bp::arg("number") )) );
        bp::implicitly_convertible< int, irr::core::string< char, irr::core::irrAllocator< char > > >();
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::init< unsigned int >(( bp::arg("number") )) );
        bp::implicitly_convertible< unsigned int, irr::core::string< char, irr::core::irrAllocator< char > > >();
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::append
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef void ( exported_class_t::*append_function_type )( char ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "append"
                , append_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::append )
                , ( bp::arg("character") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::append
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef void ( exported_class_t::*append_function_type )( char const * const ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "append"
                , append_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::append )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::append
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef void ( exported_class_t::*append_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const & ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "append"
                , append_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::append )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::append
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef void ( exported_class_t::*append_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const &,::irr::u32 ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "append"
                , append_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::append )
                , ( bp::arg("other"), bp::arg("length") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::c_str
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef char const * ( exported_class_t::*c_str_function_type )(  ) const;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "c_str"
                , c_str_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::c_str ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::equals_ignore_case
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef bool ( exported_class_t::*equals_ignore_case_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const & ) const;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "equals_ignore_case"
                , equals_ignore_case_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::equals_ignore_case )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::equals_substring_ignore_case
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef bool ( exported_class_t::*equals_substring_ignore_case_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const &,::irr::s32 const ) const;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "equals_substring_ignore_case"
                , equals_substring_ignore_case_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::equals_substring_ignore_case )
                , ( bp::arg("other"), bp::arg("sourcePos")=(::irr::s32 const)(0) ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::equalsn
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef bool ( exported_class_t::*equalsn_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const &,::irr::u32 ) const;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "equalsn"
                , equalsn_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::equalsn )
                , ( bp::arg("other"), bp::arg("n") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::equalsn
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef bool ( exported_class_t::*equalsn_function_type )( char const * const,::irr::u32 ) const;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "equalsn"
                , equalsn_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::equalsn )
                , ( bp::arg("str"), bp::arg("n") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::erase
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::findFirst
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*findFirst_function_type )( char ) const;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "findFirst"
                , findFirst_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::findFirst )
                , ( bp::arg("c") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::findFirstChar
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*findFirstChar_function_type )( char const * const,::irr::u32 ) const;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "findFirstChar"
                , findFirstChar_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::findFirstChar )
                , ( bp::arg("c"), bp::arg("count") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::findLast
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*findLast_function_type )( char,::irr::s32 ) const;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "findLast"
                , findLast_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::findLast )
                , ( bp::arg("c"), bp::arg("start")=(::irr::s32)(-1) ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::findLastChar
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*findLastChar_function_type )( char const * const,::irr::u32 ) const;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "findLastChar"
                , findLastChar_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::findLastChar )
                , ( bp::arg("c"), bp::arg("count") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::findNext
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*findNext_function_type )( char,::irr::u32 ) const;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "findNext"
                , findNext_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::findNext )
                , ( bp::arg("c"), bp::arg("startPos") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::lastChar
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef char ( exported_class_t::*lastChar_function_type )(  ) const;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "lastChar"
                , lastChar_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::lastChar ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::lower_ignore_case
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef bool ( exported_class_t::*lower_ignore_case_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const & ) const;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "lower_ignore_case"
                , lower_ignore_case_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::lower_ignore_case )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::make_lower
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef void ( exported_class_t::*make_lower_function_type )(  ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "make_lower"
                , make_lower_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::make_lower ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::make_upper
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef void ( exported_class_t::*make_upper_function_type )(  ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "make_upper"
                , make_upper_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::make_upper ) );
        
        }
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::self != bp::other< char const * >() );
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::self != bp::self );
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::self + bp::self );
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::self += bp::other< char >() );
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::self += bp::other< char const * >() );
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::self += bp::self );
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::self += bp::other< int >() );
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::self += bp::other< unsigned int >() );
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::self += bp::other< long int >() );
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::self += bp::other< long unsigned int >() );
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::self += bp::other< double >() );
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::self += bp::other< float >() );
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::self < bp::self );
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::operator=
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef ::irr::core::string< char, irr::core::irrAllocator< char > > & ( exported_class_t::*assign_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const & ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::self == bp::other< char const * >() );
        string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( bp::self == bp::self );
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::operator[]
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef char & ( exported_class_t::*__getitem___function_type )( ::irr::u32 const ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::operator[]
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef char const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 const ) const;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::remove
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef void ( exported_class_t::*remove_function_type )( char ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "remove"
                , remove_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::remove )
                , ( bp::arg("c") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::remove
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef void ( exported_class_t::*remove_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "remove"
                , remove_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::remove )
                , ( bp::arg("toRemove") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::removeChars
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef void ( exported_class_t::*removeChars_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const & ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "removeChars"
                , removeChars_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::removeChars )
                , ( bp::arg("characters") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::replace
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef void ( exported_class_t::*replace_function_type )( char,char ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "replace"
                , replace_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::replace )
                , ( bp::arg("toReplace"), bp::arg("replaceWith") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::reserve
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef void ( exported_class_t::*reserve_function_type )( ::irr::u32 ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "reserve"
                , reserve_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::reserve )
                , ( bp::arg("count") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::size
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "size"
                , size_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::size ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::subString
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef ::irr::core::string< char, irr::core::irrAllocator< char > > ( exported_class_t::*subString_function_type )( ::irr::u32,::irr::s32 ) const;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "subString"
                , subString_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::subString )
                , ( bp::arg("begin"), bp::arg("length") ) );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::trim
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef ::irr::core::string< char, irr::core::irrAllocator< char > > & ( exported_class_t::*trim_function_type )( ::irr::core::string< char, irr::core::irrAllocator< char > > const & ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "trim"
                , trim_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::trim )
                , ( bp::arg("whitespace")=" \011\012\015" )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::string< char, irr::core::irrAllocator< char > >::validate
        
            typedef irr::core::string< char, irr::core::irrAllocator< char > > exported_class_t;
            typedef void ( exported_class_t::*validate_function_type )(  ) ;
            
            string_less__char_comma__irr_scope_core_scope_irrAllocator_less__char__greater___greater__exposer.def( 
                "validate"
                , validate_function_type( &::irr::core::string< char, irr::core::irrAllocator< char > >::validate ) );
        
        }
    }

    { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >
        typedef bp::class_< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > > stringw_exposer_t;
        stringw_exposer_t stringw_exposer = stringw_exposer_t( "stringw", bp::init< >() );
        bp::scope stringw_scope( stringw_exposer );
        stringw_exposer.def( bp::init< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > const & >(( bp::arg("other") )) );
        stringw_exposer.def( bp::init< double >(( bp::arg("number") )) );
        bp::implicitly_convertible< double const, irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > >();
        stringw_exposer.def( bp::init< int >(( bp::arg("number") )) );
        bp::implicitly_convertible< int, irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > >();
        stringw_exposer.def( bp::init< unsigned int >(( bp::arg("number") )) );
        bp::implicitly_convertible< unsigned int, irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > >();
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::append
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef void ( exported_class_t::*append_function_type )( wchar_t ) ;
            
            stringw_exposer.def( 
                "append"
                , append_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::append )
                , ( bp::arg("character") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::append
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef void ( exported_class_t::*append_function_type )( wchar_t const * const ) ;
            
            stringw_exposer.def( 
                "append"
                , append_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::append )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::append
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef void ( exported_class_t::*append_function_type )( ::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > const & ) ;
            
            stringw_exposer.def( 
                "append"
                , append_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::append )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::append
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef void ( exported_class_t::*append_function_type )( ::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > const &,::irr::u32 ) ;
            
            stringw_exposer.def( 
                "append"
                , append_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::append )
                , ( bp::arg("other"), bp::arg("length") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::c_str
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef wchar_t const * ( exported_class_t::*c_str_function_type )(  ) const;
            
            stringw_exposer.def( 
                "c_str"
                , c_str_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::c_str )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::equals_ignore_case
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef bool ( exported_class_t::*equals_ignore_case_function_type )( ::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > const & ) const;
            
            stringw_exposer.def( 
                "equals_ignore_case"
                , equals_ignore_case_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::equals_ignore_case )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::equals_substring_ignore_case
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef bool ( exported_class_t::*equals_substring_ignore_case_function_type )( ::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > const &,::irr::s32 const ) const;
            
            stringw_exposer.def( 
                "equals_substring_ignore_case"
                , equals_substring_ignore_case_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::equals_substring_ignore_case )
                , ( bp::arg("other"), bp::arg("sourcePos")=(::irr::s32 const)(0) ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::equalsn
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef bool ( exported_class_t::*equalsn_function_type )( ::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > const &,::irr::u32 ) const;
            
            stringw_exposer.def( 
                "equalsn"
                , equalsn_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::equalsn )
                , ( bp::arg("other"), bp::arg("n") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::equalsn
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef bool ( exported_class_t::*equalsn_function_type )( wchar_t const * const,::irr::u32 ) const;
            
            stringw_exposer.def( 
                "equalsn"
                , equalsn_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::equalsn )
                , ( bp::arg("str"), bp::arg("n") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::erase
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef void ( exported_class_t::*erase_function_type )( ::irr::u32 ) ;
            
            stringw_exposer.def( 
                "erase"
                , erase_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::erase )
                , ( bp::arg("index") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::findFirst
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*findFirst_function_type )( wchar_t ) const;
            
            stringw_exposer.def( 
                "findFirst"
                , findFirst_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::findFirst )
                , ( bp::arg("c") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::findFirstChar
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*findFirstChar_function_type )( wchar_t const * const,::irr::u32 ) const;
            
            stringw_exposer.def( 
                "findFirstChar"
                , findFirstChar_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::findFirstChar )
                , ( bp::arg("c"), bp::arg("count") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::findLast
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*findLast_function_type )( wchar_t,::irr::s32 ) const;
            
            stringw_exposer.def( 
                "findLast"
                , findLast_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::findLast )
                , ( bp::arg("c"), bp::arg("start")=(::irr::s32)(-1) ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::findLastChar
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*findLastChar_function_type )( wchar_t const * const,::irr::u32 ) const;
            
            stringw_exposer.def( 
                "findLastChar"
                , findLastChar_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::findLastChar )
                , ( bp::arg("c"), bp::arg("count") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::findNext
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef ::irr::s32 ( exported_class_t::*findNext_function_type )( wchar_t,::irr::u32 ) const;
            
            stringw_exposer.def( 
                "findNext"
                , findNext_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::findNext )
                , ( bp::arg("c"), bp::arg("startPos") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::lastChar
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef wchar_t ( exported_class_t::*lastChar_function_type )(  ) const;
            
            stringw_exposer.def( 
                "lastChar"
                , lastChar_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::lastChar ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::lower_ignore_case
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef bool ( exported_class_t::*lower_ignore_case_function_type )( ::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > const & ) const;
            
            stringw_exposer.def( 
                "lower_ignore_case"
                , lower_ignore_case_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::lower_ignore_case )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::make_lower
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef void ( exported_class_t::*make_lower_function_type )(  ) ;
            
            stringw_exposer.def( 
                "make_lower"
                , make_lower_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::make_lower ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::make_upper
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef void ( exported_class_t::*make_upper_function_type )(  ) ;
            
            stringw_exposer.def( 
                "make_upper"
                , make_upper_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::make_upper ) );
        
        }
        stringw_exposer.def( bp::self != bp::other< wchar_t const * >() );
        stringw_exposer.def( bp::self != bp::self );
        stringw_exposer.def( bp::self + bp::self );
        stringw_exposer.def( bp::self += bp::other< wchar_t >() );
        stringw_exposer.def( bp::self += bp::other< wchar_t const * >() );
        stringw_exposer.def( bp::self += bp::self );
        stringw_exposer.def( bp::self += bp::other< int >() );
        stringw_exposer.def( bp::self += bp::other< unsigned int >() );
        stringw_exposer.def( bp::self += bp::other< long int >() );
        stringw_exposer.def( bp::self += bp::other< long unsigned int >() );
        stringw_exposer.def( bp::self += bp::other< double >() );
        stringw_exposer.def( bp::self += bp::other< float >() );
        stringw_exposer.def( bp::self < bp::self );
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::operator=
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef ::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > & ( exported_class_t::*assign_function_type )( ::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > const & ) ;
            
            stringw_exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        stringw_exposer.def( bp::self == bp::other< wchar_t const * >() );
        stringw_exposer.def( bp::self == bp::self );
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::operator[]
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef wchar_t & ( exported_class_t::*__getitem___function_type )( ::irr::u32 const ) ;
            
            stringw_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::operator[]
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef wchar_t const & ( exported_class_t::*__getitem___function_type )( ::irr::u32 const ) const;
            
            stringw_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::remove
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef void ( exported_class_t::*remove_function_type )( wchar_t ) ;
            
            stringw_exposer.def( 
                "remove"
                , remove_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::remove )
                , ( bp::arg("c") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::remove
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef void ( exported_class_t::*remove_function_type )( ::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > const ) ;
            
            stringw_exposer.def( 
                "remove"
                , remove_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::remove )
                , ( bp::arg("toRemove") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::removeChars
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef void ( exported_class_t::*removeChars_function_type )( ::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > const & ) ;
            
            stringw_exposer.def( 
                "removeChars"
                , removeChars_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::removeChars )
                , ( bp::arg("characters") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::replace
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef void ( exported_class_t::*replace_function_type )( wchar_t,wchar_t ) ;
            
            stringw_exposer.def( 
                "replace"
                , replace_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::replace )
                , ( bp::arg("toReplace"), bp::arg("replaceWith") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::reserve
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef void ( exported_class_t::*reserve_function_type )( ::irr::u32 ) ;
            
            stringw_exposer.def( 
                "reserve"
                , reserve_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::reserve )
                , ( bp::arg("count") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::size
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef ::irr::u32 ( exported_class_t::*size_function_type )(  ) const;
            
            stringw_exposer.def( 
                "size"
                , size_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::size ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::subString
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef ::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > ( exported_class_t::*subString_function_type )( ::irr::u32,::irr::s32 ) const;
            
            stringw_exposer.def( 
                "subString"
                , subString_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::subString )
                , ( bp::arg("begin"), bp::arg("length") ) );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::trim
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef ::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > & ( exported_class_t::*trim_function_type )( ::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > const & ) ;
            
            stringw_exposer.def( 
                "trim"
                , trim_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::trim )
                , ( bp::arg("whitespace")=" \011\012\015" )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::validate
        
            typedef irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > exported_class_t;
            typedef void ( exported_class_t::*validate_function_type )(  ) ;
            
            stringw_exposer.def( 
                "validate"
                , validate_function_type( &::irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >::validate ) );
        
        }
    }

    { //::irr::core::vector2d< float >
        typedef bp::class_< irr::core::vector2d< float > > vector2d_less__float__greater__exposer_t;
        vector2d_less__float__greater__exposer_t vector2d_less__float__greater__exposer = vector2d_less__float__greater__exposer_t( "vector2d_less__float__greater_", bp::init< >() );
        bp::scope vector2d_less__float__greater__scope( vector2d_less__float__greater__exposer );
        vector2d_less__float__greater__exposer.def( bp::init< float, float >(( bp::arg("nx"), bp::arg("ny") )) );
        vector2d_less__float__greater__exposer.def( bp::init< float >(( bp::arg("n") )) );
        bp::implicitly_convertible< float, irr::core::vector2d< float > >();
        vector2d_less__float__greater__exposer.def( bp::init< irr::core::vector2d< float > const & >(( bp::arg("other") )) );
        vector2d_less__float__greater__exposer.def( bp::init< irr::core::dimension2d< float > const & >(( bp::arg("other") )) );
        bp::implicitly_convertible< irr::core::dimension2d< float > const &, irr::core::vector2d< float > >();
        { //::irr::core::vector2d< float >::dotProduct
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef float ( exported_class_t::*dotProduct_function_type )( ::irr::core::vector2d< float > const & ) const;
            
            vector2d_less__float__greater__exposer.def( 
                "dotProduct"
                , dotProduct_function_type( &::irr::core::vector2d< float >::dotProduct )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector2d< float >::equals
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef bool ( exported_class_t::*equals_function_type )( ::irr::core::vector2d< float > const & ) const;
            
            vector2d_less__float__greater__exposer.def( 
                "equals"
                , equals_function_type( &::irr::core::vector2d< float >::equals )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector2d< float >::getAngle
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef ::irr::f64 ( exported_class_t::*getAngle_function_type )(  ) const;
            
            vector2d_less__float__greater__exposer.def( 
                "getAngle"
                , getAngle_function_type( &::irr::core::vector2d< float >::getAngle ) );
        
        }
        { //::irr::core::vector2d< float >::getAngleTrig
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef ::irr::f64 ( exported_class_t::*getAngleTrig_function_type )(  ) const;
            
            vector2d_less__float__greater__exposer.def( 
                "getAngleTrig"
                , getAngleTrig_function_type( &::irr::core::vector2d< float >::getAngleTrig ) );
        
        }
        { //::irr::core::vector2d< float >::getAngleWith
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef ::irr::f64 ( exported_class_t::*getAngleWith_function_type )( ::irr::core::vector2d< float > const & ) const;
            
            vector2d_less__float__greater__exposer.def( 
                "getAngleWith"
                , getAngleWith_function_type( &::irr::core::vector2d< float >::getAngleWith )
                , ( bp::arg("b") ) );
        
        }
        { //::irr::core::vector2d< float >::getDistanceFrom
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef float ( exported_class_t::*getDistanceFrom_function_type )( ::irr::core::vector2d< float > const & ) const;
            
            vector2d_less__float__greater__exposer.def( 
                "getDistanceFrom"
                , getDistanceFrom_function_type( &::irr::core::vector2d< float >::getDistanceFrom )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector2d< float >::getDistanceFromSQ
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef float ( exported_class_t::*getDistanceFromSQ_function_type )( ::irr::core::vector2d< float > const & ) const;
            
            vector2d_less__float__greater__exposer.def( 
                "getDistanceFromSQ"
                , getDistanceFromSQ_function_type( &::irr::core::vector2d< float >::getDistanceFromSQ )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector2d< float >::getInterpolated
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef ::irr::core::vector2d< float > ( exported_class_t::*getInterpolated_function_type )( ::irr::core::vector2d< float > const &,::irr::f64 ) const;
            
            vector2d_less__float__greater__exposer.def( 
                "getInterpolated"
                , getInterpolated_function_type( &::irr::core::vector2d< float >::getInterpolated )
                , ( bp::arg("other"), bp::arg("d") ) );
        
        }
        { //::irr::core::vector2d< float >::getInterpolated_quadratic
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef ::irr::core::vector2d< float > ( exported_class_t::*getInterpolated_quadratic_function_type )( ::irr::core::vector2d< float > const &,::irr::core::vector2d< float > const &,::irr::f64 ) const;
            
            vector2d_less__float__greater__exposer.def( 
                "getInterpolated_quadratic"
                , getInterpolated_quadratic_function_type( &::irr::core::vector2d< float >::getInterpolated_quadratic )
                , ( bp::arg("v2"), bp::arg("v3"), bp::arg("d") ) );
        
        }
        { //::irr::core::vector2d< float >::getLength
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef float ( exported_class_t::*getLength_function_type )(  ) const;
            
            vector2d_less__float__greater__exposer.def( 
                "getLength"
                , getLength_function_type( &::irr::core::vector2d< float >::getLength ) );
        
        }
        { //::irr::core::vector2d< float >::getLengthSQ
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef float ( exported_class_t::*getLengthSQ_function_type )(  ) const;
            
            vector2d_less__float__greater__exposer.def( 
                "getLengthSQ"
                , getLengthSQ_function_type( &::irr::core::vector2d< float >::getLengthSQ ) );
        
        }
        { //::irr::core::vector2d< float >::interpolate
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef ::irr::core::vector2d< float > & ( exported_class_t::*interpolate_function_type )( ::irr::core::vector2d< float > const &,::irr::core::vector2d< float > const &,::irr::f64 ) ;
            
            vector2d_less__float__greater__exposer.def( 
                "interpolate"
                , interpolate_function_type( &::irr::core::vector2d< float >::interpolate )
                , ( bp::arg("a"), bp::arg("b"), bp::arg("d") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector2d< float >::isBetweenPoints
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef bool ( exported_class_t::*isBetweenPoints_function_type )( ::irr::core::vector2d< float > const &,::irr::core::vector2d< float > const & ) const;
            
            vector2d_less__float__greater__exposer.def( 
                "isBetweenPoints"
                , isBetweenPoints_function_type( &::irr::core::vector2d< float >::isBetweenPoints )
                , ( bp::arg("begin"), bp::arg("end") ) );
        
        }
        { //::irr::core::vector2d< float >::normalize
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef ::irr::core::vector2d< float > & ( exported_class_t::*normalize_function_type )(  ) ;
            
            vector2d_less__float__greater__exposer.def( 
                "normalize"
                , normalize_function_type( &::irr::core::vector2d< float >::normalize )
                    /* undefined call policies */ );
        
        }
        vector2d_less__float__greater__exposer.def( bp::self != bp::self );
        vector2d_less__float__greater__exposer.def( bp::self * bp::self );
        vector2d_less__float__greater__exposer.def( bp::self * bp::other< float >() );
        vector2d_less__float__greater__exposer.def( bp::self *= bp::self );
        vector2d_less__float__greater__exposer.def( bp::self *= bp::other< float >() );
        vector2d_less__float__greater__exposer.def( bp::self + bp::self );
        vector2d_less__float__greater__exposer.def( bp::self + bp::other< irr::core::dimension2d< float > >() );
        vector2d_less__float__greater__exposer.def( bp::self + bp::other< float >() );
        vector2d_less__float__greater__exposer.def( bp::self += bp::self );
        vector2d_less__float__greater__exposer.def( bp::self += bp::other< float >() );
        vector2d_less__float__greater__exposer.def( bp::self += bp::other< irr::core::dimension2d< float > >() );
        vector2d_less__float__greater__exposer.def( -bp::self );
        vector2d_less__float__greater__exposer.def( bp::self - bp::self );
        vector2d_less__float__greater__exposer.def( bp::self - bp::other< irr::core::dimension2d< float > >() );
        vector2d_less__float__greater__exposer.def( bp::self - bp::other< float >() );
        vector2d_less__float__greater__exposer.def( bp::self -= bp::self );
        vector2d_less__float__greater__exposer.def( bp::self -= bp::other< float >() );
        vector2d_less__float__greater__exposer.def( bp::self -= bp::other< irr::core::dimension2d< float > >() );
        vector2d_less__float__greater__exposer.def( bp::self / bp::self );
        vector2d_less__float__greater__exposer.def( bp::self / bp::other< float >() );
        vector2d_less__float__greater__exposer.def( bp::self /= bp::self );
        vector2d_less__float__greater__exposer.def( bp::self /= bp::other< float >() );
        vector2d_less__float__greater__exposer.def( bp::self < bp::self );
        vector2d_less__float__greater__exposer.def( bp::self <= bp::self );
        { //::irr::core::vector2d< float >::operator=
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef ::irr::core::vector2d< float > & ( exported_class_t::*assign_function_type )( ::irr::core::vector2d< float > const & ) ;
            
            vector2d_less__float__greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::vector2d< float >::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::irr::core::vector2d< float >::operator=
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef ::irr::core::vector2d< float > & ( exported_class_t::*assign_function_type )( ::irr::core::dimension2d< float > const & ) ;
            
            vector2d_less__float__greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::vector2d< float >::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        vector2d_less__float__greater__exposer.def( bp::self == bp::self );
        vector2d_less__float__greater__exposer.def( bp::self > bp::self );
        vector2d_less__float__greater__exposer.def( bp::self >= bp::self );
        { //::irr::core::vector2d< float >::rotateBy
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef ::irr::core::vector2d< float > & ( exported_class_t::*rotateBy_function_type )( ::irr::f64,::irr::core::vector2d< float > const & ) ;
            
            vector2d_less__float__greater__exposer.def( 
                "rotateBy"
                , rotateBy_function_type( &::irr::core::vector2d< float >::rotateBy )
                , ( bp::arg("degrees"), bp::arg("center")=irr::core::vector2d<T>() )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector2d< float >::set
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef ::irr::core::vector2d< float > & ( exported_class_t::*set_function_type )( float,float ) ;
            
            vector2d_less__float__greater__exposer.def( 
                "set"
                , set_function_type( &::irr::core::vector2d< float >::set )
                , ( bp::arg("nx"), bp::arg("ny") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector2d< float >::set
        
            typedef irr::core::vector2d< float > exported_class_t;
            typedef ::irr::core::vector2d< float > & ( exported_class_t::*set_function_type )( ::irr::core::vector2d< float > const & ) ;
            
            vector2d_less__float__greater__exposer.def( 
                "set"
                , set_function_type( &::irr::core::vector2d< float >::set )
                , ( bp::arg("p") )
                    /* undefined call policies */ );
        
        }
        vector2d_less__float__greater__exposer.def_readwrite( "X", &irr::core::vector2d< float >::X );
        vector2d_less__float__greater__exposer.def_readwrite( "Y", &irr::core::vector2d< float >::Y );
    }

    { //::irr::core::vector2d< int >
        typedef bp::class_< irr::core::vector2d< int > > vector2d_less__int__greater__exposer_t;
        vector2d_less__int__greater__exposer_t vector2d_less__int__greater__exposer = vector2d_less__int__greater__exposer_t( "vector2d_less__int__greater_", bp::init< >() );
        bp::scope vector2d_less__int__greater__scope( vector2d_less__int__greater__exposer );
        vector2d_less__int__greater__exposer.def( bp::init< int, int >(( bp::arg("nx"), bp::arg("ny") )) );
        vector2d_less__int__greater__exposer.def( bp::init< int >(( bp::arg("n") )) );
        bp::implicitly_convertible< int, irr::core::vector2d< int > >();
        vector2d_less__int__greater__exposer.def( bp::init< irr::core::vector2d< int > const & >(( bp::arg("other") )) );
        vector2d_less__int__greater__exposer.def( bp::init< irr::core::dimension2d< int > const & >(( bp::arg("other") )) );
        bp::implicitly_convertible< irr::core::dimension2d< int > const &, irr::core::vector2d< int > >();
        { //::irr::core::vector2d< int >::dotProduct
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef int ( exported_class_t::*dotProduct_function_type )( ::irr::core::vector2d< int > const & ) const;
            
            vector2d_less__int__greater__exposer.def( 
                "dotProduct"
                , dotProduct_function_type( &::irr::core::vector2d< int >::dotProduct )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector2d< int >::equals
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef bool ( exported_class_t::*equals_function_type )( ::irr::core::vector2d< int > const & ) const;
            
            vector2d_less__int__greater__exposer.def( 
                "equals"
                , equals_function_type( &::irr::core::vector2d< int >::equals )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector2d< int >::getAngle
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef ::irr::f64 ( exported_class_t::*getAngle_function_type )(  ) const;
            
            vector2d_less__int__greater__exposer.def( 
                "getAngle"
                , getAngle_function_type( &::irr::core::vector2d< int >::getAngle ) );
        
        }
        { //::irr::core::vector2d< int >::getAngleTrig
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef ::irr::f64 ( exported_class_t::*getAngleTrig_function_type )(  ) const;
            
            vector2d_less__int__greater__exposer.def( 
                "getAngleTrig"
                , getAngleTrig_function_type( &::irr::core::vector2d< int >::getAngleTrig ) );
        
        }
        { //::irr::core::vector2d< int >::getAngleWith
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef ::irr::f64 ( exported_class_t::*getAngleWith_function_type )( ::irr::core::vector2d< int > const & ) const;
            
            vector2d_less__int__greater__exposer.def( 
                "getAngleWith"
                , getAngleWith_function_type( &::irr::core::vector2d< int >::getAngleWith )
                , ( bp::arg("b") ) );
        
        }
        { //::irr::core::vector2d< int >::getDistanceFrom
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef int ( exported_class_t::*getDistanceFrom_function_type )( ::irr::core::vector2d< int > const & ) const;
            
            vector2d_less__int__greater__exposer.def( 
                "getDistanceFrom"
                , getDistanceFrom_function_type( &::irr::core::vector2d< int >::getDistanceFrom )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector2d< int >::getDistanceFromSQ
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef int ( exported_class_t::*getDistanceFromSQ_function_type )( ::irr::core::vector2d< int > const & ) const;
            
            vector2d_less__int__greater__exposer.def( 
                "getDistanceFromSQ"
                , getDistanceFromSQ_function_type( &::irr::core::vector2d< int >::getDistanceFromSQ )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector2d< int >::getInterpolated
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef ::irr::core::vector2d< int > ( exported_class_t::*getInterpolated_function_type )( ::irr::core::vector2d< int > const &,::irr::f64 ) const;
            
            vector2d_less__int__greater__exposer.def( 
                "getInterpolated"
                , getInterpolated_function_type( &::irr::core::vector2d< int >::getInterpolated )
                , ( bp::arg("other"), bp::arg("d") ) );
        
        }
        { //::irr::core::vector2d< int >::getInterpolated_quadratic
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef ::irr::core::vector2d< int > ( exported_class_t::*getInterpolated_quadratic_function_type )( ::irr::core::vector2d< int > const &,::irr::core::vector2d< int > const &,::irr::f64 ) const;
            
            vector2d_less__int__greater__exposer.def( 
                "getInterpolated_quadratic"
                , getInterpolated_quadratic_function_type( &::irr::core::vector2d< int >::getInterpolated_quadratic )
                , ( bp::arg("v2"), bp::arg("v3"), bp::arg("d") ) );
        
        }
        { //::irr::core::vector2d< int >::getLength
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef int ( exported_class_t::*getLength_function_type )(  ) const;
            
            vector2d_less__int__greater__exposer.def( 
                "getLength"
                , getLength_function_type( &::irr::core::vector2d< int >::getLength ) );
        
        }
        { //::irr::core::vector2d< int >::getLengthSQ
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef int ( exported_class_t::*getLengthSQ_function_type )(  ) const;
            
            vector2d_less__int__greater__exposer.def( 
                "getLengthSQ"
                , getLengthSQ_function_type( &::irr::core::vector2d< int >::getLengthSQ ) );
        
        }
        { //::irr::core::vector2d< int >::interpolate
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef ::irr::core::vector2d< int > & ( exported_class_t::*interpolate_function_type )( ::irr::core::vector2d< int > const &,::irr::core::vector2d< int > const &,::irr::f64 ) ;
            
            vector2d_less__int__greater__exposer.def( 
                "interpolate"
                , interpolate_function_type( &::irr::core::vector2d< int >::interpolate )
                , ( bp::arg("a"), bp::arg("b"), bp::arg("d") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector2d< int >::isBetweenPoints
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef bool ( exported_class_t::*isBetweenPoints_function_type )( ::irr::core::vector2d< int > const &,::irr::core::vector2d< int > const & ) const;
            
            vector2d_less__int__greater__exposer.def( 
                "isBetweenPoints"
                , isBetweenPoints_function_type( &::irr::core::vector2d< int >::isBetweenPoints )
                , ( bp::arg("begin"), bp::arg("end") ) );
        
        }
        { //::irr::core::vector2d< int >::normalize
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef ::irr::core::vector2d< int > & ( exported_class_t::*normalize_function_type )(  ) ;
            
            vector2d_less__int__greater__exposer.def( 
                "normalize"
                , normalize_function_type( &::irr::core::vector2d< int >::normalize )
                    /* undefined call policies */ );
        
        }
        vector2d_less__int__greater__exposer.def( bp::self != bp::self );
        vector2d_less__int__greater__exposer.def( bp::self * bp::self );
        vector2d_less__int__greater__exposer.def( bp::self * bp::other< int >() );
        vector2d_less__int__greater__exposer.def( bp::self *= bp::self );
        vector2d_less__int__greater__exposer.def( bp::self *= bp::other< int >() );
        vector2d_less__int__greater__exposer.def( bp::self + bp::self );
        vector2d_less__int__greater__exposer.def( bp::self + bp::other< irr::core::dimension2d< int > >() );
        vector2d_less__int__greater__exposer.def( bp::self + bp::other< int >() );
        vector2d_less__int__greater__exposer.def( bp::self += bp::self );
        vector2d_less__int__greater__exposer.def( bp::self += bp::other< int >() );
        vector2d_less__int__greater__exposer.def( bp::self += bp::other< irr::core::dimension2d< int > >() );
        vector2d_less__int__greater__exposer.def( -bp::self );
        vector2d_less__int__greater__exposer.def( bp::self - bp::self );
        vector2d_less__int__greater__exposer.def( bp::self - bp::other< irr::core::dimension2d< int > >() );
        vector2d_less__int__greater__exposer.def( bp::self - bp::other< int >() );
        vector2d_less__int__greater__exposer.def( bp::self -= bp::self );
        vector2d_less__int__greater__exposer.def( bp::self -= bp::other< int >() );
        vector2d_less__int__greater__exposer.def( bp::self -= bp::other< irr::core::dimension2d< int > >() );
        vector2d_less__int__greater__exposer.def( bp::self / bp::self );
        vector2d_less__int__greater__exposer.def( bp::self / bp::other< int >() );
        vector2d_less__int__greater__exposer.def( bp::self /= bp::self );
        vector2d_less__int__greater__exposer.def( bp::self /= bp::other< int >() );
        vector2d_less__int__greater__exposer.def( bp::self < bp::self );
        vector2d_less__int__greater__exposer.def( bp::self <= bp::self );
        { //::irr::core::vector2d< int >::operator=
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef ::irr::core::vector2d< int > & ( exported_class_t::*assign_function_type )( ::irr::core::vector2d< int > const & ) ;
            
            vector2d_less__int__greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::vector2d< int >::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::irr::core::vector2d< int >::operator=
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef ::irr::core::vector2d< int > & ( exported_class_t::*assign_function_type )( ::irr::core::dimension2d< int > const & ) ;
            
            vector2d_less__int__greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::vector2d< int >::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        vector2d_less__int__greater__exposer.def( bp::self == bp::self );
        vector2d_less__int__greater__exposer.def( bp::self > bp::self );
        vector2d_less__int__greater__exposer.def( bp::self >= bp::self );
        { //::irr::core::vector2d< int >::rotateBy
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef ::irr::core::vector2d< int > & ( exported_class_t::*rotateBy_function_type )( ::irr::f64,::irr::core::vector2d< int > const & ) ;
            
            vector2d_less__int__greater__exposer.def( 
                "rotateBy"
                , rotateBy_function_type( &::irr::core::vector2d< int >::rotateBy )
                , ( bp::arg("degrees"), bp::arg("center")=irr::core::vector2d<T>() )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector2d< int >::set
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef ::irr::core::vector2d< int > & ( exported_class_t::*set_function_type )( int,int ) ;
            
            vector2d_less__int__greater__exposer.def( 
                "set"
                , set_function_type( &::irr::core::vector2d< int >::set )
                , ( bp::arg("nx"), bp::arg("ny") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector2d< int >::set
        
            typedef irr::core::vector2d< int > exported_class_t;
            typedef ::irr::core::vector2d< int > & ( exported_class_t::*set_function_type )( ::irr::core::vector2d< int > const & ) ;
            
            vector2d_less__int__greater__exposer.def( 
                "set"
                , set_function_type( &::irr::core::vector2d< int >::set )
                , ( bp::arg("p") )
                    /* undefined call policies */ );
        
        }
        vector2d_less__int__greater__exposer.def_readwrite( "X", &irr::core::vector2d< int >::X );
        vector2d_less__int__greater__exposer.def_readwrite( "Y", &irr::core::vector2d< int >::Y );
    }

    { //::irr::core::vector2d< unsigned int >
        typedef bp::class_< irr::core::vector2d< unsigned int > > vector2d_less__unsigned_int__greater__exposer_t;
        vector2d_less__unsigned_int__greater__exposer_t vector2d_less__unsigned_int__greater__exposer = vector2d_less__unsigned_int__greater__exposer_t( "vector2d_less__unsigned_int__greater_", bp::init< >() );
        bp::scope vector2d_less__unsigned_int__greater__scope( vector2d_less__unsigned_int__greater__exposer );
        vector2d_less__unsigned_int__greater__exposer.def( bp::init< unsigned int, unsigned int >(( bp::arg("nx"), bp::arg("ny") )) );
        vector2d_less__unsigned_int__greater__exposer.def( bp::init< unsigned int >(( bp::arg("n") )) );
        bp::implicitly_convertible< unsigned int, irr::core::vector2d< unsigned int > >();
        vector2d_less__unsigned_int__greater__exposer.def( bp::init< irr::core::vector2d< unsigned int > const & >(( bp::arg("other") )) );
        vector2d_less__unsigned_int__greater__exposer.def( bp::init< irr::core::dimension2d< unsigned int > const & >(( bp::arg("other") )) );
        bp::implicitly_convertible< irr::core::dimension2d< unsigned int > const &, irr::core::vector2d< unsigned int > >();
        { //::irr::core::vector2d< unsigned int >::dotProduct
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef unsigned int ( exported_class_t::*dotProduct_function_type )( ::irr::core::vector2d< unsigned int > const & ) const;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "dotProduct"
                , dotProduct_function_type( &::irr::core::vector2d< unsigned int >::dotProduct )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector2d< unsigned int >::equals
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef bool ( exported_class_t::*equals_function_type )( ::irr::core::vector2d< unsigned int > const & ) const;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "equals"
                , equals_function_type( &::irr::core::vector2d< unsigned int >::equals )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector2d< unsigned int >::getAngle
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef ::irr::f64 ( exported_class_t::*getAngle_function_type )(  ) const;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "getAngle"
                , getAngle_function_type( &::irr::core::vector2d< unsigned int >::getAngle ) );
        
        }
        { //::irr::core::vector2d< unsigned int >::getAngleTrig
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef ::irr::f64 ( exported_class_t::*getAngleTrig_function_type )(  ) const;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "getAngleTrig"
                , getAngleTrig_function_type( &::irr::core::vector2d< unsigned int >::getAngleTrig ) );
        
        }
        { //::irr::core::vector2d< unsigned int >::getAngleWith
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef ::irr::f64 ( exported_class_t::*getAngleWith_function_type )( ::irr::core::vector2d< unsigned int > const & ) const;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "getAngleWith"
                , getAngleWith_function_type( &::irr::core::vector2d< unsigned int >::getAngleWith )
                , ( bp::arg("b") ) );
        
        }
        { //::irr::core::vector2d< unsigned int >::getDistanceFrom
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef unsigned int ( exported_class_t::*getDistanceFrom_function_type )( ::irr::core::vector2d< unsigned int > const & ) const;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "getDistanceFrom"
                , getDistanceFrom_function_type( &::irr::core::vector2d< unsigned int >::getDistanceFrom )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector2d< unsigned int >::getDistanceFromSQ
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef unsigned int ( exported_class_t::*getDistanceFromSQ_function_type )( ::irr::core::vector2d< unsigned int > const & ) const;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "getDistanceFromSQ"
                , getDistanceFromSQ_function_type( &::irr::core::vector2d< unsigned int >::getDistanceFromSQ )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector2d< unsigned int >::getInterpolated
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef ::irr::core::vector2d< unsigned int > ( exported_class_t::*getInterpolated_function_type )( ::irr::core::vector2d< unsigned int > const &,::irr::f64 ) const;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "getInterpolated"
                , getInterpolated_function_type( &::irr::core::vector2d< unsigned int >::getInterpolated )
                , ( bp::arg("other"), bp::arg("d") ) );
        
        }
        { //::irr::core::vector2d< unsigned int >::getInterpolated_quadratic
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef ::irr::core::vector2d< unsigned int > ( exported_class_t::*getInterpolated_quadratic_function_type )( ::irr::core::vector2d< unsigned int > const &,::irr::core::vector2d< unsigned int > const &,::irr::f64 ) const;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "getInterpolated_quadratic"
                , getInterpolated_quadratic_function_type( &::irr::core::vector2d< unsigned int >::getInterpolated_quadratic )
                , ( bp::arg("v2"), bp::arg("v3"), bp::arg("d") ) );
        
        }
        { //::irr::core::vector2d< unsigned int >::getLength
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef unsigned int ( exported_class_t::*getLength_function_type )(  ) const;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "getLength"
                , getLength_function_type( &::irr::core::vector2d< unsigned int >::getLength ) );
        
        }
        { //::irr::core::vector2d< unsigned int >::getLengthSQ
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef unsigned int ( exported_class_t::*getLengthSQ_function_type )(  ) const;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "getLengthSQ"
                , getLengthSQ_function_type( &::irr::core::vector2d< unsigned int >::getLengthSQ ) );
        
        }
        { //::irr::core::vector2d< unsigned int >::interpolate
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef ::irr::core::vector2d< unsigned int > & ( exported_class_t::*interpolate_function_type )( ::irr::core::vector2d< unsigned int > const &,::irr::core::vector2d< unsigned int > const &,::irr::f64 ) ;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "interpolate"
                , interpolate_function_type( &::irr::core::vector2d< unsigned int >::interpolate )
                , ( bp::arg("a"), bp::arg("b"), bp::arg("d") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector2d< unsigned int >::isBetweenPoints
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef bool ( exported_class_t::*isBetweenPoints_function_type )( ::irr::core::vector2d< unsigned int > const &,::irr::core::vector2d< unsigned int > const & ) const;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "isBetweenPoints"
                , isBetweenPoints_function_type( &::irr::core::vector2d< unsigned int >::isBetweenPoints )
                , ( bp::arg("begin"), bp::arg("end") ) );
        
        }
        { //::irr::core::vector2d< unsigned int >::normalize
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef ::irr::core::vector2d< unsigned int > & ( exported_class_t::*normalize_function_type )(  ) ;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "normalize"
                , normalize_function_type( &::irr::core::vector2d< unsigned int >::normalize )
                    /* undefined call policies */ );
        
        }
        vector2d_less__unsigned_int__greater__exposer.def( bp::self != bp::self );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self * bp::self );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self * bp::other< unsigned int >() );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self *= bp::self );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self *= bp::other< unsigned int >() );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self + bp::self );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self + bp::other< irr::core::dimension2d< unsigned int > >() );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self + bp::other< unsigned int >() );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self += bp::self );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self += bp::other< unsigned int >() );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self += bp::other< irr::core::dimension2d< unsigned int > >() );
        vector2d_less__unsigned_int__greater__exposer.def( -bp::self );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self - bp::self );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self - bp::other< irr::core::dimension2d< unsigned int > >() );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self - bp::other< unsigned int >() );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self -= bp::self );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self -= bp::other< unsigned int >() );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self -= bp::other< irr::core::dimension2d< unsigned int > >() );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self / bp::self );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self / bp::other< unsigned int >() );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self /= bp::self );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self /= bp::other< unsigned int >() );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self < bp::self );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self <= bp::self );
        { //::irr::core::vector2d< unsigned int >::operator=
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef ::irr::core::vector2d< unsigned int > & ( exported_class_t::*assign_function_type )( ::irr::core::vector2d< unsigned int > const & ) ;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::vector2d< unsigned int >::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::irr::core::vector2d< unsigned int >::operator=
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef ::irr::core::vector2d< unsigned int > & ( exported_class_t::*assign_function_type )( ::irr::core::dimension2d< unsigned int > const & ) ;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::vector2d< unsigned int >::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        vector2d_less__unsigned_int__greater__exposer.def( bp::self == bp::self );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self > bp::self );
        vector2d_less__unsigned_int__greater__exposer.def( bp::self >= bp::self );
        { //::irr::core::vector2d< unsigned int >::rotateBy
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef ::irr::core::vector2d< unsigned int > & ( exported_class_t::*rotateBy_function_type )( ::irr::f64,::irr::core::vector2d< unsigned int > const & ) ;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "rotateBy"
                , rotateBy_function_type( &::irr::core::vector2d< unsigned int >::rotateBy )
                , ( bp::arg("degrees"), bp::arg("center")=irr::core::vector2d<T>() )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector2d< unsigned int >::set
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef ::irr::core::vector2d< unsigned int > & ( exported_class_t::*set_function_type )( unsigned int,unsigned int ) ;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "set"
                , set_function_type( &::irr::core::vector2d< unsigned int >::set )
                , ( bp::arg("nx"), bp::arg("ny") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector2d< unsigned int >::set
        
            typedef irr::core::vector2d< unsigned int > exported_class_t;
            typedef ::irr::core::vector2d< unsigned int > & ( exported_class_t::*set_function_type )( ::irr::core::vector2d< unsigned int > const & ) ;
            
            vector2d_less__unsigned_int__greater__exposer.def( 
                "set"
                , set_function_type( &::irr::core::vector2d< unsigned int >::set )
                , ( bp::arg("p") )
                    /* undefined call policies */ );
        
        }
        vector2d_less__unsigned_int__greater__exposer.def_readwrite( "X", &irr::core::vector2d< unsigned int >::X );
        vector2d_less__unsigned_int__greater__exposer.def_readwrite( "Y", &irr::core::vector2d< unsigned int >::Y );
    }

    { //::irr::core::vector3d< double >
        typedef bp::class_< irr::core::vector3d< double > > vector3d_less__double__greater__exposer_t;
        vector3d_less__double__greater__exposer_t vector3d_less__double__greater__exposer = vector3d_less__double__greater__exposer_t( "vector3d_less__double__greater_", bp::init< >() );
        bp::scope vector3d_less__double__greater__scope( vector3d_less__double__greater__exposer );
        vector3d_less__double__greater__exposer.def( bp::init< double, double, double >(( bp::arg("nx"), bp::arg("ny"), bp::arg("nz") )) );
        vector3d_less__double__greater__exposer.def( bp::init< double >(( bp::arg("n") )) );
        bp::implicitly_convertible< double, irr::core::vector3d< double > >();
        vector3d_less__double__greater__exposer.def( bp::init< irr::core::vector3d< double > const & >(( bp::arg("other") )) );
        { //::irr::core::vector3d< double >::crossProduct
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef ::irr::core::vector3d< double > ( exported_class_t::*crossProduct_function_type )( ::irr::core::vector3d< double > const & ) const;
            
            vector3d_less__double__greater__exposer.def( 
                "crossProduct"
                , crossProduct_function_type( &::irr::core::vector3d< double >::crossProduct )
                , ( bp::arg("p") ) );
        
        }
        { //::irr::core::vector3d< double >::dotProduct
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef double ( exported_class_t::*dotProduct_function_type )( ::irr::core::vector3d< double > const & ) const;
            
            vector3d_less__double__greater__exposer.def( 
                "dotProduct"
                , dotProduct_function_type( &::irr::core::vector3d< double >::dotProduct )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector3d< double >::equals
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef bool ( exported_class_t::*equals_function_type )( ::irr::core::vector3d< double > const &,double const ) const;
            
            vector3d_less__double__greater__exposer.def( 
                "equals"
                , equals_function_type( &::irr::core::vector3d< double >::equals )
                , ( bp::arg("other"), bp::arg("tolerance")=( irr::core::ROUNDING_ERROR_f32 ) ) );
        
        }
        { //::irr::core::vector3d< double >::getAs4Values
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef void ( exported_class_t::*getAs4Values_function_type )( double * ) const;
            
            vector3d_less__double__greater__exposer.def( 
                "getAs4Values"
                , getAs4Values_function_type( &::irr::core::vector3d< double >::getAs4Values )
                , ( bp::arg("array") ) );
        
        }
        { //::irr::core::vector3d< double >::getDistanceFrom
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef double ( exported_class_t::*getDistanceFrom_function_type )( ::irr::core::vector3d< double > const & ) const;
            
            vector3d_less__double__greater__exposer.def( 
                "getDistanceFrom"
                , getDistanceFrom_function_type( &::irr::core::vector3d< double >::getDistanceFrom )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector3d< double >::getDistanceFromSQ
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef double ( exported_class_t::*getDistanceFromSQ_function_type )( ::irr::core::vector3d< double > const & ) const;
            
            vector3d_less__double__greater__exposer.def( 
                "getDistanceFromSQ"
                , getDistanceFromSQ_function_type( &::irr::core::vector3d< double >::getDistanceFromSQ )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector3d< double >::getHorizontalAngle
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef ::irr::core::vector3d< double > ( exported_class_t::*getHorizontalAngle_function_type )(  ) const;
            
            vector3d_less__double__greater__exposer.def( 
                "getHorizontalAngle"
                , getHorizontalAngle_function_type( &::irr::core::vector3d< double >::getHorizontalAngle ) );
        
        }
        { //::irr::core::vector3d< double >::getInterpolated
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef ::irr::core::vector3d< double > ( exported_class_t::*getInterpolated_function_type )( ::irr::core::vector3d< double > const &,::irr::f64 ) const;
            
            vector3d_less__double__greater__exposer.def( 
                "getInterpolated"
                , getInterpolated_function_type( &::irr::core::vector3d< double >::getInterpolated )
                , ( bp::arg("other"), bp::arg("d") ) );
        
        }
        { //::irr::core::vector3d< double >::getInterpolated_quadratic
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef ::irr::core::vector3d< double > ( exported_class_t::*getInterpolated_quadratic_function_type )( ::irr::core::vector3d< double > const &,::irr::core::vector3d< double > const &,::irr::f64 ) const;
            
            vector3d_less__double__greater__exposer.def( 
                "getInterpolated_quadratic"
                , getInterpolated_quadratic_function_type( &::irr::core::vector3d< double >::getInterpolated_quadratic )
                , ( bp::arg("v2"), bp::arg("v3"), bp::arg("d") ) );
        
        }
        { //::irr::core::vector3d< double >::getLength
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef double ( exported_class_t::*getLength_function_type )(  ) const;
            
            vector3d_less__double__greater__exposer.def( 
                "getLength"
                , getLength_function_type( &::irr::core::vector3d< double >::getLength ) );
        
        }
        { //::irr::core::vector3d< double >::getLengthSQ
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef double ( exported_class_t::*getLengthSQ_function_type )(  ) const;
            
            vector3d_less__double__greater__exposer.def( 
                "getLengthSQ"
                , getLengthSQ_function_type( &::irr::core::vector3d< double >::getLengthSQ ) );
        
        }
        { //::irr::core::vector3d< double >::getSphericalCoordinateAngles
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef ::irr::core::vector3d< double > ( exported_class_t::*getSphericalCoordinateAngles_function_type )(  ) ;
            
            vector3d_less__double__greater__exposer.def( 
                "getSphericalCoordinateAngles"
                , getSphericalCoordinateAngles_function_type( &::irr::core::vector3d< double >::getSphericalCoordinateAngles ) );
        
        }
        { //::irr::core::vector3d< double >::interpolate
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef ::irr::core::vector3d< double > & ( exported_class_t::*interpolate_function_type )( ::irr::core::vector3d< double > const &,::irr::core::vector3d< double > const &,::irr::f64 ) ;
            
            vector3d_less__double__greater__exposer.def( 
                "interpolate"
                , interpolate_function_type( &::irr::core::vector3d< double >::interpolate )
                , ( bp::arg("a"), bp::arg("b"), bp::arg("d") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector3d< double >::invert
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef ::irr::core::vector3d< double > & ( exported_class_t::*invert_function_type )(  ) ;
            
            vector3d_less__double__greater__exposer.def( 
                "invert"
                , invert_function_type( &::irr::core::vector3d< double >::invert )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector3d< double >::isBetweenPoints
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef bool ( exported_class_t::*isBetweenPoints_function_type )( ::irr::core::vector3d< double > const &,::irr::core::vector3d< double > const & ) const;
            
            vector3d_less__double__greater__exposer.def( 
                "isBetweenPoints"
                , isBetweenPoints_function_type( &::irr::core::vector3d< double >::isBetweenPoints )
                , ( bp::arg("begin"), bp::arg("end") ) );
        
        }
        { //::irr::core::vector3d< double >::normalize
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef ::irr::core::vector3d< double > & ( exported_class_t::*normalize_function_type )(  ) ;
            
            vector3d_less__double__greater__exposer.def( 
                "normalize"
                , normalize_function_type( &::irr::core::vector3d< double >::normalize )
                    /* undefined call policies */ );
        
        }
        vector3d_less__double__greater__exposer.def( bp::self != bp::self );
        vector3d_less__double__greater__exposer.def( bp::self * bp::self );
        vector3d_less__double__greater__exposer.def( bp::self * bp::other< double >() );
        vector3d_less__double__greater__exposer.def( bp::self *= bp::self );
        vector3d_less__double__greater__exposer.def( bp::self *= bp::other< double >() );
        vector3d_less__double__greater__exposer.def( bp::self + bp::self );
        vector3d_less__double__greater__exposer.def( bp::self + bp::other< double >() );
        vector3d_less__double__greater__exposer.def( bp::self += bp::self );
        vector3d_less__double__greater__exposer.def( bp::self += bp::other< double >() );
        vector3d_less__double__greater__exposer.def( -bp::self );
        vector3d_less__double__greater__exposer.def( bp::self - bp::self );
        vector3d_less__double__greater__exposer.def( bp::self - bp::other< double >() );
        vector3d_less__double__greater__exposer.def( bp::self -= bp::self );
        vector3d_less__double__greater__exposer.def( bp::self -= bp::other< double >() );
        vector3d_less__double__greater__exposer.def( bp::self / bp::self );
        vector3d_less__double__greater__exposer.def( bp::self / bp::other< double >() );
        vector3d_less__double__greater__exposer.def( bp::self /= bp::self );
        vector3d_less__double__greater__exposer.def( bp::self /= bp::other< double >() );
        vector3d_less__double__greater__exposer.def( bp::self < bp::self );
        vector3d_less__double__greater__exposer.def( bp::self <= bp::self );
        { //::irr::core::vector3d< double >::operator=
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef ::irr::core::vector3d< double > & ( exported_class_t::*assign_function_type )( ::irr::core::vector3d< double > const & ) ;
            
            vector3d_less__double__greater__exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::vector3d< double >::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        vector3d_less__double__greater__exposer.def( bp::self == bp::self );
        vector3d_less__double__greater__exposer.def( bp::self > bp::self );
        vector3d_less__double__greater__exposer.def( bp::self >= bp::self );
        { //::irr::core::vector3d< double >::rotateXYBy
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef void ( exported_class_t::*rotateXYBy_function_type )( ::irr::f64,::irr::core::vector3d< double > const & ) ;
            
            vector3d_less__double__greater__exposer.def( 
                "rotateXYBy"
                , rotateXYBy_function_type( &::irr::core::vector3d< double >::rotateXYBy )
                , ( bp::arg("degrees"), bp::arg("center")=irr::core::vector3d<T>() ) );
        
        }
        { //::irr::core::vector3d< double >::rotateXZBy
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef void ( exported_class_t::*rotateXZBy_function_type )( ::irr::f64,::irr::core::vector3d< double > const & ) ;
            
            vector3d_less__double__greater__exposer.def( 
                "rotateXZBy"
                , rotateXZBy_function_type( &::irr::core::vector3d< double >::rotateXZBy )
                , ( bp::arg("degrees"), bp::arg("center")=irr::core::vector3d<T>() ) );
        
        }
        { //::irr::core::vector3d< double >::rotateYZBy
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef void ( exported_class_t::*rotateYZBy_function_type )( ::irr::f64,::irr::core::vector3d< double > const & ) ;
            
            vector3d_less__double__greater__exposer.def( 
                "rotateYZBy"
                , rotateYZBy_function_type( &::irr::core::vector3d< double >::rotateYZBy )
                , ( bp::arg("degrees"), bp::arg("center")=irr::core::vector3d<T>() ) );
        
        }
        { //::irr::core::vector3d< double >::rotationToDirection
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef ::irr::core::vector3d< double > ( exported_class_t::*rotationToDirection_function_type )( ::irr::core::vector3d< double > const & ) const;
            
            vector3d_less__double__greater__exposer.def( 
                "rotationToDirection"
                , rotationToDirection_function_type( &::irr::core::vector3d< double >::rotationToDirection )
                , ( bp::arg("forwards")=irr::core::vector3d<T>(0, 0, 1) ) );
        
        }
        { //::irr::core::vector3d< double >::set
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef ::irr::core::vector3d< double > & ( exported_class_t::*set_function_type )( double const,double const,double const ) ;
            
            vector3d_less__double__greater__exposer.def( 
                "set"
                , set_function_type( &::irr::core::vector3d< double >::set )
                , ( bp::arg("nx"), bp::arg("ny"), bp::arg("nz") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector3d< double >::set
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef ::irr::core::vector3d< double > & ( exported_class_t::*set_function_type )( ::irr::core::vector3d< double > const & ) ;
            
            vector3d_less__double__greater__exposer.def( 
                "set"
                , set_function_type( &::irr::core::vector3d< double >::set )
                , ( bp::arg("p") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector3d< double >::setLength
        
            typedef irr::core::vector3d< double > exported_class_t;
            typedef ::irr::core::vector3d< double > & ( exported_class_t::*setLength_function_type )( double ) ;
            
            vector3d_less__double__greater__exposer.def( 
                "setLength"
                , setLength_function_type( &::irr::core::vector3d< double >::setLength )
                , ( bp::arg("newlength") )
                    /* undefined call policies */ );
        
        }
        vector3d_less__double__greater__exposer.def_readwrite( "X", &irr::core::vector3d< double >::X );
        vector3d_less__double__greater__exposer.def_readwrite( "Y", &irr::core::vector3d< double >::Y );
        vector3d_less__double__greater__exposer.def_readwrite( "Z", &irr::core::vector3d< double >::Z );
    }

    { //::irr::core::vector3d< int >
        typedef bp::class_< irr::core::vector3d< int > > vector3di_exposer_t;
        vector3di_exposer_t vector3di_exposer = vector3di_exposer_t( "vector3di", bp::init< >() );
        bp::scope vector3di_scope( vector3di_exposer );
        vector3di_exposer.def( bp::init< int, int, int >(( bp::arg("nx"), bp::arg("ny"), bp::arg("nz") )) );
        vector3di_exposer.def( bp::init< int >(( bp::arg("n") )) );
        bp::implicitly_convertible< int, irr::core::vector3d< int > >();
        vector3di_exposer.def( bp::init< irr::core::vector3d< int > const & >(( bp::arg("other") )) );
        { //::irr::core::vector3d< int >::crossProduct
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef ::irr::core::vector3d< int > ( exported_class_t::*crossProduct_function_type )( ::irr::core::vector3d< int > const & ) const;
            
            vector3di_exposer.def( 
                "crossProduct"
                , crossProduct_function_type( &::irr::core::vector3d< int >::crossProduct )
                , ( bp::arg("p") ) );
        
        }
        { //::irr::core::vector3d< int >::dotProduct
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef int ( exported_class_t::*dotProduct_function_type )( ::irr::core::vector3d< int > const & ) const;
            
            vector3di_exposer.def( 
                "dotProduct"
                , dotProduct_function_type( &::irr::core::vector3d< int >::dotProduct )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector3d< int >::equals
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef bool ( exported_class_t::*equals_function_type )( ::irr::core::vector3d< int > const &,int const ) const;
            
            vector3di_exposer.def( 
                "equals"
                , equals_function_type( &::irr::core::vector3d< int >::equals )
                , ( bp::arg("other"), bp::arg("tolerance")=(int const)(( irr::core::ROUNDING_ERROR_f32 )) ) );
        
        }
        { //::irr::core::vector3d< int >::getAs4Values
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef void ( exported_class_t::*getAs4Values_function_type )( int * ) const;
            
            vector3di_exposer.def( 
                "getAs4Values"
                , getAs4Values_function_type( &::irr::core::vector3d< int >::getAs4Values )
                , ( bp::arg("array") ) );
        
        }
        { //::irr::core::vector3d< int >::getDistanceFrom
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef int ( exported_class_t::*getDistanceFrom_function_type )( ::irr::core::vector3d< int > const & ) const;
            
            vector3di_exposer.def( 
                "getDistanceFrom"
                , getDistanceFrom_function_type( &::irr::core::vector3d< int >::getDistanceFrom )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector3d< int >::getDistanceFromSQ
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef int ( exported_class_t::*getDistanceFromSQ_function_type )( ::irr::core::vector3d< int > const & ) const;
            
            vector3di_exposer.def( 
                "getDistanceFromSQ"
                , getDistanceFromSQ_function_type( &::irr::core::vector3d< int >::getDistanceFromSQ )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::core::vector3d< int >::getHorizontalAngle
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef ::irr::core::vector3d< int > ( exported_class_t::*getHorizontalAngle_function_type )(  ) const;
            
            vector3di_exposer.def( 
                "getHorizontalAngle"
                , getHorizontalAngle_function_type( &::irr::core::vector3d< int >::getHorizontalAngle ) );
        
        }
        { //::irr::core::vector3d< int >::getInterpolated
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef ::irr::core::vector3d< int > ( exported_class_t::*getInterpolated_function_type )( ::irr::core::vector3d< int > const &,::irr::f64 ) const;
            
            vector3di_exposer.def( 
                "getInterpolated"
                , getInterpolated_function_type( &::irr::core::vector3d< int >::getInterpolated )
                , ( bp::arg("other"), bp::arg("d") ) );
        
        }
        { //::irr::core::vector3d< int >::getInterpolated_quadratic
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef ::irr::core::vector3d< int > ( exported_class_t::*getInterpolated_quadratic_function_type )( ::irr::core::vector3d< int > const &,::irr::core::vector3d< int > const &,::irr::f64 ) const;
            
            vector3di_exposer.def( 
                "getInterpolated_quadratic"
                , getInterpolated_quadratic_function_type( &::irr::core::vector3d< int >::getInterpolated_quadratic )
                , ( bp::arg("v2"), bp::arg("v3"), bp::arg("d") ) );
        
        }
        { //::irr::core::vector3d< int >::getLength
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef int ( exported_class_t::*getLength_function_type )(  ) const;
            
            vector3di_exposer.def( 
                "getLength"
                , getLength_function_type( &::irr::core::vector3d< int >::getLength ) );
        
        }
        { //::irr::core::vector3d< int >::getLengthSQ
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef int ( exported_class_t::*getLengthSQ_function_type )(  ) const;
            
            vector3di_exposer.def( 
                "getLengthSQ"
                , getLengthSQ_function_type( &::irr::core::vector3d< int >::getLengthSQ ) );
        
        }
        { //::irr::core::vector3d< int >::getSphericalCoordinateAngles
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef ::irr::core::vector3d< int > ( exported_class_t::*getSphericalCoordinateAngles_function_type )(  ) ;
            
            vector3di_exposer.def( 
                "getSphericalCoordinateAngles"
                , getSphericalCoordinateAngles_function_type( &::irr::core::vector3d< int >::getSphericalCoordinateAngles ) );
        
        }
        { //::irr::core::vector3d< int >::interpolate
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef ::irr::core::vector3d< int > & ( exported_class_t::*interpolate_function_type )( ::irr::core::vector3d< int > const &,::irr::core::vector3d< int > const &,::irr::f64 ) ;
            
            vector3di_exposer.def( 
                "interpolate"
                , interpolate_function_type( &::irr::core::vector3d< int >::interpolate )
                , ( bp::arg("a"), bp::arg("b"), bp::arg("d") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector3d< int >::invert
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef ::irr::core::vector3d< int > & ( exported_class_t::*invert_function_type )(  ) ;
            
            vector3di_exposer.def( 
                "invert"
                , invert_function_type( &::irr::core::vector3d< int >::invert )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector3d< int >::isBetweenPoints
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef bool ( exported_class_t::*isBetweenPoints_function_type )( ::irr::core::vector3d< int > const &,::irr::core::vector3d< int > const & ) const;
            
            vector3di_exposer.def( 
                "isBetweenPoints"
                , isBetweenPoints_function_type( &::irr::core::vector3d< int >::isBetweenPoints )
                , ( bp::arg("begin"), bp::arg("end") ) );
        
        }
        { //::irr::core::vector3d< int >::normalize
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef ::irr::core::vector3d< int > & ( exported_class_t::*normalize_function_type )(  ) ;
            
            vector3di_exposer.def( 
                "normalize"
                , normalize_function_type( &::irr::core::vector3d< int >::normalize )
                    /* undefined call policies */ );
        
        }
        vector3di_exposer.def( bp::self != bp::self );
        vector3di_exposer.def( bp::self * bp::self );
        vector3di_exposer.def( bp::self * bp::other< int >() );
        vector3di_exposer.def( bp::self *= bp::self );
        vector3di_exposer.def( bp::self *= bp::other< int >() );
        vector3di_exposer.def( bp::self + bp::self );
        vector3di_exposer.def( bp::self + bp::other< int >() );
        vector3di_exposer.def( bp::self += bp::self );
        vector3di_exposer.def( bp::self += bp::other< int >() );
        vector3di_exposer.def( -bp::self );
        vector3di_exposer.def( bp::self - bp::self );
        vector3di_exposer.def( bp::self - bp::other< int >() );
        vector3di_exposer.def( bp::self -= bp::self );
        vector3di_exposer.def( bp::self -= bp::other< int >() );
        vector3di_exposer.def( bp::self / bp::self );
        vector3di_exposer.def( bp::self / bp::other< irr::s32 >() );
        vector3di_exposer.def( bp::self /= bp::self );
        vector3di_exposer.def( bp::self /= bp::other< irr::s32 >() );
        vector3di_exposer.def( bp::self < bp::self );
        vector3di_exposer.def( bp::self <= bp::self );
        { //::irr::core::vector3d< int >::operator=
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef ::irr::core::vector3d< int > & ( exported_class_t::*assign_function_type )( ::irr::core::vector3d< int > const & ) ;
            
            vector3di_exposer.def( 
                "assign"
                , assign_function_type( &::irr::core::vector3d< int >::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        vector3di_exposer.def( bp::self == bp::self );
        vector3di_exposer.def( bp::self > bp::self );
        vector3di_exposer.def( bp::self >= bp::self );
        { //::irr::core::vector3d< int >::rotateXYBy
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef void ( exported_class_t::*rotateXYBy_function_type )( ::irr::f64,::irr::core::vector3d< int > const & ) ;
            
            vector3di_exposer.def( 
                "rotateXYBy"
                , rotateXYBy_function_type( &::irr::core::vector3d< int >::rotateXYBy )
                , ( bp::arg("degrees"), bp::arg("center")=irr::core::vector3d<T>() ) );
        
        }
        { //::irr::core::vector3d< int >::rotateXZBy
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef void ( exported_class_t::*rotateXZBy_function_type )( ::irr::f64,::irr::core::vector3d< int > const & ) ;
            
            vector3di_exposer.def( 
                "rotateXZBy"
                , rotateXZBy_function_type( &::irr::core::vector3d< int >::rotateXZBy )
                , ( bp::arg("degrees"), bp::arg("center")=irr::core::vector3d<T>() ) );
        
        }
        { //::irr::core::vector3d< int >::rotateYZBy
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef void ( exported_class_t::*rotateYZBy_function_type )( ::irr::f64,::irr::core::vector3d< int > const & ) ;
            
            vector3di_exposer.def( 
                "rotateYZBy"
                , rotateYZBy_function_type( &::irr::core::vector3d< int >::rotateYZBy )
                , ( bp::arg("degrees"), bp::arg("center")=irr::core::vector3d<T>() ) );
        
        }
        { //::irr::core::vector3d< int >::rotationToDirection
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef ::irr::core::vector3d< int > ( exported_class_t::*rotationToDirection_function_type )( ::irr::core::vector3d< int > const & ) const;
            
            vector3di_exposer.def( 
                "rotationToDirection"
                , rotationToDirection_function_type( &::irr::core::vector3d< int >::rotationToDirection )
                , ( bp::arg("forwards")=irr::core::vector3d<T>(0, 0, 1) ) );
        
        }
        { //::irr::core::vector3d< int >::set
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef ::irr::core::vector3d< int > & ( exported_class_t::*set_function_type )( int const,int const,int const ) ;
            
            vector3di_exposer.def( 
                "set"
                , set_function_type( &::irr::core::vector3d< int >::set )
                , ( bp::arg("nx"), bp::arg("ny"), bp::arg("nz") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector3d< int >::set
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef ::irr::core::vector3d< int > & ( exported_class_t::*set_function_type )( ::irr::core::vector3d< int > const & ) ;
            
            vector3di_exposer.def( 
                "set"
                , set_function_type( &::irr::core::vector3d< int >::set )
                , ( bp::arg("p") )
                    /* undefined call policies */ );
        
        }
        { //::irr::core::vector3d< int >::setLength
        
            typedef irr::core::vector3d< int > exported_class_t;
            typedef ::irr::core::vector3d< int > & ( exported_class_t::*setLength_function_type )( int ) ;
            
            vector3di_exposer.def( 
                "setLength"
                , setLength_function_type( &::irr::core::vector3d< int >::setLength )
                , ( bp::arg("newlength") )
                    /* undefined call policies */ );
        
        }
        vector3di_exposer.def_readwrite( "X", &irr::core::vector3d< int >::X );
        vector3di_exposer.def_readwrite( "Y", &irr::core::vector3d< int >::Y );
        vector3di_exposer.def_readwrite( "Z", &irr::core::vector3d< int >::Z );
    }

    bp::class_< ICursorControl_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "ICursorControl" )    
        .def( 
            "getPosition"
            , bp::pure_virtual( (::irr::core::vector2d< int > const & ( ::irr::gui::ICursorControl::* )(  ) )(&::irr::gui::ICursorControl::getPosition) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRelativePosition"
            , bp::pure_virtual( (::irr::core::vector2d< float > ( ::irr::gui::ICursorControl::* )(  ) )(&::irr::gui::ICursorControl::getRelativePosition) ) )    
        .def( 
            "isVisible"
            , bp::pure_virtual( (bool ( ::irr::gui::ICursorControl::* )(  ) const)(&::irr::gui::ICursorControl::isVisible) ) )    
        .def( 
            "setPosition"
            , bp::pure_virtual( (void ( ::irr::gui::ICursorControl::* )( ::irr::core::vector2d< float > const & ) )(&::irr::gui::ICursorControl::setPosition) )
            , ( bp::arg("pos") ) )    
        .def( 
            "setPosition"
            , bp::pure_virtual( (void ( ::irr::gui::ICursorControl::* )( ::irr::f32,::irr::f32 ) )(&::irr::gui::ICursorControl::setPosition) )
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "setPosition"
            , bp::pure_virtual( (void ( ::irr::gui::ICursorControl::* )( ::irr::core::vector2d< int > const & ) )(&::irr::gui::ICursorControl::setPosition) )
            , ( bp::arg("pos") ) )    
        .def( 
            "setPosition"
            , bp::pure_virtual( (void ( ::irr::gui::ICursorControl::* )( ::irr::s32,::irr::s32 ) )(&::irr::gui::ICursorControl::setPosition) )
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "setReferenceRect"
            , bp::pure_virtual( (void ( ::irr::gui::ICursorControl::* )( ::irr::core::rect< int > * ) )(&::irr::gui::ICursorControl::setReferenceRect) )
            , ( bp::arg("rect")=bp::object() ) )    
        .def( 
            "setVisible"
            , bp::pure_virtual( (void ( ::irr::gui::ICursorControl::* )( bool ) )(&::irr::gui::ICursorControl::setVisible) )
            , ( bp::arg("visible") ) )    
        .def( 
            "setDebugName"
            , (void ( ICursorControl_wrapper::* )( ::irr::c8 const * ) )(&ICursorControl_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IGUIElement_wrapper, bp::bases< irr::io::IAttributeExchangingObject, irr::IEventReceiver > >( "IGUIElement", bp::init< irr::gui::EGUI_ELEMENT_TYPE, irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > const & >(( bp::arg("type"), bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUIElement_wrapper::* )( ::irr::SEvent const & ) )(&IGUIElement_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUIElement_wrapper::* )( ::irr::u32 ) )(&IGUIElement_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUIElement_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIElement_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUIElement_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIElement_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUIElement_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIElement_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUIElement_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUIElement_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUIElement_wrapper::* )(  ) )(&IGUIElement_wrapper::default_draw) )    
        .def( 
            "getAbsoluteClippingRect"
            , (::irr::core::rect< int > ( ::irr::gui::IGUIElement::* )(  ) const)( &::irr::gui::IGUIElement::getAbsoluteClippingRect ) )    
        .def( 
            "getAbsolutePosition"
            , (::irr::core::rect< int > ( ::irr::gui::IGUIElement::* )(  ) const)( &::irr::gui::IGUIElement::getAbsolutePosition ) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUIElement_wrapper::* )( ::irr::s32,bool ) const)(&IGUIElement_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getElementFromPoint"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) )( &::irr::gui::IGUIElement::getElementFromPoint )
            , ( bp::arg("point") )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUIElement_wrapper::* )(  ) const)(&IGUIElement_wrapper::default_getID) )    
        .def( 
            "getNextElement"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool,bool,::irr::gui::IGUIElement * &,::irr::gui::IGUIElement * &,bool ) const)( &::irr::gui::IGUIElement::getNextElement )
            , ( bp::arg("startOrder"), bp::arg("reverse"), bp::arg("group"), bp::arg("first"), bp::arg("closest"), bp::arg("includeInvisible")=(bool)(false) ) )    
        .def( 
            "getParent"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )(  ) const)( &::irr::gui::IGUIElement::getParent )
                /* undefined call policies */ )    
        .def( 
            "getRelativePosition"
            , (::irr::core::rect< int > ( ::irr::gui::IGUIElement::* )(  ) const)( &::irr::gui::IGUIElement::getRelativePosition ) )    
        .def( 
            "getTabGroup"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )(  ) )( &::irr::gui::IGUIElement::getTabGroup )
                /* undefined call policies */ )    
        .def( 
            "getTabOrder"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)( &::irr::gui::IGUIElement::getTabOrder ) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUIElement_wrapper::* )(  ) const)(&IGUIElement_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getType"
            , (::irr::gui::EGUI_ELEMENT_TYPE ( ::irr::gui::IGUIElement::* )(  ) const)( &::irr::gui::IGUIElement::getType ) )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUIElement_wrapper::* )(  ) const)(&IGUIElement_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUIElement_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUIElement_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUIElement_wrapper::* )(  ) const)(&IGUIElement_wrapper::default_isEnabled) )    
        .def( 
            "isMyChild"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) const)( &::irr::gui::IGUIElement::isMyChild )
            , ( bp::arg("child") ) )    
        .def( 
            "isNotClipped"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)( &::irr::gui::IGUIElement::isNotClipped ) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUIElement_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUIElement_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUIElement_wrapper::* )(  ) const)(&IGUIElement_wrapper::default_isSubElement) )    
        .def( 
            "isTabGroup"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)( &::irr::gui::IGUIElement::isTabGroup ) )    
        .def( 
            "isTabStop"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)( &::irr::gui::IGUIElement::isTabStop ) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUIElement_wrapper::* )(  ) const)(&IGUIElement_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUIElement_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUIElement_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUIElement_wrapper::* )( bool ) )(&IGUIElement_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUIElement_wrapper::* )(  ) )(&IGUIElement_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUIElement_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIElement_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUIElement_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUIElement_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setAlignment"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ALIGNMENT,::irr::gui::EGUI_ALIGNMENT,::irr::gui::EGUI_ALIGNMENT,::irr::gui::EGUI_ALIGNMENT ) )( &::irr::gui::IGUIElement::setAlignment )
            , ( bp::arg("left"), bp::arg("right"), bp::arg("top"), bp::arg("bottom") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUIElement_wrapper::* )( bool ) )(&IGUIElement_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUIElement_wrapper::* )( ::irr::s32 ) )(&IGUIElement_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setMaxSize"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::dimension2du ) )( &::irr::gui::IGUIElement::setMaxSize )
            , ( bp::arg("size") ) )    
        .def( 
            "setMinSize"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::dimension2du ) )( &::irr::gui::IGUIElement::setMinSize )
            , ( bp::arg("size") ) )    
        .def( 
            "setNotClipped"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )( &::irr::gui::IGUIElement::setNotClipped )
            , ( bp::arg("noClip") ) )    
        .def( 
            "setRelativePosition"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::rect< int > const & ) )( &::irr::gui::IGUIElement::setRelativePosition )
            , ( bp::arg("r") ) )    
        .def( 
            "setRelativePosition"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::position2di const & ) )( &::irr::gui::IGUIElement::setRelativePosition )
            , ( bp::arg("position") ) )    
        .def( 
            "setRelativePositionProportional"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::rect< float > const & ) )( &::irr::gui::IGUIElement::setRelativePositionProportional )
            , ( bp::arg("r") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUIElement_wrapper::* )( bool ) )(&IGUIElement_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setTabGroup"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )( &::irr::gui::IGUIElement::setTabGroup )
            , ( bp::arg("isGroup") ) )    
        .def( 
            "setTabOrder"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )( &::irr::gui::IGUIElement::setTabOrder )
            , ( bp::arg("index") ) )    
        .def( 
            "setTabStop"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )( &::irr::gui::IGUIElement::setTabStop )
            , ( bp::arg("enable") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUIElement_wrapper::* )( wchar_t const * ) )(&IGUIElement_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUIElement_wrapper::* )( wchar_t const * ) )(&IGUIElement_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUIElement_wrapper::* )( bool ) )(&IGUIElement_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUIElement_wrapper::* )(  ) )(&IGUIElement_wrapper::default_updateAbsolutePosition) )    
        .def( 
            "setDebugName"
            , (void ( IGUIElement_wrapper::* )( ::irr::c8 const * ) )(&IGUIElement_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IGUIFont_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IGUIFont" )    
        .def( 
            "draw"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIFont::* )( ::irr::core::stringw const &,::irr::core::rect< int > const &,::irr::video::SColor,bool,bool,::irr::core::rect< int > const * ) )(&::irr::gui::IGUIFont::draw) )
            , ( bp::arg("text"), bp::arg("position"), bp::arg("color"), bp::arg("hcenter")=(bool)(false), bp::arg("vcenter")=(bool)(false), bp::arg("clip")=bp::object() ) )    
        .def( 
            "getCharacterFromPos"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIFont::* )( wchar_t const *,::irr::s32 ) const)(&::irr::gui::IGUIFont::getCharacterFromPos) )
            , ( bp::arg("text"), bp::arg("pixel_x") ) )    
        .def( 
            "getDimension"
            , bp::pure_virtual( (::irr::core::dimension2d< unsigned int > ( ::irr::gui::IGUIFont::* )( wchar_t const * ) const)(&::irr::gui::IGUIFont::getDimension) )
            , ( bp::arg("text") ) )    
        .def( 
            "getKerningHeight"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIFont::* )(  ) const)(&::irr::gui::IGUIFont::getKerningHeight) ) )    
        .def( 
            "getKerningWidth"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIFont::* )( wchar_t const *,wchar_t const * ) const)(&::irr::gui::IGUIFont::getKerningWidth) )
            , ( bp::arg("thisLetter")=bp::object(), bp::arg("previousLetter")=bp::object() ) )    
        .def( 
            "getType"
            , (::irr::gui::EGUI_FONT_TYPE ( ::irr::gui::IGUIFont::* )(  ) const)(&::irr::gui::IGUIFont::getType)
            , (::irr::gui::EGUI_FONT_TYPE ( IGUIFont_wrapper::* )(  ) const)(&IGUIFont_wrapper::default_getType) )    
        .def( 
            "setInvisibleCharacters"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIFont::* )( wchar_t const * ) )(&::irr::gui::IGUIFont::setInvisibleCharacters) )
            , ( bp::arg("s") ) )    
        .def( 
            "setKerningHeight"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIFont::* )( ::irr::s32 ) )(&::irr::gui::IGUIFont::setKerningHeight) )
            , ( bp::arg("kerning") ) )    
        .def( 
            "setKerningWidth"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIFont::* )( ::irr::s32 ) )(&::irr::gui::IGUIFont::setKerningWidth) )
            , ( bp::arg("kerning") ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIFont_wrapper::* )( ::irr::c8 const * ) )(&IGUIFont_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IGUISpriteBank_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IGUISpriteBank" )    
        .def( 
            "addTexture"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISpriteBank::* )( ::irr::video::ITexture * ) )(&::irr::gui::IGUISpriteBank::addTexture) )
            , ( bp::arg("texture") ) )    
        .def( 
            "addTextureAsSprite"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUISpriteBank::* )( ::irr::video::ITexture * ) )(&::irr::gui::IGUISpriteBank::addTextureAsSprite) )
            , ( bp::arg("texture") ) )    
        .def( 
            "clear"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISpriteBank::* )(  ) )(&::irr::gui::IGUISpriteBank::clear) ) )    
        .def( 
            "draw2DSprite"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISpriteBank::* )( ::irr::u32,::irr::core::position2di const &,::irr::core::rect< int > const *,::irr::video::SColor const &,::irr::u32,::irr::u32,bool,bool ) )(&::irr::gui::IGUISpriteBank::draw2DSprite) )
            , ( bp::arg("index"), bp::arg("pos"), bp::arg("clip")=bp::object(), bp::arg("color")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("starttime")=(::irr::u32)(0), bp::arg("currenttime")=(::irr::u32)(0), bp::arg("loop")=(bool)(true), bp::arg("center")=(bool)(false) ) )    
        .def( 
            "draw2DSpriteBatch"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISpriteBank::* )( ::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > const &,::irr::core::array< irr::core::vector2d< int >, irr::core::irrAllocator< irr::core::vector2d< int > > > const &,::irr::core::rect< int > const *,::irr::video::SColor const &,::irr::u32,::irr::u32,bool,bool ) )(&::irr::gui::IGUISpriteBank::draw2DSpriteBatch) )
            , ( bp::arg("indices"), bp::arg("pos"), bp::arg("clip")=bp::object(), bp::arg("color")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("starttime")=(::irr::u32)(0), bp::arg("currenttime")=(::irr::u32)(0), bp::arg("loop")=(bool)(true), bp::arg("center")=(bool)(false) ) )    
        .def( 
            "getPositions"
            , bp::pure_virtual( (::irr::core::array< irr::core::rect< int >, irr::core::irrAllocator< irr::core::rect< int > > > & ( ::irr::gui::IGUISpriteBank::* )(  ) )(&::irr::gui::IGUISpriteBank::getPositions) )
                /* undefined call policies */ )    
        .def( 
            "getSprites"
            , bp::pure_virtual( (::irr::core::array< irr::gui::SGUISprite, irr::core::irrAllocator< irr::gui::SGUISprite > > & ( ::irr::gui::IGUISpriteBank::* )(  ) )(&::irr::gui::IGUISpriteBank::getSprites) )
                /* undefined call policies */ )    
        .def( 
            "getTexture"
            , bp::pure_virtual( (::irr::video::ITexture * ( ::irr::gui::IGUISpriteBank::* )( ::irr::u32 ) const)(&::irr::gui::IGUISpriteBank::getTexture) )
            , ( bp::arg("index") )
                /* undefined call policies */ )    
        .def( 
            "getTextureCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUISpriteBank::* )(  ) const)(&::irr::gui::IGUISpriteBank::getTextureCount) ) )    
        .def( 
            "setTexture"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISpriteBank::* )( ::irr::u32,::irr::video::ITexture * ) )(&::irr::gui::IGUISpriteBank::setTexture) )
            , ( bp::arg("index"), bp::arg("texture") ) )    
        .def( 
            "setDebugName"
            , (void ( IGUISpriteBank_wrapper::* )( ::irr::c8 const * ) )(&IGUISpriteBank_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< ITexture_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "ITexture", bp::init< irr::io::path const & >(( bp::arg("name") )) )    
        .def( 
            "getColorFormat"
            , bp::pure_virtual( (::irr::video::ECOLOR_FORMAT ( ::irr::video::ITexture::* )(  ) const)(&::irr::video::ITexture::getColorFormat) ) )    
        .def( 
            "getDriverType"
            , bp::pure_virtual( (::irr::video::E_DRIVER_TYPE ( ::irr::video::ITexture::* )(  ) const)(&::irr::video::ITexture::getDriverType) ) )    
        .def( 
            "getName"
            , (::irr::io::SNamedPath const & ( ::irr::video::ITexture::* )(  ) const)( &::irr::video::ITexture::getName )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getOriginalSize"
            , bp::pure_virtual( (::irr::core::dimension2d< unsigned int > const & ( ::irr::video::ITexture::* )(  ) const)(&::irr::video::ITexture::getOriginalSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getPitch"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::ITexture::* )(  ) const)(&::irr::video::ITexture::getPitch) ) )    
        .def( 
            "getSize"
            , bp::pure_virtual( (::irr::core::dimension2d< unsigned int > const & ( ::irr::video::ITexture::* )(  ) const)(&::irr::video::ITexture::getSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTextureFormatFromFlags"
            , (::irr::video::E_TEXTURE_CREATION_FLAG ( ITexture_wrapper::* )( ::irr::u32 ) )(&ITexture_wrapper::getTextureFormatFromFlags)
            , ( bp::arg("flags") ) )    
        .def( 
            "hasAlpha"
            , (bool ( ::irr::video::ITexture::* )(  ) const)(&::irr::video::ITexture::hasAlpha)
            , (bool ( ITexture_wrapper::* )(  ) const)(&ITexture_wrapper::default_hasAlpha) )    
        .def( 
            "hasMipMaps"
            , (bool ( ::irr::video::ITexture::* )(  ) const)(&::irr::video::ITexture::hasMipMaps)
            , (bool ( ITexture_wrapper::* )(  ) const)(&ITexture_wrapper::default_hasMipMaps) )    
        .def( 
            "isRenderTarget"
            , (bool ( ::irr::video::ITexture::* )(  ) const)(&::irr::video::ITexture::isRenderTarget)
            , (bool ( ITexture_wrapper::* )(  ) const)(&ITexture_wrapper::default_isRenderTarget) )    
        .def( 
            "lock"
            , bp::pure_virtual( (void * ( ::irr::video::ITexture::* )( bool,::irr::u32 ) )(&::irr::video::ITexture::lock) )
            , ( bp::arg("readOnly")=(bool)(false), bp::arg("mipmapLevel")=(::irr::u32)(0) )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "regenerateMipMapLevels"
            , bp::pure_virtual( (void ( ::irr::video::ITexture::* )( void * ) )(&::irr::video::ITexture::regenerateMipMapLevels) )
            , ( bp::arg("mipmapData")=bp::object() ) )    
        .def( 
            "unlock"
            , bp::pure_virtual( (void ( ::irr::video::ITexture::* )(  ) )(&::irr::video::ITexture::unlock) ) )    
        .def( 
            "setDebugName"
            , (void ( ITexture_wrapper::* )( ::irr::c8 const * ) )(&ITexture_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IGUIButton_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUIButton", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "isAlphaChannelUsed"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIButton::* )(  ) const)(&::irr::gui::IGUIButton::isAlphaChannelUsed) ) )    
        .def( 
            "isDrawingBorder"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIButton::* )(  ) const)(&::irr::gui::IGUIButton::isDrawingBorder) ) )    
        .def( 
            "isPressed"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIButton::* )(  ) const)(&::irr::gui::IGUIButton::isPressed) ) )    
        .def( 
            "isPushButton"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIButton::* )(  ) const)(&::irr::gui::IGUIButton::isPushButton) ) )    
        .def( 
            "isScalingImage"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIButton::* )(  ) const)(&::irr::gui::IGUIButton::isScalingImage) ) )    
        .def( 
            "setDrawBorder"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( bool ) )(&::irr::gui::IGUIButton::setDrawBorder) )
            , ( bp::arg("border")=(bool)(true) ) )    
        .def( 
            "setImage"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( ::irr::video::ITexture * ) )(&::irr::gui::IGUIButton::setImage) )
            , ( bp::arg("image")=bp::object() ) )    
        .def( 
            "setImage"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( ::irr::video::ITexture *,::irr::core::rect< int > const & ) )(&::irr::gui::IGUIButton::setImage) )
            , ( bp::arg("image"), bp::arg("pos") ) )    
        .def( 
            "setIsPushButton"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( bool ) )(&::irr::gui::IGUIButton::setIsPushButton) )
            , ( bp::arg("isPushButton")=(bool)(true) ) )    
        .def( 
            "setOverrideFont"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( ::irr::gui::IGUIFont * ) )(&::irr::gui::IGUIButton::setOverrideFont) )
            , ( bp::arg("font")=bp::object() ) )    
        .def( 
            "setPressed"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( bool ) )(&::irr::gui::IGUIButton::setPressed) )
            , ( bp::arg("pressed")=(bool)(true) ) )    
        .def( 
            "setPressedImage"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( ::irr::video::ITexture * ) )(&::irr::gui::IGUIButton::setPressedImage) )
            , ( bp::arg("image")=bp::object() ) )    
        .def( 
            "setPressedImage"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( ::irr::video::ITexture *,::irr::core::rect< int > const & ) )(&::irr::gui::IGUIButton::setPressedImage) )
            , ( bp::arg("image"), bp::arg("pos") ) )    
        .def( 
            "setScaleImage"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( bool ) )(&::irr::gui::IGUIButton::setScaleImage) )
            , ( bp::arg("scaleImage")=(bool)(true) ) )    
        .def( 
            "setSprite"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( ::irr::gui::EGUI_BUTTON_STATE,::irr::s32,::irr::video::SColor,bool ) )(&::irr::gui::IGUIButton::setSprite) )
            , ( bp::arg("state"), bp::arg("index"), bp::arg("color")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("loop")=(bool)(false) ) )    
        .def( 
            "setSpriteBank"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( ::irr::gui::IGUISpriteBank * ) )(&::irr::gui::IGUIButton::setSpriteBank) )
            , ( bp::arg("bank")=bp::object() ) )    
        .def( 
            "setUseAlphaChannel"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIButton::* )( bool ) )(&::irr::gui::IGUIButton::setUseAlphaChannel) )
            , ( bp::arg("useAlphaChannel")=(bool)(true) ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUIButton_wrapper::* )( ::irr::SEvent const & ) )(&IGUIButton_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUIButton_wrapper::* )( ::irr::u32 ) )(&IGUIButton_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUIButton_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIButton_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUIButton_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIButton_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUIButton_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIButton_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUIButton_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUIButton_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUIButton_wrapper::* )(  ) )(&IGUIButton_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUIButton_wrapper::* )( ::irr::s32,bool ) const)(&IGUIButton_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUIButton_wrapper::* )(  ) const)(&IGUIButton_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUIButton_wrapper::* )(  ) const)(&IGUIButton_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUIButton_wrapper::* )(  ) const)(&IGUIButton_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUIButton_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUIButton_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUIButton_wrapper::* )(  ) const)(&IGUIButton_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUIButton_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUIButton_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUIButton_wrapper::* )(  ) const)(&IGUIButton_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUIButton_wrapper::* )(  ) const)(&IGUIButton_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUIButton_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUIButton_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUIButton_wrapper::* )( bool ) )(&IGUIButton_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUIButton_wrapper::* )(  ) )(&IGUIButton_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUIButton_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIButton_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUIButton_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUIButton_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIButton_wrapper::* )( ::irr::c8 const * ) )(&IGUIButton_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUIButton_wrapper::* )( bool ) )(&IGUIButton_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUIButton_wrapper::* )( ::irr::s32 ) )(&IGUIButton_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUIButton_wrapper::* )( bool ) )(&IGUIButton_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUIButton_wrapper::* )( wchar_t const * ) )(&IGUIButton_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUIButton_wrapper::* )( wchar_t const * ) )(&IGUIButton_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUIButton_wrapper::* )( bool ) )(&IGUIButton_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUIButton_wrapper::* )(  ) )(&IGUIButton_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUICheckBox_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUICheckBox", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "isChecked"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUICheckBox::* )(  ) const)(&::irr::gui::IGUICheckBox::isChecked) ) )    
        .def( 
            "setChecked"
            , bp::pure_virtual( (void ( ::irr::gui::IGUICheckBox::* )( bool ) )(&::irr::gui::IGUICheckBox::setChecked) )
            , ( bp::arg("checked") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUICheckBox_wrapper::* )( ::irr::SEvent const & ) )(&IGUICheckBox_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUICheckBox_wrapper::* )( ::irr::u32 ) )(&IGUICheckBox_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUICheckBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUICheckBox_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUICheckBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUICheckBox_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUICheckBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUICheckBox_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUICheckBox_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUICheckBox_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUICheckBox_wrapper::* )(  ) )(&IGUICheckBox_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUICheckBox_wrapper::* )( ::irr::s32,bool ) const)(&IGUICheckBox_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUICheckBox_wrapper::* )(  ) const)(&IGUICheckBox_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUICheckBox_wrapper::* )(  ) const)(&IGUICheckBox_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUICheckBox_wrapper::* )(  ) const)(&IGUICheckBox_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUICheckBox_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUICheckBox_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUICheckBox_wrapper::* )(  ) const)(&IGUICheckBox_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUICheckBox_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUICheckBox_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUICheckBox_wrapper::* )(  ) const)(&IGUICheckBox_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUICheckBox_wrapper::* )(  ) const)(&IGUICheckBox_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUICheckBox_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUICheckBox_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUICheckBox_wrapper::* )( bool ) )(&IGUICheckBox_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUICheckBox_wrapper::* )(  ) )(&IGUICheckBox_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUICheckBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUICheckBox_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUICheckBox_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUICheckBox_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUICheckBox_wrapper::* )( ::irr::c8 const * ) )(&IGUICheckBox_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUICheckBox_wrapper::* )( bool ) )(&IGUICheckBox_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUICheckBox_wrapper::* )( ::irr::s32 ) )(&IGUICheckBox_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUICheckBox_wrapper::* )( bool ) )(&IGUICheckBox_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUICheckBox_wrapper::* )( wchar_t const * ) )(&IGUICheckBox_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUICheckBox_wrapper::* )( wchar_t const * ) )(&IGUICheckBox_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUICheckBox_wrapper::* )( bool ) )(&IGUICheckBox_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUICheckBox_wrapper::* )(  ) )(&IGUICheckBox_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUIColorSelectDialog_wrapper, bp::bases< irr::gui::IGUIElement > >( "IGUIColorSelectDialog", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUIColorSelectDialog_wrapper::* )( ::irr::SEvent const & ) )(&IGUIColorSelectDialog_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUIColorSelectDialog_wrapper::* )( ::irr::u32 ) )(&IGUIColorSelectDialog_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUIColorSelectDialog_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIColorSelectDialog_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUIColorSelectDialog_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIColorSelectDialog_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUIColorSelectDialog_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIColorSelectDialog_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUIColorSelectDialog_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUIColorSelectDialog_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUIColorSelectDialog_wrapper::* )(  ) )(&IGUIColorSelectDialog_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUIColorSelectDialog_wrapper::* )( ::irr::s32,bool ) const)(&IGUIColorSelectDialog_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUIColorSelectDialog_wrapper::* )(  ) const)(&IGUIColorSelectDialog_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUIColorSelectDialog_wrapper::* )(  ) const)(&IGUIColorSelectDialog_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUIColorSelectDialog_wrapper::* )(  ) const)(&IGUIColorSelectDialog_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUIColorSelectDialog_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUIColorSelectDialog_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUIColorSelectDialog_wrapper::* )(  ) const)(&IGUIColorSelectDialog_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUIColorSelectDialog_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUIColorSelectDialog_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUIColorSelectDialog_wrapper::* )(  ) const)(&IGUIColorSelectDialog_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUIColorSelectDialog_wrapper::* )(  ) const)(&IGUIColorSelectDialog_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUIColorSelectDialog_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUIColorSelectDialog_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUIColorSelectDialog_wrapper::* )( bool ) )(&IGUIColorSelectDialog_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUIColorSelectDialog_wrapper::* )(  ) )(&IGUIColorSelectDialog_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUIColorSelectDialog_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIColorSelectDialog_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUIColorSelectDialog_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUIColorSelectDialog_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIColorSelectDialog_wrapper::* )( ::irr::c8 const * ) )(&IGUIColorSelectDialog_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUIColorSelectDialog_wrapper::* )( bool ) )(&IGUIColorSelectDialog_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUIColorSelectDialog_wrapper::* )( ::irr::s32 ) )(&IGUIColorSelectDialog_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUIColorSelectDialog_wrapper::* )( bool ) )(&IGUIColorSelectDialog_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUIColorSelectDialog_wrapper::* )( wchar_t const * ) )(&IGUIColorSelectDialog_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUIColorSelectDialog_wrapper::* )( wchar_t const * ) )(&IGUIColorSelectDialog_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUIColorSelectDialog_wrapper::* )( bool ) )(&IGUIColorSelectDialog_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUIColorSelectDialog_wrapper::* )(  ) )(&IGUIColorSelectDialog_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUIComboBox_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUIComboBox", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "addItem"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUIComboBox::* )( wchar_t const *,::irr::u32 ) )(&::irr::gui::IGUIComboBox::addItem) )
            , ( bp::arg("text"), bp::arg("data")=(::irr::u32)(0) ) )    
        .def( 
            "clear"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIComboBox::* )(  ) )(&::irr::gui::IGUIComboBox::clear) ) )    
        .def( 
            "getIndexForItemData"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIComboBox::* )( ::irr::u32 ) const)(&::irr::gui::IGUIComboBox::getIndexForItemData) )
            , ( bp::arg("data") ) )    
        .def( 
            "getItem"
            , bp::pure_virtual( (wchar_t const * ( ::irr::gui::IGUIComboBox::* )( ::irr::u32 ) const)(&::irr::gui::IGUIComboBox::getItem) )
            , ( bp::arg("idx") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getItemCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUIComboBox::* )(  ) const)(&::irr::gui::IGUIComboBox::getItemCount) ) )    
        .def( 
            "getItemData"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUIComboBox::* )( ::irr::u32 ) const)(&::irr::gui::IGUIComboBox::getItemData) )
            , ( bp::arg("idx") ) )    
        .def( 
            "getSelected"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIComboBox::* )(  ) const)(&::irr::gui::IGUIComboBox::getSelected) ) )    
        .def( 
            "removeItem"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIComboBox::* )( ::irr::u32 ) )(&::irr::gui::IGUIComboBox::removeItem) )
            , ( bp::arg("idx") ) )    
        .def( 
            "setSelected"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIComboBox::* )( ::irr::s32 ) )(&::irr::gui::IGUIComboBox::setSelected) )
            , ( bp::arg("idx") ) )    
        .def( 
            "setTextAlignment"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIComboBox::* )( ::irr::gui::EGUI_ALIGNMENT,::irr::gui::EGUI_ALIGNMENT ) )(&::irr::gui::IGUIComboBox::setTextAlignment) )
            , ( bp::arg("horizontal"), bp::arg("vertical") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUIComboBox_wrapper::* )( ::irr::SEvent const & ) )(&IGUIComboBox_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUIComboBox_wrapper::* )( ::irr::u32 ) )(&IGUIComboBox_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUIComboBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIComboBox_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUIComboBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIComboBox_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUIComboBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIComboBox_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUIComboBox_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUIComboBox_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUIComboBox_wrapper::* )(  ) )(&IGUIComboBox_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUIComboBox_wrapper::* )( ::irr::s32,bool ) const)(&IGUIComboBox_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUIComboBox_wrapper::* )(  ) const)(&IGUIComboBox_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUIComboBox_wrapper::* )(  ) const)(&IGUIComboBox_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUIComboBox_wrapper::* )(  ) const)(&IGUIComboBox_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUIComboBox_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUIComboBox_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUIComboBox_wrapper::* )(  ) const)(&IGUIComboBox_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUIComboBox_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUIComboBox_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUIComboBox_wrapper::* )(  ) const)(&IGUIComboBox_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUIComboBox_wrapper::* )(  ) const)(&IGUIComboBox_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUIComboBox_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUIComboBox_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUIComboBox_wrapper::* )( bool ) )(&IGUIComboBox_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUIComboBox_wrapper::* )(  ) )(&IGUIComboBox_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUIComboBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIComboBox_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUIComboBox_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUIComboBox_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIComboBox_wrapper::* )( ::irr::c8 const * ) )(&IGUIComboBox_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUIComboBox_wrapper::* )( bool ) )(&IGUIComboBox_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUIComboBox_wrapper::* )( ::irr::s32 ) )(&IGUIComboBox_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUIComboBox_wrapper::* )( bool ) )(&IGUIComboBox_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUIComboBox_wrapper::* )( wchar_t const * ) )(&IGUIComboBox_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUIComboBox_wrapper::* )( wchar_t const * ) )(&IGUIComboBox_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUIComboBox_wrapper::* )( bool ) )(&IGUIComboBox_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUIComboBox_wrapper::* )(  ) )(&IGUIComboBox_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUIContextMenu_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUIContextMenu", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "addItem"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUIContextMenu::* )( wchar_t const *,::irr::s32,bool,bool,bool,bool ) )(&::irr::gui::IGUIContextMenu::addItem) )
            , ( bp::arg("text"), bp::arg("commandId")=(::irr::s32)(-0x00000000000000001), bp::arg("enabled")=(bool)(true), bp::arg("hasSubMenu")=(bool)(false), bp::arg("checked")=(bool)(false), bp::arg("autoChecking")=(bool)(false) ) )    
        .def( 
            "addSeparator"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIContextMenu::* )(  ) )(&::irr::gui::IGUIContextMenu::addSeparator) ) )    
        .def( 
            "findItemWithCommandId"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIContextMenu::* )( ::irr::s32,::irr::u32 ) const)(&::irr::gui::IGUIContextMenu::findItemWithCommandId) )
            , ( bp::arg("commandId"), bp::arg("idxStartSearch")=(::irr::u32)(0) ) )    
        .def( 
            "getCloseHandling"
            , bp::pure_virtual( (::irr::gui::ECONTEXT_MENU_CLOSE ( ::irr::gui::IGUIContextMenu::* )(  ) const)(&::irr::gui::IGUIContextMenu::getCloseHandling) ) )    
        .def( 
            "getItemAutoChecking"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIContextMenu::* )( ::irr::u32 ) const)(&::irr::gui::IGUIContextMenu::getItemAutoChecking) )
            , ( bp::arg("idx") ) )    
        .def( 
            "getItemCommandId"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIContextMenu::* )( ::irr::u32 ) const)(&::irr::gui::IGUIContextMenu::getItemCommandId) )
            , ( bp::arg("idx") ) )    
        .def( 
            "getItemCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUIContextMenu::* )(  ) const)(&::irr::gui::IGUIContextMenu::getItemCount) ) )    
        .def( 
            "getItemText"
            , bp::pure_virtual( (wchar_t const * ( ::irr::gui::IGUIContextMenu::* )( ::irr::u32 ) const)(&::irr::gui::IGUIContextMenu::getItemText) )
            , ( bp::arg("idx") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getSelectedItem"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIContextMenu::* )(  ) const)(&::irr::gui::IGUIContextMenu::getSelectedItem) ) )    
        .def( 
            "getSubMenu"
            , bp::pure_virtual( (::irr::gui::IGUIContextMenu * ( ::irr::gui::IGUIContextMenu::* )( ::irr::u32 ) const)(&::irr::gui::IGUIContextMenu::getSubMenu) )
            , ( bp::arg("idx") )
                /* undefined call policies */ )    
        .def( 
            "insertItem"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUIContextMenu::* )( ::irr::u32,wchar_t const *,::irr::s32,bool,bool,bool,bool ) )(&::irr::gui::IGUIContextMenu::insertItem) )
            , ( bp::arg("idx"), bp::arg("text"), bp::arg("commandId")=(::irr::s32)(-0x00000000000000001), bp::arg("enabled")=(bool)(true), bp::arg("hasSubMenu")=(bool)(false), bp::arg("checked")=(bool)(false), bp::arg("autoChecking")=(bool)(false) ) )    
        .def( 
            "isItemChecked"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIContextMenu::* )( ::irr::u32 ) const)(&::irr::gui::IGUIContextMenu::isItemChecked) )
            , ( bp::arg("idx") ) )    
        .def( 
            "isItemEnabled"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIContextMenu::* )( ::irr::u32 ) const)(&::irr::gui::IGUIContextMenu::isItemEnabled) )
            , ( bp::arg("idx") ) )    
        .def( 
            "removeAllItems"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIContextMenu::* )(  ) )(&::irr::gui::IGUIContextMenu::removeAllItems) ) )    
        .def( 
            "removeItem"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIContextMenu::* )( ::irr::u32 ) )(&::irr::gui::IGUIContextMenu::removeItem) )
            , ( bp::arg("idx") ) )    
        .def( 
            "setCloseHandling"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIContextMenu::* )( ::irr::gui::ECONTEXT_MENU_CLOSE ) )(&::irr::gui::IGUIContextMenu::setCloseHandling) )
            , ( bp::arg("onClose") ) )    
        .def( 
            "setEventParent"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIContextMenu::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIContextMenu::setEventParent) )
            , ( bp::arg("parent") ) )    
        .def( 
            "setItemAutoChecking"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIContextMenu::* )( ::irr::u32,bool ) )(&::irr::gui::IGUIContextMenu::setItemAutoChecking) )
            , ( bp::arg("idx"), bp::arg("autoChecking") ) )    
        .def( 
            "setItemChecked"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIContextMenu::* )( ::irr::u32,bool ) )(&::irr::gui::IGUIContextMenu::setItemChecked) )
            , ( bp::arg("idx"), bp::arg("enabled") ) )    
        .def( 
            "setItemCommandId"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIContextMenu::* )( ::irr::u32,::irr::s32 ) )(&::irr::gui::IGUIContextMenu::setItemCommandId) )
            , ( bp::arg("idx"), bp::arg("id") ) )    
        .def( 
            "setItemEnabled"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIContextMenu::* )( ::irr::u32,bool ) )(&::irr::gui::IGUIContextMenu::setItemEnabled) )
            , ( bp::arg("idx"), bp::arg("enabled") ) )    
        .def( 
            "setItemText"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIContextMenu::* )( ::irr::u32,wchar_t const * ) )(&::irr::gui::IGUIContextMenu::setItemText) )
            , ( bp::arg("idx"), bp::arg("text") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUIContextMenu_wrapper::* )( ::irr::SEvent const & ) )(&IGUIContextMenu_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUIContextMenu_wrapper::* )( ::irr::u32 ) )(&IGUIContextMenu_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUIContextMenu_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIContextMenu_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUIContextMenu_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIContextMenu_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUIContextMenu_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIContextMenu_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUIContextMenu_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUIContextMenu_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUIContextMenu_wrapper::* )(  ) )(&IGUIContextMenu_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUIContextMenu_wrapper::* )( ::irr::s32,bool ) const)(&IGUIContextMenu_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUIContextMenu_wrapper::* )(  ) const)(&IGUIContextMenu_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUIContextMenu_wrapper::* )(  ) const)(&IGUIContextMenu_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUIContextMenu_wrapper::* )(  ) const)(&IGUIContextMenu_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUIContextMenu_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUIContextMenu_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUIContextMenu_wrapper::* )(  ) const)(&IGUIContextMenu_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUIContextMenu_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUIContextMenu_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUIContextMenu_wrapper::* )(  ) const)(&IGUIContextMenu_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUIContextMenu_wrapper::* )(  ) const)(&IGUIContextMenu_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUIContextMenu_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUIContextMenu_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUIContextMenu_wrapper::* )( bool ) )(&IGUIContextMenu_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUIContextMenu_wrapper::* )(  ) )(&IGUIContextMenu_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUIContextMenu_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIContextMenu_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUIContextMenu_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUIContextMenu_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIContextMenu_wrapper::* )( ::irr::c8 const * ) )(&IGUIContextMenu_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUIContextMenu_wrapper::* )( bool ) )(&IGUIContextMenu_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUIContextMenu_wrapper::* )( ::irr::s32 ) )(&IGUIContextMenu_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUIContextMenu_wrapper::* )( bool ) )(&IGUIContextMenu_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUIContextMenu_wrapper::* )( wchar_t const * ) )(&IGUIContextMenu_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUIContextMenu_wrapper::* )( wchar_t const * ) )(&IGUIContextMenu_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUIContextMenu_wrapper::* )( bool ) )(&IGUIContextMenu_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUIContextMenu_wrapper::* )(  ) )(&IGUIContextMenu_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUIEditBox_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUIEditBox", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "enableOverrideColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEditBox::* )( bool ) )(&::irr::gui::IGUIEditBox::enableOverrideColor) )
            , ( bp::arg("enable") ) )    
        .def( 
            "getMax"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUIEditBox::* )(  ) const)(&::irr::gui::IGUIEditBox::getMax) ) )    
        .def( 
            "getTextDimension"
            , bp::pure_virtual( (::irr::core::dimension2du ( ::irr::gui::IGUIEditBox::* )(  ) )(&::irr::gui::IGUIEditBox::getTextDimension) ) )    
        .def( 
            "isAutoScrollEnabled"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIEditBox::* )(  ) const)(&::irr::gui::IGUIEditBox::isAutoScrollEnabled) ) )    
        .def( 
            "isMultiLineEnabled"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIEditBox::* )(  ) const)(&::irr::gui::IGUIEditBox::isMultiLineEnabled) ) )    
        .def( 
            "isPasswordBox"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIEditBox::* )(  ) const)(&::irr::gui::IGUIEditBox::isPasswordBox) ) )    
        .def( 
            "isWordWrapEnabled"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIEditBox::* )(  ) const)(&::irr::gui::IGUIEditBox::isWordWrapEnabled) ) )    
        .def( 
            "setAutoScroll"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEditBox::* )( bool ) )(&::irr::gui::IGUIEditBox::setAutoScroll) )
            , ( bp::arg("enable") ) )    
        .def( 
            "setDrawBorder"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEditBox::* )( bool ) )(&::irr::gui::IGUIEditBox::setDrawBorder) )
            , ( bp::arg("border") ) )    
        .def( 
            "setMax"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEditBox::* )( ::irr::u32 ) )(&::irr::gui::IGUIEditBox::setMax) )
            , ( bp::arg("max") ) )    
        .def( 
            "setMultiLine"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEditBox::* )( bool ) )(&::irr::gui::IGUIEditBox::setMultiLine) )
            , ( bp::arg("enable") ) )    
        .def( 
            "setOverrideColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEditBox::* )( ::irr::video::SColor ) )(&::irr::gui::IGUIEditBox::setOverrideColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setOverrideFont"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEditBox::* )( ::irr::gui::IGUIFont * ) )(&::irr::gui::IGUIEditBox::setOverrideFont) )
            , ( bp::arg("font")=bp::object() ) )    
        .def( 
            "setPasswordBox"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEditBox::* )( bool,wchar_t ) )(&::irr::gui::IGUIEditBox::setPasswordBox) )
            , ( bp::arg("passwordBox"), bp::arg("passwordChar")=(wchar_t)(42) ) )    
        .def( 
            "setTextAlignment"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEditBox::* )( ::irr::gui::EGUI_ALIGNMENT,::irr::gui::EGUI_ALIGNMENT ) )(&::irr::gui::IGUIEditBox::setTextAlignment) )
            , ( bp::arg("horizontal"), bp::arg("vertical") ) )    
        .def( 
            "setWordWrap"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEditBox::* )( bool ) )(&::irr::gui::IGUIEditBox::setWordWrap) )
            , ( bp::arg("enable") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUIEditBox_wrapper::* )( ::irr::SEvent const & ) )(&IGUIEditBox_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUIEditBox_wrapper::* )( ::irr::u32 ) )(&IGUIEditBox_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUIEditBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIEditBox_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUIEditBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIEditBox_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUIEditBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIEditBox_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUIEditBox_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUIEditBox_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUIEditBox_wrapper::* )(  ) )(&IGUIEditBox_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUIEditBox_wrapper::* )( ::irr::s32,bool ) const)(&IGUIEditBox_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUIEditBox_wrapper::* )(  ) const)(&IGUIEditBox_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUIEditBox_wrapper::* )(  ) const)(&IGUIEditBox_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUIEditBox_wrapper::* )(  ) const)(&IGUIEditBox_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUIEditBox_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUIEditBox_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUIEditBox_wrapper::* )(  ) const)(&IGUIEditBox_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUIEditBox_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUIEditBox_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUIEditBox_wrapper::* )(  ) const)(&IGUIEditBox_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUIEditBox_wrapper::* )(  ) const)(&IGUIEditBox_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUIEditBox_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUIEditBox_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUIEditBox_wrapper::* )( bool ) )(&IGUIEditBox_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUIEditBox_wrapper::* )(  ) )(&IGUIEditBox_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUIEditBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIEditBox_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUIEditBox_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUIEditBox_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIEditBox_wrapper::* )( ::irr::c8 const * ) )(&IGUIEditBox_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUIEditBox_wrapper::* )( bool ) )(&IGUIEditBox_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUIEditBox_wrapper::* )( ::irr::s32 ) )(&IGUIEditBox_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUIEditBox_wrapper::* )( bool ) )(&IGUIEditBox_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUIEditBox_wrapper::* )( wchar_t const * ) )(&IGUIEditBox_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUIEditBox_wrapper::* )( wchar_t const * ) )(&IGUIEditBox_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUIEditBox_wrapper::* )( bool ) )(&IGUIEditBox_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUIEditBox_wrapper::* )(  ) )(&IGUIEditBox_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUIElementFactory_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IGUIElementFactory" )    
        .def( 
            "addGUIElement"
            , bp::pure_virtual( (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElementFactory::* )( ::irr::gui::EGUI_ELEMENT_TYPE,::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElementFactory::addGUIElement) )
            , ( bp::arg("type"), bp::arg("parent")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "addGUIElement"
            , bp::pure_virtual( (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElementFactory::* )( ::irr::c8 const *,::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElementFactory::addGUIElement) )
            , ( bp::arg("typeName"), bp::arg("parent")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "getCreatableGUIElementTypeCount"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIElementFactory::* )(  ) const)(&::irr::gui::IGUIElementFactory::getCreatableGUIElementTypeCount) ) )    
        .def( 
            "getCreateableGUIElementType"
            , bp::pure_virtual( (::irr::gui::EGUI_ELEMENT_TYPE ( ::irr::gui::IGUIElementFactory::* )( ::irr::s32 ) const)(&::irr::gui::IGUIElementFactory::getCreateableGUIElementType) )
            , ( bp::arg("idx") ) )    
        .def( 
            "getCreateableGUIElementTypeName"
            , bp::pure_virtual( (::irr::c8 const * ( ::irr::gui::IGUIElementFactory::* )( ::irr::s32 ) const)(&::irr::gui::IGUIElementFactory::getCreateableGUIElementTypeName) )
            , ( bp::arg("idx") ) )    
        .def( 
            "getCreateableGUIElementTypeName"
            , bp::pure_virtual( (::irr::c8 const * ( ::irr::gui::IGUIElementFactory::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElementFactory::getCreateableGUIElementTypeName) )
            , ( bp::arg("type") ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIElementFactory_wrapper::* )( ::irr::c8 const * ) )(&IGUIElementFactory_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IGUIEnvironment_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IGUIEnvironment" )    
        .def( 
            "addButton"
            , bp::pure_virtual( (::irr::gui::IGUIButton * ( ::irr::gui::IGUIEnvironment::* )( ::irr::core::rect< int > const &,::irr::gui::IGUIElement *,::irr::s32,wchar_t const *,wchar_t const * ) )(&::irr::gui::IGUIEnvironment::addButton) )
            , ( bp::arg("rectangle"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("text")=bp::object(), bp::arg("tooltiptext")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "addCheckBox"
            , bp::pure_virtual( (::irr::gui::IGUICheckBox * ( ::irr::gui::IGUIEnvironment::* )( bool,::irr::core::rect< int > const &,::irr::gui::IGUIElement *,::irr::s32,wchar_t const * ) )(&::irr::gui::IGUIEnvironment::addCheckBox) )
            , ( bp::arg("checked"), bp::arg("rectangle"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("text")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "addColorSelectDialog"
            , bp::pure_virtual( (::irr::gui::IGUIColorSelectDialog * ( ::irr::gui::IGUIEnvironment::* )( wchar_t const *,bool,::irr::gui::IGUIElement *,::irr::s32 ) )(&::irr::gui::IGUIEnvironment::addColorSelectDialog) )
            , ( bp::arg("title")=bp::object(), bp::arg("modal")=(bool)(true), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addComboBox"
            , bp::pure_virtual( (::irr::gui::IGUIComboBox * ( ::irr::gui::IGUIEnvironment::* )( ::irr::core::rect< int > const &,::irr::gui::IGUIElement *,::irr::s32 ) )(&::irr::gui::IGUIEnvironment::addComboBox) )
            , ( bp::arg("rectangle"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addContextMenu"
            , bp::pure_virtual( (::irr::gui::IGUIContextMenu * ( ::irr::gui::IGUIEnvironment::* )( ::irr::core::rect< int > const &,::irr::gui::IGUIElement *,::irr::s32 ) )(&::irr::gui::IGUIEnvironment::addContextMenu) )
            , ( bp::arg("rectangle"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addEditBox"
            , bp::pure_virtual( (::irr::gui::IGUIEditBox * ( ::irr::gui::IGUIEnvironment::* )( wchar_t const *,::irr::core::rect< int > const &,bool,::irr::gui::IGUIElement *,::irr::s32 ) )(&::irr::gui::IGUIEnvironment::addEditBox) )
            , ( bp::arg("text"), bp::arg("rectangle"), bp::arg("border")=(bool)(true), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addEmptySpriteBank"
            , bp::pure_virtual( (::irr::gui::IGUISpriteBank * ( ::irr::gui::IGUIEnvironment::* )( ::irr::io::path const & ) )(&::irr::gui::IGUIEnvironment::addEmptySpriteBank) )
            , ( bp::arg("name") )
                /* undefined call policies */ )    
        .def( 
            "addFileOpenDialog"
            , bp::pure_virtual( (::irr::gui::IGUIFileOpenDialog * ( ::irr::gui::IGUIEnvironment::* )( wchar_t const *,bool,::irr::gui::IGUIElement *,::irr::s32 ) )(&::irr::gui::IGUIEnvironment::addFileOpenDialog) )
            , ( bp::arg("title")=bp::object(), bp::arg("modal")=(bool)(true), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addFont"
            , bp::pure_virtual( (::irr::gui::IGUIFont * ( ::irr::gui::IGUIEnvironment::* )( ::irr::io::path const &,::irr::gui::IGUIFont * ) )(&::irr::gui::IGUIEnvironment::addFont) )
            , ( bp::arg("name"), bp::arg("font") )
                /* undefined call policies */ )    
        .def( 
            "addGUIElement"
            , bp::pure_virtual( (::irr::gui::IGUIElement * ( ::irr::gui::IGUIEnvironment::* )( ::irr::c8 const *,::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIEnvironment::addGUIElement) )
            , ( bp::arg("elementName"), bp::arg("parent")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "addImage"
            , bp::pure_virtual( (::irr::gui::IGUIImage * ( ::irr::gui::IGUIEnvironment::* )( ::irr::video::ITexture *,::irr::core::vector2d< int >,bool,::irr::gui::IGUIElement *,::irr::s32,wchar_t const * ) )(&::irr::gui::IGUIEnvironment::addImage) )
            , ( bp::arg("image"), bp::arg("pos"), bp::arg("useAlphaChannel")=(bool)(true), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("text")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "addImage"
            , bp::pure_virtual( (::irr::gui::IGUIImage * ( ::irr::gui::IGUIEnvironment::* )( ::irr::core::rect< int > const &,::irr::gui::IGUIElement *,::irr::s32,wchar_t const * ) )(&::irr::gui::IGUIEnvironment::addImage) )
            , ( bp::arg("rectangle"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("text")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "addInOutFader"
            , bp::pure_virtual( (::irr::gui::IGUIInOutFader * ( ::irr::gui::IGUIEnvironment::* )( ::irr::core::rect< int > const *,::irr::gui::IGUIElement *,::irr::s32 ) )(&::irr::gui::IGUIEnvironment::addInOutFader) )
            , ( bp::arg("rectangle")=bp::object(), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addListBox"
            , bp::pure_virtual( (::irr::gui::IGUIListBox * ( ::irr::gui::IGUIEnvironment::* )( ::irr::core::rect< int > const &,::irr::gui::IGUIElement *,::irr::s32,bool ) )(&::irr::gui::IGUIEnvironment::addListBox) )
            , ( bp::arg("rectangle"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("drawBackground")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "addMenu"
            , bp::pure_virtual( (::irr::gui::IGUIContextMenu * ( ::irr::gui::IGUIEnvironment::* )( ::irr::gui::IGUIElement *,::irr::s32 ) )(&::irr::gui::IGUIEnvironment::addMenu) )
            , ( bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addMeshViewer"
            , bp::pure_virtual( (::irr::gui::IGUIMeshViewer * ( ::irr::gui::IGUIEnvironment::* )( ::irr::core::rect< int > const &,::irr::gui::IGUIElement *,::irr::s32,wchar_t const * ) )(&::irr::gui::IGUIEnvironment::addMeshViewer) )
            , ( bp::arg("rectangle"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("text")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "addMessageBox"
            , bp::pure_virtual( (::irr::gui::IGUIWindow * ( ::irr::gui::IGUIEnvironment::* )( wchar_t const *,wchar_t const *,bool,::irr::s32,::irr::gui::IGUIElement *,::irr::s32,::irr::video::ITexture * ) )(&::irr::gui::IGUIEnvironment::addMessageBox) )
            , ( bp::arg("caption"), bp::arg("text")=bp::object(), bp::arg("modal")=(bool)(true), bp::arg("flags")=(::irr::s32)(::irr::s32(::irr::gui::EMBF_OK)), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("image")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "addModalScreen"
            , bp::pure_virtual( (::irr::gui::IGUIElement * ( ::irr::gui::IGUIEnvironment::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIEnvironment::addModalScreen) )
            , ( bp::arg("parent") )
                /* undefined call policies */ )    
        .def( 
            "addScrollBar"
            , bp::pure_virtual( (::irr::gui::IGUIScrollBar * ( ::irr::gui::IGUIEnvironment::* )( bool,::irr::core::rect< int > const &,::irr::gui::IGUIElement *,::irr::s32 ) )(&::irr::gui::IGUIEnvironment::addScrollBar) )
            , ( bp::arg("horizontal"), bp::arg("rectangle"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addSpinBox"
            , bp::pure_virtual( (::irr::gui::IGUISpinBox * ( ::irr::gui::IGUIEnvironment::* )( wchar_t const *,::irr::core::rect< int > const &,bool,::irr::gui::IGUIElement *,::irr::s32 ) )(&::irr::gui::IGUIEnvironment::addSpinBox) )
            , ( bp::arg("text"), bp::arg("rectangle"), bp::arg("border")=(bool)(true), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addStaticText"
            , bp::pure_virtual( (::irr::gui::IGUIStaticText * ( ::irr::gui::IGUIEnvironment::* )( wchar_t const *,::irr::core::rect< int > const &,bool,bool,::irr::gui::IGUIElement *,::irr::s32,bool ) )(&::irr::gui::IGUIEnvironment::addStaticText) )
            , ( bp::arg("text"), bp::arg("rectangle"), bp::arg("border")=(bool)(false), bp::arg("wordWrap")=(bool)(true), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("fillBackground")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "addTab"
            , bp::pure_virtual( (::irr::gui::IGUITab * ( ::irr::gui::IGUIEnvironment::* )( ::irr::core::rect< int > const &,::irr::gui::IGUIElement *,::irr::s32 ) )(&::irr::gui::IGUIEnvironment::addTab) )
            , ( bp::arg("rectangle"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addTabControl"
            , bp::pure_virtual( (::irr::gui::IGUITabControl * ( ::irr::gui::IGUIEnvironment::* )( ::irr::core::rect< int > const &,::irr::gui::IGUIElement *,bool,bool,::irr::s32 ) )(&::irr::gui::IGUIEnvironment::addTabControl) )
            , ( bp::arg("rectangle"), bp::arg("parent")=bp::object(), bp::arg("fillbackground")=(bool)(false), bp::arg("border")=(bool)(true), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addTable"
            , bp::pure_virtual( (::irr::gui::IGUITable * ( ::irr::gui::IGUIEnvironment::* )( ::irr::core::rect< int > const &,::irr::gui::IGUIElement *,::irr::s32,bool ) )(&::irr::gui::IGUIEnvironment::addTable) )
            , ( bp::arg("rectangle"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("drawBackground")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "addToolBar"
            , bp::pure_virtual( (::irr::gui::IGUIToolBar * ( ::irr::gui::IGUIEnvironment::* )( ::irr::gui::IGUIElement *,::irr::s32 ) )(&::irr::gui::IGUIEnvironment::addToolBar) )
            , ( bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "addTreeView"
            , bp::pure_virtual( (::irr::gui::IGUITreeView * ( ::irr::gui::IGUIEnvironment::* )( ::irr::core::rect< int > const &,::irr::gui::IGUIElement *,::irr::s32,bool,bool,bool ) )(&::irr::gui::IGUIEnvironment::addTreeView) )
            , ( bp::arg("rectangle"), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("drawBackground")=(bool)(false), bp::arg("scrollBarVertical")=(bool)(true), bp::arg("scrollBarHorizontal")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "addWindow"
            , bp::pure_virtual( (::irr::gui::IGUIWindow * ( ::irr::gui::IGUIEnvironment::* )( ::irr::core::rect< int > const &,bool,wchar_t const *,::irr::gui::IGUIElement *,::irr::s32 ) )(&::irr::gui::IGUIEnvironment::addWindow) )
            , ( bp::arg("rectangle"), bp::arg("modal")=(bool)(false), bp::arg("text")=bp::object(), bp::arg("parent")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "clear"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEnvironment::* )(  ) )(&::irr::gui::IGUIEnvironment::clear) ) )    
        .def( 
            "createImageList"
            , bp::pure_virtual( (::irr::gui::IGUIImageList * ( ::irr::gui::IGUIEnvironment::* )( ::irr::video::ITexture *,::irr::core::dimension2d< int >,bool ) )(&::irr::gui::IGUIEnvironment::createImageList) )
            , ( bp::arg("texture"), bp::arg("imageSize"), bp::arg("useAlphaChannel") )
                /* undefined call policies */ )    
        .def( 
            "createSkin"
            , bp::pure_virtual( (::irr::gui::IGUISkin * ( ::irr::gui::IGUIEnvironment::* )( ::irr::gui::EGUI_SKIN_TYPE ) )(&::irr::gui::IGUIEnvironment::createSkin) )
            , ( bp::arg("type") )
                /* undefined call policies */ )    
        .def( 
            "deserializeAttributes"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEnvironment::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIEnvironment::deserializeAttributes) )
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "drawAll"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEnvironment::* )(  ) )(&::irr::gui::IGUIEnvironment::drawAll) ) )    
        .def( 
            "getBuiltInFont"
            , bp::pure_virtual( (::irr::gui::IGUIFont * ( ::irr::gui::IGUIEnvironment::* )(  ) const)(&::irr::gui::IGUIEnvironment::getBuiltInFont) )
                /* undefined call policies */ )    
        .def( 
            "getDefaultGUIElementFactory"
            , bp::pure_virtual( (::irr::gui::IGUIElementFactory * ( ::irr::gui::IGUIEnvironment::* )(  ) const)(&::irr::gui::IGUIEnvironment::getDefaultGUIElementFactory) )
                /* undefined call policies */ )    
        .def( 
            "getFileSystem"
            , bp::pure_virtual( (::irr::io::IFileSystem * ( ::irr::gui::IGUIEnvironment::* )(  ) const)(&::irr::gui::IGUIEnvironment::getFileSystem) )
                /* undefined call policies */ )    
        .def( 
            "getFocus"
            , bp::pure_virtual( (::irr::gui::IGUIElement * ( ::irr::gui::IGUIEnvironment::* )(  ) const)(&::irr::gui::IGUIEnvironment::getFocus) )
                /* undefined call policies */ )    
        .def( 
            "getFont"
            , bp::pure_virtual( (::irr::gui::IGUIFont * ( ::irr::gui::IGUIEnvironment::* )( ::irr::io::path const & ) )(&::irr::gui::IGUIEnvironment::getFont) )
            , ( bp::arg("filename") )
                /* undefined call policies */ )    
        .def( 
            "getGUIElementFactory"
            , bp::pure_virtual( (::irr::gui::IGUIElementFactory * ( ::irr::gui::IGUIEnvironment::* )( ::irr::u32 ) const)(&::irr::gui::IGUIEnvironment::getGUIElementFactory) )
            , ( bp::arg("index") )
                /* undefined call policies */ )    
        .def( 
            "getOSOperator"
            , bp::pure_virtual( (::irr::IOSOperator * ( ::irr::gui::IGUIEnvironment::* )(  ) const)(&::irr::gui::IGUIEnvironment::getOSOperator) )
                /* undefined call policies */ )    
        .def( 
            "getRegisteredGUIElementFactoryCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUIEnvironment::* )(  ) const)(&::irr::gui::IGUIEnvironment::getRegisteredGUIElementFactoryCount) ) )    
        .def( 
            "getRootGUIElement"
            , bp::pure_virtual( (::irr::gui::IGUIElement * ( ::irr::gui::IGUIEnvironment::* )(  ) )(&::irr::gui::IGUIEnvironment::getRootGUIElement) )
                /* undefined call policies */ )    
        .def( 
            "getSkin"
            , bp::pure_virtual( (::irr::gui::IGUISkin * ( ::irr::gui::IGUIEnvironment::* )(  ) const)(&::irr::gui::IGUIEnvironment::getSkin) )
                /* undefined call policies */ )    
        .def( 
            "getSpriteBank"
            , bp::pure_virtual( (::irr::gui::IGUISpriteBank * ( ::irr::gui::IGUIEnvironment::* )( ::irr::io::path const & ) )(&::irr::gui::IGUIEnvironment::getSpriteBank) )
            , ( bp::arg("filename") )
                /* undefined call policies */ )    
        .def( 
            "getVideoDriver"
            , bp::pure_virtual( (::irr::video::IVideoDriver * ( ::irr::gui::IGUIEnvironment::* )(  ) const)(&::irr::gui::IGUIEnvironment::getVideoDriver) )
                /* undefined call policies */ )    
        .def( 
            "hasFocus"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIEnvironment::* )( ::irr::gui::IGUIElement * ) const)(&::irr::gui::IGUIEnvironment::hasFocus) )
            , ( bp::arg("element") ) )    
        .def( 
            "loadGUI"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIEnvironment::* )( ::irr::io::path const &,::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIEnvironment::loadGUI) )
            , ( bp::arg("filename"), bp::arg("parent")=bp::object() ) )    
        .def( 
            "loadGUI"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIEnvironment::* )( ::irr::io::IReadFile *,::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIEnvironment::loadGUI) )
            , ( bp::arg("file"), bp::arg("parent")=bp::object() ) )    
        .def( 
            "postEventFromUser"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIEnvironment::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIEnvironment::postEventFromUser) )
            , ( bp::arg("event") ) )    
        .def( 
            "readGUIElement"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEnvironment::* )( ::irr::io::IXMLReader *,::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIEnvironment::readGUIElement) )
            , ( bp::arg("reader"), bp::arg("node") ) )    
        .def( 
            "registerGUIElementFactory"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEnvironment::* )( ::irr::gui::IGUIElementFactory * ) )(&::irr::gui::IGUIEnvironment::registerGUIElementFactory) )
            , ( bp::arg("factoryToAdd") ) )    
        .def( 
            "removeFocus"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIEnvironment::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIEnvironment::removeFocus) )
            , ( bp::arg("element") ) )    
        .def( 
            "saveGUI"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIEnvironment::* )( ::irr::io::path const &,::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIEnvironment::saveGUI) )
            , ( bp::arg("filename"), bp::arg("start")=bp::object() ) )    
        .def( 
            "saveGUI"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIEnvironment::* )( ::irr::io::IWriteFile *,::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIEnvironment::saveGUI) )
            , ( bp::arg("file"), bp::arg("start")=bp::object() ) )    
        .def( 
            "serializeAttributes"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEnvironment::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIEnvironment::serializeAttributes) )
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setFocus"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIEnvironment::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIEnvironment::setFocus) )
            , ( bp::arg("element") ) )    
        .def( 
            "setSkin"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEnvironment::* )( ::irr::gui::IGUISkin * ) )(&::irr::gui::IGUIEnvironment::setSkin) )
            , ( bp::arg("skin") ) )    
        .def( 
            "setUserEventReceiver"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEnvironment::* )( ::irr::IEventReceiver * ) )(&::irr::gui::IGUIEnvironment::setUserEventReceiver) )
            , ( bp::arg("evr") ) )    
        .def( 
            "writeGUIElement"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIEnvironment::* )( ::irr::io::IXMLWriter *,::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIEnvironment::writeGUIElement) )
            , ( bp::arg("writer"), bp::arg("node") ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIEnvironment_wrapper::* )( ::irr::c8 const * ) )(&IGUIEnvironment_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IGUIFileOpenDialog_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUIFileOpenDialog", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "getDirectoryName"
            , bp::pure_virtual( (::irr::io::path const & ( ::irr::gui::IGUIFileOpenDialog::* )(  ) )(&::irr::gui::IGUIFileOpenDialog::getDirectoryName) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getFileName"
            , bp::pure_virtual( (wchar_t const * ( ::irr::gui::IGUIFileOpenDialog::* )(  ) const)(&::irr::gui::IGUIFileOpenDialog::getFileName) )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUIFileOpenDialog_wrapper::* )( ::irr::SEvent const & ) )(&IGUIFileOpenDialog_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUIFileOpenDialog_wrapper::* )( ::irr::u32 ) )(&IGUIFileOpenDialog_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUIFileOpenDialog_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIFileOpenDialog_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUIFileOpenDialog_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIFileOpenDialog_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUIFileOpenDialog_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIFileOpenDialog_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUIFileOpenDialog_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUIFileOpenDialog_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUIFileOpenDialog_wrapper::* )(  ) )(&IGUIFileOpenDialog_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUIFileOpenDialog_wrapper::* )( ::irr::s32,bool ) const)(&IGUIFileOpenDialog_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUIFileOpenDialog_wrapper::* )(  ) const)(&IGUIFileOpenDialog_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUIFileOpenDialog_wrapper::* )(  ) const)(&IGUIFileOpenDialog_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUIFileOpenDialog_wrapper::* )(  ) const)(&IGUIFileOpenDialog_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUIFileOpenDialog_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUIFileOpenDialog_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUIFileOpenDialog_wrapper::* )(  ) const)(&IGUIFileOpenDialog_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUIFileOpenDialog_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUIFileOpenDialog_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUIFileOpenDialog_wrapper::* )(  ) const)(&IGUIFileOpenDialog_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUIFileOpenDialog_wrapper::* )(  ) const)(&IGUIFileOpenDialog_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUIFileOpenDialog_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUIFileOpenDialog_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUIFileOpenDialog_wrapper::* )( bool ) )(&IGUIFileOpenDialog_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUIFileOpenDialog_wrapper::* )(  ) )(&IGUIFileOpenDialog_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUIFileOpenDialog_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIFileOpenDialog_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUIFileOpenDialog_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUIFileOpenDialog_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIFileOpenDialog_wrapper::* )( ::irr::c8 const * ) )(&IGUIFileOpenDialog_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUIFileOpenDialog_wrapper::* )( bool ) )(&IGUIFileOpenDialog_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUIFileOpenDialog_wrapper::* )( ::irr::s32 ) )(&IGUIFileOpenDialog_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUIFileOpenDialog_wrapper::* )( bool ) )(&IGUIFileOpenDialog_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUIFileOpenDialog_wrapper::* )( wchar_t const * ) )(&IGUIFileOpenDialog_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUIFileOpenDialog_wrapper::* )( wchar_t const * ) )(&IGUIFileOpenDialog_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUIFileOpenDialog_wrapper::* )( bool ) )(&IGUIFileOpenDialog_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUIFileOpenDialog_wrapper::* )(  ) )(&IGUIFileOpenDialog_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUIFontBitmap_wrapper, bp::bases< irr::gui::IGUIFont >, boost::noncopyable >( "IGUIFontBitmap" )    
        .def( 
            "getKerningWidth"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIFontBitmap::* )( wchar_t const *,wchar_t const * ) const)(&::irr::gui::IGUIFontBitmap::getKerningWidth) )
            , ( bp::arg("thisLetter")=bp::object(), bp::arg("previousLetter")=bp::object() ) )    
        .def( 
            "getSpriteBank"
            , bp::pure_virtual( (::irr::gui::IGUISpriteBank * ( ::irr::gui::IGUIFontBitmap::* )(  ) const)(&::irr::gui::IGUIFontBitmap::getSpriteBank) )
                /* undefined call policies */ )    
        .def( 
            "getSpriteNoFromChar"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUIFontBitmap::* )( wchar_t const * ) const)(&::irr::gui::IGUIFontBitmap::getSpriteNoFromChar) )
            , ( bp::arg("c") ) )    
        .def( 
            "getType"
            , (::irr::gui::EGUI_FONT_TYPE ( ::irr::gui::IGUIFontBitmap::* )(  ) const)(&::irr::gui::IGUIFontBitmap::getType)
            , (::irr::gui::EGUI_FONT_TYPE ( IGUIFontBitmap_wrapper::* )(  ) const)(&IGUIFontBitmap_wrapper::default_getType) )    
        .def( 
            "draw"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIFont::* )( ::irr::core::stringw const &,::irr::core::rect< int > const &,::irr::video::SColor,bool,bool,::irr::core::rect< int > const * ) )(&::irr::gui::IGUIFont::draw) )
            , ( bp::arg("text"), bp::arg("position"), bp::arg("color"), bp::arg("hcenter")=(bool)(false), bp::arg("vcenter")=(bool)(false), bp::arg("clip")=bp::object() ) )    
        .def( 
            "getCharacterFromPos"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIFont::* )( wchar_t const *,::irr::s32 ) const)(&::irr::gui::IGUIFont::getCharacterFromPos) )
            , ( bp::arg("text"), bp::arg("pixel_x") ) )    
        .def( 
            "getDimension"
            , bp::pure_virtual( (::irr::core::dimension2d< unsigned int > ( ::irr::gui::IGUIFont::* )( wchar_t const * ) const)(&::irr::gui::IGUIFont::getDimension) )
            , ( bp::arg("text") ) )    
        .def( 
            "getKerningHeight"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIFont::* )(  ) const)(&::irr::gui::IGUIFont::getKerningHeight) ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIFontBitmap_wrapper::* )( ::irr::c8 const * ) )(&IGUIFontBitmap_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setInvisibleCharacters"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIFont::* )( wchar_t const * ) )(&::irr::gui::IGUIFont::setInvisibleCharacters) )
            , ( bp::arg("s") ) )    
        .def( 
            "setKerningHeight"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIFont::* )( ::irr::s32 ) )(&::irr::gui::IGUIFont::setKerningHeight) )
            , ( bp::arg("kerning") ) )    
        .def( 
            "setKerningWidth"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIFont::* )( ::irr::s32 ) )(&::irr::gui::IGUIFont::setKerningWidth) )
            , ( bp::arg("kerning") ) );

    bp::class_< IGUIImage_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUIImage", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "isAlphaChannelUsed"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIImage::* )(  ) const)(&::irr::gui::IGUIImage::isAlphaChannelUsed) ) )    
        .def( 
            "isImageScaled"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIImage::* )(  ) const)(&::irr::gui::IGUIImage::isImageScaled) ) )    
        .def( 
            "setColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIImage::* )( ::irr::video::SColor ) )(&::irr::gui::IGUIImage::setColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setImage"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIImage::* )( ::irr::video::ITexture * ) )(&::irr::gui::IGUIImage::setImage) )
            , ( bp::arg("image") ) )    
        .def( 
            "setScaleImage"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIImage::* )( bool ) )(&::irr::gui::IGUIImage::setScaleImage) )
            , ( bp::arg("scale") ) )    
        .def( 
            "setUseAlphaChannel"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIImage::* )( bool ) )(&::irr::gui::IGUIImage::setUseAlphaChannel) )
            , ( bp::arg("use") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUIImage_wrapper::* )( ::irr::SEvent const & ) )(&IGUIImage_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUIImage_wrapper::* )( ::irr::u32 ) )(&IGUIImage_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUIImage_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIImage_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUIImage_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIImage_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUIImage_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIImage_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUIImage_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUIImage_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUIImage_wrapper::* )(  ) )(&IGUIImage_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUIImage_wrapper::* )( ::irr::s32,bool ) const)(&IGUIImage_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUIImage_wrapper::* )(  ) const)(&IGUIImage_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUIImage_wrapper::* )(  ) const)(&IGUIImage_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUIImage_wrapper::* )(  ) const)(&IGUIImage_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUIImage_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUIImage_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUIImage_wrapper::* )(  ) const)(&IGUIImage_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUIImage_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUIImage_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUIImage_wrapper::* )(  ) const)(&IGUIImage_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUIImage_wrapper::* )(  ) const)(&IGUIImage_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUIImage_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUIImage_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUIImage_wrapper::* )( bool ) )(&IGUIImage_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUIImage_wrapper::* )(  ) )(&IGUIImage_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUIImage_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIImage_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUIImage_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUIImage_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIImage_wrapper::* )( ::irr::c8 const * ) )(&IGUIImage_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUIImage_wrapper::* )( bool ) )(&IGUIImage_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUIImage_wrapper::* )( ::irr::s32 ) )(&IGUIImage_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUIImage_wrapper::* )( bool ) )(&IGUIImage_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUIImage_wrapper::* )( wchar_t const * ) )(&IGUIImage_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUIImage_wrapper::* )( wchar_t const * ) )(&IGUIImage_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUIImage_wrapper::* )( bool ) )(&IGUIImage_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUIImage_wrapper::* )(  ) )(&IGUIImage_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUIImageList_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IGUIImageList" )    
        .def( 
            "draw"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIImageList::* )( ::irr::s32,::irr::core::vector2d< int > const &,::irr::core::rect< int > const * ) )(&::irr::gui::IGUIImageList::draw) )
            , ( bp::arg("index"), bp::arg("destPos"), bp::arg("clip")=bp::object() ) )    
        .def( 
            "getImageCount"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIImageList::* )(  ) const)(&::irr::gui::IGUIImageList::getImageCount) ) )    
        .def( 
            "getImageSize"
            , bp::pure_virtual( (::irr::core::dimension2d< int > ( ::irr::gui::IGUIImageList::* )(  ) const)(&::irr::gui::IGUIImageList::getImageSize) ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIImageList_wrapper::* )( ::irr::c8 const * ) )(&IGUIImageList_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IGUIInOutFader_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUIInOutFader", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "fadeIn"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIInOutFader::* )( ::irr::u32 ) )(&::irr::gui::IGUIInOutFader::fadeIn) )
            , ( bp::arg("time") ) )    
        .def( 
            "fadeOut"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIInOutFader::* )( ::irr::u32 ) )(&::irr::gui::IGUIInOutFader::fadeOut) )
            , ( bp::arg("time") ) )    
        .def( 
            "getColor"
            , bp::pure_virtual( (::irr::video::SColor ( ::irr::gui::IGUIInOutFader::* )(  ) const)(&::irr::gui::IGUIInOutFader::getColor) ) )    
        .def( 
            "isReady"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIInOutFader::* )(  ) const)(&::irr::gui::IGUIInOutFader::isReady) ) )    
        .def( 
            "setColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIInOutFader::* )( ::irr::video::SColor ) )(&::irr::gui::IGUIInOutFader::setColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIInOutFader::* )( ::irr::video::SColor,::irr::video::SColor ) )(&::irr::gui::IGUIInOutFader::setColor) )
            , ( bp::arg("source"), bp::arg("dest") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUIInOutFader_wrapper::* )( ::irr::SEvent const & ) )(&IGUIInOutFader_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUIInOutFader_wrapper::* )( ::irr::u32 ) )(&IGUIInOutFader_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUIInOutFader_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIInOutFader_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUIInOutFader_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIInOutFader_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUIInOutFader_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIInOutFader_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUIInOutFader_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUIInOutFader_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUIInOutFader_wrapper::* )(  ) )(&IGUIInOutFader_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUIInOutFader_wrapper::* )( ::irr::s32,bool ) const)(&IGUIInOutFader_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUIInOutFader_wrapper::* )(  ) const)(&IGUIInOutFader_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUIInOutFader_wrapper::* )(  ) const)(&IGUIInOutFader_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUIInOutFader_wrapper::* )(  ) const)(&IGUIInOutFader_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUIInOutFader_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUIInOutFader_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUIInOutFader_wrapper::* )(  ) const)(&IGUIInOutFader_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUIInOutFader_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUIInOutFader_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUIInOutFader_wrapper::* )(  ) const)(&IGUIInOutFader_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUIInOutFader_wrapper::* )(  ) const)(&IGUIInOutFader_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUIInOutFader_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUIInOutFader_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUIInOutFader_wrapper::* )( bool ) )(&IGUIInOutFader_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUIInOutFader_wrapper::* )(  ) )(&IGUIInOutFader_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUIInOutFader_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIInOutFader_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUIInOutFader_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUIInOutFader_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIInOutFader_wrapper::* )( ::irr::c8 const * ) )(&IGUIInOutFader_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUIInOutFader_wrapper::* )( bool ) )(&IGUIInOutFader_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUIInOutFader_wrapper::* )( ::irr::s32 ) )(&IGUIInOutFader_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUIInOutFader_wrapper::* )( bool ) )(&IGUIInOutFader_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUIInOutFader_wrapper::* )( wchar_t const * ) )(&IGUIInOutFader_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUIInOutFader_wrapper::* )( wchar_t const * ) )(&IGUIInOutFader_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUIInOutFader_wrapper::* )( bool ) )(&IGUIInOutFader_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUIInOutFader_wrapper::* )(  ) )(&IGUIInOutFader_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUIListBox_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUIListBox", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "addItem"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUIListBox::* )( wchar_t const * ) )(&::irr::gui::IGUIListBox::addItem) )
            , ( bp::arg("text") ) )    
        .def( 
            "addItem"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUIListBox::* )( wchar_t const *,::irr::s32 ) )(&::irr::gui::IGUIListBox::addItem) )
            , ( bp::arg("text"), bp::arg("icon") ) )    
        .def( 
            "clear"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIListBox::* )(  ) )(&::irr::gui::IGUIListBox::clear) ) )    
        .def( 
            "clearItemOverrideColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIListBox::* )( ::irr::u32 ) )(&::irr::gui::IGUIListBox::clearItemOverrideColor) )
            , ( bp::arg("index") ) )    
        .def( 
            "clearItemOverrideColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIListBox::* )( ::irr::u32,::irr::gui::EGUI_LISTBOX_COLOR ) )(&::irr::gui::IGUIListBox::clearItemOverrideColor) )
            , ( bp::arg("index"), bp::arg("colorType") ) )    
        .def( 
            "getIcon"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIListBox::* )( ::irr::u32 ) const)(&::irr::gui::IGUIListBox::getIcon) )
            , ( bp::arg("index") ) )    
        .def( 
            "getItemCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUIListBox::* )(  ) const)(&::irr::gui::IGUIListBox::getItemCount) ) )    
        .def( 
            "getItemDefaultColor"
            , bp::pure_virtual( (::irr::video::SColor ( ::irr::gui::IGUIListBox::* )( ::irr::gui::EGUI_LISTBOX_COLOR ) const)(&::irr::gui::IGUIListBox::getItemDefaultColor) )
            , ( bp::arg("colorType") ) )    
        .def( 
            "getItemOverrideColor"
            , bp::pure_virtual( (::irr::video::SColor ( ::irr::gui::IGUIListBox::* )( ::irr::u32,::irr::gui::EGUI_LISTBOX_COLOR ) const)(&::irr::gui::IGUIListBox::getItemOverrideColor) )
            , ( bp::arg("index"), bp::arg("colorType") ) )    
        .def( 
            "getListItem"
            , bp::pure_virtual( (wchar_t const * ( ::irr::gui::IGUIListBox::* )( ::irr::u32 ) const)(&::irr::gui::IGUIListBox::getListItem) )
            , ( bp::arg("id") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getSelected"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIListBox::* )(  ) const)(&::irr::gui::IGUIListBox::getSelected) ) )    
        .def( 
            "hasItemOverrideColor"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIListBox::* )( ::irr::u32,::irr::gui::EGUI_LISTBOX_COLOR ) const)(&::irr::gui::IGUIListBox::hasItemOverrideColor) )
            , ( bp::arg("index"), bp::arg("colorType") ) )    
        .def( 
            "insertItem"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIListBox::* )( ::irr::u32,wchar_t const *,::irr::s32 ) )(&::irr::gui::IGUIListBox::insertItem) )
            , ( bp::arg("index"), bp::arg("text"), bp::arg("icon") ) )    
        .def( 
            "isAutoScrollEnabled"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIListBox::* )(  ) const)(&::irr::gui::IGUIListBox::isAutoScrollEnabled) ) )    
        .def( 
            "removeItem"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIListBox::* )( ::irr::u32 ) )(&::irr::gui::IGUIListBox::removeItem) )
            , ( bp::arg("index") ) )    
        .def( 
            "setAutoScrollEnabled"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIListBox::* )( bool ) )(&::irr::gui::IGUIListBox::setAutoScrollEnabled) )
            , ( bp::arg("scroll") ) )    
        .def( 
            "setDrawBackground"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIListBox::* )( bool ) )(&::irr::gui::IGUIListBox::setDrawBackground) )
            , ( bp::arg("draw") ) )    
        .def( 
            "setItem"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIListBox::* )( ::irr::u32,wchar_t const *,::irr::s32 ) )(&::irr::gui::IGUIListBox::setItem) )
            , ( bp::arg("index"), bp::arg("text"), bp::arg("icon") ) )    
        .def( 
            "setItemHeight"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIListBox::* )( ::irr::s32 ) )(&::irr::gui::IGUIListBox::setItemHeight) )
            , ( bp::arg("height") ) )    
        .def( 
            "setItemOverrideColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIListBox::* )( ::irr::u32,::irr::video::SColor const & ) )(&::irr::gui::IGUIListBox::setItemOverrideColor) )
            , ( bp::arg("index"), bp::arg("color") ) )    
        .def( 
            "setItemOverrideColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIListBox::* )( ::irr::u32,::irr::gui::EGUI_LISTBOX_COLOR,::irr::video::SColor const & ) )(&::irr::gui::IGUIListBox::setItemOverrideColor) )
            , ( bp::arg("index"), bp::arg("colorType"), bp::arg("color") ) )    
        .def( 
            "setSelected"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIListBox::* )( ::irr::s32 ) )(&::irr::gui::IGUIListBox::setSelected) )
            , ( bp::arg("index") ) )    
        .def( 
            "setSelected"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIListBox::* )( wchar_t const * ) )(&::irr::gui::IGUIListBox::setSelected) )
            , ( bp::arg("item") ) )    
        .def( 
            "setSpriteBank"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIListBox::* )( ::irr::gui::IGUISpriteBank * ) )(&::irr::gui::IGUIListBox::setSpriteBank) )
            , ( bp::arg("bank") ) )    
        .def( 
            "swapItems"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIListBox::* )( ::irr::u32,::irr::u32 ) )(&::irr::gui::IGUIListBox::swapItems) )
            , ( bp::arg("index1"), bp::arg("index2") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUIListBox_wrapper::* )( ::irr::SEvent const & ) )(&IGUIListBox_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUIListBox_wrapper::* )( ::irr::u32 ) )(&IGUIListBox_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUIListBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIListBox_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUIListBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIListBox_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUIListBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIListBox_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUIListBox_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUIListBox_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUIListBox_wrapper::* )(  ) )(&IGUIListBox_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUIListBox_wrapper::* )( ::irr::s32,bool ) const)(&IGUIListBox_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUIListBox_wrapper::* )(  ) const)(&IGUIListBox_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUIListBox_wrapper::* )(  ) const)(&IGUIListBox_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUIListBox_wrapper::* )(  ) const)(&IGUIListBox_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUIListBox_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUIListBox_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUIListBox_wrapper::* )(  ) const)(&IGUIListBox_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUIListBox_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUIListBox_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUIListBox_wrapper::* )(  ) const)(&IGUIListBox_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUIListBox_wrapper::* )(  ) const)(&IGUIListBox_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUIListBox_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUIListBox_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUIListBox_wrapper::* )( bool ) )(&IGUIListBox_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUIListBox_wrapper::* )(  ) )(&IGUIListBox_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUIListBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIListBox_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUIListBox_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUIListBox_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIListBox_wrapper::* )( ::irr::c8 const * ) )(&IGUIListBox_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUIListBox_wrapper::* )( bool ) )(&IGUIListBox_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUIListBox_wrapper::* )( ::irr::s32 ) )(&IGUIListBox_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUIListBox_wrapper::* )( bool ) )(&IGUIListBox_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUIListBox_wrapper::* )( wchar_t const * ) )(&IGUIListBox_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUIListBox_wrapper::* )( wchar_t const * ) )(&IGUIListBox_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUIListBox_wrapper::* )( bool ) )(&IGUIListBox_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUIListBox_wrapper::* )(  ) )(&IGUIListBox_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUIMeshViewer_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUIMeshViewer", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "getMaterial"
            , bp::pure_virtual( (::irr::video::SMaterial const & ( ::irr::gui::IGUIMeshViewer::* )(  ) const)(&::irr::gui::IGUIMeshViewer::getMaterial) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMesh"
            , bp::pure_virtual( (::irr::scene::IAnimatedMesh * ( ::irr::gui::IGUIMeshViewer::* )(  ) const)(&::irr::gui::IGUIMeshViewer::getMesh) )
                /* undefined call policies */ )    
        .def( 
            "setMaterial"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIMeshViewer::* )( ::irr::video::SMaterial const & ) )(&::irr::gui::IGUIMeshViewer::setMaterial) )
            , ( bp::arg("material") ) )    
        .def( 
            "setMesh"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIMeshViewer::* )( ::irr::scene::IAnimatedMesh * ) )(&::irr::gui::IGUIMeshViewer::setMesh) )
            , ( bp::arg("mesh") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUIMeshViewer_wrapper::* )( ::irr::SEvent const & ) )(&IGUIMeshViewer_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUIMeshViewer_wrapper::* )( ::irr::u32 ) )(&IGUIMeshViewer_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUIMeshViewer_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIMeshViewer_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUIMeshViewer_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIMeshViewer_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUIMeshViewer_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIMeshViewer_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUIMeshViewer_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUIMeshViewer_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUIMeshViewer_wrapper::* )(  ) )(&IGUIMeshViewer_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUIMeshViewer_wrapper::* )( ::irr::s32,bool ) const)(&IGUIMeshViewer_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUIMeshViewer_wrapper::* )(  ) const)(&IGUIMeshViewer_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUIMeshViewer_wrapper::* )(  ) const)(&IGUIMeshViewer_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUIMeshViewer_wrapper::* )(  ) const)(&IGUIMeshViewer_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUIMeshViewer_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUIMeshViewer_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUIMeshViewer_wrapper::* )(  ) const)(&IGUIMeshViewer_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUIMeshViewer_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUIMeshViewer_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUIMeshViewer_wrapper::* )(  ) const)(&IGUIMeshViewer_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUIMeshViewer_wrapper::* )(  ) const)(&IGUIMeshViewer_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUIMeshViewer_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUIMeshViewer_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUIMeshViewer_wrapper::* )( bool ) )(&IGUIMeshViewer_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUIMeshViewer_wrapper::* )(  ) )(&IGUIMeshViewer_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUIMeshViewer_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIMeshViewer_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUIMeshViewer_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUIMeshViewer_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIMeshViewer_wrapper::* )( ::irr::c8 const * ) )(&IGUIMeshViewer_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUIMeshViewer_wrapper::* )( bool ) )(&IGUIMeshViewer_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUIMeshViewer_wrapper::* )( ::irr::s32 ) )(&IGUIMeshViewer_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUIMeshViewer_wrapper::* )( bool ) )(&IGUIMeshViewer_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUIMeshViewer_wrapper::* )( wchar_t const * ) )(&IGUIMeshViewer_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUIMeshViewer_wrapper::* )( wchar_t const * ) )(&IGUIMeshViewer_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUIMeshViewer_wrapper::* )( bool ) )(&IGUIMeshViewer_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUIMeshViewer_wrapper::* )(  ) )(&IGUIMeshViewer_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUIScrollBar_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUIScrollBar", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "getLargeStep"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIScrollBar::* )(  ) const)(&::irr::gui::IGUIScrollBar::getLargeStep) ) )    
        .def( 
            "getMax"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIScrollBar::* )(  ) const)(&::irr::gui::IGUIScrollBar::getMax) ) )    
        .def( 
            "getMin"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIScrollBar::* )(  ) const)(&::irr::gui::IGUIScrollBar::getMin) ) )    
        .def( 
            "getPos"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIScrollBar::* )(  ) const)(&::irr::gui::IGUIScrollBar::getPos) ) )    
        .def( 
            "getSmallStep"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIScrollBar::* )(  ) const)(&::irr::gui::IGUIScrollBar::getSmallStep) ) )    
        .def( 
            "setLargeStep"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIScrollBar::* )( ::irr::s32 ) )(&::irr::gui::IGUIScrollBar::setLargeStep) )
            , ( bp::arg("step") ) )    
        .def( 
            "setMax"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIScrollBar::* )( ::irr::s32 ) )(&::irr::gui::IGUIScrollBar::setMax) )
            , ( bp::arg("max") ) )    
        .def( 
            "setMin"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIScrollBar::* )( ::irr::s32 ) )(&::irr::gui::IGUIScrollBar::setMin) )
            , ( bp::arg("min") ) )    
        .def( 
            "setPos"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIScrollBar::* )( ::irr::s32 ) )(&::irr::gui::IGUIScrollBar::setPos) )
            , ( bp::arg("pos") ) )    
        .def( 
            "setSmallStep"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIScrollBar::* )( ::irr::s32 ) )(&::irr::gui::IGUIScrollBar::setSmallStep) )
            , ( bp::arg("step") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUIScrollBar_wrapper::* )( ::irr::SEvent const & ) )(&IGUIScrollBar_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUIScrollBar_wrapper::* )( ::irr::u32 ) )(&IGUIScrollBar_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUIScrollBar_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIScrollBar_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUIScrollBar_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIScrollBar_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUIScrollBar_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIScrollBar_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUIScrollBar_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUIScrollBar_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUIScrollBar_wrapper::* )(  ) )(&IGUIScrollBar_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUIScrollBar_wrapper::* )( ::irr::s32,bool ) const)(&IGUIScrollBar_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUIScrollBar_wrapper::* )(  ) const)(&IGUIScrollBar_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUIScrollBar_wrapper::* )(  ) const)(&IGUIScrollBar_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUIScrollBar_wrapper::* )(  ) const)(&IGUIScrollBar_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUIScrollBar_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUIScrollBar_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUIScrollBar_wrapper::* )(  ) const)(&IGUIScrollBar_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUIScrollBar_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUIScrollBar_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUIScrollBar_wrapper::* )(  ) const)(&IGUIScrollBar_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUIScrollBar_wrapper::* )(  ) const)(&IGUIScrollBar_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUIScrollBar_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUIScrollBar_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUIScrollBar_wrapper::* )( bool ) )(&IGUIScrollBar_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUIScrollBar_wrapper::* )(  ) )(&IGUIScrollBar_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUIScrollBar_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIScrollBar_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUIScrollBar_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUIScrollBar_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIScrollBar_wrapper::* )( ::irr::c8 const * ) )(&IGUIScrollBar_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUIScrollBar_wrapper::* )( bool ) )(&IGUIScrollBar_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUIScrollBar_wrapper::* )( ::irr::s32 ) )(&IGUIScrollBar_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUIScrollBar_wrapper::* )( bool ) )(&IGUIScrollBar_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUIScrollBar_wrapper::* )( wchar_t const * ) )(&IGUIScrollBar_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUIScrollBar_wrapper::* )( wchar_t const * ) )(&IGUIScrollBar_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUIScrollBar_wrapper::* )( bool ) )(&IGUIScrollBar_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUIScrollBar_wrapper::* )(  ) )(&IGUIScrollBar_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUISkin_wrapper, bp::bases< irr::io::IAttributeExchangingObject >, boost::noncopyable >( "IGUISkin" )    
        .def( 
            "draw2DRectangle"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISkin::* )( ::irr::gui::IGUIElement *,::irr::video::SColor const &,::irr::core::rect< int > const &,::irr::core::rect< int > const * ) )(&::irr::gui::IGUISkin::draw2DRectangle) )
            , ( bp::arg("element"), bp::arg("color"), bp::arg("pos"), bp::arg("clip")=bp::object() ) )    
        .def( 
            "draw3DButtonPanePressed"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISkin::* )( ::irr::gui::IGUIElement *,::irr::core::rect< int > const &,::irr::core::rect< int > const * ) )(&::irr::gui::IGUISkin::draw3DButtonPanePressed) )
            , ( bp::arg("element"), bp::arg("rect"), bp::arg("clip")=bp::object() ) )    
        .def( 
            "draw3DButtonPaneStandard"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISkin::* )( ::irr::gui::IGUIElement *,::irr::core::rect< int > const &,::irr::core::rect< int > const * ) )(&::irr::gui::IGUISkin::draw3DButtonPaneStandard) )
            , ( bp::arg("element"), bp::arg("rect"), bp::arg("clip")=bp::object() ) )    
        .def( 
            "draw3DMenuPane"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISkin::* )( ::irr::gui::IGUIElement *,::irr::core::rect< int > const &,::irr::core::rect< int > const * ) )(&::irr::gui::IGUISkin::draw3DMenuPane) )
            , ( bp::arg("element"), bp::arg("rect"), bp::arg("clip")=bp::object() ) )    
        .def( 
            "draw3DSunkenPane"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISkin::* )( ::irr::gui::IGUIElement *,::irr::video::SColor,bool,bool,::irr::core::rect< int > const &,::irr::core::rect< int > const * ) )(&::irr::gui::IGUISkin::draw3DSunkenPane) )
            , ( bp::arg("element"), bp::arg("bgcolor"), bp::arg("flat"), bp::arg("fillBackGround"), bp::arg("rect"), bp::arg("clip")=bp::object() ) )    
        .def( 
            "draw3DTabBody"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISkin::* )( ::irr::gui::IGUIElement *,bool,bool,::irr::core::rect< int > const &,::irr::core::rect< int > const *,::irr::s32,::irr::gui::EGUI_ALIGNMENT ) )(&::irr::gui::IGUISkin::draw3DTabBody) )
            , ( bp::arg("element"), bp::arg("border"), bp::arg("background"), bp::arg("rect"), bp::arg("clip")=bp::object(), bp::arg("tabHeight")=(::irr::s32)(-0x00000000000000001), bp::arg("alignment")=::irr::gui::EGUIA_UPPERLEFT ) )    
        .def( 
            "draw3DTabButton"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISkin::* )( ::irr::gui::IGUIElement *,bool,::irr::core::rect< int > const &,::irr::core::rect< int > const *,::irr::gui::EGUI_ALIGNMENT ) )(&::irr::gui::IGUISkin::draw3DTabButton) )
            , ( bp::arg("element"), bp::arg("active"), bp::arg("rect"), bp::arg("clip")=bp::object(), bp::arg("alignment")=::irr::gui::EGUIA_UPPERLEFT ) )    
        .def( 
            "draw3DToolBar"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISkin::* )( ::irr::gui::IGUIElement *,::irr::core::rect< int > const &,::irr::core::rect< int > const * ) )(&::irr::gui::IGUISkin::draw3DToolBar) )
            , ( bp::arg("element"), bp::arg("rect"), bp::arg("clip")=bp::object() ) )    
        .def( 
            "draw3DWindowBackground"
            , bp::pure_virtual( (::irr::core::rect< int > ( ::irr::gui::IGUISkin::* )( ::irr::gui::IGUIElement *,bool,::irr::video::SColor,::irr::core::rect< int > const &,::irr::core::rect< int > const *,::irr::core::rect< int > * ) )(&::irr::gui::IGUISkin::draw3DWindowBackground) )
            , ( bp::arg("element"), bp::arg("drawTitleBar"), bp::arg("titleBarColor"), bp::arg("rect"), bp::arg("clip")=bp::object(), bp::arg("checkClientArea")=bp::object() ) )    
        .def( 
            "drawIcon"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISkin::* )( ::irr::gui::IGUIElement *,::irr::gui::EGUI_DEFAULT_ICON,::irr::core::position2di const,::irr::u32,::irr::u32,bool,::irr::core::rect< int > const * ) )(&::irr::gui::IGUISkin::drawIcon) )
            , ( bp::arg("element"), bp::arg("icon"), bp::arg("position"), bp::arg("starttime")=(::irr::u32)(0), bp::arg("currenttime")=(::irr::u32)(0), bp::arg("loop")=(bool)(false), bp::arg("clip")=bp::object() ) )    
        .def( 
            "getColor"
            , bp::pure_virtual( (::irr::video::SColor ( ::irr::gui::IGUISkin::* )( ::irr::gui::EGUI_DEFAULT_COLOR ) const)(&::irr::gui::IGUISkin::getColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "getDefaultText"
            , bp::pure_virtual( (wchar_t const * ( ::irr::gui::IGUISkin::* )( ::irr::gui::EGUI_DEFAULT_TEXT ) const)(&::irr::gui::IGUISkin::getDefaultText) )
            , ( bp::arg("text") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getFont"
            , bp::pure_virtual( (::irr::gui::IGUIFont * ( ::irr::gui::IGUISkin::* )( ::irr::gui::EGUI_DEFAULT_FONT ) const)(&::irr::gui::IGUISkin::getFont) )
            , ( bp::arg("which")=::irr::gui::EGDF_DEFAULT )
                /* undefined call policies */ )    
        .def( 
            "getIcon"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUISkin::* )( ::irr::gui::EGUI_DEFAULT_ICON ) const)(&::irr::gui::IGUISkin::getIcon) )
            , ( bp::arg("icon") ) )    
        .def( 
            "getSize"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUISkin::* )( ::irr::gui::EGUI_DEFAULT_SIZE ) const)(&::irr::gui::IGUISkin::getSize) )
            , ( bp::arg("size") ) )    
        .def( 
            "getSpriteBank"
            , bp::pure_virtual( (::irr::gui::IGUISpriteBank * ( ::irr::gui::IGUISkin::* )(  ) const)(&::irr::gui::IGUISkin::getSpriteBank) )
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::gui::EGUI_SKIN_TYPE ( ::irr::gui::IGUISkin::* )(  ) const)(&::irr::gui::IGUISkin::getType)
            , (::irr::gui::EGUI_SKIN_TYPE ( IGUISkin_wrapper::* )(  ) const)(&IGUISkin_wrapper::default_getType) )    
        .def( 
            "setColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISkin::* )( ::irr::gui::EGUI_DEFAULT_COLOR,::irr::video::SColor ) )(&::irr::gui::IGUISkin::setColor) )
            , ( bp::arg("which"), bp::arg("newColor") ) )    
        .def( 
            "setDefaultText"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISkin::* )( ::irr::gui::EGUI_DEFAULT_TEXT,wchar_t const * ) )(&::irr::gui::IGUISkin::setDefaultText) )
            , ( bp::arg("which"), bp::arg("newText") ) )    
        .def( 
            "setFont"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISkin::* )( ::irr::gui::IGUIFont *,::irr::gui::EGUI_DEFAULT_FONT ) )(&::irr::gui::IGUISkin::setFont) )
            , ( bp::arg("font"), bp::arg("which")=::irr::gui::EGDF_DEFAULT ) )    
        .def( 
            "setIcon"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISkin::* )( ::irr::gui::EGUI_DEFAULT_ICON,::irr::u32 ) )(&::irr::gui::IGUISkin::setIcon) )
            , ( bp::arg("icon"), bp::arg("index") ) )    
        .def( 
            "setSize"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISkin::* )( ::irr::gui::EGUI_DEFAULT_SIZE,::irr::s32 ) )(&::irr::gui::IGUISkin::setSize) )
            , ( bp::arg("which"), bp::arg("size") ) )    
        .def( 
            "setSpriteBank"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISkin::* )( ::irr::gui::IGUISpriteBank * ) )(&::irr::gui::IGUISkin::setSpriteBank) )
            , ( bp::arg("bank") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( IGUISkin_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUISkin_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( IGUISkin_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUISkin_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUISkin_wrapper::* )( ::irr::c8 const * ) )(&IGUISkin_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IGUISpinBox_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUISpinBox", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "getEditBox"
            , bp::pure_virtual( (::irr::gui::IGUIEditBox * ( ::irr::gui::IGUISpinBox::* )(  ) const)(&::irr::gui::IGUISpinBox::getEditBox) )
                /* undefined call policies */ )    
        .def( 
            "getMax"
            , bp::pure_virtual( (::irr::f32 ( ::irr::gui::IGUISpinBox::* )(  ) const)(&::irr::gui::IGUISpinBox::getMax) ) )    
        .def( 
            "getMin"
            , bp::pure_virtual( (::irr::f32 ( ::irr::gui::IGUISpinBox::* )(  ) const)(&::irr::gui::IGUISpinBox::getMin) ) )    
        .def( 
            "getStepSize"
            , bp::pure_virtual( (::irr::f32 ( ::irr::gui::IGUISpinBox::* )(  ) const)(&::irr::gui::IGUISpinBox::getStepSize) ) )    
        .def( 
            "getValue"
            , bp::pure_virtual( (::irr::f32 ( ::irr::gui::IGUISpinBox::* )(  ) const)(&::irr::gui::IGUISpinBox::getValue) ) )    
        .def( 
            "setDecimalPlaces"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISpinBox::* )( ::irr::s32 ) )(&::irr::gui::IGUISpinBox::setDecimalPlaces) )
            , ( bp::arg("places") ) )    
        .def( 
            "setRange"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISpinBox::* )( ::irr::f32,::irr::f32 ) )(&::irr::gui::IGUISpinBox::setRange) )
            , ( bp::arg("min"), bp::arg("max") ) )    
        .def( 
            "setStepSize"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISpinBox::* )( ::irr::f32 ) )(&::irr::gui::IGUISpinBox::setStepSize) )
            , ( bp::arg("step")=1.0e+0f ) )    
        .def( 
            "setValue"
            , bp::pure_virtual( (void ( ::irr::gui::IGUISpinBox::* )( ::irr::f32 ) )(&::irr::gui::IGUISpinBox::setValue) )
            , ( bp::arg("val") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUISpinBox_wrapper::* )( ::irr::SEvent const & ) )(&IGUISpinBox_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUISpinBox_wrapper::* )( ::irr::u32 ) )(&IGUISpinBox_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUISpinBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUISpinBox_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUISpinBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUISpinBox_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUISpinBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUISpinBox_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUISpinBox_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUISpinBox_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUISpinBox_wrapper::* )(  ) )(&IGUISpinBox_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUISpinBox_wrapper::* )( ::irr::s32,bool ) const)(&IGUISpinBox_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUISpinBox_wrapper::* )(  ) const)(&IGUISpinBox_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUISpinBox_wrapper::* )(  ) const)(&IGUISpinBox_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUISpinBox_wrapper::* )(  ) const)(&IGUISpinBox_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUISpinBox_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUISpinBox_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUISpinBox_wrapper::* )(  ) const)(&IGUISpinBox_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUISpinBox_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUISpinBox_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUISpinBox_wrapper::* )(  ) const)(&IGUISpinBox_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUISpinBox_wrapper::* )(  ) const)(&IGUISpinBox_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUISpinBox_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUISpinBox_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUISpinBox_wrapper::* )( bool ) )(&IGUISpinBox_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUISpinBox_wrapper::* )(  ) )(&IGUISpinBox_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUISpinBox_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUISpinBox_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUISpinBox_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUISpinBox_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUISpinBox_wrapper::* )( ::irr::c8 const * ) )(&IGUISpinBox_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUISpinBox_wrapper::* )( bool ) )(&IGUISpinBox_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUISpinBox_wrapper::* )( ::irr::s32 ) )(&IGUISpinBox_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUISpinBox_wrapper::* )( bool ) )(&IGUISpinBox_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUISpinBox_wrapper::* )( wchar_t const * ) )(&IGUISpinBox_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUISpinBox_wrapper::* )( wchar_t const * ) )(&IGUISpinBox_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUISpinBox_wrapper::* )( bool ) )(&IGUISpinBox_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUISpinBox_wrapper::* )(  ) )(&IGUISpinBox_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUIStaticText_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUIStaticText", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "enableOverrideColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIStaticText::* )( bool ) )(&::irr::gui::IGUIStaticText::enableOverrideColor) )
            , ( bp::arg("enable") ) )    
        .def( 
            "getOverrideColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::gui::IGUIStaticText::* )(  ) const)(&::irr::gui::IGUIStaticText::getOverrideColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getOverrideFont"
            , bp::pure_virtual( (::irr::gui::IGUIFont * ( ::irr::gui::IGUIStaticText::* )(  ) const)(&::irr::gui::IGUIStaticText::getOverrideFont) )
                /* undefined call policies */ )    
        .def( 
            "getTextHeight"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIStaticText::* )(  ) const)(&::irr::gui::IGUIStaticText::getTextHeight) ) )    
        .def( 
            "getTextWidth"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUIStaticText::* )(  ) const)(&::irr::gui::IGUIStaticText::getTextWidth) ) )    
        .def( 
            "isOverrideColorEnabled"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIStaticText::* )(  ) const)(&::irr::gui::IGUIStaticText::isOverrideColorEnabled) ) )    
        .def( 
            "isWordWrapEnabled"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIStaticText::* )(  ) const)(&::irr::gui::IGUIStaticText::isWordWrapEnabled) ) )    
        .def( 
            "setBackgroundColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIStaticText::* )( ::irr::video::SColor ) )(&::irr::gui::IGUIStaticText::setBackgroundColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setDrawBackground"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIStaticText::* )( bool ) )(&::irr::gui::IGUIStaticText::setDrawBackground) )
            , ( bp::arg("draw") ) )    
        .def( 
            "setDrawBorder"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIStaticText::* )( bool ) )(&::irr::gui::IGUIStaticText::setDrawBorder) )
            , ( bp::arg("draw") ) )    
        .def( 
            "setOverrideColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIStaticText::* )( ::irr::video::SColor ) )(&::irr::gui::IGUIStaticText::setOverrideColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setOverrideFont"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIStaticText::* )( ::irr::gui::IGUIFont * ) )(&::irr::gui::IGUIStaticText::setOverrideFont) )
            , ( bp::arg("font")=bp::object() ) )    
        .def( 
            "setTextAlignment"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIStaticText::* )( ::irr::gui::EGUI_ALIGNMENT,::irr::gui::EGUI_ALIGNMENT ) )(&::irr::gui::IGUIStaticText::setTextAlignment) )
            , ( bp::arg("horizontal"), bp::arg("vertical") ) )    
        .def( 
            "setWordWrap"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIStaticText::* )( bool ) )(&::irr::gui::IGUIStaticText::setWordWrap) )
            , ( bp::arg("enable") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUIStaticText_wrapper::* )( ::irr::SEvent const & ) )(&IGUIStaticText_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUIStaticText_wrapper::* )( ::irr::u32 ) )(&IGUIStaticText_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUIStaticText_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIStaticText_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUIStaticText_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIStaticText_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUIStaticText_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIStaticText_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUIStaticText_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUIStaticText_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUIStaticText_wrapper::* )(  ) )(&IGUIStaticText_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUIStaticText_wrapper::* )( ::irr::s32,bool ) const)(&IGUIStaticText_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUIStaticText_wrapper::* )(  ) const)(&IGUIStaticText_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUIStaticText_wrapper::* )(  ) const)(&IGUIStaticText_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUIStaticText_wrapper::* )(  ) const)(&IGUIStaticText_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUIStaticText_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUIStaticText_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUIStaticText_wrapper::* )(  ) const)(&IGUIStaticText_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUIStaticText_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUIStaticText_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUIStaticText_wrapper::* )(  ) const)(&IGUIStaticText_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUIStaticText_wrapper::* )(  ) const)(&IGUIStaticText_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUIStaticText_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUIStaticText_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUIStaticText_wrapper::* )( bool ) )(&IGUIStaticText_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUIStaticText_wrapper::* )(  ) )(&IGUIStaticText_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUIStaticText_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIStaticText_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUIStaticText_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUIStaticText_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIStaticText_wrapper::* )( ::irr::c8 const * ) )(&IGUIStaticText_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUIStaticText_wrapper::* )( bool ) )(&IGUIStaticText_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUIStaticText_wrapper::* )( ::irr::s32 ) )(&IGUIStaticText_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUIStaticText_wrapper::* )( bool ) )(&IGUIStaticText_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUIStaticText_wrapper::* )( wchar_t const * ) )(&IGUIStaticText_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUIStaticText_wrapper::* )( wchar_t const * ) )(&IGUIStaticText_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUIStaticText_wrapper::* )( bool ) )(&IGUIStaticText_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUIStaticText_wrapper::* )(  ) )(&IGUIStaticText_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUITab_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUITab", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "getBackgroundColor"
            , bp::pure_virtual( (::irr::video::SColor ( ::irr::gui::IGUITab::* )(  ) const)(&::irr::gui::IGUITab::getBackgroundColor) ) )    
        .def( 
            "getNumber"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUITab::* )(  ) const)(&::irr::gui::IGUITab::getNumber) ) )    
        .def( 
            "getTextColor"
            , bp::pure_virtual( (::irr::video::SColor ( ::irr::gui::IGUITab::* )(  ) const)(&::irr::gui::IGUITab::getTextColor) ) )    
        .def( 
            "isDrawingBackground"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUITab::* )(  ) const)(&::irr::gui::IGUITab::isDrawingBackground) ) )    
        .def( 
            "setBackgroundColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITab::* )( ::irr::video::SColor ) )(&::irr::gui::IGUITab::setBackgroundColor) )
            , ( bp::arg("c") ) )    
        .def( 
            "setDrawBackground"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITab::* )( bool ) )(&::irr::gui::IGUITab::setDrawBackground) )
            , ( bp::arg("draw")=(bool)(true) ) )    
        .def( 
            "setTextColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITab::* )( ::irr::video::SColor ) )(&::irr::gui::IGUITab::setTextColor) )
            , ( bp::arg("c") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUITab_wrapper::* )( ::irr::SEvent const & ) )(&IGUITab_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUITab_wrapper::* )( ::irr::u32 ) )(&IGUITab_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUITab_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITab_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUITab_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITab_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUITab_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITab_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUITab_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUITab_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUITab_wrapper::* )(  ) )(&IGUITab_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUITab_wrapper::* )( ::irr::s32,bool ) const)(&IGUITab_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUITab_wrapper::* )(  ) const)(&IGUITab_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUITab_wrapper::* )(  ) const)(&IGUITab_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUITab_wrapper::* )(  ) const)(&IGUITab_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUITab_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUITab_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUITab_wrapper::* )(  ) const)(&IGUITab_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUITab_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUITab_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUITab_wrapper::* )(  ) const)(&IGUITab_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUITab_wrapper::* )(  ) const)(&IGUITab_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUITab_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUITab_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUITab_wrapper::* )( bool ) )(&IGUITab_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUITab_wrapper::* )(  ) )(&IGUITab_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUITab_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITab_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUITab_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUITab_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUITab_wrapper::* )( ::irr::c8 const * ) )(&IGUITab_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUITab_wrapper::* )( bool ) )(&IGUITab_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUITab_wrapper::* )( ::irr::s32 ) )(&IGUITab_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUITab_wrapper::* )( bool ) )(&IGUITab_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUITab_wrapper::* )( wchar_t const * ) )(&IGUITab_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUITab_wrapper::* )( wchar_t const * ) )(&IGUITab_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUITab_wrapper::* )( bool ) )(&IGUITab_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUITab_wrapper::* )(  ) )(&IGUITab_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUITabControl_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUITabControl", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "addTab"
            , bp::pure_virtual( (::irr::gui::IGUITab * ( ::irr::gui::IGUITabControl::* )( wchar_t const *,::irr::s32 ) )(&::irr::gui::IGUITabControl::addTab) )
            , ( bp::arg("caption"), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "getActiveTab"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUITabControl::* )(  ) const)(&::irr::gui::IGUITabControl::getActiveTab) ) )    
        .def( 
            "getTab"
            , bp::pure_virtual( (::irr::gui::IGUITab * ( ::irr::gui::IGUITabControl::* )( ::irr::s32 ) const)(&::irr::gui::IGUITabControl::getTab) )
            , ( bp::arg("idx") )
                /* undefined call policies */ )    
        .def( 
            "getTabCount"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUITabControl::* )(  ) const)(&::irr::gui::IGUITabControl::getTabCount) ) )    
        .def( 
            "getTabExtraWidth"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUITabControl::* )(  ) const)(&::irr::gui::IGUITabControl::getTabExtraWidth) ) )    
        .def( 
            "getTabHeight"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUITabControl::* )(  ) const)(&::irr::gui::IGUITabControl::getTabHeight) ) )    
        .def( 
            "getTabMaxWidth"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUITabControl::* )(  ) const)(&::irr::gui::IGUITabControl::getTabMaxWidth) ) )    
        .def( 
            "getTabVerticalAlignment"
            , bp::pure_virtual( (::irr::gui::EGUI_ALIGNMENT ( ::irr::gui::IGUITabControl::* )(  ) const)(&::irr::gui::IGUITabControl::getTabVerticalAlignment) ) )    
        .def( 
            "setActiveTab"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUITabControl::* )( ::irr::s32 ) )(&::irr::gui::IGUITabControl::setActiveTab) )
            , ( bp::arg("idx") ) )    
        .def( 
            "setActiveTab"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUITabControl::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUITabControl::setActiveTab) )
            , ( bp::arg("tab") ) )    
        .def( 
            "setTabExtraWidth"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITabControl::* )( ::irr::s32 ) )(&::irr::gui::IGUITabControl::setTabExtraWidth) )
            , ( bp::arg("extraWidth") ) )    
        .def( 
            "setTabHeight"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITabControl::* )( ::irr::s32 ) )(&::irr::gui::IGUITabControl::setTabHeight) )
            , ( bp::arg("height") ) )    
        .def( 
            "setTabMaxWidth"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITabControl::* )( ::irr::s32 ) )(&::irr::gui::IGUITabControl::setTabMaxWidth) )
            , ( bp::arg("width") ) )    
        .def( 
            "setTabVerticalAlignment"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITabControl::* )( ::irr::gui::EGUI_ALIGNMENT ) )(&::irr::gui::IGUITabControl::setTabVerticalAlignment) )
            , ( bp::arg("alignment") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUITabControl_wrapper::* )( ::irr::SEvent const & ) )(&IGUITabControl_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUITabControl_wrapper::* )( ::irr::u32 ) )(&IGUITabControl_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUITabControl_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITabControl_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUITabControl_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITabControl_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUITabControl_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITabControl_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUITabControl_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUITabControl_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUITabControl_wrapper::* )(  ) )(&IGUITabControl_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUITabControl_wrapper::* )( ::irr::s32,bool ) const)(&IGUITabControl_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUITabControl_wrapper::* )(  ) const)(&IGUITabControl_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUITabControl_wrapper::* )(  ) const)(&IGUITabControl_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUITabControl_wrapper::* )(  ) const)(&IGUITabControl_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUITabControl_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUITabControl_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUITabControl_wrapper::* )(  ) const)(&IGUITabControl_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUITabControl_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUITabControl_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUITabControl_wrapper::* )(  ) const)(&IGUITabControl_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUITabControl_wrapper::* )(  ) const)(&IGUITabControl_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUITabControl_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUITabControl_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUITabControl_wrapper::* )( bool ) )(&IGUITabControl_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUITabControl_wrapper::* )(  ) )(&IGUITabControl_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUITabControl_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITabControl_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUITabControl_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUITabControl_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUITabControl_wrapper::* )( ::irr::c8 const * ) )(&IGUITabControl_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUITabControl_wrapper::* )( bool ) )(&IGUITabControl_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUITabControl_wrapper::* )( ::irr::s32 ) )(&IGUITabControl_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUITabControl_wrapper::* )( bool ) )(&IGUITabControl_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUITabControl_wrapper::* )( wchar_t const * ) )(&IGUITabControl_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUITabControl_wrapper::* )( wchar_t const * ) )(&IGUITabControl_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUITabControl_wrapper::* )( bool ) )(&IGUITabControl_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUITabControl_wrapper::* )(  ) )(&IGUITabControl_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUITable_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUITable", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "addColumn"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )( wchar_t const *,::irr::s32 ) )(&::irr::gui::IGUITable::addColumn) )
            , ( bp::arg("caption"), bp::arg("columnIndex")=(::irr::s32)(-0x00000000000000001) ) )    
        .def( 
            "addRow"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUITable::* )( ::irr::u32 ) )(&::irr::gui::IGUITable::addRow) )
            , ( bp::arg("rowIndex") ) )    
        .def( 
            "clear"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )(  ) )(&::irr::gui::IGUITable::clear) ) )    
        .def( 
            "clearRows"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )(  ) )(&::irr::gui::IGUITable::clearRows) ) )    
        .def( 
            "getActiveColumn"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUITable::* )(  ) const)(&::irr::gui::IGUITable::getActiveColumn) ) )    
        .def( 
            "getActiveColumnOrdering"
            , bp::pure_virtual( (::irr::gui::EGUI_ORDERING_MODE ( ::irr::gui::IGUITable::* )(  ) const)(&::irr::gui::IGUITable::getActiveColumnOrdering) ) )    
        .def( 
            "getCellData"
            , bp::pure_virtual( (void * ( ::irr::gui::IGUITable::* )( ::irr::u32,::irr::u32 ) const)(&::irr::gui::IGUITable::getCellData) )
            , ( bp::arg("rowIndex"), bp::arg("columnIndex") )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "getCellText"
            , bp::pure_virtual( (wchar_t const * ( ::irr::gui::IGUITable::* )( ::irr::u32,::irr::u32 ) const)(&::irr::gui::IGUITable::getCellText) )
            , ( bp::arg("rowIndex"), bp::arg("columnIndex") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getColumnCount"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUITable::* )(  ) const)(&::irr::gui::IGUITable::getColumnCount) ) )    
        .def( 
            "getDrawFlags"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUITable::* )(  ) const)(&::irr::gui::IGUITable::getDrawFlags) ) )    
        .def( 
            "getRowCount"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUITable::* )(  ) const)(&::irr::gui::IGUITable::getRowCount) ) )    
        .def( 
            "getSelected"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUITable::* )(  ) const)(&::irr::gui::IGUITable::getSelected) ) )    
        .def( 
            "hasResizableColumns"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUITable::* )(  ) const)(&::irr::gui::IGUITable::hasResizableColumns) ) )    
        .def( 
            "orderRows"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )( ::irr::s32,::irr::gui::EGUI_ORDERING_MODE ) )(&::irr::gui::IGUITable::orderRows) )
            , ( bp::arg("columnIndex")=(::irr::s32)(-0x00000000000000001), bp::arg("mode")=::irr::gui::EGOM_NONE ) )    
        .def( 
            "removeColumn"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )( ::irr::u32 ) )(&::irr::gui::IGUITable::removeColumn) )
            , ( bp::arg("columnIndex") ) )    
        .def( 
            "removeRow"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )( ::irr::u32 ) )(&::irr::gui::IGUITable::removeRow) )
            , ( bp::arg("rowIndex") ) )    
        .def( 
            "setActiveColumn"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUITable::* )( ::irr::s32,bool ) )(&::irr::gui::IGUITable::setActiveColumn) )
            , ( bp::arg("idx"), bp::arg("doOrder")=(bool)(false) ) )    
        .def( 
            "setCellColor"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )( ::irr::u32,::irr::u32,::irr::video::SColor ) )(&::irr::gui::IGUITable::setCellColor) )
            , ( bp::arg("rowIndex"), bp::arg("columnIndex"), bp::arg("color") ) )    
        .def( 
            "setCellData"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )( ::irr::u32,::irr::u32,void * ) )(&::irr::gui::IGUITable::setCellData) )
            , ( bp::arg("rowIndex"), bp::arg("columnIndex"), bp::arg("data") ) )    
        .def( 
            "setCellText"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )( ::irr::u32,::irr::u32,::irr::core::stringw const & ) )(&::irr::gui::IGUITable::setCellText) )
            , ( bp::arg("rowIndex"), bp::arg("columnIndex"), bp::arg("text") ) )    
        .def( 
            "setCellText"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )( ::irr::u32,::irr::u32,::irr::core::stringw const &,::irr::video::SColor ) )(&::irr::gui::IGUITable::setCellText) )
            , ( bp::arg("rowIndex"), bp::arg("columnIndex"), bp::arg("text"), bp::arg("color") ) )    
        .def( 
            "setColumnOrdering"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )( ::irr::u32,::irr::gui::EGUI_COLUMN_ORDERING ) )(&::irr::gui::IGUITable::setColumnOrdering) )
            , ( bp::arg("columnIndex"), bp::arg("mode") ) )    
        .def( 
            "setColumnWidth"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )( ::irr::u32,::irr::u32 ) )(&::irr::gui::IGUITable::setColumnWidth) )
            , ( bp::arg("columnIndex"), bp::arg("width") ) )    
        .def( 
            "setDrawFlags"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )( ::irr::s32 ) )(&::irr::gui::IGUITable::setDrawFlags) )
            , ( bp::arg("flags") ) )    
        .def( 
            "setResizableColumns"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )( bool ) )(&::irr::gui::IGUITable::setResizableColumns) )
            , ( bp::arg("resizable") ) )    
        .def( 
            "setSelected"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )( ::irr::s32 ) )(&::irr::gui::IGUITable::setSelected) )
            , ( bp::arg("index") ) )    
        .def( 
            "swapRows"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITable::* )( ::irr::u32,::irr::u32 ) )(&::irr::gui::IGUITable::swapRows) )
            , ( bp::arg("rowIndexA"), bp::arg("rowIndexB") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUITable_wrapper::* )( ::irr::SEvent const & ) )(&IGUITable_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUITable_wrapper::* )( ::irr::u32 ) )(&IGUITable_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUITable_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITable_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUITable_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITable_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUITable_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITable_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUITable_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUITable_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUITable_wrapper::* )(  ) )(&IGUITable_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUITable_wrapper::* )( ::irr::s32,bool ) const)(&IGUITable_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUITable_wrapper::* )(  ) const)(&IGUITable_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUITable_wrapper::* )(  ) const)(&IGUITable_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUITable_wrapper::* )(  ) const)(&IGUITable_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUITable_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUITable_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUITable_wrapper::* )(  ) const)(&IGUITable_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUITable_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUITable_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUITable_wrapper::* )(  ) const)(&IGUITable_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUITable_wrapper::* )(  ) const)(&IGUITable_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUITable_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUITable_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUITable_wrapper::* )( bool ) )(&IGUITable_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUITable_wrapper::* )(  ) )(&IGUITable_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUITable_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITable_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUITable_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUITable_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUITable_wrapper::* )( ::irr::c8 const * ) )(&IGUITable_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUITable_wrapper::* )( bool ) )(&IGUITable_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUITable_wrapper::* )( ::irr::s32 ) )(&IGUITable_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUITable_wrapper::* )( bool ) )(&IGUITable_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUITable_wrapper::* )( wchar_t const * ) )(&IGUITable_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUITable_wrapper::* )( wchar_t const * ) )(&IGUITable_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUITable_wrapper::* )( bool ) )(&IGUITable_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUITable_wrapper::* )(  ) )(&IGUITable_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUIToolBar_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUIToolBar", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "addButton"
            , bp::pure_virtual( (::irr::gui::IGUIButton * ( ::irr::gui::IGUIToolBar::* )( ::irr::s32,wchar_t const *,wchar_t const *,::irr::video::ITexture *,::irr::video::ITexture *,bool,bool ) )(&::irr::gui::IGUIToolBar::addButton) )
            , ( bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("text")=bp::object(), bp::arg("tooltiptext")=bp::object(), bp::arg("img")=bp::object(), bp::arg("pressedimg")=bp::object(), bp::arg("isPushButton")=(bool)(false), bp::arg("useAlphaChannel")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUIToolBar_wrapper::* )( ::irr::SEvent const & ) )(&IGUIToolBar_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUIToolBar_wrapper::* )( ::irr::u32 ) )(&IGUIToolBar_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUIToolBar_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIToolBar_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUIToolBar_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIToolBar_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUIToolBar_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIToolBar_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUIToolBar_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUIToolBar_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUIToolBar_wrapper::* )(  ) )(&IGUIToolBar_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUIToolBar_wrapper::* )( ::irr::s32,bool ) const)(&IGUIToolBar_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUIToolBar_wrapper::* )(  ) const)(&IGUIToolBar_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUIToolBar_wrapper::* )(  ) const)(&IGUIToolBar_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUIToolBar_wrapper::* )(  ) const)(&IGUIToolBar_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUIToolBar_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUIToolBar_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUIToolBar_wrapper::* )(  ) const)(&IGUIToolBar_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUIToolBar_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUIToolBar_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUIToolBar_wrapper::* )(  ) const)(&IGUIToolBar_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUIToolBar_wrapper::* )(  ) const)(&IGUIToolBar_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUIToolBar_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUIToolBar_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUIToolBar_wrapper::* )( bool ) )(&IGUIToolBar_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUIToolBar_wrapper::* )(  ) )(&IGUIToolBar_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUIToolBar_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIToolBar_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUIToolBar_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUIToolBar_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIToolBar_wrapper::* )( ::irr::c8 const * ) )(&IGUIToolBar_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUIToolBar_wrapper::* )( bool ) )(&IGUIToolBar_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUIToolBar_wrapper::* )( ::irr::s32 ) )(&IGUIToolBar_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUIToolBar_wrapper::* )( bool ) )(&IGUIToolBar_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUIToolBar_wrapper::* )( wchar_t const * ) )(&IGUIToolBar_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUIToolBar_wrapper::* )( wchar_t const * ) )(&IGUIToolBar_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUIToolBar_wrapper::* )( bool ) )(&IGUIToolBar_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUIToolBar_wrapper::* )(  ) )(&IGUIToolBar_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUITreeView_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUITreeView", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "getImageLeftOfIcon"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUITreeView::* )(  ) const)(&::irr::gui::IGUITreeView::getImageLeftOfIcon) ) )    
        .def( 
            "getImageList"
            , bp::pure_virtual( (::irr::gui::IGUIImageList * ( ::irr::gui::IGUITreeView::* )(  ) const)(&::irr::gui::IGUITreeView::getImageList) )
                /* undefined call policies */ )    
        .def( 
            "getLastEventNode"
            , bp::pure_virtual( (::irr::gui::IGUITreeViewNode * ( ::irr::gui::IGUITreeView::* )(  ) const)(&::irr::gui::IGUITreeView::getLastEventNode) )
                /* undefined call policies */ )    
        .def( 
            "getLinesVisible"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUITreeView::* )(  ) const)(&::irr::gui::IGUITreeView::getLinesVisible) ) )    
        .def( 
            "getRoot"
            , bp::pure_virtual( (::irr::gui::IGUITreeViewNode * ( ::irr::gui::IGUITreeView::* )(  ) const)(&::irr::gui::IGUITreeView::getRoot) )
                /* undefined call policies */ )    
        .def( 
            "getSelected"
            , bp::pure_virtual( (::irr::gui::IGUITreeViewNode * ( ::irr::gui::IGUITreeView::* )(  ) const)(&::irr::gui::IGUITreeView::getSelected) )
                /* undefined call policies */ )    
        .def( 
            "setIconFont"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITreeView::* )( ::irr::gui::IGUIFont * ) )(&::irr::gui::IGUITreeView::setIconFont) )
            , ( bp::arg("font") ) )    
        .def( 
            "setImageLeftOfIcon"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITreeView::* )( bool ) )(&::irr::gui::IGUITreeView::setImageLeftOfIcon) )
            , ( bp::arg("bLeftOf") ) )    
        .def( 
            "setImageList"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITreeView::* )( ::irr::gui::IGUIImageList * ) )(&::irr::gui::IGUITreeView::setImageList) )
            , ( bp::arg("imageList") ) )    
        .def( 
            "setLinesVisible"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITreeView::* )( bool ) )(&::irr::gui::IGUITreeView::setLinesVisible) )
            , ( bp::arg("visible") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUITreeView_wrapper::* )( ::irr::SEvent const & ) )(&IGUITreeView_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUITreeView_wrapper::* )( ::irr::u32 ) )(&IGUITreeView_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUITreeView_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITreeView_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUITreeView_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITreeView_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUITreeView_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITreeView_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUITreeView_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUITreeView_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUITreeView_wrapper::* )(  ) )(&IGUITreeView_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUITreeView_wrapper::* )( ::irr::s32,bool ) const)(&IGUITreeView_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUITreeView_wrapper::* )(  ) const)(&IGUITreeView_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUITreeView_wrapper::* )(  ) const)(&IGUITreeView_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUITreeView_wrapper::* )(  ) const)(&IGUITreeView_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUITreeView_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUITreeView_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUITreeView_wrapper::* )(  ) const)(&IGUITreeView_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUITreeView_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUITreeView_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUITreeView_wrapper::* )(  ) const)(&IGUITreeView_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUITreeView_wrapper::* )(  ) const)(&IGUITreeView_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUITreeView_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUITreeView_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUITreeView_wrapper::* )( bool ) )(&IGUITreeView_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUITreeView_wrapper::* )(  ) )(&IGUITreeView_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUITreeView_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUITreeView_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUITreeView_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUITreeView_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUITreeView_wrapper::* )( ::irr::c8 const * ) )(&IGUITreeView_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUITreeView_wrapper::* )( bool ) )(&IGUITreeView_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUITreeView_wrapper::* )( ::irr::s32 ) )(&IGUITreeView_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUITreeView_wrapper::* )( bool ) )(&IGUITreeView_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUITreeView_wrapper::* )( wchar_t const * ) )(&IGUITreeView_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUITreeView_wrapper::* )( wchar_t const * ) )(&IGUITreeView_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUITreeView_wrapper::* )( bool ) )(&IGUITreeView_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUITreeView_wrapper::* )(  ) )(&IGUITreeView_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGUITreeViewNode_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IGUITreeViewNode" )    
        .def( 
            "addChildBack"
            , bp::pure_virtual( (::irr::gui::IGUITreeViewNode * ( ::irr::gui::IGUITreeViewNode::* )( wchar_t const *,wchar_t const *,::irr::s32,::irr::s32,void *,::irr::IReferenceCounted * ) )(&::irr::gui::IGUITreeViewNode::addChildBack) )
            , ( bp::arg("text"), bp::arg("icon")=bp::object(), bp::arg("imageIndex")=(::irr::s32)(-0x00000000000000001), bp::arg("selectedImageIndex")=(::irr::s32)(-0x00000000000000001), bp::arg("data")=bp::object(), bp::arg("data2")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "addChildFront"
            , bp::pure_virtual( (::irr::gui::IGUITreeViewNode * ( ::irr::gui::IGUITreeViewNode::* )( wchar_t const *,wchar_t const *,::irr::s32,::irr::s32,void *,::irr::IReferenceCounted * ) )(&::irr::gui::IGUITreeViewNode::addChildFront) )
            , ( bp::arg("text"), bp::arg("icon")=bp::object(), bp::arg("imageIndex")=(::irr::s32)(-0x00000000000000001), bp::arg("selectedImageIndex")=(::irr::s32)(-0x00000000000000001), bp::arg("data")=bp::object(), bp::arg("data2")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "clearChilds"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITreeViewNode::* )(  ) )(&::irr::gui::IGUITreeViewNode::clearChilds) ) )    
        .def( 
            "deleteChild"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUITreeViewNode::* )( ::irr::gui::IGUITreeViewNode * ) )(&::irr::gui::IGUITreeViewNode::deleteChild) )
            , ( bp::arg("child") ) )    
        .def( 
            "getChildCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getChildCount) ) )    
        .def( 
            "getData"
            , bp::pure_virtual( (void * ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getData) )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "getData2"
            , bp::pure_virtual( (::irr::IReferenceCounted * ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getData2) )
                /* undefined call policies */ )    
        .def( 
            "getExpanded"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getExpanded) ) )    
        .def( 
            "getFirstChild"
            , bp::pure_virtual( (::irr::gui::IGUITreeViewNode * ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getFirstChild) )
                /* undefined call policies */ )    
        .def( 
            "getIcon"
            , bp::pure_virtual( (wchar_t const * ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getIcon) )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getImageIndex"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getImageIndex) ) )    
        .def( 
            "getLastChild"
            , bp::pure_virtual( (::irr::gui::IGUITreeViewNode * ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getLastChild) )
                /* undefined call policies */ )    
        .def( 
            "getLevel"
            , bp::pure_virtual( (::irr::s32 ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getLevel) ) )    
        .def( 
            "getNextSibling"
            , bp::pure_virtual( (::irr::gui::IGUITreeViewNode * ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getNextSibling) )
                /* undefined call policies */ )    
        .def( 
            "getNextVisible"
            , bp::pure_virtual( (::irr::gui::IGUITreeViewNode * ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getNextVisible) )
                /* undefined call policies */ )    
        .def( 
            "getOwner"
            , bp::pure_virtual( (::irr::gui::IGUITreeView * ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getOwner) )
                /* undefined call policies */ )    
        .def( 
            "getParent"
            , bp::pure_virtual( (::irr::gui::IGUITreeViewNode * ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getParent) )
                /* undefined call policies */ )    
        .def( 
            "getPrevSibling"
            , bp::pure_virtual( (::irr::gui::IGUITreeViewNode * ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getPrevSibling) )
                /* undefined call policies */ )    
        .def( 
            "getSelected"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getSelected) ) )    
        .def( 
            "getSelectedImageIndex"
            , bp::pure_virtual( (::irr::u32 ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getSelectedImageIndex) ) )    
        .def( 
            "getText"
            , bp::pure_virtual( (wchar_t const * ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::getText) )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "hasChilds"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::hasChilds) ) )    
        .def( 
            "insertChildAfter"
            , bp::pure_virtual( (::irr::gui::IGUITreeViewNode * ( ::irr::gui::IGUITreeViewNode::* )( ::irr::gui::IGUITreeViewNode *,wchar_t const *,wchar_t const *,::irr::s32,::irr::s32,void *,::irr::IReferenceCounted * ) )(&::irr::gui::IGUITreeViewNode::insertChildAfter) )
            , ( bp::arg("other"), bp::arg("text"), bp::arg("icon")=bp::object(), bp::arg("imageIndex")=(::irr::s32)(-0x00000000000000001), bp::arg("selectedImageIndex")=(::irr::s32)(-0x00000000000000001), bp::arg("data")=bp::object(), bp::arg("data2")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "insertChildBefore"
            , bp::pure_virtual( (::irr::gui::IGUITreeViewNode * ( ::irr::gui::IGUITreeViewNode::* )( ::irr::gui::IGUITreeViewNode *,wchar_t const *,wchar_t const *,::irr::s32,::irr::s32,void *,::irr::IReferenceCounted * ) )(&::irr::gui::IGUITreeViewNode::insertChildBefore) )
            , ( bp::arg("other"), bp::arg("text"), bp::arg("icon")=bp::object(), bp::arg("imageIndex")=(::irr::s32)(-0x00000000000000001), bp::arg("selectedImageIndex")=(::irr::s32)(-0x00000000000000001), bp::arg("data")=bp::object(), bp::arg("data2")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "isRoot"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::isRoot) ) )    
        .def( 
            "isVisible"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUITreeViewNode::* )(  ) const)(&::irr::gui::IGUITreeViewNode::isVisible) ) )    
        .def( 
            "moveChildDown"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUITreeViewNode::* )( ::irr::gui::IGUITreeViewNode * ) )(&::irr::gui::IGUITreeViewNode::moveChildDown) )
            , ( bp::arg("child") ) )    
        .def( 
            "moveChildUp"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUITreeViewNode::* )( ::irr::gui::IGUITreeViewNode * ) )(&::irr::gui::IGUITreeViewNode::moveChildUp) )
            , ( bp::arg("child") ) )    
        .def( 
            "setData"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITreeViewNode::* )( void * ) )(&::irr::gui::IGUITreeViewNode::setData) )
            , ( bp::arg("data") ) )    
        .def( 
            "setData2"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITreeViewNode::* )( ::irr::IReferenceCounted * ) )(&::irr::gui::IGUITreeViewNode::setData2) )
            , ( bp::arg("data") ) )    
        .def( 
            "setExpanded"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITreeViewNode::* )( bool ) )(&::irr::gui::IGUITreeViewNode::setExpanded) )
            , ( bp::arg("expanded") ) )    
        .def( 
            "setIcon"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITreeViewNode::* )( wchar_t const * ) )(&::irr::gui::IGUITreeViewNode::setIcon) )
            , ( bp::arg("icon") ) )    
        .def( 
            "setImageIndex"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITreeViewNode::* )( ::irr::u32 ) )(&::irr::gui::IGUITreeViewNode::setImageIndex) )
            , ( bp::arg("imageIndex") ) )    
        .def( 
            "setSelected"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITreeViewNode::* )( bool ) )(&::irr::gui::IGUITreeViewNode::setSelected) )
            , ( bp::arg("selected") ) )    
        .def( 
            "setSelectedImageIndex"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITreeViewNode::* )( ::irr::u32 ) )(&::irr::gui::IGUITreeViewNode::setSelectedImageIndex) )
            , ( bp::arg("imageIndex") ) )    
        .def( 
            "setText"
            , bp::pure_virtual( (void ( ::irr::gui::IGUITreeViewNode::* )( wchar_t const * ) )(&::irr::gui::IGUITreeViewNode::setText) )
            , ( bp::arg("text") ) )    
        .def( 
            "setDebugName"
            , (void ( IGUITreeViewNode_wrapper::* )( ::irr::c8 const * ) )(&IGUITreeViewNode_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IGUIWindow_wrapper, bp::bases< irr::gui::IGUIElement >, boost::noncopyable >( "IGUIWindow", bp::init< irr::gui::IGUIEnvironment *, irr::gui::IGUIElement *, irr::s32, irr::core::rect< int > >(( bp::arg("environment"), bp::arg("parent"), bp::arg("id"), bp::arg("rectangle") )) )    
        .def( 
            "getClientRect"
            , bp::pure_virtual( (::irr::core::rect< int > ( ::irr::gui::IGUIWindow::* )(  ) const)(&::irr::gui::IGUIWindow::getClientRect) ) )    
        .def( 
            "getCloseButton"
            , bp::pure_virtual( (::irr::gui::IGUIButton * ( ::irr::gui::IGUIWindow::* )(  ) const)(&::irr::gui::IGUIWindow::getCloseButton) )
                /* undefined call policies */ )    
        .def( 
            "getDrawBackground"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIWindow::* )(  ) const)(&::irr::gui::IGUIWindow::getDrawBackground) ) )    
        .def( 
            "getDrawTitlebar"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIWindow::* )(  ) const)(&::irr::gui::IGUIWindow::getDrawTitlebar) ) )    
        .def( 
            "getMaximizeButton"
            , bp::pure_virtual( (::irr::gui::IGUIButton * ( ::irr::gui::IGUIWindow::* )(  ) const)(&::irr::gui::IGUIWindow::getMaximizeButton) )
                /* undefined call policies */ )    
        .def( 
            "getMinimizeButton"
            , bp::pure_virtual( (::irr::gui::IGUIButton * ( ::irr::gui::IGUIWindow::* )(  ) const)(&::irr::gui::IGUIWindow::getMinimizeButton) )
                /* undefined call policies */ )    
        .def( 
            "isDraggable"
            , bp::pure_virtual( (bool ( ::irr::gui::IGUIWindow::* )(  ) const)(&::irr::gui::IGUIWindow::isDraggable) ) )    
        .def( 
            "setDraggable"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIWindow::* )( bool ) )(&::irr::gui::IGUIWindow::setDraggable) )
            , ( bp::arg("draggable") ) )    
        .def( 
            "setDrawBackground"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIWindow::* )( bool ) )(&::irr::gui::IGUIWindow::setDrawBackground) )
            , ( bp::arg("draw") ) )    
        .def( 
            "setDrawTitlebar"
            , bp::pure_virtual( (void ( ::irr::gui::IGUIWindow::* )( bool ) )(&::irr::gui::IGUIWindow::setDrawTitlebar) )
            , ( bp::arg("draw") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::SEvent const & ) )(&::irr::gui::IGUIElement::OnEvent)
            , (bool ( IGUIWindow_wrapper::* )( ::irr::SEvent const & ) )(&IGUIWindow_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "OnPostRender"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::u32 ) )(&::irr::gui::IGUIElement::OnPostRender)
            , (void ( IGUIWindow_wrapper::* )( ::irr::u32 ) )(&IGUIWindow_wrapper::default_OnPostRender)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::addChild)
            , (void ( IGUIWindow_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIWindow_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "addChildToEnd"
            , (void ( IGUIWindow_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIWindow_wrapper::addChildToEnd)
            , ( bp::arg("child") ) )    
        .def( 
            "bringToFront"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::bringToFront)
            , (bool ( IGUIWindow_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIWindow_wrapper::default_bringToFront)
            , ( bp::arg("element") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::gui::IGUIElement::deserializeAttributes)
            , (void ( IGUIWindow_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IGUIWindow_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "draw"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::draw)
            , (void ( IGUIWindow_wrapper::* )(  ) )(&IGUIWindow_wrapper::default_draw) )    
        .def( 
            "getChildren"
            , (::irr::core::list<irr::gui::IGUIElement*> const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getChildren)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getElementFromId"
            , (::irr::gui::IGUIElement * ( ::irr::gui::IGUIElement::* )( ::irr::s32,bool ) const)(&::irr::gui::IGUIElement::getElementFromId)
            , (::irr::gui::IGUIElement * ( IGUIWindow_wrapper::* )( ::irr::s32,bool ) const)(&IGUIWindow_wrapper::default_getElementFromId)
            , ( bp::arg("id"), bp::arg("searchchildren")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getID)
            , (::irr::s32 ( IGUIWindow_wrapper::* )(  ) const)(&IGUIWindow_wrapper::default_getID) )    
        .def( 
            "getText"
            , (wchar_t const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getText)
            , (wchar_t const * ( IGUIWindow_wrapper::* )(  ) const)(&IGUIWindow_wrapper::default_getText)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getToolTipText"
            , (::irr::core::stringw const & ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getToolTipText)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTypeName"
            , (::irr::c8 const * ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::getTypeName)
            , (::irr::c8 const * ( IGUIWindow_wrapper::* )(  ) const)(&IGUIWindow_wrapper::default_getTypeName) )    
        .def( 
            "hasType"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&::irr::gui::IGUIElement::hasType)
            , (bool ( IGUIWindow_wrapper::* )( ::irr::gui::EGUI_ELEMENT_TYPE ) const)(&IGUIWindow_wrapper::default_hasType)
            , ( bp::arg("type") ) )    
        .def( 
            "isEnabled"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isEnabled)
            , (bool ( IGUIWindow_wrapper::* )(  ) const)(&IGUIWindow_wrapper::default_isEnabled) )    
        .def( 
            "isPointInside"
            , (bool ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > const & ) const)(&::irr::gui::IGUIElement::isPointInside)
            , (bool ( IGUIWindow_wrapper::* )( ::irr::core::vector2d< int > const & ) const)(&IGUIWindow_wrapper::default_isPointInside)
            , ( bp::arg("point") ) )    
        .def( 
            "isSubElement"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isSubElement)
            , (bool ( IGUIWindow_wrapper::* )(  ) const)(&IGUIWindow_wrapper::default_isSubElement) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::gui::IGUIElement::* )(  ) const)(&::irr::gui::IGUIElement::isVisible)
            , (bool ( IGUIWindow_wrapper::* )(  ) const)(&IGUIWindow_wrapper::default_isVisible) )    
        .def( 
            "move"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::core::vector2d< int > ) )(&::irr::gui::IGUIElement::move)
            , (void ( IGUIWindow_wrapper::* )( ::irr::core::vector2d< int > ) )(&IGUIWindow_wrapper::default_move)
            , ( bp::arg("absoluteMovement") ) )    
        .def( 
            "recalculateAbsolutePosition"
            , (void ( IGUIWindow_wrapper::* )( bool ) )(&IGUIWindow_wrapper::recalculateAbsolutePosition)
            , ( bp::arg("recursive") ) )    
        .def( 
            "remove"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::remove)
            , (void ( IGUIWindow_wrapper::* )(  ) )(&IGUIWindow_wrapper::default_remove) )    
        .def( 
            "removeChild"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::gui::IGUIElement * ) )(&::irr::gui::IGUIElement::removeChild)
            , (void ( IGUIWindow_wrapper::* )( ::irr::gui::IGUIElement * ) )(&IGUIWindow_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::gui::IGUIElement::serializeAttributes)
            , (void ( IGUIWindow_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IGUIWindow_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IGUIWindow_wrapper::* )( ::irr::c8 const * ) )(&IGUIWindow_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setEnabled)
            , (void ( IGUIWindow_wrapper::* )( bool ) )(&IGUIWindow_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "setID"
            , (void ( ::irr::gui::IGUIElement::* )( ::irr::s32 ) )(&::irr::gui::IGUIElement::setID)
            , (void ( IGUIWindow_wrapper::* )( ::irr::s32 ) )(&IGUIWindow_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setSubElement"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setSubElement)
            , (void ( IGUIWindow_wrapper::* )( bool ) )(&IGUIWindow_wrapper::default_setSubElement)
            , ( bp::arg("subElement") ) )    
        .def( 
            "setText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setText)
            , (void ( IGUIWindow_wrapper::* )( wchar_t const * ) )(&IGUIWindow_wrapper::default_setText)
            , ( bp::arg("text") ) )    
        .def( 
            "setToolTipText"
            , (void ( ::irr::gui::IGUIElement::* )( wchar_t const * ) )(&::irr::gui::IGUIElement::setToolTipText)
            , (void ( IGUIWindow_wrapper::* )( wchar_t const * ) )(&IGUIWindow_wrapper::default_setToolTipText)
            , ( bp::arg("text") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::gui::IGUIElement::* )( bool ) )(&::irr::gui::IGUIElement::setVisible)
            , (void ( IGUIWindow_wrapper::* )( bool ) )(&IGUIWindow_wrapper::default_setVisible)
            , ( bp::arg("visible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::gui::IGUIElement::* )(  ) )(&::irr::gui::IGUIElement::updateAbsolutePosition)
            , (void ( IGUIWindow_wrapper::* )(  ) )(&IGUIWindow_wrapper::default_updateAbsolutePosition) );

    bp::class_< irr::gui::SGUISprite >( "SGUISprite", bp::init< >() )    
        .def_readwrite( "Frames", &irr::gui::SGUISprite::Frames )    
        .def_readwrite( "frameTime", &irr::gui::SGUISprite::frameTime );

    bp::class_< irr::gui::SGUISpriteFrame >( "SGUISpriteFrame" )    
        .def_readwrite( "rectNumber", &irr::gui::SGUISpriteFrame::rectNumber )    
        .def_readwrite( "textureNumber", &irr::gui::SGUISpriteFrame::textureNumber );

    bp::class_< IArchiveLoader_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IArchiveLoader" )    
        .def( 
            "createArchive"
            , bp::pure_virtual( (::irr::io::IFileArchive * ( ::irr::io::IArchiveLoader::* )( ::irr::io::path const &,bool,bool ) const)(&::irr::io::IArchiveLoader::createArchive) )
            , ( bp::arg("filename"), bp::arg("ignoreCase"), bp::arg("ignorePaths") )
                /* undefined call policies */ )    
        .def( 
            "createArchive"
            , bp::pure_virtual( (::irr::io::IFileArchive * ( ::irr::io::IArchiveLoader::* )( ::irr::io::IReadFile *,bool,bool ) const)(&::irr::io::IArchiveLoader::createArchive) )
            , ( bp::arg("file"), bp::arg("ignoreCase"), bp::arg("ignorePaths") )
                /* undefined call policies */ )    
        .def( 
            "isALoadableFileFormat"
            , bp::pure_virtual( (bool ( ::irr::io::IArchiveLoader::* )( ::irr::io::path const & ) const)(&::irr::io::IArchiveLoader::isALoadableFileFormat) )
            , ( bp::arg("filename") ) )    
        .def( 
            "isALoadableFileFormat"
            , bp::pure_virtual( (bool ( ::irr::io::IArchiveLoader::* )( ::irr::io::IReadFile * ) const)(&::irr::io::IArchiveLoader::isALoadableFileFormat) )
            , ( bp::arg("file") ) )    
        .def( 
            "isALoadableFileFormat"
            , bp::pure_virtual( (bool ( ::irr::io::IArchiveLoader::* )( ::irr::io::E_FILE_ARCHIVE_TYPE ) const)(&::irr::io::IArchiveLoader::isALoadableFileFormat) )
            , ( bp::arg("fileType") ) )    
        .def( 
            "setDebugName"
            , (void ( IArchiveLoader_wrapper::* )( ::irr::c8 const * ) )(&IArchiveLoader_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IAttributes_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IAttributes" )    
        .def( 
            "addArray"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::array< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >, irr::core::irrAllocator< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > > > const & ) )(&::irr::io::IAttributes::addArray) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "addBinary"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,void *,::irr::s32 ) )(&::irr::io::IAttributes::addBinary) )
            , ( bp::arg("attributeName"), bp::arg("data"), bp::arg("dataSizeInBytes") ) )    
        .def( 
            "addBool"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,bool ) )(&::irr::io::IAttributes::addBool) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "addBox3d"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::aabbox3df ) )(&::irr::io::IAttributes::addBox3d) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "addColor"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::video::SColor ) )(&::irr::io::IAttributes::addColor) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "addColorf"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::video::SColorf ) )(&::irr::io::IAttributes::addColorf) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "addEnum"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::c8 const *,::irr::c8 const * const * ) )(&::irr::io::IAttributes::addEnum) )
            , ( bp::arg("attributeName"), bp::arg("enumValue"), bp::arg("enumerationLiterals") ) )    
        .def( 
            "addEnum"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::s32,::irr::c8 const * const * ) )(&::irr::io::IAttributes::addEnum) )
            , ( bp::arg("attributeName"), bp::arg("enumValue"), bp::arg("enumerationLiterals") ) )    
        .def( 
            "addFloat"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::f32 ) )(&::irr::io::IAttributes::addFloat) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "addInt"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::s32 ) )(&::irr::io::IAttributes::addInt) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "addLine2d"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::line2df ) )(&::irr::io::IAttributes::addLine2d) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "addLine3d"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::line3df ) )(&::irr::io::IAttributes::addLine3d) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "addMatrix"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::matrix4 const & ) )(&::irr::io::IAttributes::addMatrix) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "addPlane3d"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::plane3df ) )(&::irr::io::IAttributes::addPlane3d) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "addPosition2d"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::position2di ) )(&::irr::io::IAttributes::addPosition2d) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "addQuaternion"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::quaternion ) )(&::irr::io::IAttributes::addQuaternion) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "addRect"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::rect< int > ) )(&::irr::io::IAttributes::addRect) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "addString"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::c8 const * ) )(&::irr::io::IAttributes::addString) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "addString"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,wchar_t const * ) )(&::irr::io::IAttributes::addString) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "addTexture"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::video::ITexture * ) )(&::irr::io::IAttributes::addTexture) )
            , ( bp::arg("attributeName"), bp::arg("texture") ) )    
        .def( 
            "addTriangle3d"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::triangle3df ) )(&::irr::io::IAttributes::addTriangle3d) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "addUserPointer"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,void * ) )(&::irr::io::IAttributes::addUserPointer) )
            , ( bp::arg("attributeName"), bp::arg("userPointer") ) )    
        .def( 
            "addVector3d"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::vector3df ) )(&::irr::io::IAttributes::addVector3d) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "clear"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )(  ) )(&::irr::io::IAttributes::clear) ) )    
        .def( 
            "existsAttribute"
            , bp::pure_virtual( (bool ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::existsAttribute) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "findAttribute"
            , bp::pure_virtual( (::irr::s32 ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::findAttribute) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsArray"
            , bp::pure_virtual( (::irr::core::array< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >, irr::core::irrAllocator< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > > > ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsArray) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsArray"
            , bp::pure_virtual( (::irr::core::array< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >, irr::core::irrAllocator< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > > > ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsArray) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsBinaryData"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,void *,::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsBinaryData) )
            , ( bp::arg("attributeName"), bp::arg("outData"), bp::arg("maxSizeInBytes") ) )    
        .def( 
            "getAttributeAsBinaryData"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,void *,::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsBinaryData) )
            , ( bp::arg("index"), bp::arg("outData"), bp::arg("maxSizeInBytes") ) )    
        .def( 
            "getAttributeAsBool"
            , bp::pure_virtual( (bool ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsBool) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsBool"
            , bp::pure_virtual( (bool ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsBool) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsBox3d"
            , bp::pure_virtual( (::irr::core::aabbox3df ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsBox3d) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsBox3d"
            , bp::pure_virtual( (::irr::core::aabbox3df ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsBox3d) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsColor"
            , bp::pure_virtual( (::irr::video::SColor ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsColor) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsColor"
            , bp::pure_virtual( (::irr::video::SColor ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsColor) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsColorf"
            , bp::pure_virtual( (::irr::video::SColorf ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsColorf) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsColorf"
            , bp::pure_virtual( (::irr::video::SColorf ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsColorf) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsEnumeration"
            , bp::pure_virtual( (::irr::c8 const * ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsEnumeration) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsEnumeration"
            , bp::pure_virtual( (::irr::s32 ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::c8 const * const * ) )(&::irr::io::IAttributes::getAttributeAsEnumeration) )
            , ( bp::arg("attributeName"), bp::arg("enumerationLiteralsToUse") ) )    
        .def( 
            "getAttributeAsEnumeration"
            , bp::pure_virtual( (::irr::s32 ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::c8 const * const * ) )(&::irr::io::IAttributes::getAttributeAsEnumeration) )
            , ( bp::arg("index"), bp::arg("enumerationLiteralsToUse") ) )    
        .def( 
            "getAttributeAsEnumeration"
            , bp::pure_virtual( (::irr::c8 const * ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsEnumeration) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsFloat"
            , bp::pure_virtual( (::irr::f32 ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsFloat) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsFloat"
            , bp::pure_virtual( (::irr::f32 ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsFloat) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsInt"
            , bp::pure_virtual( (::irr::s32 ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsInt) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsInt"
            , bp::pure_virtual( (::irr::s32 ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsInt) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsLine2d"
            , bp::pure_virtual( (::irr::core::line2df ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsLine2d) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsLine2d"
            , bp::pure_virtual( (::irr::core::line2df ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsLine2d) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsLine3d"
            , bp::pure_virtual( (::irr::core::line3df ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsLine3d) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsLine3d"
            , bp::pure_virtual( (::irr::core::line3df ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsLine3d) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsMatrix"
            , bp::pure_virtual( (::irr::core::matrix4 ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsMatrix) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsMatrix"
            , bp::pure_virtual( (::irr::core::matrix4 ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsMatrix) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsPlane3d"
            , bp::pure_virtual( (::irr::core::plane3df ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsPlane3d) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsPlane3d"
            , bp::pure_virtual( (::irr::core::plane3df ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsPlane3d) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsPosition2d"
            , bp::pure_virtual( (::irr::core::position2di ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsPosition2d) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsPosition2d"
            , bp::pure_virtual( (::irr::core::position2di ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsPosition2d) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsQuaternion"
            , bp::pure_virtual( (::irr::core::quaternion ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsQuaternion) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsQuaternion"
            , bp::pure_virtual( (::irr::core::quaternion ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsQuaternion) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsRect"
            , bp::pure_virtual( (::irr::core::rect< int > ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsRect) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsRect"
            , bp::pure_virtual( (::irr::core::rect< int > ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsRect) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsString"
            , bp::pure_virtual( (::irr::core::stringc ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsString) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsString"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::c8 * ) )(&::irr::io::IAttributes::getAttributeAsString) )
            , ( bp::arg("attributeName"), bp::arg("target") ) )    
        .def( 
            "getAttributeAsString"
            , bp::pure_virtual( (::irr::core::stringc ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsString) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsStringW"
            , bp::pure_virtual( (::irr::core::stringw ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsStringW) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsStringW"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,wchar_t * ) )(&::irr::io::IAttributes::getAttributeAsStringW) )
            , ( bp::arg("attributeName"), bp::arg("target") ) )    
        .def( 
            "getAttributeAsStringW"
            , bp::pure_virtual( (::irr::core::stringw ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsStringW) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsTexture"
            , bp::pure_virtual( (::irr::video::ITexture * ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsTexture) )
            , ( bp::arg("attributeName") )
                /* undefined call policies */ )    
        .def( 
            "getAttributeAsTexture"
            , bp::pure_virtual( (::irr::video::ITexture * ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsTexture) )
            , ( bp::arg("index") )
                /* undefined call policies */ )    
        .def( 
            "getAttributeAsTriangle3d"
            , bp::pure_virtual( (::irr::core::triangle3df ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsTriangle3d) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsTriangle3d"
            , bp::pure_virtual( (::irr::core::triangle3df ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsTriangle3d) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeAsUserPointer"
            , bp::pure_virtual( (void * ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsUserPointer) )
            , ( bp::arg("attributeName") )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "getAttributeAsUserPointer"
            , bp::pure_virtual( (void * ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsUserPointer) )
            , ( bp::arg("index") )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "getAttributeAsVector3d"
            , bp::pure_virtual( (::irr::core::vector3df ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeAsVector3d) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeAsVector3d"
            , bp::pure_virtual( (::irr::core::vector3df ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeAsVector3d) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::io::IAttributes::* )(  ) const)(&::irr::io::IAttributes::getAttributeCount) ) )    
        .def( 
            "getAttributeEnumerationLiteralsOfEnumeration"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > & ) )(&::irr::io::IAttributes::getAttributeEnumerationLiteralsOfEnumeration) )
            , ( bp::arg("attributeName"), bp::arg("outLiterals") ) )    
        .def( 
            "getAttributeEnumerationLiteralsOfEnumeration"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::core::array< irr::core::string< char, irr::core::irrAllocator< char > >, irr::core::irrAllocator< irr::core::string< char, irr::core::irrAllocator< char > > > > & ) )(&::irr::io::IAttributes::getAttributeEnumerationLiteralsOfEnumeration) )
            , ( bp::arg("index"), bp::arg("outLiterals") ) )    
        .def( 
            "getAttributeName"
            , bp::pure_virtual( (::irr::c8 const * ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeName) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeType"
            , bp::pure_virtual( (::irr::io::E_ATTRIBUTE_TYPE ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeType) )
            , ( bp::arg("attributeName") ) )    
        .def( 
            "getAttributeType"
            , bp::pure_virtual( (::irr::io::E_ATTRIBUTE_TYPE ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeType) )
            , ( bp::arg("index") ) )    
        .def( 
            "getAttributeTypeString"
            , bp::pure_virtual( (wchar_t const * ( ::irr::io::IAttributes::* )( ::irr::c8 const * ) )(&::irr::io::IAttributes::getAttributeTypeString) )
            , ( bp::arg("attributeName") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getAttributeTypeString"
            , bp::pure_virtual( (wchar_t const * ( ::irr::io::IAttributes::* )( ::irr::s32 ) )(&::irr::io::IAttributes::getAttributeTypeString) )
            , ( bp::arg("index") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "read"
            , bp::pure_virtual( (bool ( ::irr::io::IAttributes::* )( ::irr::io::IXMLReader *,bool,wchar_t const * ) )(&::irr::io::IAttributes::read) )
            , ( bp::arg("reader"), bp::arg("readCurrentElementOnly")=(bool)(false), bp::arg("elementName")=bp::object() ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::s32 ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::s32 ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("value") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::f32 ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::f32 ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("value") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::c8 const * ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::c8 const * ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("value") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,wchar_t const * ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,wchar_t const * ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("value") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,void *,::irr::s32 ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("data"), bp::arg("dataSizeInBytes") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,void *,::irr::s32 ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("data"), bp::arg("dataSizeInBytes") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::array< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >, irr::core::irrAllocator< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > > > const & ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::core::array< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >, irr::core::irrAllocator< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > > > const & ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("value") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,bool ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("value") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,bool ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("value") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::c8 const *,::irr::c8 const * const * ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("enumValue"), bp::arg("enumerationLiterals") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::c8 const *,::irr::c8 const * const * ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("enumValue"), bp::arg("enumerationLiterals") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::video::SColor ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("color") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::video::SColor ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("color") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::video::SColorf ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("color") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::video::SColorf ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("color") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::vector3df ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::core::vector3df ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::position2di ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::core::position2di ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::rect< int > ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::core::rect< int > ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::matrix4 const & ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::core::matrix4 const & ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::quaternion ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::core::quaternion ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::aabbox3df ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::core::aabbox3df ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::plane3df ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::core::plane3df ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::triangle3df ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::core::triangle3df ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::line2df ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::core::line2df ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::core::line3df ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::core::line3df ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("v") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,::irr::video::ITexture * ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("texture") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,::irr::video::ITexture * ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("texture") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::c8 const *,void * ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("attributeName"), bp::arg("userPointer") ) )    
        .def( 
            "setAttribute"
            , bp::pure_virtual( (void ( ::irr::io::IAttributes::* )( ::irr::s32,void * ) )(&::irr::io::IAttributes::setAttribute) )
            , ( bp::arg("index"), bp::arg("userPointer") ) )    
        .def( 
            "write"
            , bp::pure_virtual( (bool ( ::irr::io::IAttributes::* )( ::irr::io::IXMLWriter *,bool,wchar_t const * ) )(&::irr::io::IAttributes::write) )
            , ( bp::arg("writer"), bp::arg("writeXMLHeader")=(bool)(false), bp::arg("elementName")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IAttributes_wrapper::* )( ::irr::c8 const * ) )(&IAttributes_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IFileArchive_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IFileArchive" )    
        .def( 
            "createAndOpenFile"
            , bp::pure_virtual( (::irr::io::IReadFile * ( ::irr::io::IFileArchive::* )( ::irr::io::path const & ) )(&::irr::io::IFileArchive::createAndOpenFile) )
            , ( bp::arg("filename") )
                /* undefined call policies */ )    
        .def( 
            "createAndOpenFile"
            , bp::pure_virtual( (::irr::io::IReadFile * ( ::irr::io::IFileArchive::* )( ::irr::u32 ) )(&::irr::io::IFileArchive::createAndOpenFile) )
            , ( bp::arg("index") )
                /* undefined call policies */ )    
        .def( 
            "getFileList"
            , bp::pure_virtual( (::irr::io::IFileList const * ( ::irr::io::IFileArchive::* )(  ) const)(&::irr::io::IFileArchive::getFileList) )
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::io::E_FILE_ARCHIVE_TYPE ( ::irr::io::IFileArchive::* )(  ) const)(&::irr::io::IFileArchive::getType)
            , (::irr::io::E_FILE_ARCHIVE_TYPE ( IFileArchive_wrapper::* )(  ) const)(&IFileArchive_wrapper::default_getType) )    
        .def_readwrite( "Password", &irr::io::IFileArchive::Password )    
        .def( 
            "setDebugName"
            , (void ( IFileArchive_wrapper::* )( ::irr::c8 const * ) )(&IFileArchive_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IFileList_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IFileList" )    
        .def( 
            "addItem"
            , bp::pure_virtual( (::irr::u32 ( ::irr::io::IFileList::* )( ::irr::io::path const &,::irr::u32,bool,::irr::u32 ) )(&::irr::io::IFileList::addItem) )
            , ( bp::arg("fullPath"), bp::arg("size"), bp::arg("isDirectory"), bp::arg("id")=(::irr::u32)(0) ) )    
        .def( 
            "findFile"
            , bp::pure_virtual( (::irr::s32 ( ::irr::io::IFileList::* )( ::irr::io::path const &,bool ) const)(&::irr::io::IFileList::findFile) )
            , ( bp::arg("filename"), bp::arg("isFolder")=(bool)(false) ) )    
        .def( 
            "getFileCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::io::IFileList::* )(  ) const)(&::irr::io::IFileList::getFileCount) ) )    
        .def( 
            "getFileName"
            , bp::pure_virtual( (::irr::io::path const & ( ::irr::io::IFileList::* )( ::irr::u32 ) const)(&::irr::io::IFileList::getFileName) )
            , ( bp::arg("index") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getFileSize"
            , bp::pure_virtual( (::irr::u32 ( ::irr::io::IFileList::* )( ::irr::u32 ) const)(&::irr::io::IFileList::getFileSize) )
            , ( bp::arg("index") ) )    
        .def( 
            "getFullFileName"
            , bp::pure_virtual( (::irr::io::path const & ( ::irr::io::IFileList::* )( ::irr::u32 ) const)(&::irr::io::IFileList::getFullFileName) )
            , ( bp::arg("index") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getID"
            , bp::pure_virtual( (::irr::u32 ( ::irr::io::IFileList::* )( ::irr::u32 ) const)(&::irr::io::IFileList::getID) )
            , ( bp::arg("index") ) )    
        .def( 
            "getPath"
            , bp::pure_virtual( (::irr::io::path const & ( ::irr::io::IFileList::* )(  ) const)(&::irr::io::IFileList::getPath) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "isDirectory"
            , bp::pure_virtual( (bool ( ::irr::io::IFileList::* )( ::irr::u32 ) const)(&::irr::io::IFileList::isDirectory) )
            , ( bp::arg("index") ) )    
        .def( 
            "sort"
            , bp::pure_virtual( (void ( ::irr::io::IFileList::* )(  ) )(&::irr::io::IFileList::sort) ) )    
        .def( 
            "setDebugName"
            , (void ( IFileList_wrapper::* )( ::irr::c8 const * ) )(&IFileList_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IFileReadCallBack_wrapper, boost::noncopyable >( "IFileReadCallBack" )    
        .def( 
            "getSize"
            , bp::pure_virtual( (long int ( ::irr::io::IFileReadCallBack::* )(  ) const)(&::irr::io::IFileReadCallBack::getSize) ) )    
        .def( 
            "read"
            , bp::pure_virtual( (int ( ::irr::io::IFileReadCallBack::* )( void *,int ) )(&::irr::io::IFileReadCallBack::read) )
            , ( bp::arg("buffer"), bp::arg("sizeToRead") ) );

    { //::irr::video::SExposedVideoData
        typedef bp::class_< irr::video::SExposedVideoData > SExposedVideoData_exposer_t;
        SExposedVideoData_exposer_t SExposedVideoData_exposer = SExposedVideoData_exposer_t( "SExposedVideoData", bp::init< >() );
        bp::scope SExposedVideoData_scope( SExposedVideoData_exposer );
        SExposedVideoData_exposer.def_readwrite( "X11Window", &irr::video::SExposedVideoData::X11Window );
        SExposedVideoData_exposer.def( bp::init< void * >(( bp::arg("Window") )) );
        bp::implicitly_convertible< void *, irr::video::SExposedVideoData >();
    }

    bp::class_< IVideoDriver_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IVideoDriver" )    
        .def( 
            "OnResize"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::core::dimension2d< unsigned int > const & ) )(&::irr::video::IVideoDriver::OnResize) )
            , ( bp::arg("size") ) )    
        .def( 
            "addDynamicLight"
            , bp::pure_virtual( (::irr::s32 ( ::irr::video::IVideoDriver::* )( ::irr::video::SLight const & ) )(&::irr::video::IVideoDriver::addDynamicLight) )
            , ( bp::arg("light") ) )    
        .def( 
            "addExternalImageLoader"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::IImageLoader * ) )(&::irr::video::IVideoDriver::addExternalImageLoader) )
            , ( bp::arg("loader") ) )    
        .def( 
            "addExternalImageWriter"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::IImageWriter * ) )(&::irr::video::IVideoDriver::addExternalImageWriter) )
            , ( bp::arg("writer") ) )    
        .def( 
            "addMaterialRenderer"
            , bp::pure_virtual( (::irr::s32 ( ::irr::video::IVideoDriver::* )( ::irr::video::IMaterialRenderer *,::irr::c8 const * ) )(&::irr::video::IVideoDriver::addMaterialRenderer) )
            , ( bp::arg("renderer"), bp::arg("name")=bp::object() ) )    
        .def( 
            "addRenderTargetTexture"
            , bp::pure_virtual( (::irr::video::ITexture * ( ::irr::video::IVideoDriver::* )( ::irr::core::dimension2d< unsigned int > const &,::irr::io::path const &,::irr::video::ECOLOR_FORMAT const ) )(&::irr::video::IVideoDriver::addRenderTargetTexture) )
            , ( bp::arg("size"), bp::arg("name")="rt", bp::arg("format")=::irr::video::ECF_UNKNOWN )
                /* undefined call policies */ )    
        .def( 
            "addTexture"
            , bp::pure_virtual( (::irr::video::ITexture * ( ::irr::video::IVideoDriver::* )( ::irr::core::dimension2d< unsigned int > const &,::irr::io::path const &,::irr::video::ECOLOR_FORMAT ) )(&::irr::video::IVideoDriver::addTexture) )
            , ( bp::arg("size"), bp::arg("name"), bp::arg("format")=::irr::video::ECF_A8R8G8B8 )
                /* undefined call policies */ )    
        .def( 
            "addTexture"
            , bp::pure_virtual( (::irr::video::ITexture * ( ::irr::video::IVideoDriver::* )( ::irr::io::path const &,::irr::video::IImage *,void * ) )(&::irr::video::IVideoDriver::addTexture) )
            , ( bp::arg("name"), bp::arg("image"), bp::arg("mipmapData")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "beginScene"
            , bp::pure_virtual( (bool ( ::irr::video::IVideoDriver::* )( bool,bool,::irr::video::SColor,::irr::video::SExposedVideoData const &,::irr::core::rect< int > * ) )(&::irr::video::IVideoDriver::beginScene) )
            , ( bp::arg("backBuffer")=(bool)(true), bp::arg("zBuffer")=(bool)(true), bp::arg("color")=irr::video::SColor(255u, 0u, 0u, 0u), bp::arg("videoData")=irr::video::SExposedVideoData(), bp::arg("sourceRect")=bp::object() ) )    
        .def( 
            "checkDriverReset"
            , bp::pure_virtual( (bool ( ::irr::video::IVideoDriver::* )(  ) )(&::irr::video::IVideoDriver::checkDriverReset) ) )    
        .def( 
            "clearZBuffer"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )(  ) )(&::irr::video::IVideoDriver::clearZBuffer) ) )    
        .def( 
            "createAttributesFromMaterial"
            , bp::pure_virtual( (::irr::io::IAttributes * ( ::irr::video::IVideoDriver::* )( ::irr::video::SMaterial const & ) )(&::irr::video::IVideoDriver::createAttributesFromMaterial) )
            , ( bp::arg("material") )
                /* undefined call policies */ )    
        .def( 
            "createImage"
            , bp::pure_virtual( (::irr::video::IImage * ( ::irr::video::IVideoDriver::* )( ::irr::video::ECOLOR_FORMAT,::irr::core::dimension2d< unsigned int > const & ) )(&::irr::video::IVideoDriver::createImage) )
            , ( bp::arg("format"), bp::arg("size") )
                /* undefined call policies */ )    
        .def( 
            "createImage"
            , bp::pure_virtual( (::irr::video::IImage * ( ::irr::video::IVideoDriver::* )( ::irr::video::ECOLOR_FORMAT,::irr::video::IImage * ) )(&::irr::video::IVideoDriver::createImage) )
            , ( bp::arg("format"), bp::arg("imageToCopy") )
                /* undefined call policies */ )    
        .def( 
            "createImage"
            , bp::pure_virtual( (::irr::video::IImage * ( ::irr::video::IVideoDriver::* )( ::irr::video::IImage *,::irr::core::vector2d< int > const &,::irr::core::dimension2d< unsigned int > const & ) )(&::irr::video::IVideoDriver::createImage) )
            , ( bp::arg("imageToCopy"), bp::arg("pos"), bp::arg("size") )
                /* undefined call policies */ )    
        .def( 
            "createImage"
            , bp::pure_virtual( (::irr::video::IImage * ( ::irr::video::IVideoDriver::* )( ::irr::video::ITexture *,::irr::core::vector2d< int > const &,::irr::core::dimension2d< unsigned int > const & ) )(&::irr::video::IVideoDriver::createImage) )
            , ( bp::arg("texture"), bp::arg("pos"), bp::arg("size") )
                /* undefined call policies */ )    
        .def( 
            "createImageFromData"
            , bp::pure_virtual( (::irr::video::IImage * ( ::irr::video::IVideoDriver::* )( ::irr::video::ECOLOR_FORMAT,::irr::core::dimension2d< unsigned int > const &,void *,bool,bool ) )(&::irr::video::IVideoDriver::createImageFromData) )
            , ( bp::arg("format"), bp::arg("size"), bp::arg("data"), bp::arg("ownForeignMemory")=(bool)(false), bp::arg("deleteMemory")=(bool)(true) )
                /* undefined call policies */ )    
        .def( 
            "createImageFromFile"
            , bp::pure_virtual( (::irr::video::IImage * ( ::irr::video::IVideoDriver::* )( ::irr::io::path const & ) )(&::irr::video::IVideoDriver::createImageFromFile) )
            , ( bp::arg("filename") )
                /* undefined call policies */ )    
        .def( 
            "createImageFromFile"
            , bp::pure_virtual( (::irr::video::IImage * ( ::irr::video::IVideoDriver::* )( ::irr::io::IReadFile * ) )(&::irr::video::IVideoDriver::createImageFromFile) )
            , ( bp::arg("file") )
                /* undefined call policies */ )    
        .def( 
            "createScreenShot"
            , bp::pure_virtual( (::irr::video::IImage * ( ::irr::video::IVideoDriver::* )(  ) )(&::irr::video::IVideoDriver::createScreenShot) )
                /* undefined call policies */ )    
        .def( 
            "deleteAllDynamicLights"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )(  ) )(&::irr::video::IVideoDriver::deleteAllDynamicLights) ) )    
        .def( 
            "disableFeature"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::E_VIDEO_DRIVER_FEATURE,bool ) )(&::irr::video::IVideoDriver::disableFeature) )
            , ( bp::arg("feature"), bp::arg("flag")=(bool)(true) ) )    
        .def( 
            "draw2DImage"
            , (void ( ::irr::video::IVideoDriver::* )( ::irr::video::ITexture const *,::irr::core::vector2d< int > const *,::irr::core::rect< int > const &,::irr::core::rect< int > const *,::irr::video::SColor const * const,bool ) )(&::irr::video::IVideoDriver::draw2DImage)
            , (void ( IVideoDriver_wrapper::* )( ::irr::video::ITexture const *,::irr::core::vector2d< int > const *,::irr::core::rect< int > const &,::irr::core::rect< int > const *,::irr::video::SColor const * const,bool ) )(&IVideoDriver_wrapper::default_draw2DImage)
            , ( bp::arg("texture"), bp::arg("corners"), bp::arg("sourceRect"), bp::arg("clipRect"), bp::arg("colors"), bp::arg("useAlphaChannelOfTexture") ) )    
        .def( 
            "draw2DImage"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::ITexture const *,::irr::core::vector2d< int > const & ) )(&::irr::video::IVideoDriver::draw2DImage) )
            , ( bp::arg("texture"), bp::arg("destPos") ) )    
        .def( 
            "draw2DImage"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::ITexture const *,::irr::core::vector2d< int > const &,::irr::core::rect< int > const &,::irr::core::rect< int > const *,::irr::video::SColor,bool ) )(&::irr::video::IVideoDriver::draw2DImage) )
            , ( bp::arg("texture"), bp::arg("destPos"), bp::arg("sourceRect"), bp::arg("clipRect")=bp::object(), bp::arg("color")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("useAlphaChannelOfTexture")=(bool)(false) ) )    
        .def( 
            "draw2DImage"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::ITexture const *,::irr::core::rect< int > const &,::irr::core::rect< int > const &,::irr::core::rect< int > const *,::irr::video::SColor const * const,bool ) )(&::irr::video::IVideoDriver::draw2DImage) )
            , ( bp::arg("texture"), bp::arg("destRect"), bp::arg("sourceRect"), bp::arg("clipRect")=bp::object(), bp::arg("colors")=bp::object(), bp::arg("useAlphaChannelOfTexture")=(bool)(false) ) )    
        .def( 
            "draw2DImageBatch"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::ITexture const *,::irr::core::vector2d< int > const &,::irr::core::array< irr::core::rect< int >, irr::core::irrAllocator< irr::core::rect< int > > > const &,::irr::core::array< int, irr::core::irrAllocator< int > > const &,::irr::s32,::irr::core::rect< int > const *,::irr::video::SColor,bool ) )(&::irr::video::IVideoDriver::draw2DImageBatch) )
            , ( bp::arg("texture"), bp::arg("pos"), bp::arg("sourceRects"), bp::arg("indices"), bp::arg("kerningWidth")=(::irr::s32)(0), bp::arg("clipRect")=bp::object(), bp::arg("color")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("useAlphaChannelOfTexture")=(bool)(false) ) )    
        .def( 
            "draw2DImageBatch"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::ITexture const *,::irr::core::array< irr::core::vector2d< int >, irr::core::irrAllocator< irr::core::vector2d< int > > > const &,::irr::core::array< irr::core::rect< int >, irr::core::irrAllocator< irr::core::rect< int > > > const &,::irr::core::rect< int > const *,::irr::video::SColor,bool ) )(&::irr::video::IVideoDriver::draw2DImageBatch) )
            , ( bp::arg("texture"), bp::arg("positions"), bp::arg("sourceRects"), bp::arg("clipRect")=bp::object(), bp::arg("color")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("useAlphaChannelOfTexture")=(bool)(false) ) )    
        .def( 
            "draw2DLine"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::core::vector2d< int > const &,::irr::core::vector2d< int > const &,::irr::video::SColor ) )(&::irr::video::IVideoDriver::draw2DLine) )
            , ( bp::arg("start"), bp::arg("end"), bp::arg("color")=irr::video::SColor(255u, 255u, 255u, 255u) ) )    
        .def( 
            "draw2DPolygon"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::core::vector2d< int >,::irr::f32,::irr::video::SColor,::irr::s32 ) )(&::irr::video::IVideoDriver::draw2DPolygon) )
            , ( bp::arg("center"), bp::arg("radius"), bp::arg("color")=irr::video::SColor(100u, 255u, 255u, 255u), bp::arg("vertexCount")=(::irr::s32)(10) ) )    
        .def( 
            "draw2DRectangle"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::SColor,::irr::core::rect< int > const &,::irr::core::rect< int > const * ) )(&::irr::video::IVideoDriver::draw2DRectangle) )
            , ( bp::arg("color"), bp::arg("pos"), bp::arg("clip")=bp::object() ) )    
        .def( 
            "draw2DRectangle"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::core::rect< int > const &,::irr::video::SColor,::irr::video::SColor,::irr::video::SColor,::irr::video::SColor,::irr::core::rect< int > const * ) )(&::irr::video::IVideoDriver::draw2DRectangle) )
            , ( bp::arg("pos"), bp::arg("colorLeftUp"), bp::arg("colorRightUp"), bp::arg("colorLeftDown"), bp::arg("colorRightDown"), bp::arg("clip")=bp::object() ) )    
        .def( 
            "draw2DRectangleOutline"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::core::recti const &,::irr::video::SColor ) )(&::irr::video::IVideoDriver::draw2DRectangleOutline) )
            , ( bp::arg("pos"), bp::arg("color")=irr::video::SColor(255u, 255u, 255u, 255u) ) )    
        .def( 
            "draw2DVertexPrimitiveList"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( void const *,::irr::u32,void const *,::irr::u32,::irr::video::E_VERTEX_TYPE,::irr::scene::E_PRIMITIVE_TYPE,::irr::video::E_INDEX_TYPE ) )(&::irr::video::IVideoDriver::draw2DVertexPrimitiveList) )
            , ( bp::arg("vertices"), bp::arg("vertexCount"), bp::arg("indexList"), bp::arg("primCount"), bp::arg("vType")=::irr::video::EVT_STANDARD, bp::arg("pType")=::irr::scene::EPT_TRIANGLES, bp::arg("iType")=::irr::video::EIT_16BIT ) )    
        .def( 
            "draw3DBox"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::core::aabbox3d< float > const &,::irr::video::SColor ) )(&::irr::video::IVideoDriver::draw3DBox) )
            , ( bp::arg("box"), bp::arg("color")=irr::video::SColor(255u, 255u, 255u, 255u) ) )    
        .def( 
            "draw3DLine"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::video::SColor ) )(&::irr::video::IVideoDriver::draw3DLine) )
            , ( bp::arg("start"), bp::arg("end"), bp::arg("color")=irr::video::SColor(255u, 255u, 255u, 255u) ) )    
        .def( 
            "draw3DTriangle"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::core::triangle3df const &,::irr::video::SColor ) )(&::irr::video::IVideoDriver::draw3DTriangle) )
            , ( bp::arg("triangle"), bp::arg("color")=irr::video::SColor(255u, 255u, 255u, 255u) ) )    
        .def( 
            "drawIndexedTriangleFan"
            , (void ( ::irr::video::IVideoDriver::* )( ::irr::video::S3DVertex const *,::irr::u32,::irr::u16 const *,::irr::u32 ) )( &::irr::video::IVideoDriver::drawIndexedTriangleFan )
            , ( bp::arg("vertices"), bp::arg("vertexCount"), bp::arg("indexList"), bp::arg("triangleCount") ) )    
        .def( 
            "drawIndexedTriangleFan"
            , (void ( ::irr::video::IVideoDriver::* )( ::irr::video::S3DVertex2TCoords const *,::irr::u32,::irr::u16 const *,::irr::u32 ) )( &::irr::video::IVideoDriver::drawIndexedTriangleFan )
            , ( bp::arg("vertices"), bp::arg("vertexCount"), bp::arg("indexList"), bp::arg("triangleCount") ) )    
        .def( 
            "drawIndexedTriangleFan"
            , (void ( ::irr::video::IVideoDriver::* )( ::irr::video::S3DVertexTangents const *,::irr::u32,::irr::u16 const *,::irr::u32 ) )( &::irr::video::IVideoDriver::drawIndexedTriangleFan )
            , ( bp::arg("vertices"), bp::arg("vertexCount"), bp::arg("indexList"), bp::arg("triangleCount") ) )    
        .def( 
            "drawIndexedTriangleList"
            , (void ( ::irr::video::IVideoDriver::* )( ::irr::video::S3DVertex const *,::irr::u32,::irr::u16 const *,::irr::u32 ) )( &::irr::video::IVideoDriver::drawIndexedTriangleList )
            , ( bp::arg("vertices"), bp::arg("vertexCount"), bp::arg("indexList"), bp::arg("triangleCount") ) )    
        .def( 
            "drawIndexedTriangleList"
            , (void ( ::irr::video::IVideoDriver::* )( ::irr::video::S3DVertex2TCoords const *,::irr::u32,::irr::u16 const *,::irr::u32 ) )( &::irr::video::IVideoDriver::drawIndexedTriangleList )
            , ( bp::arg("vertices"), bp::arg("vertexCount"), bp::arg("indexList"), bp::arg("triangleCount") ) )    
        .def( 
            "drawIndexedTriangleList"
            , (void ( ::irr::video::IVideoDriver::* )( ::irr::video::S3DVertexTangents const *,::irr::u32,::irr::u16 const *,::irr::u32 ) )( &::irr::video::IVideoDriver::drawIndexedTriangleList )
            , ( bp::arg("vertices"), bp::arg("vertexCount"), bp::arg("indexList"), bp::arg("triangleCount") ) )    
        .def( 
            "drawMeshBuffer"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::scene::IMeshBuffer const * ) )(&::irr::video::IVideoDriver::drawMeshBuffer) )
            , ( bp::arg("mb") ) )    
        .def( 
            "drawPixel"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::u32,::irr::u32,::irr::video::SColor const & ) )(&::irr::video::IVideoDriver::drawPixel) )
            , ( bp::arg("x"), bp::arg("y"), bp::arg("color") ) )    
        .def( 
            "drawStencilShadow"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( bool,::irr::video::SColor,::irr::video::SColor,::irr::video::SColor,::irr::video::SColor ) )(&::irr::video::IVideoDriver::drawStencilShadow) )
            , ( bp::arg("clearStencilBuffer")=(bool)(false), bp::arg("leftUpEdge")=irr::video::SColor(255u, 0u, 0u, 0u), bp::arg("rightUpEdge")=irr::video::SColor(255u, 0u, 0u, 0u), bp::arg("leftDownEdge")=irr::video::SColor(255u, 0u, 0u, 0u), bp::arg("rightDownEdge")=irr::video::SColor(255u, 0u, 0u, 0u) ) )    
        .def( 
            "drawStencilShadowVolume"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::core::vector3df const *,::irr::s32,bool ) )(&::irr::video::IVideoDriver::drawStencilShadowVolume) )
            , ( bp::arg("triangles"), bp::arg("count"), bp::arg("zfail")=(bool)(true) ) )    
        .def( 
            "drawVertexPrimitiveList"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( void const *,::irr::u32,void const *,::irr::u32,::irr::video::E_VERTEX_TYPE,::irr::scene::E_PRIMITIVE_TYPE,::irr::video::E_INDEX_TYPE ) )(&::irr::video::IVideoDriver::drawVertexPrimitiveList) )
            , ( bp::arg("vertices"), bp::arg("vertexCount"), bp::arg("indexList"), bp::arg("primCount"), bp::arg("vType")=::irr::video::EVT_STANDARD, bp::arg("pType")=::irr::scene::EPT_TRIANGLES, bp::arg("iType")=::irr::video::EIT_16BIT ) )    
        .def( 
            "enableClipPlane"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::u32,bool ) )(&::irr::video::IVideoDriver::enableClipPlane) )
            , ( bp::arg("index"), bp::arg("enable") ) )    
        .def( 
            "enableMaterial2D"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( bool ) )(&::irr::video::IVideoDriver::enableMaterial2D) )
            , ( bp::arg("enable")=(bool)(true) ) )    
        .def( 
            "endScene"
            , bp::pure_virtual( (bool ( ::irr::video::IVideoDriver::* )(  ) )(&::irr::video::IVideoDriver::endScene) ) )    
        .def( 
            "fillMaterialStructureFromAttributes"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::SMaterial &,::irr::io::IAttributes * ) )(&::irr::video::IVideoDriver::fillMaterialStructureFromAttributes) )
            , ( bp::arg("outMaterial"), bp::arg("attributes") ) )    
        .def( 
            "findTexture"
            , bp::pure_virtual( (::irr::video::ITexture * ( ::irr::video::IVideoDriver::* )( ::irr::io::path const & ) )(&::irr::video::IVideoDriver::findTexture) )
            , ( bp::arg("filename") )
                /* undefined call policies */ )    
        .def( 
            "getColorFormat"
            , bp::pure_virtual( (::irr::video::ECOLOR_FORMAT ( ::irr::video::IVideoDriver::* )(  ) const)(&::irr::video::IVideoDriver::getColorFormat) ) )    
        .def( 
            "getCurrentRenderTargetSize"
            , bp::pure_virtual( (::irr::core::dimension2d< unsigned int > const & ( ::irr::video::IVideoDriver::* )(  ) const)(&::irr::video::IVideoDriver::getCurrentRenderTargetSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getDriverType"
            , bp::pure_virtual( (::irr::video::E_DRIVER_TYPE ( ::irr::video::IVideoDriver::* )(  ) const)(&::irr::video::IVideoDriver::getDriverType) ) )    
        .def( 
            "getDynamicLight"
            , bp::pure_virtual( (::irr::video::SLight const & ( ::irr::video::IVideoDriver::* )( ::irr::u32 ) const)(&::irr::video::IVideoDriver::getDynamicLight) )
            , ( bp::arg("idx") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getDynamicLightCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IVideoDriver::* )(  ) const)(&::irr::video::IVideoDriver::getDynamicLightCount) ) )    
        .def( 
            "getExposedVideoData"
            , bp::pure_virtual( (::irr::video::SExposedVideoData const & ( ::irr::video::IVideoDriver::* )(  ) )(&::irr::video::IVideoDriver::getExposedVideoData) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getFPS"
            , bp::pure_virtual( (::irr::s32 ( ::irr::video::IVideoDriver::* )(  ) const)(&::irr::video::IVideoDriver::getFPS) ) )    
        .def( 
            "getFog"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::SColor &,::irr::video::E_FOG_TYPE &,::irr::f32 &,::irr::f32 &,::irr::f32 &,bool &,bool & ) )(&::irr::video::IVideoDriver::getFog) )
            , ( bp::arg("color"), bp::arg("fogType"), bp::arg("start"), bp::arg("end"), bp::arg("density"), bp::arg("pixelFog"), bp::arg("rangeFog") ) )    
        .def( 
            "getGPUProgrammingServices"
            , bp::pure_virtual( (::irr::video::IGPUProgrammingServices * ( ::irr::video::IVideoDriver::* )(  ) )(&::irr::video::IVideoDriver::getGPUProgrammingServices) )
                /* undefined call policies */ )    
        .def( 
            "getImageLoader"
            , bp::pure_virtual( (::irr::video::IImageLoader * ( ::irr::video::IVideoDriver::* )( ::irr::u32 ) )(&::irr::video::IVideoDriver::getImageLoader) )
            , ( bp::arg("n") )
                /* undefined call policies */ )    
        .def( 
            "getImageLoaderCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IVideoDriver::* )(  ) const)(&::irr::video::IVideoDriver::getImageLoaderCount) ) )    
        .def( 
            "getImageWriter"
            , bp::pure_virtual( (::irr::video::IImageWriter * ( ::irr::video::IVideoDriver::* )( ::irr::u32 ) )(&::irr::video::IVideoDriver::getImageWriter) )
            , ( bp::arg("n") )
                /* undefined call policies */ )    
        .def( 
            "getImageWriterCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IVideoDriver::* )(  ) const)(&::irr::video::IVideoDriver::getImageWriterCount) ) )    
        .def( 
            "getMaterial2D"
            , bp::pure_virtual( (::irr::video::SMaterial & ( ::irr::video::IVideoDriver::* )(  ) )(&::irr::video::IVideoDriver::getMaterial2D) )
                /* undefined call policies */ )    
        .def( 
            "getMaterialRenderer"
            , bp::pure_virtual( (::irr::video::IMaterialRenderer * ( ::irr::video::IVideoDriver::* )( ::irr::u32 ) )(&::irr::video::IVideoDriver::getMaterialRenderer) )
            , ( bp::arg("idx") )
                /* undefined call policies */ )    
        .def( 
            "getMaterialRendererCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IVideoDriver::* )(  ) const)(&::irr::video::IVideoDriver::getMaterialRendererCount) ) )    
        .def( 
            "getMaterialRendererName"
            , bp::pure_virtual( (::irr::c8 const * ( ::irr::video::IVideoDriver::* )( ::irr::u32 ) const)(&::irr::video::IVideoDriver::getMaterialRendererName) )
            , ( bp::arg("idx") ) )    
        .def( 
            "getMaxTextureSize"
            , bp::pure_virtual( (::irr::core::dimension2du ( ::irr::video::IVideoDriver::* )(  ) const)(&::irr::video::IVideoDriver::getMaxTextureSize) ) )    
        .def( 
            "getMaximalDynamicLightAmount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IVideoDriver::* )(  ) const)(&::irr::video::IVideoDriver::getMaximalDynamicLightAmount) ) )    
        .def( 
            "getMaximalPrimitiveCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IVideoDriver::* )(  ) const)(&::irr::video::IVideoDriver::getMaximalPrimitiveCount) ) )    
        .def( 
            "getMeshManipulator"
            , bp::pure_virtual( (::irr::scene::IMeshManipulator * ( ::irr::video::IVideoDriver::* )(  ) )(&::irr::video::IVideoDriver::getMeshManipulator) )
                /* undefined call policies */ )    
        .def( 
            "getName"
            , bp::pure_virtual( (wchar_t const * ( ::irr::video::IVideoDriver::* )(  ) const)(&::irr::video::IVideoDriver::getName) )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getOverrideMaterial"
            , bp::pure_virtual( (::irr::video::SOverrideMaterial & ( ::irr::video::IVideoDriver::* )(  ) )(&::irr::video::IVideoDriver::getOverrideMaterial) )
                /* undefined call policies */ )    
        .def( 
            "getPrimitiveCountDrawn"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IVideoDriver::* )( ::irr::u32 ) const)(&::irr::video::IVideoDriver::getPrimitiveCountDrawn) )
            , ( bp::arg("mode")=(::irr::u32)(0) ) )    
        .def( 
            "getScreenSize"
            , bp::pure_virtual( (::irr::core::dimension2d< unsigned int > const & ( ::irr::video::IVideoDriver::* )(  ) const)(&::irr::video::IVideoDriver::getScreenSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTexture"
            , bp::pure_virtual( (::irr::video::ITexture * ( ::irr::video::IVideoDriver::* )( ::irr::io::path const & ) )(&::irr::video::IVideoDriver::getTexture) )
            , ( bp::arg("filename") )
                /* undefined call policies */ )    
        .def( 
            "getTexture"
            , bp::pure_virtual( (::irr::video::ITexture * ( ::irr::video::IVideoDriver::* )( ::irr::io::IReadFile * ) )(&::irr::video::IVideoDriver::getTexture) )
            , ( bp::arg("file") )
                /* undefined call policies */ )    
        .def( 
            "getTextureByIndex"
            , bp::pure_virtual( (::irr::video::ITexture * ( ::irr::video::IVideoDriver::* )( ::irr::u32 ) )(&::irr::video::IVideoDriver::getTextureByIndex) )
            , ( bp::arg("index") )
                /* undefined call policies */ )    
        .def( 
            "getTextureCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IVideoDriver::* )(  ) const)(&::irr::video::IVideoDriver::getTextureCount) ) )    
        .def( 
            "getTextureCreationFlag"
            , bp::pure_virtual( (bool ( ::irr::video::IVideoDriver::* )( ::irr::video::E_TEXTURE_CREATION_FLAG ) const)(&::irr::video::IVideoDriver::getTextureCreationFlag) )
            , ( bp::arg("flag") ) )    
        .def( 
            "getTransform"
            , bp::pure_virtual( (::irr::core::matrix4 const & ( ::irr::video::IVideoDriver::* )( ::irr::video::E_TRANSFORMATION_STATE ) const)(&::irr::video::IVideoDriver::getTransform) )
            , ( bp::arg("state") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getVendorInfo"
            , bp::pure_virtual( (::irr::core::stringc ( ::irr::video::IVideoDriver::* )(  ) )(&::irr::video::IVideoDriver::getVendorInfo) ) )    
        .def( 
            "getViewPort"
            , bp::pure_virtual( (::irr::core::rect< int > const & ( ::irr::video::IVideoDriver::* )(  ) const)(&::irr::video::IVideoDriver::getViewPort) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "makeColorKeyTexture"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::ITexture *,::irr::video::SColor,bool ) const)(&::irr::video::IVideoDriver::makeColorKeyTexture) )
            , ( bp::arg("texture"), bp::arg("color"), bp::arg("zeroTexels")=(bool)(false) ) )    
        .def( 
            "makeColorKeyTexture"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::ITexture *,::irr::core::vector2d< int >,bool ) const)(&::irr::video::IVideoDriver::makeColorKeyTexture) )
            , ( bp::arg("texture"), bp::arg("colorKeyPixelPos"), bp::arg("zeroTexels")=(bool)(false) ) )    
        .def( 
            "makeNormalMapTexture"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::ITexture *,::irr::f32 ) const)(&::irr::video::IVideoDriver::makeNormalMapTexture) )
            , ( bp::arg("texture"), bp::arg("amplitude")=1.0e+0f ) )    
        .def( 
            "mydraw2DImageBatch"
            , (void ( ::irr::video::IVideoDriver::* )( ::irr::video::ITexture const *,::irr::core::array< irr::core::myposition, irr::core::irrAllocator< irr::core::myposition > > const &,::irr::core::array< irr::core::rect< int >, irr::core::irrAllocator< irr::core::rect< int > > > const &,::irr::core::rect< int > const *,::irr::video::SColor,bool ) )(&::irr::video::IVideoDriver::mydraw2DImageBatch)
            , (void ( IVideoDriver_wrapper::* )( ::irr::video::ITexture const *,::irr::core::array< irr::core::myposition, irr::core::irrAllocator< irr::core::myposition > > const &,::irr::core::array< irr::core::rect< int >, irr::core::irrAllocator< irr::core::rect< int > > > const &,::irr::core::rect< int > const *,::irr::video::SColor,bool ) )(&IVideoDriver_wrapper::default_mydraw2DImageBatch)
            , ( bp::arg("texture"), bp::arg("positions"), bp::arg("sourceRects"), bp::arg("clipRect"), bp::arg("color"), bp::arg("useAlphaChannelOfTexture") ) )    
        .def( 
            "queryFeature"
            , bp::pure_virtual( (bool ( ::irr::video::IVideoDriver::* )( ::irr::video::E_VIDEO_DRIVER_FEATURE ) const)(&::irr::video::IVideoDriver::queryFeature) )
            , ( bp::arg("feature") ) )    
        .def( 
            "removeAllHardwareBuffers"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )(  ) )(&::irr::video::IVideoDriver::removeAllHardwareBuffers) ) )    
        .def( 
            "removeAllTextures"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )(  ) )(&::irr::video::IVideoDriver::removeAllTextures) ) )    
        .def( 
            "removeHardwareBuffer"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::scene::IMeshBuffer const * ) )(&::irr::video::IVideoDriver::removeHardwareBuffer) )
            , ( bp::arg("mb") ) )    
        .def( 
            "removeTexture"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::ITexture * ) )(&::irr::video::IVideoDriver::removeTexture) )
            , ( bp::arg("texture") ) )    
        .def( 
            "renameTexture"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::ITexture *,::irr::io::path const & ) )(&::irr::video::IVideoDriver::renameTexture) )
            , ( bp::arg("texture"), bp::arg("newName") ) )    
        .def( 
            "setAllowZWriteOnTransparent"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( bool ) )(&::irr::video::IVideoDriver::setAllowZWriteOnTransparent) )
            , ( bp::arg("flag") ) )    
        .def( 
            "setAmbientLight"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::SColorf const & ) )(&::irr::video::IVideoDriver::setAmbientLight) )
            , ( bp::arg("color") ) )    
        .def( 
            "setClipPlane"
            , bp::pure_virtual( (bool ( ::irr::video::IVideoDriver::* )( ::irr::u32,::irr::core::plane3df const &,bool ) )(&::irr::video::IVideoDriver::setClipPlane) )
            , ( bp::arg("index"), bp::arg("plane"), bp::arg("enable")=(bool)(false) ) )    
        .def( 
            "setFog"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::SColor,::irr::video::E_FOG_TYPE,::irr::f32,::irr::f32,::irr::f32,bool,bool ) )(&::irr::video::IVideoDriver::setFog) )
            , ( bp::arg("color")=irr::video::SColor(0u, 255u, 255u, 255u), bp::arg("fogType")=::irr::video::EFT_FOG_LINEAR, bp::arg("start")=5.0e+1f, bp::arg("end")=1.0e+2f, bp::arg("density")=9.99999977648258209228515625e-3f, bp::arg("pixelFog")=(bool)(false), bp::arg("rangeFog")=(bool)(false) ) )    
        .def( 
            "setMaterial"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::SMaterial const & ) )(&::irr::video::IVideoDriver::setMaterial) )
            , ( bp::arg("material") ) )    
        .def( 
            "setMaterialRendererName"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::s32,::irr::c8 const * ) )(&::irr::video::IVideoDriver::setMaterialRendererName) )
            , ( bp::arg("idx"), bp::arg("name") ) )    
        .def( 
            "setMinHardwareBufferVertexCount"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::u32 ) )(&::irr::video::IVideoDriver::setMinHardwareBufferVertexCount) )
            , ( bp::arg("count") ) )    
        .def( 
            "setRenderTarget"
            , bp::pure_virtual( (bool ( ::irr::video::IVideoDriver::* )( ::irr::video::ITexture *,bool,bool,::irr::video::SColor ) )(&::irr::video::IVideoDriver::setRenderTarget) )
            , ( bp::arg("texture"), bp::arg("clearBackBuffer")=(bool)(true), bp::arg("clearZBuffer")=(bool)(true), bp::arg("color")=irr::video::SColor(0u, 0u, 0u, 0u) ) )    
        .def( 
            "setRenderTarget"
            , bp::pure_virtual( (bool ( ::irr::video::IVideoDriver::* )( ::irr::video::E_RENDER_TARGET,bool,bool,::irr::video::SColor ) )(&::irr::video::IVideoDriver::setRenderTarget) )
            , ( bp::arg("target"), bp::arg("clearTarget")=(bool)(true), bp::arg("clearZBuffer")=(bool)(true), bp::arg("color")=irr::video::SColor(0u, 0u, 0u, 0u) ) )    
        .def( 
            "setRenderTarget"
            , bp::pure_virtual( (bool ( ::irr::video::IVideoDriver::* )( ::irr::core::array< irr::video::IRenderTarget, irr::core::irrAllocator< irr::video::IRenderTarget > > const &,bool,bool,::irr::video::SColor ) )(&::irr::video::IVideoDriver::setRenderTarget) )
            , ( bp::arg("texture"), bp::arg("clearBackBuffer")=(bool)(true), bp::arg("clearZBuffer")=(bool)(true), bp::arg("color")=irr::video::SColor(0u, 0u, 0u, 0u) ) )    
        .def( 
            "setTextureCreationFlag"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::E_TEXTURE_CREATION_FLAG,bool ) )(&::irr::video::IVideoDriver::setTextureCreationFlag) )
            , ( bp::arg("flag"), bp::arg("enabled")=(bool)(true) ) )    
        .def( 
            "setTransform"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::video::E_TRANSFORMATION_STATE,::irr::core::matrix4 const & ) )(&::irr::video::IVideoDriver::setTransform) )
            , ( bp::arg("state"), bp::arg("mat") ) )    
        .def( 
            "setViewPort"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::core::rect< int > const & ) )(&::irr::video::IVideoDriver::setViewPort) )
            , ( bp::arg("area") ) )    
        .def( 
            "turnLightOn"
            , bp::pure_virtual( (void ( ::irr::video::IVideoDriver::* )( ::irr::s32,bool ) )(&::irr::video::IVideoDriver::turnLightOn) )
            , ( bp::arg("lightIndex"), bp::arg("turnOn") ) )    
        .def( 
            "writeImageToFile"
            , bp::pure_virtual( (bool ( ::irr::video::IVideoDriver::* )( ::irr::video::IImage *,::irr::io::path const &,::irr::u32 ) )(&::irr::video::IVideoDriver::writeImageToFile) )
            , ( bp::arg("image"), bp::arg("filename"), bp::arg("param")=(::irr::u32)(0) ) )    
        .def( 
            "writeImageToFile"
            , bp::pure_virtual( (bool ( ::irr::video::IVideoDriver::* )( ::irr::video::IImage *,::irr::io::IWriteFile *,::irr::u32 ) )(&::irr::video::IVideoDriver::writeImageToFile) )
            , ( bp::arg("image"), bp::arg("file"), bp::arg("param")=(::irr::u32)(0) ) )    
        .def( 
            "setDebugName"
            , (void ( IVideoDriver_wrapper::* )( ::irr::c8 const * ) )(&IVideoDriver_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IFileSystem_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IFileSystem" )    
        .def( 
            "addArchiveLoader"
            , bp::pure_virtual( (void ( ::irr::io::IFileSystem::* )( ::irr::io::IArchiveLoader * ) )(&::irr::io::IFileSystem::addArchiveLoader) )
            , ( bp::arg("loader") ) )    
        .def( 
            "addFileArchive"
            , bp::pure_virtual( (bool ( ::irr::io::IFileSystem::* )( ::irr::io::path const &,bool,bool,::irr::io::E_FILE_ARCHIVE_TYPE,::irr::core::stringc const & ) )(&::irr::io::IFileSystem::addFileArchive) )
            , ( bp::arg("filename"), bp::arg("ignoreCase")=(bool)(true), bp::arg("ignorePaths")=(bool)(true), bp::arg("archiveType")=::irr::io::EFAT_UNKNOWN, bp::arg("password")="" ) )    
        .def( 
            "addFolderFileArchive"
            , (bool ( ::irr::io::IFileSystem::* )( ::irr::c8 const *,bool,bool ) )(&::irr::io::IFileSystem::addFolderFileArchive)
            , (bool ( IFileSystem_wrapper::* )( ::irr::c8 const *,bool,bool ) )(&IFileSystem_wrapper::default_addFolderFileArchive)
            , ( bp::arg("filename"), bp::arg("ignoreCase")=(bool)(true), bp::arg("ignorePaths")=(bool)(true) ) )    
        .def( 
            "addPakFileArchive"
            , (bool ( ::irr::io::IFileSystem::* )( ::irr::c8 const *,bool,bool ) )(&::irr::io::IFileSystem::addPakFileArchive)
            , (bool ( IFileSystem_wrapper::* )( ::irr::c8 const *,bool,bool ) )(&IFileSystem_wrapper::default_addPakFileArchive)
            , ( bp::arg("filename"), bp::arg("ignoreCase")=(bool)(true), bp::arg("ignorePaths")=(bool)(true) ) )    
        .def( 
            "addZipFileArchive"
            , (bool ( ::irr::io::IFileSystem::* )( ::irr::c8 const *,bool,bool ) )(&::irr::io::IFileSystem::addZipFileArchive)
            , (bool ( IFileSystem_wrapper::* )( ::irr::c8 const *,bool,bool ) )(&IFileSystem_wrapper::default_addZipFileArchive)
            , ( bp::arg("filename"), bp::arg("ignoreCase")=(bool)(true), bp::arg("ignorePaths")=(bool)(true) ) )    
        .def( 
            "changeWorkingDirectoryTo"
            , bp::pure_virtual( (bool ( ::irr::io::IFileSystem::* )( ::irr::io::path const & ) )(&::irr::io::IFileSystem::changeWorkingDirectoryTo) )
            , ( bp::arg("newDirectory") ) )    
        .def( 
            "createAndOpenFile"
            , bp::pure_virtual( (::irr::io::IReadFile * ( ::irr::io::IFileSystem::* )( ::irr::io::path const & ) )(&::irr::io::IFileSystem::createAndOpenFile) )
            , ( bp::arg("filename") )
                /* undefined call policies */ )    
        .def( 
            "createAndWriteFile"
            , bp::pure_virtual( (::irr::io::IWriteFile * ( ::irr::io::IFileSystem::* )( ::irr::io::path const &,bool ) )(&::irr::io::IFileSystem::createAndWriteFile) )
            , ( bp::arg("filename"), bp::arg("append")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "createEmptyAttributes"
            , bp::pure_virtual( (::irr::io::IAttributes * ( ::irr::io::IFileSystem::* )( ::irr::video::IVideoDriver * ) )(&::irr::io::IFileSystem::createEmptyAttributes) )
            , ( bp::arg("driver")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "createEmptyFileList"
            , bp::pure_virtual( (::irr::io::IFileList * ( ::irr::io::IFileSystem::* )( ::irr::io::path const &,bool,bool ) )(&::irr::io::IFileSystem::createEmptyFileList) )
            , ( bp::arg("path"), bp::arg("ignoreCase"), bp::arg("ignorePaths") )
                /* undefined call policies */ )    
        .def( 
            "createFileList"
            , bp::pure_virtual( (::irr::io::IFileList * ( ::irr::io::IFileSystem::* )(  ) )(&::irr::io::IFileSystem::createFileList) )
                /* undefined call policies */ )    
        .def( 
            "createLimitReadFile"
            , bp::pure_virtual( (::irr::io::IReadFile * ( ::irr::io::IFileSystem::* )( ::irr::io::path const &,::irr::io::IReadFile *,long int,long int ) )(&::irr::io::IFileSystem::createLimitReadFile) )
            , ( bp::arg("fileName"), bp::arg("alreadyOpenedFile"), bp::arg("pos"), bp::arg("areaSize") )
                /* undefined call policies */ )    
        .def( 
            "createMemoryReadFile"
            , bp::pure_virtual( (::irr::io::IReadFile * ( ::irr::io::IFileSystem::* )( void *,::irr::s32,::irr::io::path const &,bool ) )(&::irr::io::IFileSystem::createMemoryReadFile) )
            , ( bp::arg("memory"), bp::arg("len"), bp::arg("fileName"), bp::arg("deleteMemoryWhenDropped")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "createMemoryWriteFile"
            , bp::pure_virtual( (::irr::io::IWriteFile * ( ::irr::io::IFileSystem::* )( void *,::irr::s32,::irr::io::path const &,bool ) )(&::irr::io::IFileSystem::createMemoryWriteFile) )
            , ( bp::arg("memory"), bp::arg("len"), bp::arg("fileName"), bp::arg("deleteMemoryWhenDropped")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "createXMLReader"
            , bp::pure_virtual( (::irr::io::IXMLReader * ( ::irr::io::IFileSystem::* )( ::irr::io::path const & ) )(&::irr::io::IFileSystem::createXMLReader) )
            , ( bp::arg("filename") )
                /* undefined call policies */ )    
        .def( 
            "createXMLReader"
            , bp::pure_virtual( (::irr::io::IXMLReader * ( ::irr::io::IFileSystem::* )( ::irr::io::IReadFile * ) )(&::irr::io::IFileSystem::createXMLReader) )
            , ( bp::arg("file") )
                /* undefined call policies */ )    
        .def( 
            "createXMLReaderUTF8"
            , bp::pure_virtual( (::irr::io::IXMLReaderUTF8 * ( ::irr::io::IFileSystem::* )( ::irr::io::path const & ) )(&::irr::io::IFileSystem::createXMLReaderUTF8) )
            , ( bp::arg("filename") )
                /* undefined call policies */ )    
        .def( 
            "createXMLReaderUTF8"
            , bp::pure_virtual( (::irr::io::IXMLReaderUTF8 * ( ::irr::io::IFileSystem::* )( ::irr::io::IReadFile * ) )(&::irr::io::IFileSystem::createXMLReaderUTF8) )
            , ( bp::arg("file") )
                /* undefined call policies */ )    
        .def( 
            "createXMLWriter"
            , bp::pure_virtual( (::irr::io::IXMLWriter * ( ::irr::io::IFileSystem::* )( ::irr::io::path const & ) )(&::irr::io::IFileSystem::createXMLWriter) )
            , ( bp::arg("filename") )
                /* undefined call policies */ )    
        .def( 
            "createXMLWriter"
            , bp::pure_virtual( (::irr::io::IXMLWriter * ( ::irr::io::IFileSystem::* )( ::irr::io::IWriteFile * ) )(&::irr::io::IFileSystem::createXMLWriter) )
            , ( bp::arg("file") )
                /* undefined call policies */ )    
        .def( 
            "existFile"
            , bp::pure_virtual( (bool ( ::irr::io::IFileSystem::* )( ::irr::io::path const & ) const)(&::irr::io::IFileSystem::existFile) )
            , ( bp::arg("filename") ) )    
        .def( 
            "flattenFilename"
            , bp::pure_virtual( (::irr::io::path & ( ::irr::io::IFileSystem::* )( ::irr::io::path &,::irr::io::path const & ) const)(&::irr::io::IFileSystem::flattenFilename) )
            , ( bp::arg("directory"), bp::arg("root")="/" )
                /* undefined call policies */ )    
        .def( 
            "getAbsolutePath"
            , bp::pure_virtual( (::irr::io::path ( ::irr::io::IFileSystem::* )( ::irr::io::path const & ) const)(&::irr::io::IFileSystem::getAbsolutePath) )
            , ( bp::arg("filename") ) )    
        .def( 
            "getFileArchive"
            , bp::pure_virtual( (::irr::io::IFileArchive * ( ::irr::io::IFileSystem::* )( ::irr::u32 ) )(&::irr::io::IFileSystem::getFileArchive) )
            , ( bp::arg("index") )
                /* undefined call policies */ )    
        .def( 
            "getFileArchiveCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::io::IFileSystem::* )(  ) const)(&::irr::io::IFileSystem::getFileArchiveCount) ) )    
        .def( 
            "getFileBasename"
            , bp::pure_virtual( (::irr::io::path ( ::irr::io::IFileSystem::* )( ::irr::io::path const &,bool ) const)(&::irr::io::IFileSystem::getFileBasename) )
            , ( bp::arg("filename"), bp::arg("keepExtension")=(bool)(true) ) )    
        .def( 
            "getFileDir"
            , bp::pure_virtual( (::irr::io::path ( ::irr::io::IFileSystem::* )( ::irr::io::path const & ) const)(&::irr::io::IFileSystem::getFileDir) )
            , ( bp::arg("filename") ) )    
        .def( 
            "getWorkingDirectory"
            , bp::pure_virtual( (::irr::io::path const & ( ::irr::io::IFileSystem::* )(  ) )(&::irr::io::IFileSystem::getWorkingDirectory) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "moveFileArchive"
            , bp::pure_virtual( (bool ( ::irr::io::IFileSystem::* )( ::irr::u32,::irr::s32 ) )(&::irr::io::IFileSystem::moveFileArchive) )
            , ( bp::arg("sourceIndex"), bp::arg("relative") ) )    
        .def( 
            "removeFileArchive"
            , bp::pure_virtual( (bool ( ::irr::io::IFileSystem::* )( ::irr::u32 ) )(&::irr::io::IFileSystem::removeFileArchive) )
            , ( bp::arg("index") ) )    
        .def( 
            "removeFileArchive"
            , bp::pure_virtual( (bool ( ::irr::io::IFileSystem::* )( ::irr::io::path const & ) )(&::irr::io::IFileSystem::removeFileArchive) )
            , ( bp::arg("filename") ) )    
        .def( 
            "setFileListSystem"
            , bp::pure_virtual( (::irr::io::EFileSystemType ( ::irr::io::IFileSystem::* )( ::irr::io::EFileSystemType ) )(&::irr::io::IFileSystem::setFileListSystem) )
            , ( bp::arg("listType") ) )    
        .def( 
            "setDebugName"
            , (void ( IFileSystem_wrapper::* )( ::irr::c8 const * ) )(&IFileSystem_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IReadFile_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IReadFile" )    
        .def( 
            "getFileName"
            , bp::pure_virtual( (::irr::io::path const & ( ::irr::io::IReadFile::* )(  ) const)(&::irr::io::IReadFile::getFileName) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getPos"
            , bp::pure_virtual( (long int ( ::irr::io::IReadFile::* )(  ) const)(&::irr::io::IReadFile::getPos) ) )    
        .def( 
            "getSize"
            , bp::pure_virtual( (long int ( ::irr::io::IReadFile::* )(  ) const)(&::irr::io::IReadFile::getSize) ) )    
        .def( 
            "read"
            , bp::pure_virtual( (::irr::s32 ( ::irr::io::IReadFile::* )( void *,::irr::u32 ) )(&::irr::io::IReadFile::read) )
            , ( bp::arg("buffer"), bp::arg("sizeToRead") ) )    
        .def( 
            "seek"
            , bp::pure_virtual( (bool ( ::irr::io::IReadFile::* )( long int,bool ) )(&::irr::io::IReadFile::seek) )
            , ( bp::arg("finalPos"), bp::arg("relativeMovement")=(bool)(false) ) )    
        .def( 
            "setDebugName"
            , (void ( IReadFile_wrapper::* )( ::irr::c8 const * ) )(&IReadFile_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IWriteFile_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IWriteFile" )    
        .def( 
            "getFileName"
            , bp::pure_virtual( (::irr::io::path const & ( ::irr::io::IWriteFile::* )(  ) const)(&::irr::io::IWriteFile::getFileName) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getPos"
            , bp::pure_virtual( (long int ( ::irr::io::IWriteFile::* )(  ) const)(&::irr::io::IWriteFile::getPos) ) )    
        .def( 
            "seek"
            , bp::pure_virtual( (bool ( ::irr::io::IWriteFile::* )( long int,bool ) )(&::irr::io::IWriteFile::seek) )
            , ( bp::arg("finalPos"), bp::arg("relativeMovement")=(bool)(false) ) )    
        .def( 
            "write"
            , bp::pure_virtual( (::irr::s32 ( ::irr::io::IWriteFile::* )( void const *,::irr::u32 ) )(&::irr::io::IWriteFile::write) )
            , ( bp::arg("buffer"), bp::arg("sizeToWrite") ) )    
        .def( 
            "setDebugName"
            , (void ( IWriteFile_wrapper::* )( ::irr::c8 const * ) )(&IWriteFile_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< irr::io::IXMLBase >( "IXMLBase" );

    bp::class_< IXMLWriter_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IXMLWriter" )    
        .def( 
            "writeClosingTag"
            , bp::pure_virtual( (void ( ::irr::io::IXMLWriter::* )( wchar_t const * ) )(&::irr::io::IXMLWriter::writeClosingTag) )
            , ( bp::arg("name") ) )    
        .def( 
            "writeComment"
            , bp::pure_virtual( (void ( ::irr::io::IXMLWriter::* )( wchar_t const * ) )(&::irr::io::IXMLWriter::writeComment) )
            , ( bp::arg("comment") ) )    
        .def( 
            "writeElement"
            , bp::pure_virtual( (void ( ::irr::io::IXMLWriter::* )( wchar_t const *,bool,wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const * ) )(&::irr::io::IXMLWriter::writeElement) )
            , ( bp::arg("name"), bp::arg("empty")=(bool)(false), bp::arg("attr1Name")=bp::object(), bp::arg("attr1Value")=bp::object(), bp::arg("attr2Name")=bp::object(), bp::arg("attr2Value")=bp::object(), bp::arg("attr3Name")=bp::object(), bp::arg("attr3Value")=bp::object(), bp::arg("attr4Name")=bp::object(), bp::arg("attr4Value")=bp::object(), bp::arg("attr5Name")=bp::object(), bp::arg("attr5Value")=bp::object() ) )    
        .def( 
            "writeElement"
            , bp::pure_virtual( (void ( ::irr::io::IXMLWriter::* )( wchar_t const *,bool,::irr::core::array< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >, irr::core::irrAllocator< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > > > &,::irr::core::array< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > >, irr::core::irrAllocator< irr::core::string< wchar_t, irr::core::irrAllocator< wchar_t > > > > & ) )(&::irr::io::IXMLWriter::writeElement) )
            , ( bp::arg("name"), bp::arg("empty"), bp::arg("names"), bp::arg("values") ) )    
        .def( 
            "writeLineBreak"
            , bp::pure_virtual( (void ( ::irr::io::IXMLWriter::* )(  ) )(&::irr::io::IXMLWriter::writeLineBreak) ) )    
        .def( 
            "writeText"
            , bp::pure_virtual( (void ( ::irr::io::IXMLWriter::* )( wchar_t const * ) )(&::irr::io::IXMLWriter::writeText) )
            , ( bp::arg("text") ) )    
        .def( 
            "writeXMLHeader"
            , bp::pure_virtual( (void ( ::irr::io::IXMLWriter::* )(  ) )(&::irr::io::IXMLWriter::writeXMLHeader) ) )    
        .def( 
            "setDebugName"
            , (void ( IXMLWriter_wrapper::* )( ::irr::c8 const * ) )(&IXMLWriter_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    { //::irr::io::SNamedPath
        typedef bp::class_< SNamedPath_wrapper > SNamedPath_exposer_t;
        SNamedPath_exposer_t SNamedPath_exposer = SNamedPath_exposer_t( "SNamedPath", bp::init< >() );
        bp::scope SNamedPath_scope( SNamedPath_exposer );
        SNamedPath_exposer.def( bp::init< irr::io::path const & >(( bp::arg("p") )) );
        bp::implicitly_convertible< irr::io::path const &, irr::io::SNamedPath >();
        { //::irr::io::SNamedPath::PathToName
        
            typedef ::irr::io::path ( SNamedPath_wrapper::*PathToName_function_type )( ::irr::io::path const & ) const;
            
            SNamedPath_exposer.def( 
                "PathToName"
                , PathToName_function_type( &SNamedPath_wrapper::PathToName )
                , ( bp::arg("p") ) );
        
        }
        { //::irr::io::SNamedPath::getInternalName
        
            typedef ::irr::io::path const & ( ::irr::io::SNamedPath::*getInternalName_function_type )(  ) const;
            
            SNamedPath_exposer.def( 
                "getInternalName"
                , getInternalName_function_type( &::irr::io::SNamedPath::getInternalName )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::io::SNamedPath::getPath
        
            typedef ::irr::io::path const & ( ::irr::io::SNamedPath::*getPath_function_type )(  ) const;
            
            SNamedPath_exposer.def( 
                "getPath"
                , getPath_function_type( &::irr::io::SNamedPath::getPath )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        SNamedPath_exposer.def( "as__scope_irr_scope_core_scope_stringc", &irr::io::SNamedPath::operator ::irr::core::stringc  );
        SNamedPath_exposer.def( "as__scope_irr_scope_core_scope_stringw", &irr::io::SNamedPath::operator ::irr::core::stringw  );
        SNamedPath_exposer.def( bp::self < bp::self );
        { //::irr::io::SNamedPath::setPath
        
            typedef void ( ::irr::io::SNamedPath::*setPath_function_type )( ::irr::io::path const & ) ;
            
            SNamedPath_exposer.def( 
                "setPath"
                , setPath_function_type( &::irr::io::SNamedPath::setPath )
                , ( bp::arg("p") ) );
        
        }
    }

    bp::implicitly_convertible< irr::io::SNamedPath, irr::core::stringc >();

    bp::implicitly_convertible< irr::io::SNamedPath, irr::core::stringw >();

    bp::class_< IMeshBuffer_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IMeshBuffer" )    
        .def( 
            "append"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshBuffer::* )( void const * const,::irr::u32,::irr::u16 const * const,::irr::u32 ) )(&::irr::scene::IMeshBuffer::append) )
            , ( bp::arg("vertices"), bp::arg("numVertices"), bp::arg("indices"), bp::arg("numIndices") ) )    
        .def( 
            "append"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshBuffer::* )( ::irr::scene::IMeshBuffer const * const ) )(&::irr::scene::IMeshBuffer::append) )
            , ( bp::arg("other") ) )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3df const & ( ::irr::scene::IMeshBuffer::* )(  ) const)(&::irr::scene::IMeshBuffer::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getChangedID_Index"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IMeshBuffer::* )(  ) const)(&::irr::scene::IMeshBuffer::getChangedID_Index) ) )    
        .def( 
            "getChangedID_Vertex"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IMeshBuffer::* )(  ) const)(&::irr::scene::IMeshBuffer::getChangedID_Vertex) ) )    
        .def( 
            "getHardwareMappingHint_Index"
            , bp::pure_virtual( (::irr::scene::E_HARDWARE_MAPPING ( ::irr::scene::IMeshBuffer::* )(  ) const)(&::irr::scene::IMeshBuffer::getHardwareMappingHint_Index) ) )    
        .def( 
            "getHardwareMappingHint_Vertex"
            , bp::pure_virtual( (::irr::scene::E_HARDWARE_MAPPING ( ::irr::scene::IMeshBuffer::* )(  ) const)(&::irr::scene::IMeshBuffer::getHardwareMappingHint_Vertex) ) )    
        .def( 
            "getIndexCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IMeshBuffer::* )(  ) const)(&::irr::scene::IMeshBuffer::getIndexCount) ) )    
        .def( 
            "getIndexType"
            , bp::pure_virtual( (::irr::video::E_INDEX_TYPE ( ::irr::scene::IMeshBuffer::* )(  ) const)(&::irr::scene::IMeshBuffer::getIndexType) ) )    
        .def( 
            "getIndices"
            , bp::pure_virtual( (::irr::u16 const * ( ::irr::scene::IMeshBuffer::* )(  ) const)(&::irr::scene::IMeshBuffer::getIndices) )
                /* undefined call policies */ )    
        .def( 
            "getIndices"
            , bp::pure_virtual( (::irr::u16 * ( ::irr::scene::IMeshBuffer::* )(  ) )(&::irr::scene::IMeshBuffer::getIndices) )
                /* undefined call policies */ )    
        .def( 
            "getMaterial"
            , bp::pure_virtual( (::irr::video::SMaterial & ( ::irr::scene::IMeshBuffer::* )(  ) )(&::irr::scene::IMeshBuffer::getMaterial) )
                /* undefined call policies */ )    
        .def( 
            "getMaterial"
            , bp::pure_virtual( (::irr::video::SMaterial const & ( ::irr::scene::IMeshBuffer::* )(  ) const)(&::irr::scene::IMeshBuffer::getMaterial) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getNormal"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IMeshBuffer::* )( ::irr::u32 ) const)(&::irr::scene::IMeshBuffer::getNormal) )
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getNormal"
            , bp::pure_virtual( (::irr::core::vector3df & ( ::irr::scene::IMeshBuffer::* )( ::irr::u32 ) )(&::irr::scene::IMeshBuffer::getNormal) )
            , ( bp::arg("i") )
                /* undefined call policies */ )    
        .def( 
            "getPosition"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IMeshBuffer::* )( ::irr::u32 ) const)(&::irr::scene::IMeshBuffer::getPosition) )
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getPosition"
            , bp::pure_virtual( (::irr::core::vector3df & ( ::irr::scene::IMeshBuffer::* )( ::irr::u32 ) )(&::irr::scene::IMeshBuffer::getPosition) )
            , ( bp::arg("i") )
                /* undefined call policies */ )    
        .def( 
            "getTCoords"
            , bp::pure_virtual( (::irr::core::vector2df const & ( ::irr::scene::IMeshBuffer::* )( ::irr::u32 ) const)(&::irr::scene::IMeshBuffer::getTCoords) )
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTCoords"
            , bp::pure_virtual( (::irr::core::vector2df & ( ::irr::scene::IMeshBuffer::* )( ::irr::u32 ) )(&::irr::scene::IMeshBuffer::getTCoords) )
            , ( bp::arg("i") )
                /* undefined call policies */ )    
        .def( 
            "getVertexCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IMeshBuffer::* )(  ) const)(&::irr::scene::IMeshBuffer::getVertexCount) ) )    
        .def( 
            "getVertexType"
            , bp::pure_virtual( (::irr::video::E_VERTEX_TYPE ( ::irr::scene::IMeshBuffer::* )(  ) const)(&::irr::scene::IMeshBuffer::getVertexType) ) )    
        .def( 
            "getVertices"
            , bp::pure_virtual( (void const * ( ::irr::scene::IMeshBuffer::* )(  ) const)(&::irr::scene::IMeshBuffer::getVertices) )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "getVertices"
            , bp::pure_virtual( (void * ( ::irr::scene::IMeshBuffer::* )(  ) )(&::irr::scene::IMeshBuffer::getVertices) )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "recalculateBoundingBox"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshBuffer::* )(  ) )(&::irr::scene::IMeshBuffer::recalculateBoundingBox) ) )    
        .def( 
            "setBoundingBox"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshBuffer::* )( ::irr::core::aabbox3df const & ) )(&::irr::scene::IMeshBuffer::setBoundingBox) )
            , ( bp::arg("box") ) )    
        .def( 
            "setDirty"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshBuffer::* )( ::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IMeshBuffer::setDirty) )
            , ( bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setHardwareMappingHint"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshBuffer::* )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IMeshBuffer::setHardwareMappingHint) )
            , ( bp::arg("newMappingHint"), bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setDebugName"
            , (void ( IMeshBuffer_wrapper::* )( ::irr::c8 const * ) )(&IMeshBuffer_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IDynamicMeshBuffer_wrapper, bp::bases< irr::scene::IMeshBuffer >, boost::noncopyable >( "IDynamicMeshBuffer" )    
        .def( 
            "append"
            , (void ( ::irr::scene::IDynamicMeshBuffer::* )( void const * const,::irr::u32,::irr::u16 const * const,::irr::u32 ) )(&::irr::scene::IDynamicMeshBuffer::append)
            , (void ( IDynamicMeshBuffer_wrapper::* )( void const * const,::irr::u32,::irr::u16 const * const,::irr::u32 ) )(&IDynamicMeshBuffer_wrapper::default_append)
            , ( bp::arg("vertices"), bp::arg("numVertices"), bp::arg("indices"), bp::arg("numIndices") ) )    
        .def( 
            "append"
            , (void ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::scene::IMeshBuffer const * const ) )(&::irr::scene::IDynamicMeshBuffer::append)
            , (void ( IDynamicMeshBuffer_wrapper::* )( ::irr::scene::IMeshBuffer const * const ) )(&IDynamicMeshBuffer_wrapper::default_append)
            , ( bp::arg("other") ) )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3df const & ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getChangedID_Index"
            , (::irr::u32 ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getChangedID_Index)
            , (::irr::u32 ( IDynamicMeshBuffer_wrapper::* )(  ) const)(&IDynamicMeshBuffer_wrapper::default_getChangedID_Index) )    
        .def( 
            "getChangedID_Vertex"
            , (::irr::u32 ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getChangedID_Vertex)
            , (::irr::u32 ( IDynamicMeshBuffer_wrapper::* )(  ) const)(&IDynamicMeshBuffer_wrapper::default_getChangedID_Vertex) )    
        .def( 
            "getHardwareMappingHint_Index"
            , (::irr::scene::E_HARDWARE_MAPPING ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getHardwareMappingHint_Index)
            , (::irr::scene::E_HARDWARE_MAPPING ( IDynamicMeshBuffer_wrapper::* )(  ) const)(&IDynamicMeshBuffer_wrapper::default_getHardwareMappingHint_Index) )    
        .def( 
            "getHardwareMappingHint_Vertex"
            , (::irr::scene::E_HARDWARE_MAPPING ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getHardwareMappingHint_Vertex)
            , (::irr::scene::E_HARDWARE_MAPPING ( IDynamicMeshBuffer_wrapper::* )(  ) const)(&IDynamicMeshBuffer_wrapper::default_getHardwareMappingHint_Vertex) )    
        .def( 
            "getIndexBuffer"
            , bp::pure_virtual( (::irr::scene::IIndexBuffer & ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getIndexBuffer) )
                /* undefined call policies */ )    
        .def( 
            "getIndexCount"
            , (::irr::u32 ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getIndexCount)
            , (::irr::u32 ( IDynamicMeshBuffer_wrapper::* )(  ) const)(&IDynamicMeshBuffer_wrapper::default_getIndexCount) )    
        .def( 
            "getIndexType"
            , (::irr::video::E_INDEX_TYPE ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getIndexType)
            , (::irr::video::E_INDEX_TYPE ( IDynamicMeshBuffer_wrapper::* )(  ) const)(&IDynamicMeshBuffer_wrapper::default_getIndexType) )    
        .def( 
            "getIndices"
            , (::irr::u16 const * ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getIndices)
            , (::irr::u16 const * ( IDynamicMeshBuffer_wrapper::* )(  ) const)(&IDynamicMeshBuffer_wrapper::default_getIndices)
                /* undefined call policies */ )    
        .def( 
            "getIndices"
            , (::irr::u16 * ( ::irr::scene::IDynamicMeshBuffer::* )(  ) )(&::irr::scene::IDynamicMeshBuffer::getIndices)
            , (::irr::u16 * ( IDynamicMeshBuffer_wrapper::* )(  ) )(&IDynamicMeshBuffer_wrapper::default_getIndices)
                /* undefined call policies */ )    
        .def( 
            "getMaterial"
            , bp::pure_virtual( (::irr::video::SMaterial & ( ::irr::scene::IDynamicMeshBuffer::* )(  ) )(&::irr::scene::IDynamicMeshBuffer::getMaterial) )
                /* undefined call policies */ )    
        .def( 
            "getMaterial"
            , bp::pure_virtual( (::irr::video::SMaterial const & ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getMaterial) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getNormal"
            , (::irr::core::vector3df const & ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::u32 ) const)(&::irr::scene::IDynamicMeshBuffer::getNormal)
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getNormal"
            , (::irr::core::vector3df & ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::u32 ) )(&::irr::scene::IDynamicMeshBuffer::getNormal)
            , ( bp::arg("i") )
                /* undefined call policies */ )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::u32 ) const)(&::irr::scene::IDynamicMeshBuffer::getPosition)
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df & ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::u32 ) )(&::irr::scene::IDynamicMeshBuffer::getPosition)
            , ( bp::arg("i") )
                /* undefined call policies */ )    
        .def( 
            "getTCoords"
            , (::irr::core::vector2df const & ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::u32 ) const)(&::irr::scene::IDynamicMeshBuffer::getTCoords)
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTCoords"
            , (::irr::core::vector2df & ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::u32 ) )(&::irr::scene::IDynamicMeshBuffer::getTCoords)
            , ( bp::arg("i") )
                /* undefined call policies */ )    
        .def( 
            "getVertexBuffer"
            , bp::pure_virtual( (::irr::scene::IVertexBuffer & ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getVertexBuffer) )
                /* undefined call policies */ )    
        .def( 
            "getVertexCount"
            , (::irr::u32 ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getVertexCount)
            , (::irr::u32 ( IDynamicMeshBuffer_wrapper::* )(  ) const)(&IDynamicMeshBuffer_wrapper::default_getVertexCount) )    
        .def( 
            "getVertexType"
            , (::irr::video::E_VERTEX_TYPE ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getVertexType)
            , (::irr::video::E_VERTEX_TYPE ( IDynamicMeshBuffer_wrapper::* )(  ) const)(&IDynamicMeshBuffer_wrapper::default_getVertexType) )    
        .def( 
            "getVertices"
            , (void const * ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getVertices)
            , (void const * ( IDynamicMeshBuffer_wrapper::* )(  ) const)(&IDynamicMeshBuffer_wrapper::default_getVertices)
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "getVertices"
            , (void * ( ::irr::scene::IDynamicMeshBuffer::* )(  ) )(&::irr::scene::IDynamicMeshBuffer::getVertices)
            , (void * ( IDynamicMeshBuffer_wrapper::* )(  ) )(&IDynamicMeshBuffer_wrapper::default_getVertices)
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "recalculateBoundingBox"
            , bp::pure_virtual( (void ( ::irr::scene::IDynamicMeshBuffer::* )(  ) )(&::irr::scene::IDynamicMeshBuffer::recalculateBoundingBox) ) )    
        .def( 
            "setBoundingBox"
            , bp::pure_virtual( (void ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::core::aabbox3df const & ) )(&::irr::scene::IDynamicMeshBuffer::setBoundingBox) )
            , ( bp::arg("box") ) )    
        .def( 
            "setDirty"
            , (void ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IDynamicMeshBuffer::setDirty)
            , (void ( IDynamicMeshBuffer_wrapper::* )( ::irr::scene::E_BUFFER_TYPE ) )(&IDynamicMeshBuffer_wrapper::default_setDirty)
            , ( bp::arg("Buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setHardwareMappingHint"
            , (void ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IDynamicMeshBuffer::setHardwareMappingHint)
            , (void ( IDynamicMeshBuffer_wrapper::* )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) )(&IDynamicMeshBuffer_wrapper::default_setHardwareMappingHint)
            , ( bp::arg("NewMappingHint"), bp::arg("Buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setIndexBuffer"
            , bp::pure_virtual( (void ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::scene::IIndexBuffer * ) )(&::irr::scene::IDynamicMeshBuffer::setIndexBuffer) )
            , ( bp::arg("indexBuffer") ) )    
        .def( 
            "setVertexBuffer"
            , bp::pure_virtual( (void ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::scene::IVertexBuffer * ) )(&::irr::scene::IDynamicMeshBuffer::setVertexBuffer) )
            , ( bp::arg("vertexBuffer") ) )    
        .def( 
            "setDebugName"
            , (void ( IDynamicMeshBuffer_wrapper::* )( ::irr::c8 const * ) )(&IDynamicMeshBuffer_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< CDynamicMeshBuffer_wrapper, bp::bases< irr::scene::IDynamicMeshBuffer > >( "CDynamicMeshBuffer", bp::init< irr::video::E_VERTEX_TYPE, irr::video::E_INDEX_TYPE >(( bp::arg("vertexType"), bp::arg("indexType") )) )    
        .def( 
            "getBoundingBox"
            , (::irr::core::aabbox3d< float > const & ( ::irr::scene::CDynamicMeshBuffer::* )(  ) const)(&::irr::scene::CDynamicMeshBuffer::getBoundingBox)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getIndexBuffer"
            , (::irr::scene::IIndexBuffer & ( ::irr::scene::CDynamicMeshBuffer::* )(  ) const)(&::irr::scene::CDynamicMeshBuffer::getIndexBuffer)
                /* undefined call policies */ )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial const & ( ::irr::scene::CDynamicMeshBuffer::* )(  ) const)(&::irr::scene::CDynamicMeshBuffer::getMaterial)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::CDynamicMeshBuffer::* )(  ) )(&::irr::scene::CDynamicMeshBuffer::getMaterial)
                /* undefined call policies */ )    
        .def( 
            "getVertexBuffer"
            , (::irr::scene::IVertexBuffer & ( ::irr::scene::CDynamicMeshBuffer::* )(  ) const)(&::irr::scene::CDynamicMeshBuffer::getVertexBuffer)
                /* undefined call policies */ )    
        .def( 
            "recalculateBoundingBox"
            , (void ( ::irr::scene::CDynamicMeshBuffer::* )(  ) )(&::irr::scene::CDynamicMeshBuffer::recalculateBoundingBox)
            , (void ( CDynamicMeshBuffer_wrapper::* )(  ) )(&CDynamicMeshBuffer_wrapper::default_recalculateBoundingBox) )    
        .def( 
            "setBoundingBox"
            , (void ( ::irr::scene::CDynamicMeshBuffer::* )( ::irr::core::aabbox3df const & ) )(&::irr::scene::CDynamicMeshBuffer::setBoundingBox)
            , (void ( CDynamicMeshBuffer_wrapper::* )( ::irr::core::aabbox3df const & ) )(&CDynamicMeshBuffer_wrapper::default_setBoundingBox)
            , ( bp::arg("box") ) )    
        .def( 
            "setIndexBuffer"
            , (void ( ::irr::scene::CDynamicMeshBuffer::* )( ::irr::scene::IIndexBuffer * ) )(&::irr::scene::CDynamicMeshBuffer::setIndexBuffer)
            , (void ( CDynamicMeshBuffer_wrapper::* )( ::irr::scene::IIndexBuffer * ) )(&CDynamicMeshBuffer_wrapper::default_setIndexBuffer)
            , ( bp::arg("newIndexBuffer") ) )    
        .def( 
            "setVertexBuffer"
            , (void ( ::irr::scene::CDynamicMeshBuffer::* )( ::irr::scene::IVertexBuffer * ) )(&::irr::scene::CDynamicMeshBuffer::setVertexBuffer)
            , (void ( CDynamicMeshBuffer_wrapper::* )( ::irr::scene::IVertexBuffer * ) )(&CDynamicMeshBuffer_wrapper::default_setVertexBuffer)
            , ( bp::arg("newVertexBuffer") ) )    
        .def_readwrite( "BoundingBox", &irr::scene::CDynamicMeshBuffer::BoundingBox )    
        .def_readwrite( "Material", &irr::scene::CDynamicMeshBuffer::Material )    
        .def( 
            "append"
            , (void ( ::irr::scene::IDynamicMeshBuffer::* )( void const * const,::irr::u32,::irr::u16 const * const,::irr::u32 ) )(&::irr::scene::IDynamicMeshBuffer::append)
            , (void ( CDynamicMeshBuffer_wrapper::* )( void const * const,::irr::u32,::irr::u16 const * const,::irr::u32 ) )(&CDynamicMeshBuffer_wrapper::default_append)
            , ( bp::arg("vertices"), bp::arg("numVertices"), bp::arg("indices"), bp::arg("numIndices") ) )    
        .def( 
            "append"
            , (void ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::scene::IMeshBuffer const * const ) )(&::irr::scene::IDynamicMeshBuffer::append)
            , (void ( CDynamicMeshBuffer_wrapper::* )( ::irr::scene::IMeshBuffer const * const ) )(&CDynamicMeshBuffer_wrapper::default_append)
            , ( bp::arg("other") ) )    
        .def( 
            "getChangedID_Index"
            , (::irr::u32 ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getChangedID_Index)
            , (::irr::u32 ( CDynamicMeshBuffer_wrapper::* )(  ) const)(&CDynamicMeshBuffer_wrapper::default_getChangedID_Index) )    
        .def( 
            "getChangedID_Vertex"
            , (::irr::u32 ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getChangedID_Vertex)
            , (::irr::u32 ( CDynamicMeshBuffer_wrapper::* )(  ) const)(&CDynamicMeshBuffer_wrapper::default_getChangedID_Vertex) )    
        .def( 
            "getHardwareMappingHint_Index"
            , (::irr::scene::E_HARDWARE_MAPPING ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getHardwareMappingHint_Index)
            , (::irr::scene::E_HARDWARE_MAPPING ( CDynamicMeshBuffer_wrapper::* )(  ) const)(&CDynamicMeshBuffer_wrapper::default_getHardwareMappingHint_Index) )    
        .def( 
            "getHardwareMappingHint_Vertex"
            , (::irr::scene::E_HARDWARE_MAPPING ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getHardwareMappingHint_Vertex)
            , (::irr::scene::E_HARDWARE_MAPPING ( CDynamicMeshBuffer_wrapper::* )(  ) const)(&CDynamicMeshBuffer_wrapper::default_getHardwareMappingHint_Vertex) )    
        .def( 
            "getIndexCount"
            , (::irr::u32 ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getIndexCount)
            , (::irr::u32 ( CDynamicMeshBuffer_wrapper::* )(  ) const)(&CDynamicMeshBuffer_wrapper::default_getIndexCount) )    
        .def( 
            "getIndexType"
            , (::irr::video::E_INDEX_TYPE ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getIndexType)
            , (::irr::video::E_INDEX_TYPE ( CDynamicMeshBuffer_wrapper::* )(  ) const)(&CDynamicMeshBuffer_wrapper::default_getIndexType) )    
        .def( 
            "getIndices"
            , (::irr::u16 const * ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getIndices)
            , (::irr::u16 const * ( CDynamicMeshBuffer_wrapper::* )(  ) const)(&CDynamicMeshBuffer_wrapper::default_getIndices)
                /* undefined call policies */ )    
        .def( 
            "getIndices"
            , (::irr::u16 * ( ::irr::scene::IDynamicMeshBuffer::* )(  ) )(&::irr::scene::IDynamicMeshBuffer::getIndices)
            , (::irr::u16 * ( CDynamicMeshBuffer_wrapper::* )(  ) )(&CDynamicMeshBuffer_wrapper::default_getIndices)
                /* undefined call policies */ )    
        .def( 
            "getNormal"
            , (::irr::core::vector3df const & ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::u32 ) const)(&::irr::scene::IDynamicMeshBuffer::getNormal)
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getNormal"
            , (::irr::core::vector3df & ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::u32 ) )(&::irr::scene::IDynamicMeshBuffer::getNormal)
            , ( bp::arg("i") )
                /* undefined call policies */ )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::u32 ) const)(&::irr::scene::IDynamicMeshBuffer::getPosition)
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df & ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::u32 ) )(&::irr::scene::IDynamicMeshBuffer::getPosition)
            , ( bp::arg("i") )
                /* undefined call policies */ )    
        .def( 
            "getTCoords"
            , (::irr::core::vector2df const & ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::u32 ) const)(&::irr::scene::IDynamicMeshBuffer::getTCoords)
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTCoords"
            , (::irr::core::vector2df & ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::u32 ) )(&::irr::scene::IDynamicMeshBuffer::getTCoords)
            , ( bp::arg("i") )
                /* undefined call policies */ )    
        .def( 
            "getVertexCount"
            , (::irr::u32 ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getVertexCount)
            , (::irr::u32 ( CDynamicMeshBuffer_wrapper::* )(  ) const)(&CDynamicMeshBuffer_wrapper::default_getVertexCount) )    
        .def( 
            "getVertexType"
            , (::irr::video::E_VERTEX_TYPE ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getVertexType)
            , (::irr::video::E_VERTEX_TYPE ( CDynamicMeshBuffer_wrapper::* )(  ) const)(&CDynamicMeshBuffer_wrapper::default_getVertexType) )    
        .def( 
            "getVertices"
            , (void const * ( ::irr::scene::IDynamicMeshBuffer::* )(  ) const)(&::irr::scene::IDynamicMeshBuffer::getVertices)
            , (void const * ( CDynamicMeshBuffer_wrapper::* )(  ) const)(&CDynamicMeshBuffer_wrapper::default_getVertices)
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "getVertices"
            , (void * ( ::irr::scene::IDynamicMeshBuffer::* )(  ) )(&::irr::scene::IDynamicMeshBuffer::getVertices)
            , (void * ( CDynamicMeshBuffer_wrapper::* )(  ) )(&CDynamicMeshBuffer_wrapper::default_getVertices)
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "setDebugName"
            , (void ( CDynamicMeshBuffer_wrapper::* )( ::irr::c8 const * ) )(&CDynamicMeshBuffer_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setDirty"
            , (void ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IDynamicMeshBuffer::setDirty)
            , (void ( CDynamicMeshBuffer_wrapper::* )( ::irr::scene::E_BUFFER_TYPE ) )(&CDynamicMeshBuffer_wrapper::default_setDirty)
            , ( bp::arg("Buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setHardwareMappingHint"
            , (void ( ::irr::scene::IDynamicMeshBuffer::* )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IDynamicMeshBuffer::setHardwareMappingHint)
            , (void ( CDynamicMeshBuffer_wrapper::* )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) )(&CDynamicMeshBuffer_wrapper::default_setHardwareMappingHint)
            , ( bp::arg("NewMappingHint"), bp::arg("Buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) );

    bp::class_< IIndexBuffer_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IIndexBuffer" )    
        .def( 
            "allocated_size"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IIndexBuffer::* )(  ) const)(&::irr::scene::IIndexBuffer::allocated_size) ) )    
        .def( 
            "getChangedID"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IIndexBuffer::* )(  ) const)(&::irr::scene::IIndexBuffer::getChangedID) ) )    
        .def( 
            "getData"
            , bp::pure_virtual( (void * ( ::irr::scene::IIndexBuffer::* )(  ) )(&::irr::scene::IIndexBuffer::getData) )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "getHardwareMappingHint"
            , bp::pure_virtual( (::irr::scene::E_HARDWARE_MAPPING ( ::irr::scene::IIndexBuffer::* )(  ) const)(&::irr::scene::IIndexBuffer::getHardwareMappingHint) ) )    
        .def( 
            "getLast"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IIndexBuffer::* )(  ) )(&::irr::scene::IIndexBuffer::getLast) ) )    
        .def( 
            "getType"
            , bp::pure_virtual( (::irr::video::E_INDEX_TYPE ( ::irr::scene::IIndexBuffer::* )(  ) const)(&::irr::scene::IIndexBuffer::getType) ) )    
        .def( 
            "__getitem__"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IIndexBuffer::* )( ::irr::u32 ) const)(&::irr::scene::IIndexBuffer::operator[]) )
            , ( bp::arg("index") ) )    
        .def( 
            "pointer"
            , bp::pure_virtual( (void * ( ::irr::scene::IIndexBuffer::* )(  ) )(&::irr::scene::IIndexBuffer::pointer) )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "push_back"
            , bp::pure_virtual( (void ( ::irr::scene::IIndexBuffer::* )( ::irr::u32 const & ) )(&::irr::scene::IIndexBuffer::push_back) )
            , ( bp::arg("element") ) )    
        .def( 
            "reallocate"
            , bp::pure_virtual( (void ( ::irr::scene::IIndexBuffer::* )( ::irr::u32 ) )(&::irr::scene::IIndexBuffer::reallocate) )
            , ( bp::arg("new_size") ) )    
        .def( 
            "setDirty"
            , bp::pure_virtual( (void ( ::irr::scene::IIndexBuffer::* )(  ) )(&::irr::scene::IIndexBuffer::setDirty) ) )    
        .def( 
            "setHardwareMappingHint"
            , bp::pure_virtual( (void ( ::irr::scene::IIndexBuffer::* )( ::irr::scene::E_HARDWARE_MAPPING ) )(&::irr::scene::IIndexBuffer::setHardwareMappingHint) )
            , ( bp::arg("NewMappingHint") ) )    
        .def( 
            "setType"
            , bp::pure_virtual( (void ( ::irr::scene::IIndexBuffer::* )( ::irr::video::E_INDEX_TYPE ) )(&::irr::scene::IIndexBuffer::setType) )
            , ( bp::arg("IndexType") ) )    
        .def( 
            "setValue"
            , bp::pure_virtual( (void ( ::irr::scene::IIndexBuffer::* )( ::irr::u32,::irr::u32 ) )(&::irr::scene::IIndexBuffer::setValue) )
            , ( bp::arg("index"), bp::arg("value") ) )    
        .def( 
            "set_used"
            , bp::pure_virtual( (void ( ::irr::scene::IIndexBuffer::* )( ::irr::u32 ) )(&::irr::scene::IIndexBuffer::set_used) )
            , ( bp::arg("usedNow") ) )    
        .def( 
            "size"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IIndexBuffer::* )(  ) const)(&::irr::scene::IIndexBuffer::size) ) )    
        .def( 
            "stride"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IIndexBuffer::* )(  ) const)(&::irr::scene::IIndexBuffer::stride) ) )    
        .def( 
            "setDebugName"
            , (void ( IIndexBuffer_wrapper::* )( ::irr::c8 const * ) )(&IIndexBuffer_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    { //::irr::scene::CIndexBuffer
        typedef bp::class_< CIndexBuffer_wrapper, bp::bases< irr::scene::IIndexBuffer > > CIndexBuffer_exposer_t;
        CIndexBuffer_exposer_t CIndexBuffer_exposer = CIndexBuffer_exposer_t( "CIndexBuffer", bp::init< irr::video::E_INDEX_TYPE >(( bp::arg("IndexType") )) );
        bp::scope CIndexBuffer_scope( CIndexBuffer_exposer );
        bp::implicitly_convertible< irr::video::E_INDEX_TYPE, irr::scene::CIndexBuffer >();
        CIndexBuffer_exposer.def( bp::init< irr::scene::IIndexBuffer const & >(( bp::arg("IndexBufferCopy") )) );
        bp::implicitly_convertible< irr::scene::IIndexBuffer const &, irr::scene::CIndexBuffer >();
        { //::irr::scene::CIndexBuffer::allocated_size
        
            typedef ::irr::u32 ( ::irr::scene::CIndexBuffer::*allocated_size_function_type )(  ) const;
            typedef ::irr::u32 ( CIndexBuffer_wrapper::*default_allocated_size_function_type )(  ) const;
            
            CIndexBuffer_exposer.def( 
                "allocated_size"
                , allocated_size_function_type(&::irr::scene::CIndexBuffer::allocated_size)
                , default_allocated_size_function_type(&CIndexBuffer_wrapper::default_allocated_size) );
        
        }
        { //::irr::scene::CIndexBuffer::getChangedID
        
            typedef ::irr::u32 ( ::irr::scene::CIndexBuffer::*getChangedID_function_type )(  ) const;
            typedef ::irr::u32 ( CIndexBuffer_wrapper::*default_getChangedID_function_type )(  ) const;
            
            CIndexBuffer_exposer.def( 
                "getChangedID"
                , getChangedID_function_type(&::irr::scene::CIndexBuffer::getChangedID)
                , default_getChangedID_function_type(&CIndexBuffer_wrapper::default_getChangedID) );
        
        }
        { //::irr::scene::CIndexBuffer::getData
        
            typedef void * ( ::irr::scene::CIndexBuffer::*getData_function_type )(  ) ;
            typedef void * ( CIndexBuffer_wrapper::*default_getData_function_type )(  ) ;
            
            CIndexBuffer_exposer.def( 
                "getData"
                , getData_function_type(&::irr::scene::CIndexBuffer::getData)
                , default_getData_function_type(&CIndexBuffer_wrapper::default_getData)
                , bp::return_value_policy< bp::return_opaque_pointer >() );
        
        }
        { //::irr::scene::CIndexBuffer::getHardwareMappingHint
        
            typedef ::irr::scene::E_HARDWARE_MAPPING ( ::irr::scene::CIndexBuffer::*getHardwareMappingHint_function_type )(  ) const;
            typedef ::irr::scene::E_HARDWARE_MAPPING ( CIndexBuffer_wrapper::*default_getHardwareMappingHint_function_type )(  ) const;
            
            CIndexBuffer_exposer.def( 
                "getHardwareMappingHint"
                , getHardwareMappingHint_function_type(&::irr::scene::CIndexBuffer::getHardwareMappingHint)
                , default_getHardwareMappingHint_function_type(&CIndexBuffer_wrapper::default_getHardwareMappingHint) );
        
        }
        { //::irr::scene::CIndexBuffer::getLast
        
            typedef ::irr::u32 ( ::irr::scene::CIndexBuffer::*getLast_function_type )(  ) ;
            typedef ::irr::u32 ( CIndexBuffer_wrapper::*default_getLast_function_type )(  ) ;
            
            CIndexBuffer_exposer.def( 
                "getLast"
                , getLast_function_type(&::irr::scene::CIndexBuffer::getLast)
                , default_getLast_function_type(&CIndexBuffer_wrapper::default_getLast) );
        
        }
        { //::irr::scene::CIndexBuffer::getType
        
            typedef ::irr::video::E_INDEX_TYPE ( ::irr::scene::CIndexBuffer::*getType_function_type )(  ) const;
            typedef ::irr::video::E_INDEX_TYPE ( CIndexBuffer_wrapper::*default_getType_function_type )(  ) const;
            
            CIndexBuffer_exposer.def( 
                "getType"
                , getType_function_type(&::irr::scene::CIndexBuffer::getType)
                , default_getType_function_type(&CIndexBuffer_wrapper::default_getType) );
        
        }
        { //::irr::scene::CIndexBuffer::operator[]
        
            typedef ::irr::u32 ( ::irr::scene::CIndexBuffer::*__getitem___function_type )( ::irr::u32 ) const;
            typedef ::irr::u32 ( CIndexBuffer_wrapper::*default___getitem___function_type )( ::irr::u32 ) const;
            
            CIndexBuffer_exposer.def( 
                "__getitem__"
                , __getitem___function_type(&::irr::scene::CIndexBuffer::operator[])
                , default___getitem___function_type(&CIndexBuffer_wrapper::default___getitem__)
                , ( bp::arg("index") ) );
        
        }
        { //::irr::scene::CIndexBuffer::pointer
        
            typedef void * ( ::irr::scene::CIndexBuffer::*pointer_function_type )(  ) ;
            typedef void * ( CIndexBuffer_wrapper::*default_pointer_function_type )(  ) ;
            
            CIndexBuffer_exposer.def( 
                "pointer"
                , pointer_function_type(&::irr::scene::CIndexBuffer::pointer)
                , default_pointer_function_type(&CIndexBuffer_wrapper::default_pointer)
                , bp::return_value_policy< bp::return_opaque_pointer >() );
        
        }
        { //::irr::scene::CIndexBuffer::push_back
        
            typedef void ( ::irr::scene::CIndexBuffer::*push_back_function_type )( ::irr::u32 const & ) ;
            typedef void ( CIndexBuffer_wrapper::*default_push_back_function_type )( ::irr::u32 const & ) ;
            
            CIndexBuffer_exposer.def( 
                "push_back"
                , push_back_function_type(&::irr::scene::CIndexBuffer::push_back)
                , default_push_back_function_type(&CIndexBuffer_wrapper::default_push_back)
                , ( bp::arg("element") ) );
        
        }
        { //::irr::scene::CIndexBuffer::reallocate
        
            typedef void ( ::irr::scene::CIndexBuffer::*reallocate_function_type )( ::irr::u32 ) ;
            typedef void ( CIndexBuffer_wrapper::*default_reallocate_function_type )( ::irr::u32 ) ;
            
            CIndexBuffer_exposer.def( 
                "reallocate"
                , reallocate_function_type(&::irr::scene::CIndexBuffer::reallocate)
                , default_reallocate_function_type(&CIndexBuffer_wrapper::default_reallocate)
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::scene::CIndexBuffer::setDirty
        
            typedef void ( ::irr::scene::CIndexBuffer::*setDirty_function_type )(  ) ;
            typedef void ( CIndexBuffer_wrapper::*default_setDirty_function_type )(  ) ;
            
            CIndexBuffer_exposer.def( 
                "setDirty"
                , setDirty_function_type(&::irr::scene::CIndexBuffer::setDirty)
                , default_setDirty_function_type(&CIndexBuffer_wrapper::default_setDirty) );
        
        }
        { //::irr::scene::CIndexBuffer::setHardwareMappingHint
        
            typedef void ( ::irr::scene::CIndexBuffer::*setHardwareMappingHint_function_type )( ::irr::scene::E_HARDWARE_MAPPING ) ;
            typedef void ( CIndexBuffer_wrapper::*default_setHardwareMappingHint_function_type )( ::irr::scene::E_HARDWARE_MAPPING ) ;
            
            CIndexBuffer_exposer.def( 
                "setHardwareMappingHint"
                , setHardwareMappingHint_function_type(&::irr::scene::CIndexBuffer::setHardwareMappingHint)
                , default_setHardwareMappingHint_function_type(&CIndexBuffer_wrapper::default_setHardwareMappingHint)
                , ( bp::arg("NewMappingHint") ) );
        
        }
        { //::irr::scene::CIndexBuffer::setType
        
            typedef void ( ::irr::scene::CIndexBuffer::*setType_function_type )( ::irr::video::E_INDEX_TYPE ) ;
            typedef void ( CIndexBuffer_wrapper::*default_setType_function_type )( ::irr::video::E_INDEX_TYPE ) ;
            
            CIndexBuffer_exposer.def( 
                "setType"
                , setType_function_type(&::irr::scene::CIndexBuffer::setType)
                , default_setType_function_type(&CIndexBuffer_wrapper::default_setType)
                , ( bp::arg("IndexType") ) );
        
        }
        { //::irr::scene::CIndexBuffer::setValue
        
            typedef void ( ::irr::scene::CIndexBuffer::*setValue_function_type )( ::irr::u32,::irr::u32 ) ;
            typedef void ( CIndexBuffer_wrapper::*default_setValue_function_type )( ::irr::u32,::irr::u32 ) ;
            
            CIndexBuffer_exposer.def( 
                "setValue"
                , setValue_function_type(&::irr::scene::CIndexBuffer::setValue)
                , default_setValue_function_type(&CIndexBuffer_wrapper::default_setValue)
                , ( bp::arg("index"), bp::arg("value") ) );
        
        }
        { //::irr::scene::CIndexBuffer::set_used
        
            typedef void ( ::irr::scene::CIndexBuffer::*set_used_function_type )( ::irr::u32 ) ;
            typedef void ( CIndexBuffer_wrapper::*default_set_used_function_type )( ::irr::u32 ) ;
            
            CIndexBuffer_exposer.def( 
                "set_used"
                , set_used_function_type(&::irr::scene::CIndexBuffer::set_used)
                , default_set_used_function_type(&CIndexBuffer_wrapper::default_set_used)
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::scene::CIndexBuffer::size
        
            typedef ::irr::u32 ( ::irr::scene::CIndexBuffer::*size_function_type )(  ) const;
            typedef ::irr::u32 ( CIndexBuffer_wrapper::*default_size_function_type )(  ) const;
            
            CIndexBuffer_exposer.def( 
                "size"
                , size_function_type(&::irr::scene::CIndexBuffer::size)
                , default_size_function_type(&CIndexBuffer_wrapper::default_size) );
        
        }
        { //::irr::scene::CIndexBuffer::stride
        
            typedef ::irr::u32 ( ::irr::scene::CIndexBuffer::*stride_function_type )(  ) const;
            typedef ::irr::u32 ( CIndexBuffer_wrapper::*default_stride_function_type )(  ) const;
            
            CIndexBuffer_exposer.def( 
                "stride"
                , stride_function_type(&::irr::scene::CIndexBuffer::stride)
                , default_stride_function_type(&CIndexBuffer_wrapper::default_stride) );
        
        }
        CIndexBuffer_exposer.def_readwrite( "ChangedID", &irr::scene::CIndexBuffer::ChangedID );
        CIndexBuffer_exposer.add_property( "Indices"
                    , bp::make_function( (::irr::scene::CIndexBuffer::IIndexList * (*)( ::irr::scene::CIndexBuffer const & ))(&CIndexBuffer_wrapper::get_Indices), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::irr::scene::CIndexBuffer &,::irr::scene::CIndexBuffer::IIndexList * ))(&CIndexBuffer_wrapper::set_Indices), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        CIndexBuffer_exposer.def_readwrite( "MappingHint", &irr::scene::CIndexBuffer::MappingHint );
        { //::irr::IReferenceCounted::setDebugName
        
            typedef void ( CIndexBuffer_wrapper::*setDebugName_function_type )( ::irr::c8 const * ) ;
            
            CIndexBuffer_exposer.def( 
                "setDebugName"
                , setDebugName_function_type( &CIndexBuffer_wrapper::setDebugName )
                , ( bp::arg("newName") ) );
        
        }
    }

    bp::class_< IVertexBuffer_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IVertexBuffer" )    
        .def( 
            "allocated_size"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IVertexBuffer::* )(  ) const)(&::irr::scene::IVertexBuffer::allocated_size) ) )    
        .def( 
            "getChangedID"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IVertexBuffer::* )(  ) const)(&::irr::scene::IVertexBuffer::getChangedID) ) )    
        .def( 
            "getData"
            , bp::pure_virtual( (void * ( ::irr::scene::IVertexBuffer::* )(  ) )(&::irr::scene::IVertexBuffer::getData) )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "getHardwareMappingHint"
            , bp::pure_virtual( (::irr::scene::E_HARDWARE_MAPPING ( ::irr::scene::IVertexBuffer::* )(  ) const)(&::irr::scene::IVertexBuffer::getHardwareMappingHint) ) )    
        .def( 
            "getLast"
            , bp::pure_virtual( (::irr::video::S3DVertex & ( ::irr::scene::IVertexBuffer::* )(  ) )(&::irr::scene::IVertexBuffer::getLast) )
                /* undefined call policies */ )    
        .def( 
            "getType"
            , bp::pure_virtual( (::irr::video::E_VERTEX_TYPE ( ::irr::scene::IVertexBuffer::* )(  ) const)(&::irr::scene::IVertexBuffer::getType) ) )    
        .def( 
            "__getitem__"
            , bp::pure_virtual( (::irr::video::S3DVertex & ( ::irr::scene::IVertexBuffer::* )( ::irr::u32 const ) const)(&::irr::scene::IVertexBuffer::operator[]) )
            , ( bp::arg("index") )
            , bp::return_internal_reference< >() )    
        .def( 
            "pointer"
            , bp::pure_virtual( (::irr::video::S3DVertex * ( ::irr::scene::IVertexBuffer::* )(  ) )(&::irr::scene::IVertexBuffer::pointer) )
                /* undefined call policies */ )    
        .def( 
            "push_back"
            , bp::pure_virtual( (void ( ::irr::scene::IVertexBuffer::* )( ::irr::video::S3DVertex const & ) )(&::irr::scene::IVertexBuffer::push_back) )
            , ( bp::arg("element") ) )    
        .def( 
            "reallocate"
            , bp::pure_virtual( (void ( ::irr::scene::IVertexBuffer::* )( ::irr::u32 ) )(&::irr::scene::IVertexBuffer::reallocate) )
            , ( bp::arg("new_size") ) )    
        .def( 
            "setDirty"
            , bp::pure_virtual( (void ( ::irr::scene::IVertexBuffer::* )(  ) )(&::irr::scene::IVertexBuffer::setDirty) ) )    
        .def( 
            "setHardwareMappingHint"
            , bp::pure_virtual( (void ( ::irr::scene::IVertexBuffer::* )( ::irr::scene::E_HARDWARE_MAPPING ) )(&::irr::scene::IVertexBuffer::setHardwareMappingHint) )
            , ( bp::arg("NewMappingHint") ) )    
        .def( 
            "setType"
            , bp::pure_virtual( (void ( ::irr::scene::IVertexBuffer::* )( ::irr::video::E_VERTEX_TYPE ) )(&::irr::scene::IVertexBuffer::setType) )
            , ( bp::arg("vertexType") ) )    
        .def( 
            "set_used"
            , bp::pure_virtual( (void ( ::irr::scene::IVertexBuffer::* )( ::irr::u32 ) )(&::irr::scene::IVertexBuffer::set_used) )
            , ( bp::arg("usedNow") ) )    
        .def( 
            "size"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IVertexBuffer::* )(  ) const)(&::irr::scene::IVertexBuffer::size) ) )    
        .def( 
            "stride"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IVertexBuffer::* )(  ) const)(&::irr::scene::IVertexBuffer::stride) ) )    
        .def( 
            "setDebugName"
            , (void ( IVertexBuffer_wrapper::* )( ::irr::c8 const * ) )(&IVertexBuffer_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    { //::irr::scene::CVertexBuffer
        typedef bp::class_< CVertexBuffer_wrapper, bp::bases< irr::scene::IVertexBuffer > > CVertexBuffer_exposer_t;
        CVertexBuffer_exposer_t CVertexBuffer_exposer = CVertexBuffer_exposer_t( "CVertexBuffer", bp::init< irr::video::E_VERTEX_TYPE >(( bp::arg("vertexType") )) );
        bp::scope CVertexBuffer_scope( CVertexBuffer_exposer );
        bp::implicitly_convertible< irr::video::E_VERTEX_TYPE, irr::scene::CVertexBuffer >();
        CVertexBuffer_exposer.def( bp::init< irr::scene::IVertexBuffer const & >(( bp::arg("VertexBufferCopy") )) );
        bp::implicitly_convertible< irr::scene::IVertexBuffer const &, irr::scene::CVertexBuffer >();
        { //::irr::scene::CVertexBuffer::allocated_size
        
            typedef ::irr::u32 ( ::irr::scene::CVertexBuffer::*allocated_size_function_type )(  ) const;
            typedef ::irr::u32 ( CVertexBuffer_wrapper::*default_allocated_size_function_type )(  ) const;
            
            CVertexBuffer_exposer.def( 
                "allocated_size"
                , allocated_size_function_type(&::irr::scene::CVertexBuffer::allocated_size)
                , default_allocated_size_function_type(&CVertexBuffer_wrapper::default_allocated_size) );
        
        }
        { //::irr::scene::CVertexBuffer::getChangedID
        
            typedef ::irr::u32 ( ::irr::scene::CVertexBuffer::*getChangedID_function_type )(  ) const;
            typedef ::irr::u32 ( CVertexBuffer_wrapper::*default_getChangedID_function_type )(  ) const;
            
            CVertexBuffer_exposer.def( 
                "getChangedID"
                , getChangedID_function_type(&::irr::scene::CVertexBuffer::getChangedID)
                , default_getChangedID_function_type(&CVertexBuffer_wrapper::default_getChangedID) );
        
        }
        { //::irr::scene::CVertexBuffer::getData
        
            typedef void * ( ::irr::scene::CVertexBuffer::*getData_function_type )(  ) ;
            typedef void * ( CVertexBuffer_wrapper::*default_getData_function_type )(  ) ;
            
            CVertexBuffer_exposer.def( 
                "getData"
                , getData_function_type(&::irr::scene::CVertexBuffer::getData)
                , default_getData_function_type(&CVertexBuffer_wrapper::default_getData)
                , bp::return_value_policy< bp::return_opaque_pointer >() );
        
        }
        { //::irr::scene::CVertexBuffer::getHardwareMappingHint
        
            typedef ::irr::scene::E_HARDWARE_MAPPING ( ::irr::scene::CVertexBuffer::*getHardwareMappingHint_function_type )(  ) const;
            typedef ::irr::scene::E_HARDWARE_MAPPING ( CVertexBuffer_wrapper::*default_getHardwareMappingHint_function_type )(  ) const;
            
            CVertexBuffer_exposer.def( 
                "getHardwareMappingHint"
                , getHardwareMappingHint_function_type(&::irr::scene::CVertexBuffer::getHardwareMappingHint)
                , default_getHardwareMappingHint_function_type(&CVertexBuffer_wrapper::default_getHardwareMappingHint) );
        
        }
        { //::irr::scene::CVertexBuffer::getLast
        
            typedef ::irr::video::S3DVertex & ( ::irr::scene::CVertexBuffer::*getLast_function_type )(  ) ;
            
            CVertexBuffer_exposer.def( 
                "getLast"
                , getLast_function_type(&::irr::scene::CVertexBuffer::getLast)
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::CVertexBuffer::getType
        
            typedef ::irr::video::E_VERTEX_TYPE ( ::irr::scene::CVertexBuffer::*getType_function_type )(  ) const;
            typedef ::irr::video::E_VERTEX_TYPE ( CVertexBuffer_wrapper::*default_getType_function_type )(  ) const;
            
            CVertexBuffer_exposer.def( 
                "getType"
                , getType_function_type(&::irr::scene::CVertexBuffer::getType)
                , default_getType_function_type(&CVertexBuffer_wrapper::default_getType) );
        
        }
        { //::irr::scene::CVertexBuffer::operator[]
        
            typedef ::irr::video::S3DVertex & ( ::irr::scene::CVertexBuffer::*__getitem___function_type )( ::irr::u32 const ) const;
            
            CVertexBuffer_exposer.def( 
                "__getitem__"
                , __getitem___function_type(&::irr::scene::CVertexBuffer::operator[])
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::scene::CVertexBuffer::pointer
        
            typedef ::irr::video::S3DVertex * ( ::irr::scene::CVertexBuffer::*pointer_function_type )(  ) ;
            typedef ::irr::video::S3DVertex * ( CVertexBuffer_wrapper::*default_pointer_function_type )(  ) ;
            
            CVertexBuffer_exposer.def( 
                "pointer"
                , pointer_function_type(&::irr::scene::CVertexBuffer::pointer)
                , default_pointer_function_type(&CVertexBuffer_wrapper::default_pointer)
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::CVertexBuffer::push_back
        
            typedef void ( ::irr::scene::CVertexBuffer::*push_back_function_type )( ::irr::video::S3DVertex const & ) ;
            typedef void ( CVertexBuffer_wrapper::*default_push_back_function_type )( ::irr::video::S3DVertex const & ) ;
            
            CVertexBuffer_exposer.def( 
                "push_back"
                , push_back_function_type(&::irr::scene::CVertexBuffer::push_back)
                , default_push_back_function_type(&CVertexBuffer_wrapper::default_push_back)
                , ( bp::arg("element") ) );
        
        }
        { //::irr::scene::CVertexBuffer::reallocate
        
            typedef void ( ::irr::scene::CVertexBuffer::*reallocate_function_type )( ::irr::u32 ) ;
            typedef void ( CVertexBuffer_wrapper::*default_reallocate_function_type )( ::irr::u32 ) ;
            
            CVertexBuffer_exposer.def( 
                "reallocate"
                , reallocate_function_type(&::irr::scene::CVertexBuffer::reallocate)
                , default_reallocate_function_type(&CVertexBuffer_wrapper::default_reallocate)
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::scene::CVertexBuffer::setDirty
        
            typedef void ( ::irr::scene::CVertexBuffer::*setDirty_function_type )(  ) ;
            typedef void ( CVertexBuffer_wrapper::*default_setDirty_function_type )(  ) ;
            
            CVertexBuffer_exposer.def( 
                "setDirty"
                , setDirty_function_type(&::irr::scene::CVertexBuffer::setDirty)
                , default_setDirty_function_type(&CVertexBuffer_wrapper::default_setDirty) );
        
        }
        { //::irr::scene::CVertexBuffer::setHardwareMappingHint
        
            typedef void ( ::irr::scene::CVertexBuffer::*setHardwareMappingHint_function_type )( ::irr::scene::E_HARDWARE_MAPPING ) ;
            typedef void ( CVertexBuffer_wrapper::*default_setHardwareMappingHint_function_type )( ::irr::scene::E_HARDWARE_MAPPING ) ;
            
            CVertexBuffer_exposer.def( 
                "setHardwareMappingHint"
                , setHardwareMappingHint_function_type(&::irr::scene::CVertexBuffer::setHardwareMappingHint)
                , default_setHardwareMappingHint_function_type(&CVertexBuffer_wrapper::default_setHardwareMappingHint)
                , ( bp::arg("NewMappingHint") ) );
        
        }
        { //::irr::scene::CVertexBuffer::setType
        
            typedef void ( ::irr::scene::CVertexBuffer::*setType_function_type )( ::irr::video::E_VERTEX_TYPE ) ;
            typedef void ( CVertexBuffer_wrapper::*default_setType_function_type )( ::irr::video::E_VERTEX_TYPE ) ;
            
            CVertexBuffer_exposer.def( 
                "setType"
                , setType_function_type(&::irr::scene::CVertexBuffer::setType)
                , default_setType_function_type(&CVertexBuffer_wrapper::default_setType)
                , ( bp::arg("vertexType") ) );
        
        }
        { //::irr::scene::CVertexBuffer::set_used
        
            typedef void ( ::irr::scene::CVertexBuffer::*set_used_function_type )( ::irr::u32 ) ;
            typedef void ( CVertexBuffer_wrapper::*default_set_used_function_type )( ::irr::u32 ) ;
            
            CVertexBuffer_exposer.def( 
                "set_used"
                , set_used_function_type(&::irr::scene::CVertexBuffer::set_used)
                , default_set_used_function_type(&CVertexBuffer_wrapper::default_set_used)
                , ( bp::arg("usedNow") ) );
        
        }
        { //::irr::scene::CVertexBuffer::size
        
            typedef ::irr::u32 ( ::irr::scene::CVertexBuffer::*size_function_type )(  ) const;
            typedef ::irr::u32 ( CVertexBuffer_wrapper::*default_size_function_type )(  ) const;
            
            CVertexBuffer_exposer.def( 
                "size"
                , size_function_type(&::irr::scene::CVertexBuffer::size)
                , default_size_function_type(&CVertexBuffer_wrapper::default_size) );
        
        }
        { //::irr::scene::CVertexBuffer::stride
        
            typedef ::irr::u32 ( ::irr::scene::CVertexBuffer::*stride_function_type )(  ) const;
            typedef ::irr::u32 ( CVertexBuffer_wrapper::*default_stride_function_type )(  ) const;
            
            CVertexBuffer_exposer.def( 
                "stride"
                , stride_function_type(&::irr::scene::CVertexBuffer::stride)
                , default_stride_function_type(&CVertexBuffer_wrapper::default_stride) );
        
        }
        CVertexBuffer_exposer.def_readwrite( "ChangedID", &irr::scene::CVertexBuffer::ChangedID );
        CVertexBuffer_exposer.def_readwrite( "MappingHint", &irr::scene::CVertexBuffer::MappingHint );
        CVertexBuffer_exposer.add_property( "Vertices"
                    , bp::make_function( (::irr::scene::CVertexBuffer::IVertexList * (*)( ::irr::scene::CVertexBuffer const & ))(&CVertexBuffer_wrapper::get_Vertices), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::irr::scene::CVertexBuffer &,::irr::scene::CVertexBuffer::IVertexList * ))(&CVertexBuffer_wrapper::set_Vertices), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        { //::irr::IReferenceCounted::setDebugName
        
            typedef void ( CVertexBuffer_wrapper::*setDebugName_function_type )( ::irr::c8 const * ) ;
            
            CVertexBuffer_exposer.def( 
                "setDebugName"
                , setDebugName_function_type( &CVertexBuffer_wrapper::setDebugName )
                , ( bp::arg("newName") ) );
        
        }
    }

    bp::class_< IMesh_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IMesh" )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::IMesh::* )(  ) const)(&::irr::scene::IMesh::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMeshBuffer"
            , bp::pure_virtual( (::irr::scene::IMeshBuffer * ( ::irr::scene::IMesh::* )( ::irr::u32 ) const)(&::irr::scene::IMesh::getMeshBuffer) )
            , ( bp::arg("nr") )
                /* undefined call policies */ )    
        .def( 
            "getMeshBuffer"
            , bp::pure_virtual( (::irr::scene::IMeshBuffer * ( ::irr::scene::IMesh::* )( ::irr::video::SMaterial const & ) const)(&::irr::scene::IMesh::getMeshBuffer) )
            , ( bp::arg("material") )
                /* undefined call policies */ )    
        .def( 
            "getMeshBufferCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IMesh::* )(  ) const)(&::irr::scene::IMesh::getMeshBufferCount) ) )    
        .def( 
            "setBoundingBox"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::core::aabbox3df const & ) )(&::irr::scene::IMesh::setBoundingBox) )
            , ( bp::arg("box") ) )    
        .def( 
            "setDirty"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IMesh::setDirty) )
            , ( bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setHardwareMappingHint"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IMesh::setHardwareMappingHint) )
            , ( bp::arg("newMappingHint"), bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setMaterialFlag"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::video::E_MATERIAL_FLAG,bool ) )(&::irr::scene::IMesh::setMaterialFlag) )
            , ( bp::arg("flag"), bp::arg("newvalue") ) )    
        .def( 
            "setDebugName"
            , (void ( IMesh_wrapper::* )( ::irr::c8 const * ) )(&IMesh_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IAnimatedMesh_wrapper, bp::bases< irr::scene::IMesh >, boost::noncopyable >( "IAnimatedMesh" )    
        .def( 
            "getFrameCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IAnimatedMesh::* )(  ) const)(&::irr::scene::IAnimatedMesh::getFrameCount) ) )    
        .def( 
            "getMesh"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IAnimatedMesh::* )( ::irr::s32,::irr::s32,::irr::s32,::irr::s32 ) )(&::irr::scene::IAnimatedMesh::getMesh) )
            , ( bp::arg("frame"), bp::arg("detailLevel")=(::irr::s32)(255), bp::arg("startFrameLoop")=(::irr::s32)(-0x00000000000000001), bp::arg("endFrameLoop")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "getMeshType"
            , (::irr::scene::E_ANIMATED_MESH_TYPE ( ::irr::scene::IAnimatedMesh::* )(  ) const)(&::irr::scene::IAnimatedMesh::getMeshType)
            , (::irr::scene::E_ANIMATED_MESH_TYPE ( IAnimatedMesh_wrapper::* )(  ) const)(&IAnimatedMesh_wrapper::default_getMeshType) )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::IMesh::* )(  ) const)(&::irr::scene::IMesh::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMeshBuffer"
            , bp::pure_virtual( (::irr::scene::IMeshBuffer * ( ::irr::scene::IMesh::* )( ::irr::u32 ) const)(&::irr::scene::IMesh::getMeshBuffer) )
            , ( bp::arg("nr") )
                /* undefined call policies */ )    
        .def( 
            "getMeshBuffer"
            , bp::pure_virtual( (::irr::scene::IMeshBuffer * ( ::irr::scene::IMesh::* )( ::irr::video::SMaterial const & ) const)(&::irr::scene::IMesh::getMeshBuffer) )
            , ( bp::arg("material") )
                /* undefined call policies */ )    
        .def( 
            "getMeshBufferCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IMesh::* )(  ) const)(&::irr::scene::IMesh::getMeshBufferCount) ) )    
        .def( 
            "setBoundingBox"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::core::aabbox3df const & ) )(&::irr::scene::IMesh::setBoundingBox) )
            , ( bp::arg("box") ) )    
        .def( 
            "setDebugName"
            , (void ( IAnimatedMesh_wrapper::* )( ::irr::c8 const * ) )(&IAnimatedMesh_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setDirty"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IMesh::setDirty) )
            , ( bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setHardwareMappingHint"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IMesh::setHardwareMappingHint) )
            , ( bp::arg("newMappingHint"), bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setMaterialFlag"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::video::E_MATERIAL_FLAG,bool ) )(&::irr::scene::IMesh::setMaterialFlag) )
            , ( bp::arg("flag"), bp::arg("newvalue") ) );

    bp::class_< IAnimatedMeshMD2_wrapper, bp::bases< irr::scene::IAnimatedMesh >, boost::noncopyable >( "IAnimatedMeshMD2" )    
        .def( 
            "getAnimationCount"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::IAnimatedMeshMD2::* )(  ) const)(&::irr::scene::IAnimatedMeshMD2::getAnimationCount) ) )    
        .def( 
            "getAnimationName"
            , bp::pure_virtual( (::irr::c8 const * ( ::irr::scene::IAnimatedMeshMD2::* )( ::irr::s32 ) const)(&::irr::scene::IAnimatedMeshMD2::getAnimationName) )
            , ( bp::arg("nr") ) )    
        .def( 
            "getFrameLoop"
            , bp::pure_virtual( (void ( ::irr::scene::IAnimatedMeshMD2::* )( ::irr::scene::EMD2_ANIMATION_TYPE,::irr::s32 &,::irr::s32 &,::irr::s32 & ) const)(&::irr::scene::IAnimatedMeshMD2::getFrameLoop) )
            , ( bp::arg("l"), bp::arg("outBegin"), bp::arg("outEnd"), bp::arg("outFPS") ) )    
        .def( 
            "getFrameLoop"
            , bp::pure_virtual( (bool ( ::irr::scene::IAnimatedMeshMD2::* )( ::irr::c8 const *,::irr::s32 &,::irr::s32 &,::irr::s32 & ) const)(&::irr::scene::IAnimatedMeshMD2::getFrameLoop) )
            , ( bp::arg("name"), bp::arg("outBegin"), bp::arg("outEnd"), bp::arg("outFPS") ) )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::IMesh::* )(  ) const)(&::irr::scene::IMesh::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getFrameCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IAnimatedMesh::* )(  ) const)(&::irr::scene::IAnimatedMesh::getFrameCount) ) )    
        .def( 
            "getMesh"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IAnimatedMesh::* )( ::irr::s32,::irr::s32,::irr::s32,::irr::s32 ) )(&::irr::scene::IAnimatedMesh::getMesh) )
            , ( bp::arg("frame"), bp::arg("detailLevel")=(::irr::s32)(255), bp::arg("startFrameLoop")=(::irr::s32)(-0x00000000000000001), bp::arg("endFrameLoop")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "getMeshBuffer"
            , bp::pure_virtual( (::irr::scene::IMeshBuffer * ( ::irr::scene::IMesh::* )( ::irr::u32 ) const)(&::irr::scene::IMesh::getMeshBuffer) )
            , ( bp::arg("nr") )
                /* undefined call policies */ )    
        .def( 
            "getMeshBuffer"
            , bp::pure_virtual( (::irr::scene::IMeshBuffer * ( ::irr::scene::IMesh::* )( ::irr::video::SMaterial const & ) const)(&::irr::scene::IMesh::getMeshBuffer) )
            , ( bp::arg("material") )
                /* undefined call policies */ )    
        .def( 
            "getMeshBufferCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IMesh::* )(  ) const)(&::irr::scene::IMesh::getMeshBufferCount) ) )    
        .def( 
            "getMeshType"
            , (::irr::scene::E_ANIMATED_MESH_TYPE ( ::irr::scene::IAnimatedMesh::* )(  ) const)(&::irr::scene::IAnimatedMesh::getMeshType)
            , (::irr::scene::E_ANIMATED_MESH_TYPE ( IAnimatedMeshMD2_wrapper::* )(  ) const)(&IAnimatedMeshMD2_wrapper::default_getMeshType) )    
        .def( 
            "setBoundingBox"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::core::aabbox3df const & ) )(&::irr::scene::IMesh::setBoundingBox) )
            , ( bp::arg("box") ) )    
        .def( 
            "setDebugName"
            , (void ( IAnimatedMeshMD2_wrapper::* )( ::irr::c8 const * ) )(&IAnimatedMeshMD2_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setDirty"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IMesh::setDirty) )
            , ( bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setHardwareMappingHint"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IMesh::setHardwareMappingHint) )
            , ( bp::arg("newMappingHint"), bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setMaterialFlag"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::video::E_MATERIAL_FLAG,bool ) )(&::irr::scene::IMesh::setMaterialFlag) )
            , ( bp::arg("flag"), bp::arg("newvalue") ) );

    bp::class_< IAnimatedMeshMD3_wrapper, bp::bases< irr::scene::IAnimatedMesh >, boost::noncopyable >( "IAnimatedMeshMD3" )    
        .def( 
            "getOriginalMesh"
            , bp::pure_virtual( (::irr::scene::SMD3Mesh * ( ::irr::scene::IAnimatedMeshMD3::* )(  ) )(&::irr::scene::IAnimatedMeshMD3::getOriginalMesh) )
                /* undefined call policies */ )    
        .def( 
            "getTagList"
            , bp::pure_virtual( (::irr::scene::SMD3QuaternionTagList * ( ::irr::scene::IAnimatedMeshMD3::* )( ::irr::s32,::irr::s32,::irr::s32,::irr::s32 ) )(&::irr::scene::IAnimatedMeshMD3::getTagList) )
            , ( bp::arg("frame"), bp::arg("detailLevel"), bp::arg("startFrameLoop"), bp::arg("endFrameLoop") )
                /* undefined call policies */ )    
        .def( 
            "setInterpolationShift"
            , bp::pure_virtual( (void ( ::irr::scene::IAnimatedMeshMD3::* )( ::irr::u32,::irr::u32 ) )(&::irr::scene::IAnimatedMeshMD3::setInterpolationShift) )
            , ( bp::arg("shift"), bp::arg("loopMode") ) )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::IMesh::* )(  ) const)(&::irr::scene::IMesh::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getFrameCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IAnimatedMesh::* )(  ) const)(&::irr::scene::IAnimatedMesh::getFrameCount) ) )    
        .def( 
            "getMesh"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IAnimatedMesh::* )( ::irr::s32,::irr::s32,::irr::s32,::irr::s32 ) )(&::irr::scene::IAnimatedMesh::getMesh) )
            , ( bp::arg("frame"), bp::arg("detailLevel")=(::irr::s32)(255), bp::arg("startFrameLoop")=(::irr::s32)(-0x00000000000000001), bp::arg("endFrameLoop")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "getMeshBuffer"
            , bp::pure_virtual( (::irr::scene::IMeshBuffer * ( ::irr::scene::IMesh::* )( ::irr::u32 ) const)(&::irr::scene::IMesh::getMeshBuffer) )
            , ( bp::arg("nr") )
                /* undefined call policies */ )    
        .def( 
            "getMeshBuffer"
            , bp::pure_virtual( (::irr::scene::IMeshBuffer * ( ::irr::scene::IMesh::* )( ::irr::video::SMaterial const & ) const)(&::irr::scene::IMesh::getMeshBuffer) )
            , ( bp::arg("material") )
                /* undefined call policies */ )    
        .def( 
            "getMeshBufferCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IMesh::* )(  ) const)(&::irr::scene::IMesh::getMeshBufferCount) ) )    
        .def( 
            "getMeshType"
            , (::irr::scene::E_ANIMATED_MESH_TYPE ( ::irr::scene::IAnimatedMesh::* )(  ) const)(&::irr::scene::IAnimatedMesh::getMeshType)
            , (::irr::scene::E_ANIMATED_MESH_TYPE ( IAnimatedMeshMD3_wrapper::* )(  ) const)(&IAnimatedMeshMD3_wrapper::default_getMeshType) )    
        .def( 
            "setBoundingBox"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::core::aabbox3df const & ) )(&::irr::scene::IMesh::setBoundingBox) )
            , ( bp::arg("box") ) )    
        .def( 
            "setDebugName"
            , (void ( IAnimatedMeshMD3_wrapper::* )( ::irr::c8 const * ) )(&IAnimatedMeshMD3_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setDirty"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IMesh::setDirty) )
            , ( bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setHardwareMappingHint"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IMesh::setHardwareMappingHint) )
            , ( bp::arg("newMappingHint"), bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setMaterialFlag"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::video::E_MATERIAL_FLAG,bool ) )(&::irr::scene::IMesh::setMaterialFlag) )
            , ( bp::arg("flag"), bp::arg("newvalue") ) );

    bp::class_< IAnimationEndCallBack_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IAnimationEndCallBack" )    
        .def( 
            "OnAnimationEnd"
            , bp::pure_virtual( (void ( ::irr::scene::IAnimationEndCallBack::* )( ::irr::scene::IAnimatedMeshSceneNode * ) )(&::irr::scene::IAnimationEndCallBack::OnAnimationEnd) )
            , ( bp::arg("node") ) )    
        .def( 
            "setDebugName"
            , (void ( IAnimationEndCallBack_wrapper::* )( ::irr::c8 const * ) )(&IAnimationEndCallBack_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IAnimatedMeshSceneNode_wrapper, bp::bases< irr::scene::ISceneNode >, boost::noncopyable >( "IAnimatedMeshSceneNode", bp::init< irr::scene::ISceneNode *, irr::scene::ISceneManager *, irr::s32, bp::optional< irr::core::vector3df const &, irr::core::vector3df const &, irr::core::vector3df const & > >(( bp::arg("parent"), bp::arg("mgr"), bp::arg("id"), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )) )    
        .def( 
            "addShadowVolumeSceneNode"
            , bp::pure_virtual( (::irr::scene::IShadowVolumeSceneNode * ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::scene::IMesh const *,::irr::s32,bool,::irr::f32 ) )(&::irr::scene::IAnimatedMeshSceneNode::addShadowVolumeSceneNode) )
            , ( bp::arg("shadowMesh")=bp::object(), bp::arg("id")=(::irr::s32)(-0x00000000000000001), bp::arg("zfailmethod")=(bool)(true), bp::arg("infinity")=1.0e+4f )
                /* undefined call policies */ )    
        .def( 
            "animateJoints"
            , bp::pure_virtual( (void ( ::irr::scene::IAnimatedMeshSceneNode::* )( bool ) )(&::irr::scene::IAnimatedMeshSceneNode::animateJoints) )
            , ( bp::arg("CalculateAbsolutePositions")=(bool)(true) ) )    
        .def( 
            "clone"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::IAnimatedMeshSceneNode::clone) )
            , ( bp::arg("newParent")=bp::object(), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "getAnimationSpeed"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::IAnimatedMeshSceneNode::* )(  ) const)(&::irr::scene::IAnimatedMeshSceneNode::getAnimationSpeed) ) )    
        .def( 
            "getEndFrame"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::IAnimatedMeshSceneNode::* )(  ) const)(&::irr::scene::IAnimatedMeshSceneNode::getEndFrame) ) )    
        .def( 
            "getFrameNr"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::IAnimatedMeshSceneNode::* )(  ) const)(&::irr::scene::IAnimatedMeshSceneNode::getFrameNr) ) )    
        .def( 
            "getJointCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IAnimatedMeshSceneNode::* )(  ) const)(&::irr::scene::IAnimatedMeshSceneNode::getJointCount) ) )    
        .def( 
            "getJointNode"
            , bp::pure_virtual( (::irr::scene::IBoneSceneNode * ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::IAnimatedMeshSceneNode::getJointNode) )
            , ( bp::arg("jointName") )
                /* undefined call policies */ )    
        .def( 
            "getJointNode"
            , bp::pure_virtual( (::irr::scene::IBoneSceneNode * ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::u32 ) )(&::irr::scene::IAnimatedMeshSceneNode::getJointNode) )
            , ( bp::arg("jointID") )
                /* undefined call policies */ )    
        .def( 
            "getMD3TagTransformation"
            , bp::pure_virtual( (::irr::scene::SMD3QuaternionTag const * ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::core::stringc const & ) )(&::irr::scene::IAnimatedMeshSceneNode::getMD3TagTransformation) )
            , ( bp::arg("tagname") )
                /* undefined call policies */ )    
        .def( 
            "getMS3DJointNode"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::IAnimatedMeshSceneNode::getMS3DJointNode) )
            , ( bp::arg("jointName") )
                /* undefined call policies */ )    
        .def( 
            "getMesh"
            , bp::pure_virtual( (::irr::scene::IAnimatedMesh * ( ::irr::scene::IAnimatedMeshSceneNode::* )(  ) )(&::irr::scene::IAnimatedMeshSceneNode::getMesh) )
                /* undefined call policies */ )    
        .def( 
            "getStartFrame"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::IAnimatedMeshSceneNode::* )(  ) const)(&::irr::scene::IAnimatedMeshSceneNode::getStartFrame) ) )    
        .def( 
            "getXJointNode"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::IAnimatedMeshSceneNode::getXJointNode) )
            , ( bp::arg("jointName") )
                /* undefined call policies */ )    
        .def( 
            "isReadOnlyMaterials"
            , bp::pure_virtual( (bool ( ::irr::scene::IAnimatedMeshSceneNode::* )(  ) const)(&::irr::scene::IAnimatedMeshSceneNode::isReadOnlyMaterials) ) )    
        .def( 
            "setAnimationEndCallback"
            , bp::pure_virtual( (void ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::scene::IAnimationEndCallBack * ) )(&::irr::scene::IAnimatedMeshSceneNode::setAnimationEndCallback) )
            , ( bp::arg("callback")=bp::object() ) )    
        .def( 
            "setAnimationSpeed"
            , bp::pure_virtual( (void ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::f32 ) )(&::irr::scene::IAnimatedMeshSceneNode::setAnimationSpeed) )
            , ( bp::arg("framesPerSecond") ) )    
        .def( 
            "setCurrentFrame"
            , bp::pure_virtual( (void ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::f32 ) )(&::irr::scene::IAnimatedMeshSceneNode::setCurrentFrame) )
            , ( bp::arg("frame") ) )    
        .def( 
            "setFrameLoop"
            , bp::pure_virtual( (bool ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::s32,::irr::s32 ) )(&::irr::scene::IAnimatedMeshSceneNode::setFrameLoop) )
            , ( bp::arg("begin"), bp::arg("end") ) )    
        .def( 
            "setJointMode"
            , bp::pure_virtual( (void ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::scene::E_JOINT_UPDATE_ON_RENDER ) )(&::irr::scene::IAnimatedMeshSceneNode::setJointMode) )
            , ( bp::arg("mode") ) )    
        .def( 
            "setLoopMode"
            , bp::pure_virtual( (void ( ::irr::scene::IAnimatedMeshSceneNode::* )( bool ) )(&::irr::scene::IAnimatedMeshSceneNode::setLoopMode) )
            , ( bp::arg("playAnimationLooped") ) )    
        .def( 
            "setMD2Animation"
            , bp::pure_virtual( (bool ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::scene::EMD2_ANIMATION_TYPE ) )(&::irr::scene::IAnimatedMeshSceneNode::setMD2Animation) )
            , ( bp::arg("anim") ) )    
        .def( 
            "setMD2Animation"
            , bp::pure_virtual( (bool ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::IAnimatedMeshSceneNode::setMD2Animation) )
            , ( bp::arg("animationName") ) )    
        .def( 
            "setMesh"
            , bp::pure_virtual( (void ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::scene::IAnimatedMesh * ) )(&::irr::scene::IAnimatedMeshSceneNode::setMesh) )
            , ( bp::arg("mesh") ) )    
        .def( 
            "setReadOnlyMaterials"
            , bp::pure_virtual( (void ( ::irr::scene::IAnimatedMeshSceneNode::* )( bool ) )(&::irr::scene::IAnimatedMeshSceneNode::setReadOnlyMaterials) )
            , ( bp::arg("readonly") ) )    
        .def( 
            "setRenderFromIdentity"
            , bp::pure_virtual( (void ( ::irr::scene::IAnimatedMeshSceneNode::* )( bool ) )(&::irr::scene::IAnimatedMeshSceneNode::setRenderFromIdentity) )
            , ( bp::arg("On") ) )    
        .def( 
            "setTransitionTime"
            , bp::pure_virtual( (void ( ::irr::scene::IAnimatedMeshSceneNode::* )( ::irr::f32 ) )(&::irr::scene::IAnimatedMeshSceneNode::setTransitionTime) )
            , ( bp::arg("Time") ) )    
        .def( 
            "OnAnimate"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::OnAnimate)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::u32 ) )(&IAnimatedMeshSceneNode_wrapper::default_OnAnimate)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "OnRegisterSceneNode"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::OnRegisterSceneNode)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )(  ) )(&IAnimatedMeshSceneNode_wrapper::default_OnRegisterSceneNode) )    
        .def( 
            "addAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::addAnimator)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IAnimatedMeshSceneNode_wrapper::default_addAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::addChild)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IAnimatedMeshSceneNode_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "cloneMembers"
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IAnimatedMeshSceneNode_wrapper::cloneMembers)
            , ( bp::arg("toCopyFrom"), bp::arg("newManager") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::scene::ISceneNode::deserializeAttributes)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IAnimatedMeshSceneNode_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getAbsolutePosition"
            , (::irr::core::vector3df ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsolutePosition)
            , (::irr::core::vector3df ( IAnimatedMeshSceneNode_wrapper::* )(  ) const)(&IAnimatedMeshSceneNode_wrapper::default_getAbsolutePosition) )    
        .def( 
            "getAbsoluteTransformation"
            , (::irr::core::matrix4 const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsoluteTransformation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getID)
            , (::irr::s32 ( IAnimatedMeshSceneNode_wrapper::* )(  ) const)(&IAnimatedMeshSceneNode_wrapper::default_getID) )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::getMaterial)
            , ( bp::arg("num") )
                /* undefined call policies */ )    
        .def( 
            "getMaterialCount"
            , (::irr::u32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getMaterialCount)
            , (::irr::u32 ( IAnimatedMeshSceneNode_wrapper::* )(  ) const)(&IAnimatedMeshSceneNode_wrapper::default_getMaterialCount) )    
        .def( 
            "getName"
            , (::irr::c8 const * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getName)
            , (::irr::c8 const * ( IAnimatedMeshSceneNode_wrapper::* )(  ) const)(&IAnimatedMeshSceneNode_wrapper::default_getName) )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRelativeTransformation"
            , (::irr::core::matrix4 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRelativeTransformation)
            , (::irr::core::matrix4 ( IAnimatedMeshSceneNode_wrapper::* )(  ) const)(&IAnimatedMeshSceneNode_wrapper::default_getRelativeTransformation) )    
        .def( 
            "getRotation"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRotation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getScale"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSceneManager"
            , (::irr::scene::ISceneManager * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getSceneManager)
            , (::irr::scene::ISceneManager * ( IAnimatedMeshSceneNode_wrapper::* )(  ) const)(&IAnimatedMeshSceneNode_wrapper::default_getSceneManager)
                /* undefined call policies */ )    
        .def( 
            "getTransformedBoundingBox"
            , (::irr::core::aabbox3d< float > const ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTransformedBoundingBox)
            , (::irr::core::aabbox3d< float > const ( IAnimatedMeshSceneNode_wrapper::* )(  ) const)(&IAnimatedMeshSceneNode_wrapper::default_getTransformedBoundingBox) )    
        .def( 
            "getTriangleSelector"
            , (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTriangleSelector)
            , (::irr::scene::ITriangleSelector * ( IAnimatedMeshSceneNode_wrapper::* )(  ) const)(&IAnimatedMeshSceneNode_wrapper::default_getTriangleSelector)
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_TYPE ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getType)
            , (::irr::scene::ESCENE_NODE_TYPE ( IAnimatedMeshSceneNode_wrapper::* )(  ) const)(&IAnimatedMeshSceneNode_wrapper::default_getType) )    
        .def( 
            "isTrulyVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isTrulyVisible)
            , (bool ( IAnimatedMeshSceneNode_wrapper::* )(  ) const)(&IAnimatedMeshSceneNode_wrapper::default_isTrulyVisible) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isVisible)
            , (bool ( IAnimatedMeshSceneNode_wrapper::* )(  ) const)(&IAnimatedMeshSceneNode_wrapper::default_isVisible) )    
        .def( 
            "remove"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::remove)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )(  ) )(&IAnimatedMeshSceneNode_wrapper::default_remove) )    
        .def( 
            "removeAll"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAll)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )(  ) )(&IAnimatedMeshSceneNode_wrapper::default_removeAll) )    
        .def( 
            "removeAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::removeAnimator)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IAnimatedMeshSceneNode_wrapper::default_removeAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "removeAnimators"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAnimators)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )(  ) )(&IAnimatedMeshSceneNode_wrapper::default_removeAnimators) )    
        .def( 
            "removeChild"
            , (bool ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::removeChild)
            , (bool ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IAnimatedMeshSceneNode_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "render"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::render) ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::scene::ISceneNode::serializeAttributes)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IAnimatedMeshSceneNode_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugDataVisible"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setDebugDataVisible)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::s32 ) )(&IAnimatedMeshSceneNode_wrapper::default_setDebugDataVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "setDebugName"
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IAnimatedMeshSceneNode_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setID"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setID)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::s32 ) )(&IAnimatedMeshSceneNode_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IAnimatedMeshSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::stringc const & ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::core::stringc const & ) )(&IAnimatedMeshSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setParent"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::setParent)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IAnimatedMeshSceneNode_wrapper::default_setParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "setPosition"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setPosition)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IAnimatedMeshSceneNode_wrapper::default_setPosition)
            , ( bp::arg("newpos") ) )    
        .def( 
            "setRotation"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setRotation)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IAnimatedMeshSceneNode_wrapper::default_setRotation)
            , ( bp::arg("rotation") ) )    
        .def( 
            "setScale"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setScale)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IAnimatedMeshSceneNode_wrapper::default_setScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "setSceneManager"
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::scene::ISceneManager * ) )(&IAnimatedMeshSceneNode_wrapper::setSceneManager)
            , ( bp::arg("newManager") ) )    
        .def( 
            "setTriangleSelector"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::ISceneNode::setTriangleSelector)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( ::irr::scene::ITriangleSelector * ) )(&IAnimatedMeshSceneNode_wrapper::default_setTriangleSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::scene::ISceneNode::* )( bool ) )(&::irr::scene::ISceneNode::setVisible)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )( bool ) )(&IAnimatedMeshSceneNode_wrapper::default_setVisible)
            , ( bp::arg("isVisible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::updateAbsolutePosition)
            , (void ( IAnimatedMeshSceneNode_wrapper::* )(  ) )(&IAnimatedMeshSceneNode_wrapper::default_updateAbsolutePosition) );

    bp::class_< IBillboardSceneNode_wrapper, bp::bases< irr::scene::ISceneNode >, boost::noncopyable >( "IBillboardSceneNode", bp::init< irr::scene::ISceneNode *, irr::scene::ISceneManager *, irr::s32, bp::optional< irr::core::vector3df const & > >(( bp::arg("parent"), bp::arg("mgr"), bp::arg("id"), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f) )) )    
        .def( 
            "getColor"
            , bp::pure_virtual( (void ( ::irr::scene::IBillboardSceneNode::* )( ::irr::video::SColor &,::irr::video::SColor & ) const)(&::irr::scene::IBillboardSceneNode::getColor) )
            , ( bp::arg("topColor"), bp::arg("bottomColor") ) )    
        .def( 
            "getSize"
            , bp::pure_virtual( (::irr::core::dimension2d< float > const & ( ::irr::scene::IBillboardSceneNode::* )(  ) const)(&::irr::scene::IBillboardSceneNode::getSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "setColor"
            , bp::pure_virtual( (void ( ::irr::scene::IBillboardSceneNode::* )( ::irr::video::SColor const & ) )(&::irr::scene::IBillboardSceneNode::setColor) )
            , ( bp::arg("overallColor") ) )    
        .def( 
            "setColor"
            , bp::pure_virtual( (void ( ::irr::scene::IBillboardSceneNode::* )( ::irr::video::SColor const &,::irr::video::SColor const & ) )(&::irr::scene::IBillboardSceneNode::setColor) )
            , ( bp::arg("topColor"), bp::arg("bottomColor") ) )    
        .def( 
            "setSize"
            , bp::pure_virtual( (void ( ::irr::scene::IBillboardSceneNode::* )( ::irr::core::dimension2d< float > const & ) )(&::irr::scene::IBillboardSceneNode::setSize) )
            , ( bp::arg("size") ) )    
        .def( 
            "OnAnimate"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::OnAnimate)
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::u32 ) )(&IBillboardSceneNode_wrapper::default_OnAnimate)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "OnRegisterSceneNode"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::OnRegisterSceneNode)
            , (void ( IBillboardSceneNode_wrapper::* )(  ) )(&IBillboardSceneNode_wrapper::default_OnRegisterSceneNode) )    
        .def( 
            "addAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::addAnimator)
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IBillboardSceneNode_wrapper::default_addAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::addChild)
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IBillboardSceneNode_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "clone"
            , (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNode::clone)
            , (::irr::scene::ISceneNode * ( IBillboardSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IBillboardSceneNode_wrapper::default_clone)
            , ( bp::arg("newParent")=bp::object(), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "cloneMembers"
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IBillboardSceneNode_wrapper::cloneMembers)
            , ( bp::arg("toCopyFrom"), bp::arg("newManager") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::scene::ISceneNode::deserializeAttributes)
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IBillboardSceneNode_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getAbsolutePosition"
            , (::irr::core::vector3df ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsolutePosition)
            , (::irr::core::vector3df ( IBillboardSceneNode_wrapper::* )(  ) const)(&IBillboardSceneNode_wrapper::default_getAbsolutePosition) )    
        .def( 
            "getAbsoluteTransformation"
            , (::irr::core::matrix4 const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsoluteTransformation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getID)
            , (::irr::s32 ( IBillboardSceneNode_wrapper::* )(  ) const)(&IBillboardSceneNode_wrapper::default_getID) )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::getMaterial)
            , ( bp::arg("num") )
                /* undefined call policies */ )    
        .def( 
            "getMaterialCount"
            , (::irr::u32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getMaterialCount)
            , (::irr::u32 ( IBillboardSceneNode_wrapper::* )(  ) const)(&IBillboardSceneNode_wrapper::default_getMaterialCount) )    
        .def( 
            "getName"
            , (::irr::c8 const * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getName)
            , (::irr::c8 const * ( IBillboardSceneNode_wrapper::* )(  ) const)(&IBillboardSceneNode_wrapper::default_getName) )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRelativeTransformation"
            , (::irr::core::matrix4 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRelativeTransformation)
            , (::irr::core::matrix4 ( IBillboardSceneNode_wrapper::* )(  ) const)(&IBillboardSceneNode_wrapper::default_getRelativeTransformation) )    
        .def( 
            "getRotation"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRotation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getScale"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSceneManager"
            , (::irr::scene::ISceneManager * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getSceneManager)
            , (::irr::scene::ISceneManager * ( IBillboardSceneNode_wrapper::* )(  ) const)(&IBillboardSceneNode_wrapper::default_getSceneManager)
                /* undefined call policies */ )    
        .def( 
            "getTransformedBoundingBox"
            , (::irr::core::aabbox3d< float > const ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTransformedBoundingBox)
            , (::irr::core::aabbox3d< float > const ( IBillboardSceneNode_wrapper::* )(  ) const)(&IBillboardSceneNode_wrapper::default_getTransformedBoundingBox) )    
        .def( 
            "getTriangleSelector"
            , (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTriangleSelector)
            , (::irr::scene::ITriangleSelector * ( IBillboardSceneNode_wrapper::* )(  ) const)(&IBillboardSceneNode_wrapper::default_getTriangleSelector)
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_TYPE ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getType)
            , (::irr::scene::ESCENE_NODE_TYPE ( IBillboardSceneNode_wrapper::* )(  ) const)(&IBillboardSceneNode_wrapper::default_getType) )    
        .def( 
            "isTrulyVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isTrulyVisible)
            , (bool ( IBillboardSceneNode_wrapper::* )(  ) const)(&IBillboardSceneNode_wrapper::default_isTrulyVisible) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isVisible)
            , (bool ( IBillboardSceneNode_wrapper::* )(  ) const)(&IBillboardSceneNode_wrapper::default_isVisible) )    
        .def( 
            "remove"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::remove)
            , (void ( IBillboardSceneNode_wrapper::* )(  ) )(&IBillboardSceneNode_wrapper::default_remove) )    
        .def( 
            "removeAll"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAll)
            , (void ( IBillboardSceneNode_wrapper::* )(  ) )(&IBillboardSceneNode_wrapper::default_removeAll) )    
        .def( 
            "removeAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::removeAnimator)
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IBillboardSceneNode_wrapper::default_removeAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "removeAnimators"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAnimators)
            , (void ( IBillboardSceneNode_wrapper::* )(  ) )(&IBillboardSceneNode_wrapper::default_removeAnimators) )    
        .def( 
            "removeChild"
            , (bool ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::removeChild)
            , (bool ( IBillboardSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IBillboardSceneNode_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "render"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::render) ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::scene::ISceneNode::serializeAttributes)
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IBillboardSceneNode_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugDataVisible"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setDebugDataVisible)
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::s32 ) )(&IBillboardSceneNode_wrapper::default_setDebugDataVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "setDebugName"
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IBillboardSceneNode_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setID"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setID)
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::s32 ) )(&IBillboardSceneNode_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IBillboardSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::stringc const & ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::core::stringc const & ) )(&IBillboardSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setParent"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::setParent)
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IBillboardSceneNode_wrapper::default_setParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "setPosition"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setPosition)
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IBillboardSceneNode_wrapper::default_setPosition)
            , ( bp::arg("newpos") ) )    
        .def( 
            "setRotation"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setRotation)
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IBillboardSceneNode_wrapper::default_setRotation)
            , ( bp::arg("rotation") ) )    
        .def( 
            "setScale"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setScale)
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IBillboardSceneNode_wrapper::default_setScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "setSceneManager"
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::scene::ISceneManager * ) )(&IBillboardSceneNode_wrapper::setSceneManager)
            , ( bp::arg("newManager") ) )    
        .def( 
            "setTriangleSelector"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::ISceneNode::setTriangleSelector)
            , (void ( IBillboardSceneNode_wrapper::* )( ::irr::scene::ITriangleSelector * ) )(&IBillboardSceneNode_wrapper::default_setTriangleSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::scene::ISceneNode::* )( bool ) )(&::irr::scene::ISceneNode::setVisible)
            , (void ( IBillboardSceneNode_wrapper::* )( bool ) )(&IBillboardSceneNode_wrapper::default_setVisible)
            , ( bp::arg("isVisible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::updateAbsolutePosition)
            , (void ( IBillboardSceneNode_wrapper::* )(  ) )(&IBillboardSceneNode_wrapper::default_updateAbsolutePosition) );

    bp::class_< IBillboardTextSceneNode_wrapper, bp::bases< irr::scene::IBillboardSceneNode >, boost::noncopyable >( "IBillboardTextSceneNode", bp::init< irr::scene::ISceneNode *, irr::scene::ISceneManager *, irr::s32, bp::optional< irr::core::vector3df const & > >(( bp::arg("parent"), bp::arg("mgr"), bp::arg("id"), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f) )) )    
        .def( 
            "getColor"
            , bp::pure_virtual( (void ( ::irr::scene::IBillboardTextSceneNode::* )( ::irr::video::SColor &,::irr::video::SColor & ) const)(&::irr::scene::IBillboardTextSceneNode::getColor) )
            , ( bp::arg("topColor"), bp::arg("bottomColor") ) )    
        .def( 
            "getSize"
            , bp::pure_virtual( (::irr::core::dimension2d< float > const & ( ::irr::scene::IBillboardTextSceneNode::* )(  ) const)(&::irr::scene::IBillboardTextSceneNode::getSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "setColor"
            , bp::pure_virtual( (void ( ::irr::scene::IBillboardTextSceneNode::* )( ::irr::video::SColor const & ) )(&::irr::scene::IBillboardTextSceneNode::setColor) )
            , ( bp::arg("overallColor") ) )    
        .def( 
            "setColor"
            , bp::pure_virtual( (void ( ::irr::scene::IBillboardTextSceneNode::* )( ::irr::video::SColor const &,::irr::video::SColor const & ) )(&::irr::scene::IBillboardTextSceneNode::setColor) )
            , ( bp::arg("topColor"), bp::arg("bottomColor") ) )    
        .def( 
            "setSize"
            , bp::pure_virtual( (void ( ::irr::scene::IBillboardTextSceneNode::* )( ::irr::core::dimension2d< float > const & ) )(&::irr::scene::IBillboardTextSceneNode::setSize) )
            , ( bp::arg("size") ) )    
        .def( 
            "setText"
            , bp::pure_virtual( (void ( ::irr::scene::IBillboardTextSceneNode::* )( wchar_t const * ) )(&::irr::scene::IBillboardTextSceneNode::setText) )
            , ( bp::arg("text") ) )    
        .def( 
            "setTextColor"
            , bp::pure_virtual( (void ( ::irr::scene::IBillboardTextSceneNode::* )( ::irr::video::SColor ) )(&::irr::scene::IBillboardTextSceneNode::setTextColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "OnAnimate"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::OnAnimate)
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::u32 ) )(&IBillboardTextSceneNode_wrapper::default_OnAnimate)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "OnRegisterSceneNode"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::OnRegisterSceneNode)
            , (void ( IBillboardTextSceneNode_wrapper::* )(  ) )(&IBillboardTextSceneNode_wrapper::default_OnRegisterSceneNode) )    
        .def( 
            "addAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::addAnimator)
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IBillboardTextSceneNode_wrapper::default_addAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::addChild)
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IBillboardTextSceneNode_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "clone"
            , (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNode::clone)
            , (::irr::scene::ISceneNode * ( IBillboardTextSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IBillboardTextSceneNode_wrapper::default_clone)
            , ( bp::arg("newParent")=bp::object(), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "cloneMembers"
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IBillboardTextSceneNode_wrapper::cloneMembers)
            , ( bp::arg("toCopyFrom"), bp::arg("newManager") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::scene::ISceneNode::deserializeAttributes)
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IBillboardTextSceneNode_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getAbsolutePosition"
            , (::irr::core::vector3df ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsolutePosition)
            , (::irr::core::vector3df ( IBillboardTextSceneNode_wrapper::* )(  ) const)(&IBillboardTextSceneNode_wrapper::default_getAbsolutePosition) )    
        .def( 
            "getAbsoluteTransformation"
            , (::irr::core::matrix4 const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsoluteTransformation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getID)
            , (::irr::s32 ( IBillboardTextSceneNode_wrapper::* )(  ) const)(&IBillboardTextSceneNode_wrapper::default_getID) )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::getMaterial)
            , ( bp::arg("num") )
                /* undefined call policies */ )    
        .def( 
            "getMaterialCount"
            , (::irr::u32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getMaterialCount)
            , (::irr::u32 ( IBillboardTextSceneNode_wrapper::* )(  ) const)(&IBillboardTextSceneNode_wrapper::default_getMaterialCount) )    
        .def( 
            "getName"
            , (::irr::c8 const * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getName)
            , (::irr::c8 const * ( IBillboardTextSceneNode_wrapper::* )(  ) const)(&IBillboardTextSceneNode_wrapper::default_getName) )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRelativeTransformation"
            , (::irr::core::matrix4 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRelativeTransformation)
            , (::irr::core::matrix4 ( IBillboardTextSceneNode_wrapper::* )(  ) const)(&IBillboardTextSceneNode_wrapper::default_getRelativeTransformation) )    
        .def( 
            "getRotation"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRotation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getScale"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSceneManager"
            , (::irr::scene::ISceneManager * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getSceneManager)
            , (::irr::scene::ISceneManager * ( IBillboardTextSceneNode_wrapper::* )(  ) const)(&IBillboardTextSceneNode_wrapper::default_getSceneManager)
                /* undefined call policies */ )    
        .def( 
            "getTransformedBoundingBox"
            , (::irr::core::aabbox3d< float > const ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTransformedBoundingBox)
            , (::irr::core::aabbox3d< float > const ( IBillboardTextSceneNode_wrapper::* )(  ) const)(&IBillboardTextSceneNode_wrapper::default_getTransformedBoundingBox) )    
        .def( 
            "getTriangleSelector"
            , (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTriangleSelector)
            , (::irr::scene::ITriangleSelector * ( IBillboardTextSceneNode_wrapper::* )(  ) const)(&IBillboardTextSceneNode_wrapper::default_getTriangleSelector)
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_TYPE ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getType)
            , (::irr::scene::ESCENE_NODE_TYPE ( IBillboardTextSceneNode_wrapper::* )(  ) const)(&IBillboardTextSceneNode_wrapper::default_getType) )    
        .def( 
            "isTrulyVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isTrulyVisible)
            , (bool ( IBillboardTextSceneNode_wrapper::* )(  ) const)(&IBillboardTextSceneNode_wrapper::default_isTrulyVisible) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isVisible)
            , (bool ( IBillboardTextSceneNode_wrapper::* )(  ) const)(&IBillboardTextSceneNode_wrapper::default_isVisible) )    
        .def( 
            "remove"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::remove)
            , (void ( IBillboardTextSceneNode_wrapper::* )(  ) )(&IBillboardTextSceneNode_wrapper::default_remove) )    
        .def( 
            "removeAll"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAll)
            , (void ( IBillboardTextSceneNode_wrapper::* )(  ) )(&IBillboardTextSceneNode_wrapper::default_removeAll) )    
        .def( 
            "removeAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::removeAnimator)
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IBillboardTextSceneNode_wrapper::default_removeAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "removeAnimators"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAnimators)
            , (void ( IBillboardTextSceneNode_wrapper::* )(  ) )(&IBillboardTextSceneNode_wrapper::default_removeAnimators) )    
        .def( 
            "removeChild"
            , (bool ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::removeChild)
            , (bool ( IBillboardTextSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IBillboardTextSceneNode_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "render"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::render) ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::scene::ISceneNode::serializeAttributes)
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IBillboardTextSceneNode_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugDataVisible"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setDebugDataVisible)
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::s32 ) )(&IBillboardTextSceneNode_wrapper::default_setDebugDataVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "setDebugName"
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IBillboardTextSceneNode_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setID"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setID)
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::s32 ) )(&IBillboardTextSceneNode_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IBillboardTextSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::stringc const & ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::core::stringc const & ) )(&IBillboardTextSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setParent"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::setParent)
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IBillboardTextSceneNode_wrapper::default_setParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "setPosition"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setPosition)
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IBillboardTextSceneNode_wrapper::default_setPosition)
            , ( bp::arg("newpos") ) )    
        .def( 
            "setRotation"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setRotation)
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IBillboardTextSceneNode_wrapper::default_setRotation)
            , ( bp::arg("rotation") ) )    
        .def( 
            "setScale"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setScale)
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IBillboardTextSceneNode_wrapper::default_setScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "setSceneManager"
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::scene::ISceneManager * ) )(&IBillboardTextSceneNode_wrapper::setSceneManager)
            , ( bp::arg("newManager") ) )    
        .def( 
            "setTriangleSelector"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::ISceneNode::setTriangleSelector)
            , (void ( IBillboardTextSceneNode_wrapper::* )( ::irr::scene::ITriangleSelector * ) )(&IBillboardTextSceneNode_wrapper::default_setTriangleSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::scene::ISceneNode::* )( bool ) )(&::irr::scene::ISceneNode::setVisible)
            , (void ( IBillboardTextSceneNode_wrapper::* )( bool ) )(&IBillboardTextSceneNode_wrapper::default_setVisible)
            , ( bp::arg("isVisible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::updateAbsolutePosition)
            , (void ( IBillboardTextSceneNode_wrapper::* )(  ) )(&IBillboardTextSceneNode_wrapper::default_updateAbsolutePosition) );

    bp::class_< IBoneSceneNode_wrapper, bp::bases< irr::scene::ISceneNode >, boost::noncopyable >( "IBoneSceneNode", bp::init< irr::scene::ISceneNode *, irr::scene::ISceneManager *, bp::optional< irr::s32 > >(( bp::arg("parent"), bp::arg("mgr"), bp::arg("id")=(::irr::s32)(-0x00000000000000001) )) )    
        .def( 
            "OnAnimate"
            , bp::pure_virtual( (void ( ::irr::scene::IBoneSceneNode::* )( ::irr::u32 ) )(&::irr::scene::IBoneSceneNode::OnAnimate) )
            , ( bp::arg("timeMs") ) )    
        .def( 
            "getAnimationMode"
            , bp::pure_virtual( (::irr::scene::E_BONE_ANIMATION_MODE ( ::irr::scene::IBoneSceneNode::* )(  ) const)(&::irr::scene::IBoneSceneNode::getAnimationMode) ) )    
        .def( 
            "getBoneIndex"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IBoneSceneNode::* )(  ) const)(&::irr::scene::IBoneSceneNode::getBoneIndex) ) )    
        .def( 
            "getBoneName"
            , (::irr::c8 const * ( ::irr::scene::IBoneSceneNode::* )(  ) const)(&::irr::scene::IBoneSceneNode::getBoneName)
            , (::irr::c8 const * ( IBoneSceneNode_wrapper::* )(  ) const)(&IBoneSceneNode_wrapper::default_getBoneName) )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::IBoneSceneNode::* )(  ) const)(&::irr::scene::IBoneSceneNode::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSkinningSpace"
            , bp::pure_virtual( (::irr::scene::E_BONE_SKINNING_SPACE ( ::irr::scene::IBoneSceneNode::* )(  ) const)(&::irr::scene::IBoneSceneNode::getSkinningSpace) ) )    
        .def( 
            "render"
            , (void ( ::irr::scene::IBoneSceneNode::* )(  ) )(&::irr::scene::IBoneSceneNode::render)
            , (void ( IBoneSceneNode_wrapper::* )(  ) )(&IBoneSceneNode_wrapper::default_render) )    
        .def( 
            "setAnimationMode"
            , bp::pure_virtual( (bool ( ::irr::scene::IBoneSceneNode::* )( ::irr::scene::E_BONE_ANIMATION_MODE ) )(&::irr::scene::IBoneSceneNode::setAnimationMode) )
            , ( bp::arg("mode") ) )    
        .def( 
            "setSkinningSpace"
            , bp::pure_virtual( (void ( ::irr::scene::IBoneSceneNode::* )( ::irr::scene::E_BONE_SKINNING_SPACE ) )(&::irr::scene::IBoneSceneNode::setSkinningSpace) )
            , ( bp::arg("space") ) )    
        .def( 
            "updateAbsolutePositionOfAllChildren"
            , bp::pure_virtual( (void ( ::irr::scene::IBoneSceneNode::* )(  ) )(&::irr::scene::IBoneSceneNode::updateAbsolutePositionOfAllChildren) ) )    
        .def_readwrite( "positionHint", &irr::scene::IBoneSceneNode::positionHint )    
        .def_readwrite( "rotationHint", &irr::scene::IBoneSceneNode::rotationHint )    
        .def_readwrite( "scaleHint", &irr::scene::IBoneSceneNode::scaleHint )    
        .def( 
            "OnRegisterSceneNode"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::OnRegisterSceneNode)
            , (void ( IBoneSceneNode_wrapper::* )(  ) )(&IBoneSceneNode_wrapper::default_OnRegisterSceneNode) )    
        .def( 
            "addAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::addAnimator)
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IBoneSceneNode_wrapper::default_addAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::addChild)
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IBoneSceneNode_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "clone"
            , (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNode::clone)
            , (::irr::scene::ISceneNode * ( IBoneSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IBoneSceneNode_wrapper::default_clone)
            , ( bp::arg("newParent")=bp::object(), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "cloneMembers"
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IBoneSceneNode_wrapper::cloneMembers)
            , ( bp::arg("toCopyFrom"), bp::arg("newManager") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::scene::ISceneNode::deserializeAttributes)
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IBoneSceneNode_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getAbsolutePosition"
            , (::irr::core::vector3df ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsolutePosition)
            , (::irr::core::vector3df ( IBoneSceneNode_wrapper::* )(  ) const)(&IBoneSceneNode_wrapper::default_getAbsolutePosition) )    
        .def( 
            "getAbsoluteTransformation"
            , (::irr::core::matrix4 const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsoluteTransformation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getID)
            , (::irr::s32 ( IBoneSceneNode_wrapper::* )(  ) const)(&IBoneSceneNode_wrapper::default_getID) )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::getMaterial)
            , ( bp::arg("num") )
                /* undefined call policies */ )    
        .def( 
            "getMaterialCount"
            , (::irr::u32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getMaterialCount)
            , (::irr::u32 ( IBoneSceneNode_wrapper::* )(  ) const)(&IBoneSceneNode_wrapper::default_getMaterialCount) )    
        .def( 
            "getName"
            , (::irr::c8 const * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getName)
            , (::irr::c8 const * ( IBoneSceneNode_wrapper::* )(  ) const)(&IBoneSceneNode_wrapper::default_getName) )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRelativeTransformation"
            , (::irr::core::matrix4 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRelativeTransformation)
            , (::irr::core::matrix4 ( IBoneSceneNode_wrapper::* )(  ) const)(&IBoneSceneNode_wrapper::default_getRelativeTransformation) )    
        .def( 
            "getRotation"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRotation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getScale"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSceneManager"
            , (::irr::scene::ISceneManager * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getSceneManager)
            , (::irr::scene::ISceneManager * ( IBoneSceneNode_wrapper::* )(  ) const)(&IBoneSceneNode_wrapper::default_getSceneManager)
                /* undefined call policies */ )    
        .def( 
            "getTransformedBoundingBox"
            , (::irr::core::aabbox3d< float > const ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTransformedBoundingBox)
            , (::irr::core::aabbox3d< float > const ( IBoneSceneNode_wrapper::* )(  ) const)(&IBoneSceneNode_wrapper::default_getTransformedBoundingBox) )    
        .def( 
            "getTriangleSelector"
            , (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTriangleSelector)
            , (::irr::scene::ITriangleSelector * ( IBoneSceneNode_wrapper::* )(  ) const)(&IBoneSceneNode_wrapper::default_getTriangleSelector)
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_TYPE ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getType)
            , (::irr::scene::ESCENE_NODE_TYPE ( IBoneSceneNode_wrapper::* )(  ) const)(&IBoneSceneNode_wrapper::default_getType) )    
        .def( 
            "isTrulyVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isTrulyVisible)
            , (bool ( IBoneSceneNode_wrapper::* )(  ) const)(&IBoneSceneNode_wrapper::default_isTrulyVisible) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isVisible)
            , (bool ( IBoneSceneNode_wrapper::* )(  ) const)(&IBoneSceneNode_wrapper::default_isVisible) )    
        .def( 
            "remove"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::remove)
            , (void ( IBoneSceneNode_wrapper::* )(  ) )(&IBoneSceneNode_wrapper::default_remove) )    
        .def( 
            "removeAll"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAll)
            , (void ( IBoneSceneNode_wrapper::* )(  ) )(&IBoneSceneNode_wrapper::default_removeAll) )    
        .def( 
            "removeAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::removeAnimator)
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IBoneSceneNode_wrapper::default_removeAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "removeAnimators"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAnimators)
            , (void ( IBoneSceneNode_wrapper::* )(  ) )(&IBoneSceneNode_wrapper::default_removeAnimators) )    
        .def( 
            "removeChild"
            , (bool ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::removeChild)
            , (bool ( IBoneSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IBoneSceneNode_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::scene::ISceneNode::serializeAttributes)
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IBoneSceneNode_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugDataVisible"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setDebugDataVisible)
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::s32 ) )(&IBoneSceneNode_wrapper::default_setDebugDataVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "setDebugName"
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IBoneSceneNode_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setID"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setID)
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::s32 ) )(&IBoneSceneNode_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IBoneSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::stringc const & ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::core::stringc const & ) )(&IBoneSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setParent"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::setParent)
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IBoneSceneNode_wrapper::default_setParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "setPosition"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setPosition)
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IBoneSceneNode_wrapper::default_setPosition)
            , ( bp::arg("newpos") ) )    
        .def( 
            "setRotation"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setRotation)
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IBoneSceneNode_wrapper::default_setRotation)
            , ( bp::arg("rotation") ) )    
        .def( 
            "setScale"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setScale)
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IBoneSceneNode_wrapper::default_setScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "setSceneManager"
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::scene::ISceneManager * ) )(&IBoneSceneNode_wrapper::setSceneManager)
            , ( bp::arg("newManager") ) )    
        .def( 
            "setTriangleSelector"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::ISceneNode::setTriangleSelector)
            , (void ( IBoneSceneNode_wrapper::* )( ::irr::scene::ITriangleSelector * ) )(&IBoneSceneNode_wrapper::default_setTriangleSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::scene::ISceneNode::* )( bool ) )(&::irr::scene::ISceneNode::setVisible)
            , (void ( IBoneSceneNode_wrapper::* )( bool ) )(&IBoneSceneNode_wrapper::default_setVisible)
            , ( bp::arg("isVisible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::updateAbsolutePosition)
            , (void ( IBoneSceneNode_wrapper::* )(  ) )(&IBoneSceneNode_wrapper::default_updateAbsolutePosition) );

    bp::class_< ICameraSceneNode_wrapper, bp::bases< irr::scene::ISceneNode, irr::IEventReceiver >, boost::noncopyable >( "ICameraSceneNode", bp::init< irr::scene::ISceneNode *, irr::scene::ISceneManager *, irr::s32, bp::optional< irr::core::vector3df const &, irr::core::vector3df const &, irr::core::vector3df const & > >(( bp::arg("parent"), bp::arg("mgr"), bp::arg("id"), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )) )    
        .def( 
            "OnEvent"
            , bp::pure_virtual( (bool ( ::irr::scene::ICameraSceneNode::* )( ::irr::SEvent const & ) )(&::irr::scene::ICameraSceneNode::OnEvent) )
            , ( bp::arg("event") ) )    
        .def( 
            "bindTargetAndRotation"
            , bp::pure_virtual( (void ( ::irr::scene::ICameraSceneNode::* )( bool ) )(&::irr::scene::ICameraSceneNode::bindTargetAndRotation) )
            , ( bp::arg("bound") ) )    
        .def( 
            "getAspectRatio"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::ICameraSceneNode::* )(  ) const)(&::irr::scene::ICameraSceneNode::getAspectRatio) ) )    
        .def( 
            "getFOV"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::ICameraSceneNode::* )(  ) const)(&::irr::scene::ICameraSceneNode::getFOV) ) )    
        .def( 
            "getFarValue"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::ICameraSceneNode::* )(  ) const)(&::irr::scene::ICameraSceneNode::getFarValue) ) )    
        .def( 
            "getNearValue"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::ICameraSceneNode::* )(  ) const)(&::irr::scene::ICameraSceneNode::getNearValue) ) )    
        .def( 
            "getProjectionMatrix"
            , bp::pure_virtual( (::irr::core::matrix4 const & ( ::irr::scene::ICameraSceneNode::* )(  ) const)(&::irr::scene::ICameraSceneNode::getProjectionMatrix) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTarget"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::ICameraSceneNode::* )(  ) const)(&::irr::scene::ICameraSceneNode::getTarget) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTargetAndRotationBinding"
            , bp::pure_virtual( (bool ( ::irr::scene::ICameraSceneNode::* )(  ) const)(&::irr::scene::ICameraSceneNode::getTargetAndRotationBinding) ) )    
        .def( 
            "getUpVector"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::ICameraSceneNode::* )(  ) const)(&::irr::scene::ICameraSceneNode::getUpVector) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getViewFrustum"
            , bp::pure_virtual( (::irr::scene::SViewFrustum const * ( ::irr::scene::ICameraSceneNode::* )(  ) const)(&::irr::scene::ICameraSceneNode::getViewFrustum) )
                /* undefined call policies */ )    
        .def( 
            "getViewMatrix"
            , bp::pure_virtual( (::irr::core::matrix4 const & ( ::irr::scene::ICameraSceneNode::* )(  ) const)(&::irr::scene::ICameraSceneNode::getViewMatrix) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getViewMatrixAffector"
            , bp::pure_virtual( (::irr::core::matrix4 const & ( ::irr::scene::ICameraSceneNode::* )(  ) const)(&::irr::scene::ICameraSceneNode::getViewMatrixAffector) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "isInputReceiverEnabled"
            , bp::pure_virtual( (bool ( ::irr::scene::ICameraSceneNode::* )(  ) const)(&::irr::scene::ICameraSceneNode::isInputReceiverEnabled) ) )    
        .def( 
            "isOrthogonal"
            , (bool ( ::irr::scene::ICameraSceneNode::* )(  ) const)(&::irr::scene::ICameraSceneNode::isOrthogonal)
            , (bool ( ICameraSceneNode_wrapper::* )(  ) const)(&ICameraSceneNode_wrapper::default_isOrthogonal) )    
        .def( 
            "setAspectRatio"
            , bp::pure_virtual( (void ( ::irr::scene::ICameraSceneNode::* )( ::irr::f32 ) )(&::irr::scene::ICameraSceneNode::setAspectRatio) )
            , ( bp::arg("aspect") ) )    
        .def( 
            "setFOV"
            , bp::pure_virtual( (void ( ::irr::scene::ICameraSceneNode::* )( ::irr::f32 ) )(&::irr::scene::ICameraSceneNode::setFOV) )
            , ( bp::arg("fovy") ) )    
        .def( 
            "setFarValue"
            , bp::pure_virtual( (void ( ::irr::scene::ICameraSceneNode::* )( ::irr::f32 ) )(&::irr::scene::ICameraSceneNode::setFarValue) )
            , ( bp::arg("zf") ) )    
        .def( 
            "setInputReceiverEnabled"
            , bp::pure_virtual( (void ( ::irr::scene::ICameraSceneNode::* )( bool ) )(&::irr::scene::ICameraSceneNode::setInputReceiverEnabled) )
            , ( bp::arg("enabled") ) )    
        .def( 
            "setNearValue"
            , bp::pure_virtual( (void ( ::irr::scene::ICameraSceneNode::* )( ::irr::f32 ) )(&::irr::scene::ICameraSceneNode::setNearValue) )
            , ( bp::arg("zn") ) )    
        .def( 
            "setProjectionMatrix"
            , bp::pure_virtual( (void ( ::irr::scene::ICameraSceneNode::* )( ::irr::core::matrix4 const &,bool ) )(&::irr::scene::ICameraSceneNode::setProjectionMatrix) )
            , ( bp::arg("projection"), bp::arg("isOrthogonal")=(bool)(false) ) )    
        .def( 
            "setRotation"
            , bp::pure_virtual( (void ( ::irr::scene::ICameraSceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ICameraSceneNode::setRotation) )
            , ( bp::arg("rotation") ) )    
        .def( 
            "setTarget"
            , bp::pure_virtual( (void ( ::irr::scene::ICameraSceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ICameraSceneNode::setTarget) )
            , ( bp::arg("pos") ) )    
        .def( 
            "setUpVector"
            , bp::pure_virtual( (void ( ::irr::scene::ICameraSceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ICameraSceneNode::setUpVector) )
            , ( bp::arg("pos") ) )    
        .def( 
            "setViewMatrixAffector"
            , bp::pure_virtual( (void ( ::irr::scene::ICameraSceneNode::* )( ::irr::core::matrix4 const & ) )(&::irr::scene::ICameraSceneNode::setViewMatrixAffector) )
            , ( bp::arg("affector") ) )    
        .def( 
            "OnAnimate"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::OnAnimate)
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::u32 ) )(&ICameraSceneNode_wrapper::default_OnAnimate)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "OnRegisterSceneNode"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::OnRegisterSceneNode)
            , (void ( ICameraSceneNode_wrapper::* )(  ) )(&ICameraSceneNode_wrapper::default_OnRegisterSceneNode) )    
        .def( 
            "addAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::addAnimator)
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&ICameraSceneNode_wrapper::default_addAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::addChild)
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&ICameraSceneNode_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "clone"
            , (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNode::clone)
            , (::irr::scene::ISceneNode * ( ICameraSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&ICameraSceneNode_wrapper::default_clone)
            , ( bp::arg("newParent")=bp::object(), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "cloneMembers"
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&ICameraSceneNode_wrapper::cloneMembers)
            , ( bp::arg("toCopyFrom"), bp::arg("newManager") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::scene::ISceneNode::deserializeAttributes)
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&ICameraSceneNode_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getAbsolutePosition"
            , (::irr::core::vector3df ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsolutePosition)
            , (::irr::core::vector3df ( ICameraSceneNode_wrapper::* )(  ) const)(&ICameraSceneNode_wrapper::default_getAbsolutePosition) )    
        .def( 
            "getAbsoluteTransformation"
            , (::irr::core::matrix4 const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsoluteTransformation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getID)
            , (::irr::s32 ( ICameraSceneNode_wrapper::* )(  ) const)(&ICameraSceneNode_wrapper::default_getID) )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::getMaterial)
            , ( bp::arg("num") )
                /* undefined call policies */ )    
        .def( 
            "getMaterialCount"
            , (::irr::u32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getMaterialCount)
            , (::irr::u32 ( ICameraSceneNode_wrapper::* )(  ) const)(&ICameraSceneNode_wrapper::default_getMaterialCount) )    
        .def( 
            "getName"
            , (::irr::c8 const * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getName)
            , (::irr::c8 const * ( ICameraSceneNode_wrapper::* )(  ) const)(&ICameraSceneNode_wrapper::default_getName) )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRelativeTransformation"
            , (::irr::core::matrix4 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRelativeTransformation)
            , (::irr::core::matrix4 ( ICameraSceneNode_wrapper::* )(  ) const)(&ICameraSceneNode_wrapper::default_getRelativeTransformation) )    
        .def( 
            "getRotation"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRotation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getScale"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSceneManager"
            , (::irr::scene::ISceneManager * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getSceneManager)
            , (::irr::scene::ISceneManager * ( ICameraSceneNode_wrapper::* )(  ) const)(&ICameraSceneNode_wrapper::default_getSceneManager)
                /* undefined call policies */ )    
        .def( 
            "getTransformedBoundingBox"
            , (::irr::core::aabbox3d< float > const ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTransformedBoundingBox)
            , (::irr::core::aabbox3d< float > const ( ICameraSceneNode_wrapper::* )(  ) const)(&ICameraSceneNode_wrapper::default_getTransformedBoundingBox) )    
        .def( 
            "getTriangleSelector"
            , (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTriangleSelector)
            , (::irr::scene::ITriangleSelector * ( ICameraSceneNode_wrapper::* )(  ) const)(&ICameraSceneNode_wrapper::default_getTriangleSelector)
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_TYPE ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getType)
            , (::irr::scene::ESCENE_NODE_TYPE ( ICameraSceneNode_wrapper::* )(  ) const)(&ICameraSceneNode_wrapper::default_getType) )    
        .def( 
            "isTrulyVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isTrulyVisible)
            , (bool ( ICameraSceneNode_wrapper::* )(  ) const)(&ICameraSceneNode_wrapper::default_isTrulyVisible) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isVisible)
            , (bool ( ICameraSceneNode_wrapper::* )(  ) const)(&ICameraSceneNode_wrapper::default_isVisible) )    
        .def( 
            "remove"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::remove)
            , (void ( ICameraSceneNode_wrapper::* )(  ) )(&ICameraSceneNode_wrapper::default_remove) )    
        .def( 
            "removeAll"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAll)
            , (void ( ICameraSceneNode_wrapper::* )(  ) )(&ICameraSceneNode_wrapper::default_removeAll) )    
        .def( 
            "removeAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::removeAnimator)
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&ICameraSceneNode_wrapper::default_removeAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "removeAnimators"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAnimators)
            , (void ( ICameraSceneNode_wrapper::* )(  ) )(&ICameraSceneNode_wrapper::default_removeAnimators) )    
        .def( 
            "removeChild"
            , (bool ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::removeChild)
            , (bool ( ICameraSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&ICameraSceneNode_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "render"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::render) ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::scene::ISceneNode::serializeAttributes)
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&ICameraSceneNode_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugDataVisible"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setDebugDataVisible)
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::s32 ) )(&ICameraSceneNode_wrapper::default_setDebugDataVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "setDebugName"
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::c8 const * ) )(&ICameraSceneNode_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setID"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setID)
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::s32 ) )(&ICameraSceneNode_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::ISceneNode::setName)
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::c8 const * ) )(&ICameraSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::stringc const & ) )(&::irr::scene::ISceneNode::setName)
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::core::stringc const & ) )(&ICameraSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setParent"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::setParent)
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&ICameraSceneNode_wrapper::default_setParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "setPosition"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setPosition)
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&ICameraSceneNode_wrapper::default_setPosition)
            , ( bp::arg("newpos") ) )    
        .def( 
            "setScale"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setScale)
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&ICameraSceneNode_wrapper::default_setScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "setSceneManager"
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::scene::ISceneManager * ) )(&ICameraSceneNode_wrapper::setSceneManager)
            , ( bp::arg("newManager") ) )    
        .def( 
            "setTriangleSelector"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::ISceneNode::setTriangleSelector)
            , (void ( ICameraSceneNode_wrapper::* )( ::irr::scene::ITriangleSelector * ) )(&ICameraSceneNode_wrapper::default_setTriangleSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::scene::ISceneNode::* )( bool ) )(&::irr::scene::ISceneNode::setVisible)
            , (void ( ICameraSceneNode_wrapper::* )( bool ) )(&ICameraSceneNode_wrapper::default_setVisible)
            , ( bp::arg("isVisible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::updateAbsolutePosition)
            , (void ( ICameraSceneNode_wrapper::* )(  ) )(&ICameraSceneNode_wrapper::default_updateAbsolutePosition) );

    bp::class_< ICollisionCallback_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "ICollisionCallback" )    
        .def( 
            "onCollision"
            , bp::pure_virtual( (bool ( ::irr::scene::ICollisionCallback::* )( ::irr::scene::ISceneNodeAnimatorCollisionResponse const & ) )(&::irr::scene::ICollisionCallback::onCollision) )
            , ( bp::arg("animator") ) )    
        .def( 
            "setDebugName"
            , (void ( ICollisionCallback_wrapper::* )( ::irr::c8 const * ) )(&ICollisionCallback_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IDummyTransformationSceneNode_wrapper, bp::bases< irr::scene::ISceneNode >, boost::noncopyable >( "IDummyTransformationSceneNode", bp::init< irr::scene::ISceneNode *, irr::scene::ISceneManager *, irr::s32 >(( bp::arg("parent"), bp::arg("mgr"), bp::arg("id") )) )    
        .def( 
            "getRelativeTransformationMatrix"
            , bp::pure_virtual( (::irr::core::matrix4 & ( ::irr::scene::IDummyTransformationSceneNode::* )(  ) )(&::irr::scene::IDummyTransformationSceneNode::getRelativeTransformationMatrix) )
                /* undefined call policies */ )    
        .def( 
            "OnAnimate"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::OnAnimate)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::u32 ) )(&IDummyTransformationSceneNode_wrapper::default_OnAnimate)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "OnRegisterSceneNode"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::OnRegisterSceneNode)
            , (void ( IDummyTransformationSceneNode_wrapper::* )(  ) )(&IDummyTransformationSceneNode_wrapper::default_OnRegisterSceneNode) )    
        .def( 
            "addAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::addAnimator)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IDummyTransformationSceneNode_wrapper::default_addAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::addChild)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IDummyTransformationSceneNode_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "clone"
            , (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNode::clone)
            , (::irr::scene::ISceneNode * ( IDummyTransformationSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IDummyTransformationSceneNode_wrapper::default_clone)
            , ( bp::arg("newParent")=bp::object(), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "cloneMembers"
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IDummyTransformationSceneNode_wrapper::cloneMembers)
            , ( bp::arg("toCopyFrom"), bp::arg("newManager") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::scene::ISceneNode::deserializeAttributes)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IDummyTransformationSceneNode_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getAbsolutePosition"
            , (::irr::core::vector3df ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsolutePosition)
            , (::irr::core::vector3df ( IDummyTransformationSceneNode_wrapper::* )(  ) const)(&IDummyTransformationSceneNode_wrapper::default_getAbsolutePosition) )    
        .def( 
            "getAbsoluteTransformation"
            , (::irr::core::matrix4 const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsoluteTransformation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getID)
            , (::irr::s32 ( IDummyTransformationSceneNode_wrapper::* )(  ) const)(&IDummyTransformationSceneNode_wrapper::default_getID) )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::getMaterial)
            , ( bp::arg("num") )
                /* undefined call policies */ )    
        .def( 
            "getMaterialCount"
            , (::irr::u32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getMaterialCount)
            , (::irr::u32 ( IDummyTransformationSceneNode_wrapper::* )(  ) const)(&IDummyTransformationSceneNode_wrapper::default_getMaterialCount) )    
        .def( 
            "getName"
            , (::irr::c8 const * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getName)
            , (::irr::c8 const * ( IDummyTransformationSceneNode_wrapper::* )(  ) const)(&IDummyTransformationSceneNode_wrapper::default_getName) )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRelativeTransformation"
            , (::irr::core::matrix4 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRelativeTransformation)
            , (::irr::core::matrix4 ( IDummyTransformationSceneNode_wrapper::* )(  ) const)(&IDummyTransformationSceneNode_wrapper::default_getRelativeTransformation) )    
        .def( 
            "getRotation"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRotation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getScale"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSceneManager"
            , (::irr::scene::ISceneManager * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getSceneManager)
            , (::irr::scene::ISceneManager * ( IDummyTransformationSceneNode_wrapper::* )(  ) const)(&IDummyTransformationSceneNode_wrapper::default_getSceneManager)
                /* undefined call policies */ )    
        .def( 
            "getTransformedBoundingBox"
            , (::irr::core::aabbox3d< float > const ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTransformedBoundingBox)
            , (::irr::core::aabbox3d< float > const ( IDummyTransformationSceneNode_wrapper::* )(  ) const)(&IDummyTransformationSceneNode_wrapper::default_getTransformedBoundingBox) )    
        .def( 
            "getTriangleSelector"
            , (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTriangleSelector)
            , (::irr::scene::ITriangleSelector * ( IDummyTransformationSceneNode_wrapper::* )(  ) const)(&IDummyTransformationSceneNode_wrapper::default_getTriangleSelector)
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_TYPE ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getType)
            , (::irr::scene::ESCENE_NODE_TYPE ( IDummyTransformationSceneNode_wrapper::* )(  ) const)(&IDummyTransformationSceneNode_wrapper::default_getType) )    
        .def( 
            "isTrulyVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isTrulyVisible)
            , (bool ( IDummyTransformationSceneNode_wrapper::* )(  ) const)(&IDummyTransformationSceneNode_wrapper::default_isTrulyVisible) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isVisible)
            , (bool ( IDummyTransformationSceneNode_wrapper::* )(  ) const)(&IDummyTransformationSceneNode_wrapper::default_isVisible) )    
        .def( 
            "remove"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::remove)
            , (void ( IDummyTransformationSceneNode_wrapper::* )(  ) )(&IDummyTransformationSceneNode_wrapper::default_remove) )    
        .def( 
            "removeAll"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAll)
            , (void ( IDummyTransformationSceneNode_wrapper::* )(  ) )(&IDummyTransformationSceneNode_wrapper::default_removeAll) )    
        .def( 
            "removeAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::removeAnimator)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IDummyTransformationSceneNode_wrapper::default_removeAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "removeAnimators"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAnimators)
            , (void ( IDummyTransformationSceneNode_wrapper::* )(  ) )(&IDummyTransformationSceneNode_wrapper::default_removeAnimators) )    
        .def( 
            "removeChild"
            , (bool ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::removeChild)
            , (bool ( IDummyTransformationSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IDummyTransformationSceneNode_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "render"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::render) ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::scene::ISceneNode::serializeAttributes)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IDummyTransformationSceneNode_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugDataVisible"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setDebugDataVisible)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::s32 ) )(&IDummyTransformationSceneNode_wrapper::default_setDebugDataVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "setDebugName"
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IDummyTransformationSceneNode_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setID"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setID)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::s32 ) )(&IDummyTransformationSceneNode_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IDummyTransformationSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::stringc const & ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::core::stringc const & ) )(&IDummyTransformationSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setParent"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::setParent)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IDummyTransformationSceneNode_wrapper::default_setParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "setPosition"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setPosition)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IDummyTransformationSceneNode_wrapper::default_setPosition)
            , ( bp::arg("newpos") ) )    
        .def( 
            "setRotation"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setRotation)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IDummyTransformationSceneNode_wrapper::default_setRotation)
            , ( bp::arg("rotation") ) )    
        .def( 
            "setScale"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setScale)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IDummyTransformationSceneNode_wrapper::default_setScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "setSceneManager"
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::scene::ISceneManager * ) )(&IDummyTransformationSceneNode_wrapper::setSceneManager)
            , ( bp::arg("newManager") ) )    
        .def( 
            "setTriangleSelector"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::ISceneNode::setTriangleSelector)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( ::irr::scene::ITriangleSelector * ) )(&IDummyTransformationSceneNode_wrapper::default_setTriangleSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::scene::ISceneNode::* )( bool ) )(&::irr::scene::ISceneNode::setVisible)
            , (void ( IDummyTransformationSceneNode_wrapper::* )( bool ) )(&IDummyTransformationSceneNode_wrapper::default_setVisible)
            , ( bp::arg("isVisible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::updateAbsolutePosition)
            , (void ( IDummyTransformationSceneNode_wrapper::* )(  ) )(&IDummyTransformationSceneNode_wrapper::default_updateAbsolutePosition) );

    bp::class_< IGeometryCreator_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IGeometryCreator" )    
        .def( 
            "createArrowMesh"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IGeometryCreator::* )( ::irr::u32 const,::irr::u32 const,::irr::f32 const,::irr::f32 const,::irr::f32 const,::irr::f32 const,::irr::video::SColor const,::irr::video::SColor const ) const)(&::irr::scene::IGeometryCreator::createArrowMesh) )
            , ( bp::arg("tesselationCylinder")=(::irr::u32 const)(4), bp::arg("tesselationCone")=(::irr::u32 const)(8), bp::arg("height")=1.0e+0f, bp::arg("cylinderHeight")=6.0000002384185791015625e-1f, bp::arg("widthCylinder")=5.00000007450580596923828125e-2f, bp::arg("widthCone")=3.00000011920928955078125e-1f, bp::arg("colorCylinder")=4294967295u, bp::arg("colorCone")=4294967295u )
                /* undefined call policies */ )    
        .def( 
            "createConeMesh"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IGeometryCreator::* )( ::irr::f32,::irr::f32,::irr::u32,::irr::video::SColor const &,::irr::video::SColor const &,::irr::f32 ) const)(&::irr::scene::IGeometryCreator::createConeMesh) )
            , ( bp::arg("radius"), bp::arg("length"), bp::arg("tesselation"), bp::arg("colorTop")=irr::video::SColor(4294967295u), bp::arg("colorBottom")=irr::video::SColor(4294967295u), bp::arg("oblique")=0.0f )
                /* undefined call policies */ )    
        .def( 
            "createCubeMesh"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IGeometryCreator::* )( ::irr::core::vector3df const & ) const)(&::irr::scene::IGeometryCreator::createCubeMesh) )
            , ( bp::arg("size")=irr::core::vector3d<float>(5.0e+0f, 5.0e+0f, 5.0e+0f) )
                /* undefined call policies */ )    
        .def( 
            "createCylinderMesh"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IGeometryCreator::* )( ::irr::f32,::irr::f32,::irr::u32,::irr::video::SColor const &,bool,::irr::f32 ) const)(&::irr::scene::IGeometryCreator::createCylinderMesh) )
            , ( bp::arg("radius"), bp::arg("length"), bp::arg("tesselation"), bp::arg("color")=irr::video::SColor(4294967295u), bp::arg("closeTop")=(bool)(true), bp::arg("oblique")=0.0f )
                /* undefined call policies */ )    
        .def( 
            "createHillPlaneMesh"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IGeometryCreator::* )( ::irr::core::dimension2d< float > const &,::irr::core::dimension2d< unsigned int > const &,::irr::video::SMaterial *,::irr::f32,::irr::core::dimension2d< float > const &,::irr::core::dimension2d< float > const & ) const)(&::irr::scene::IGeometryCreator::createHillPlaneMesh) )
            , ( bp::arg("tileSize"), bp::arg("tileCount"), bp::arg("material"), bp::arg("hillHeight"), bp::arg("countHills"), bp::arg("textureRepeatCount") )
                /* undefined call policies */ )    
        .def( 
            "createPlaneMesh"
            , (::irr::scene::IMesh * ( ::irr::scene::IGeometryCreator::* )( ::irr::core::dimension2d< float > const &,::irr::core::dimension2d< unsigned int > const &,::irr::video::SMaterial *,::irr::core::dimension2d< float > const & ) const)( &::irr::scene::IGeometryCreator::createPlaneMesh )
            , ( bp::arg("tileSize"), bp::arg("tileCount"), bp::arg("material"), bp::arg("textureRepeatCount") )
                /* undefined call policies */ )    
        .def( 
            "createSphereMesh"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IGeometryCreator::* )( ::irr::f32,::irr::u32,::irr::u32 ) const)(&::irr::scene::IGeometryCreator::createSphereMesh) )
            , ( bp::arg("radius")=5.0e+0f, bp::arg("polyCountX")=(::irr::u32)(16), bp::arg("polyCountY")=(::irr::u32)(16) )
                /* undefined call policies */ )    
        .def( 
            "createTerrainMesh"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IGeometryCreator::* )( ::irr::video::IImage *,::irr::video::IImage *,::irr::core::dimension2d< float > const &,::irr::f32,::irr::video::IVideoDriver *,::irr::core::dimension2d< unsigned int > const &,bool ) const)(&::irr::scene::IGeometryCreator::createTerrainMesh) )
            , ( bp::arg("texture"), bp::arg("heightmap"), bp::arg("stretchSize"), bp::arg("maxHeight"), bp::arg("driver"), bp::arg("defaultVertexBlockSize"), bp::arg("debugBorders")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "createVolumeLightMesh"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IGeometryCreator::* )( ::irr::u32 const,::irr::u32 const,::irr::video::SColor const,::irr::video::SColor const,::irr::f32 const,::irr::core::vector3df const & ) const)(&::irr::scene::IGeometryCreator::createVolumeLightMesh) )
            , ( bp::arg("subdivideU")=(::irr::u32 const)(32), bp::arg("subdivideV")=(::irr::u32 const)(32), bp::arg("footColor")=4294967295u, bp::arg("tailColor")=4294967295u, bp::arg("lpDistance")=8.0e+0f, bp::arg("lightDim")=irr::core::vector3d<float>(1.0e+0f, 1.2000000476837158203125e+0f, 1.0e+0f) )
                /* undefined call policies */ )    
        .def( 
            "setDebugName"
            , (void ( IGeometryCreator_wrapper::* )( ::irr::c8 const * ) )(&IGeometryCreator_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< ILightManager_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "ILightManager" )    
        .def( 
            "OnNodePostRender"
            , bp::pure_virtual( (void ( ::irr::scene::ILightManager::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ILightManager::OnNodePostRender) )
            , ( bp::arg("node") ) )    
        .def( 
            "OnNodePreRender"
            , bp::pure_virtual( (void ( ::irr::scene::ILightManager::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ILightManager::OnNodePreRender) )
            , ( bp::arg("node") ) )    
        .def( 
            "OnPostRender"
            , bp::pure_virtual( (void ( ::irr::scene::ILightManager::* )(  ) )(&::irr::scene::ILightManager::OnPostRender) ) )    
        .def( 
            "OnPreRender"
            , bp::pure_virtual( (void ( ::irr::scene::ILightManager::* )( ::irr::core::array< irr::scene::ILightSceneNode*, irr::core::irrAllocator< irr::scene::ILightSceneNode* > > & ) )(&::irr::scene::ILightManager::OnPreRender) )
            , ( bp::arg("lightList") ) )    
        .def( 
            "OnRenderPassPostRender"
            , bp::pure_virtual( (void ( ::irr::scene::ILightManager::* )( ::irr::scene::E_SCENE_NODE_RENDER_PASS ) )(&::irr::scene::ILightManager::OnRenderPassPostRender) )
            , ( bp::arg("renderPass") ) )    
        .def( 
            "OnRenderPassPreRender"
            , bp::pure_virtual( (void ( ::irr::scene::ILightManager::* )( ::irr::scene::E_SCENE_NODE_RENDER_PASS ) )(&::irr::scene::ILightManager::OnRenderPassPreRender) )
            , ( bp::arg("renderPass") ) )    
        .def( 
            "setDebugName"
            , (void ( ILightManager_wrapper::* )( ::irr::c8 const * ) )(&ILightManager_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< ILightSceneNode_wrapper, bp::bases< irr::scene::ISceneNode >, boost::noncopyable >( "ILightSceneNode", bp::init< irr::scene::ISceneNode *, irr::scene::ISceneManager *, irr::s32, bp::optional< irr::core::vector3df const & > >(( bp::arg("parent"), bp::arg("mgr"), bp::arg("id"), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f) )) )    
        .def( 
            "enableCastShadow"
            , bp::pure_virtual( (void ( ::irr::scene::ILightSceneNode::* )( bool ) )(&::irr::scene::ILightSceneNode::enableCastShadow) )
            , ( bp::arg("shadow")=(bool)(true) ) )    
        .def( 
            "getCastShadow"
            , bp::pure_virtual( (bool ( ::irr::scene::ILightSceneNode::* )(  ) const)(&::irr::scene::ILightSceneNode::getCastShadow) ) )    
        .def( 
            "getLightData"
            , bp::pure_virtual( (::irr::video::SLight const & ( ::irr::scene::ILightSceneNode::* )(  ) const)(&::irr::scene::ILightSceneNode::getLightData) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getLightData"
            , bp::pure_virtual( (::irr::video::SLight & ( ::irr::scene::ILightSceneNode::* )(  ) )(&::irr::scene::ILightSceneNode::getLightData) )
                /* undefined call policies */ )    
        .def( 
            "getLightType"
            , bp::pure_virtual( (::irr::video::E_LIGHT_TYPE ( ::irr::scene::ILightSceneNode::* )(  ) const)(&::irr::scene::ILightSceneNode::getLightType) ) )    
        .def( 
            "getRadius"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::ILightSceneNode::* )(  ) const)(&::irr::scene::ILightSceneNode::getRadius) ) )    
        .def( 
            "setLightData"
            , bp::pure_virtual( (void ( ::irr::scene::ILightSceneNode::* )( ::irr::video::SLight const & ) )(&::irr::scene::ILightSceneNode::setLightData) )
            , ( bp::arg("light") ) )    
        .def( 
            "setLightType"
            , bp::pure_virtual( (void ( ::irr::scene::ILightSceneNode::* )( ::irr::video::E_LIGHT_TYPE ) )(&::irr::scene::ILightSceneNode::setLightType) )
            , ( bp::arg("type") ) )    
        .def( 
            "setRadius"
            , bp::pure_virtual( (void ( ::irr::scene::ILightSceneNode::* )( ::irr::f32 ) )(&::irr::scene::ILightSceneNode::setRadius) )
            , ( bp::arg("radius") ) )    
        .def( 
            "setVisible"
            , bp::pure_virtual( (void ( ::irr::scene::ILightSceneNode::* )( bool ) )(&::irr::scene::ILightSceneNode::setVisible) )
            , ( bp::arg("isVisible") ) )    
        .def( 
            "OnAnimate"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::OnAnimate)
            , (void ( ILightSceneNode_wrapper::* )( ::irr::u32 ) )(&ILightSceneNode_wrapper::default_OnAnimate)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "OnRegisterSceneNode"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::OnRegisterSceneNode)
            , (void ( ILightSceneNode_wrapper::* )(  ) )(&ILightSceneNode_wrapper::default_OnRegisterSceneNode) )    
        .def( 
            "addAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::addAnimator)
            , (void ( ILightSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&ILightSceneNode_wrapper::default_addAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::addChild)
            , (void ( ILightSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&ILightSceneNode_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "clone"
            , (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNode::clone)
            , (::irr::scene::ISceneNode * ( ILightSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&ILightSceneNode_wrapper::default_clone)
            , ( bp::arg("newParent")=bp::object(), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "cloneMembers"
            , (void ( ILightSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&ILightSceneNode_wrapper::cloneMembers)
            , ( bp::arg("toCopyFrom"), bp::arg("newManager") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::scene::ISceneNode::deserializeAttributes)
            , (void ( ILightSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&ILightSceneNode_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getAbsolutePosition"
            , (::irr::core::vector3df ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsolutePosition)
            , (::irr::core::vector3df ( ILightSceneNode_wrapper::* )(  ) const)(&ILightSceneNode_wrapper::default_getAbsolutePosition) )    
        .def( 
            "getAbsoluteTransformation"
            , (::irr::core::matrix4 const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsoluteTransformation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getID)
            , (::irr::s32 ( ILightSceneNode_wrapper::* )(  ) const)(&ILightSceneNode_wrapper::default_getID) )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::getMaterial)
            , ( bp::arg("num") )
                /* undefined call policies */ )    
        .def( 
            "getMaterialCount"
            , (::irr::u32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getMaterialCount)
            , (::irr::u32 ( ILightSceneNode_wrapper::* )(  ) const)(&ILightSceneNode_wrapper::default_getMaterialCount) )    
        .def( 
            "getName"
            , (::irr::c8 const * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getName)
            , (::irr::c8 const * ( ILightSceneNode_wrapper::* )(  ) const)(&ILightSceneNode_wrapper::default_getName) )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRelativeTransformation"
            , (::irr::core::matrix4 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRelativeTransformation)
            , (::irr::core::matrix4 ( ILightSceneNode_wrapper::* )(  ) const)(&ILightSceneNode_wrapper::default_getRelativeTransformation) )    
        .def( 
            "getRotation"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRotation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getScale"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSceneManager"
            , (::irr::scene::ISceneManager * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getSceneManager)
            , (::irr::scene::ISceneManager * ( ILightSceneNode_wrapper::* )(  ) const)(&ILightSceneNode_wrapper::default_getSceneManager)
                /* undefined call policies */ )    
        .def( 
            "getTransformedBoundingBox"
            , (::irr::core::aabbox3d< float > const ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTransformedBoundingBox)
            , (::irr::core::aabbox3d< float > const ( ILightSceneNode_wrapper::* )(  ) const)(&ILightSceneNode_wrapper::default_getTransformedBoundingBox) )    
        .def( 
            "getTriangleSelector"
            , (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTriangleSelector)
            , (::irr::scene::ITriangleSelector * ( ILightSceneNode_wrapper::* )(  ) const)(&ILightSceneNode_wrapper::default_getTriangleSelector)
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_TYPE ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getType)
            , (::irr::scene::ESCENE_NODE_TYPE ( ILightSceneNode_wrapper::* )(  ) const)(&ILightSceneNode_wrapper::default_getType) )    
        .def( 
            "isTrulyVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isTrulyVisible)
            , (bool ( ILightSceneNode_wrapper::* )(  ) const)(&ILightSceneNode_wrapper::default_isTrulyVisible) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isVisible)
            , (bool ( ILightSceneNode_wrapper::* )(  ) const)(&ILightSceneNode_wrapper::default_isVisible) )    
        .def( 
            "remove"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::remove)
            , (void ( ILightSceneNode_wrapper::* )(  ) )(&ILightSceneNode_wrapper::default_remove) )    
        .def( 
            "removeAll"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAll)
            , (void ( ILightSceneNode_wrapper::* )(  ) )(&ILightSceneNode_wrapper::default_removeAll) )    
        .def( 
            "removeAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::removeAnimator)
            , (void ( ILightSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&ILightSceneNode_wrapper::default_removeAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "removeAnimators"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAnimators)
            , (void ( ILightSceneNode_wrapper::* )(  ) )(&ILightSceneNode_wrapper::default_removeAnimators) )    
        .def( 
            "removeChild"
            , (bool ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::removeChild)
            , (bool ( ILightSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&ILightSceneNode_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "render"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::render) ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::scene::ISceneNode::serializeAttributes)
            , (void ( ILightSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&ILightSceneNode_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugDataVisible"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setDebugDataVisible)
            , (void ( ILightSceneNode_wrapper::* )( ::irr::s32 ) )(&ILightSceneNode_wrapper::default_setDebugDataVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "setDebugName"
            , (void ( ILightSceneNode_wrapper::* )( ::irr::c8 const * ) )(&ILightSceneNode_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setID"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setID)
            , (void ( ILightSceneNode_wrapper::* )( ::irr::s32 ) )(&ILightSceneNode_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::ISceneNode::setName)
            , (void ( ILightSceneNode_wrapper::* )( ::irr::c8 const * ) )(&ILightSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::stringc const & ) )(&::irr::scene::ISceneNode::setName)
            , (void ( ILightSceneNode_wrapper::* )( ::irr::core::stringc const & ) )(&ILightSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setParent"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::setParent)
            , (void ( ILightSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&ILightSceneNode_wrapper::default_setParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "setPosition"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setPosition)
            , (void ( ILightSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&ILightSceneNode_wrapper::default_setPosition)
            , ( bp::arg("newpos") ) )    
        .def( 
            "setRotation"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setRotation)
            , (void ( ILightSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&ILightSceneNode_wrapper::default_setRotation)
            , ( bp::arg("rotation") ) )    
        .def( 
            "setScale"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setScale)
            , (void ( ILightSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&ILightSceneNode_wrapper::default_setScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "setSceneManager"
            , (void ( ILightSceneNode_wrapper::* )( ::irr::scene::ISceneManager * ) )(&ILightSceneNode_wrapper::setSceneManager)
            , ( bp::arg("newManager") ) )    
        .def( 
            "setTriangleSelector"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::ISceneNode::setTriangleSelector)
            , (void ( ILightSceneNode_wrapper::* )( ::irr::scene::ITriangleSelector * ) )(&ILightSceneNode_wrapper::default_setTriangleSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::updateAbsolutePosition)
            , (void ( ILightSceneNode_wrapper::* )(  ) )(&ILightSceneNode_wrapper::default_updateAbsolutePosition) );

    bp::class_< IMeshCache_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IMeshCache" )    
        .def( 
            "addMesh"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshCache::* )( ::irr::io::path const &,::irr::scene::IAnimatedMesh * ) )(&::irr::scene::IMeshCache::addMesh) )
            , ( bp::arg("name"), bp::arg("mesh") ) )    
        .def( 
            "clear"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshCache::* )(  ) )(&::irr::scene::IMeshCache::clear) ) )    
        .def( 
            "clearUnusedMeshes"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshCache::* )(  ) )(&::irr::scene::IMeshCache::clearUnusedMeshes) ) )    
        .def( 
            "getMeshByFilename"
            , (::irr::scene::IAnimatedMesh * ( ::irr::scene::IMeshCache::* )( ::irr::io::path const & ) )( &::irr::scene::IMeshCache::getMeshByFilename )
            , ( bp::arg("filename") )
                /* undefined call policies */ )    
        .def( 
            "getMeshByIndex"
            , bp::pure_virtual( (::irr::scene::IAnimatedMesh * ( ::irr::scene::IMeshCache::* )( ::irr::u32 ) )(&::irr::scene::IMeshCache::getMeshByIndex) )
            , ( bp::arg("index") )
                /* undefined call policies */ )    
        .def( 
            "getMeshByName"
            , bp::pure_virtual( (::irr::scene::IAnimatedMesh * ( ::irr::scene::IMeshCache::* )( ::irr::io::path const & ) )(&::irr::scene::IMeshCache::getMeshByName) )
            , ( bp::arg("name") )
                /* undefined call policies */ )    
        .def( 
            "getMeshCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IMeshCache::* )(  ) const)(&::irr::scene::IMeshCache::getMeshCount) ) )    
        .def( 
            "getMeshFilename"
            , (::irr::io::path const & ( ::irr::scene::IMeshCache::* )( ::irr::u32 ) const)( &::irr::scene::IMeshCache::getMeshFilename )
            , ( bp::arg("index") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMeshFilename"
            , (::irr::io::path const & ( ::irr::scene::IMeshCache::* )( ::irr::scene::IAnimatedMesh const * const ) const)( &::irr::scene::IMeshCache::getMeshFilename )
            , ( bp::arg("mesh") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMeshFilename"
            , (::irr::io::path const & ( ::irr::scene::IMeshCache::* )( ::irr::scene::IMesh const * const ) const)( &::irr::scene::IMeshCache::getMeshFilename )
            , ( bp::arg("mesh") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMeshIndex"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::IMeshCache::* )( ::irr::scene::IAnimatedMesh const * const ) const)(&::irr::scene::IMeshCache::getMeshIndex) )
            , ( bp::arg("mesh") ) )    
        .def( 
            "getMeshIndex"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::IMeshCache::* )( ::irr::scene::IMesh const * const ) const)(&::irr::scene::IMeshCache::getMeshIndex) )
            , ( bp::arg("mesh") ) )    
        .def( 
            "getMeshName"
            , bp::pure_virtual( (::irr::io::SNamedPath const & ( ::irr::scene::IMeshCache::* )( ::irr::u32 ) const)(&::irr::scene::IMeshCache::getMeshName) )
            , ( bp::arg("index") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMeshName"
            , bp::pure_virtual( (::irr::io::SNamedPath const & ( ::irr::scene::IMeshCache::* )( ::irr::scene::IAnimatedMesh const * const ) const)(&::irr::scene::IMeshCache::getMeshName) )
            , ( bp::arg("mesh") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMeshName"
            , bp::pure_virtual( (::irr::io::SNamedPath const & ( ::irr::scene::IMeshCache::* )( ::irr::scene::IMesh const * const ) const)(&::irr::scene::IMeshCache::getMeshName) )
            , ( bp::arg("mesh") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "isMeshLoaded"
            , bp::pure_virtual( (bool ( ::irr::scene::IMeshCache::* )( ::irr::io::path const & ) )(&::irr::scene::IMeshCache::isMeshLoaded) )
            , ( bp::arg("name") ) )    
        .def( 
            "removeMesh"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshCache::* )( ::irr::scene::IAnimatedMesh const * const ) )(&::irr::scene::IMeshCache::removeMesh) )
            , ( bp::arg("mesh") ) )    
        .def( 
            "removeMesh"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshCache::* )( ::irr::scene::IMesh const * const ) )(&::irr::scene::IMeshCache::removeMesh) )
            , ( bp::arg("mesh") ) )    
        .def( 
            "renameMesh"
            , bp::pure_virtual( (bool ( ::irr::scene::IMeshCache::* )( ::irr::u32,::irr::io::path const & ) )(&::irr::scene::IMeshCache::renameMesh) )
            , ( bp::arg("index"), bp::arg("name") ) )    
        .def( 
            "renameMesh"
            , bp::pure_virtual( (bool ( ::irr::scene::IMeshCache::* )( ::irr::scene::IAnimatedMesh const * const,::irr::io::path const & ) )(&::irr::scene::IMeshCache::renameMesh) )
            , ( bp::arg("mesh"), bp::arg("name") ) )    
        .def( 
            "renameMesh"
            , bp::pure_virtual( (bool ( ::irr::scene::IMeshCache::* )( ::irr::scene::IMesh const * const,::irr::io::path const & ) )(&::irr::scene::IMeshCache::renameMesh) )
            , ( bp::arg("mesh"), bp::arg("name") ) )    
        .def( 
            "setMeshFilename"
            , (bool ( ::irr::scene::IMeshCache::* )( ::irr::u32,::irr::io::path const & ) )( &::irr::scene::IMeshCache::setMeshFilename )
            , ( bp::arg("index"), bp::arg("filename") ) )    
        .def( 
            "setMeshFilename"
            , (bool ( ::irr::scene::IMeshCache::* )( ::irr::scene::IAnimatedMesh const * const,::irr::io::path const & ) )( &::irr::scene::IMeshCache::setMeshFilename )
            , ( bp::arg("mesh"), bp::arg("filename") ) )    
        .def( 
            "setMeshFilename"
            , (bool ( ::irr::scene::IMeshCache::* )( ::irr::scene::IMesh const * const,::irr::io::path const & ) )( &::irr::scene::IMeshCache::setMeshFilename )
            , ( bp::arg("mesh"), bp::arg("filename") ) )    
        .def( 
            "setDebugName"
            , (void ( IMeshCache_wrapper::* )( ::irr::c8 const * ) )(&IMeshCache_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IMeshLoader_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IMeshLoader" )    
        .def( 
            "createMesh"
            , bp::pure_virtual( (::irr::scene::IAnimatedMesh * ( ::irr::scene::IMeshLoader::* )( ::irr::io::IReadFile * ) )(&::irr::scene::IMeshLoader::createMesh) )
            , ( bp::arg("file") )
                /* undefined call policies */ )    
        .def( 
            "isALoadableFileExtension"
            , bp::pure_virtual( (bool ( ::irr::scene::IMeshLoader::* )( ::irr::io::path const & ) const)(&::irr::scene::IMeshLoader::isALoadableFileExtension) )
            , ( bp::arg("filename") ) )    
        .def( 
            "setDebugName"
            , (void ( IMeshLoader_wrapper::* )( ::irr::c8 const * ) )(&IMeshLoader_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IMeshManipulator_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IMeshManipulator" )    
        .def( 
            "apply"
            , (bool ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::SVertexPositionTransformManipulator const &,::irr::scene::IMeshBuffer *,bool ) const)( &::irr::scene::IMeshManipulator::apply )
            , ( bp::arg("func"), bp::arg("buffer"), bp::arg("boundingBoxUpdate")=(bool)(false) ) )    
        .def( 
            "apply"
            , (bool ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::SVertexTCoordsScaleManipulator const &,::irr::scene::IMeshBuffer *,bool ) const)( &::irr::scene::IMeshManipulator::apply )
            , ( bp::arg("func"), bp::arg("buffer"), bp::arg("boundingBoxUpdate")=(bool)(false) ) )    
        .def( 
            "apply"
            , (bool ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::SVertexPositionScaleManipulator const &,::irr::scene::IMeshBuffer *,bool ) const)( &::irr::scene::IMeshManipulator::apply )
            , ( bp::arg("func"), bp::arg("buffer"), bp::arg("boundingBoxUpdate")=(bool)(false) ) )    
        .def( 
            "apply"
            , (bool ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::SVertexPositionTransformManipulator const &,::irr::scene::IMesh *,bool ) const)( &::irr::scene::IMeshManipulator::apply )
            , ( bp::arg("func"), bp::arg("mesh"), bp::arg("boundingBoxUpdate")=(bool)(false) ) )    
        .def( 
            "apply"
            , (bool ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::SVertexTCoordsScaleManipulator const &,::irr::scene::IMesh *,bool ) const)( &::irr::scene::IMeshManipulator::apply )
            , ( bp::arg("func"), bp::arg("mesh"), bp::arg("boundingBoxUpdate")=(bool)(false) ) )    
        .def( 
            "apply"
            , (bool ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::SVertexPositionScaleManipulator const &,::irr::scene::IMesh *,bool ) const)( &::irr::scene::IMeshManipulator::apply )
            , ( bp::arg("func"), bp::arg("mesh"), bp::arg("boundingBoxUpdate")=(bool)(false) ) )    
        .def( 
            "apply"
            , (bool ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::SVertexColorSetManipulator const &,::irr::scene::IMesh *,bool ) const)( &::irr::scene::IMeshManipulator::apply )
            , ( bp::arg("func"), bp::arg("mesh"), bp::arg("boundingBoxUpdate")=(bool)(false) ) )    
        .def( 
            "apply"
            , (bool ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::SVertexColorSetAlphaManipulator const &,::irr::scene::IMesh *,bool ) const)( &::irr::scene::IMeshManipulator::apply )
            , ( bp::arg("func"), bp::arg("mesh"), bp::arg("boundingBoxUpdate")=(bool)(false) ) )    
        .def( 
            "createAnimatedMesh"
            , bp::pure_virtual( (::irr::scene::IAnimatedMesh * ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh *,::irr::scene::E_ANIMATED_MESH_TYPE ) const)(&::irr::scene::IMeshManipulator::createAnimatedMesh) )
            , ( bp::arg("mesh"), bp::arg("type")=::irr::scene::EAMT_UNKNOWN )
                /* undefined call policies */ )    
        .def( 
            "createMeshCopy"
            , bp::pure_virtual( (::irr::scene::SMesh * ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh * ) const)(&::irr::scene::IMeshManipulator::createMeshCopy) )
            , ( bp::arg("mesh") )
                /* undefined call policies */ )    
        .def( 
            "createMeshUniquePrimitives"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh * ) const)(&::irr::scene::IMeshManipulator::createMeshUniquePrimitives) )
            , ( bp::arg("mesh") )
                /* undefined call policies */ )    
        .def( 
            "createMeshWelded"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh *,::irr::f32 ) const)(&::irr::scene::IMeshManipulator::createMeshWelded) )
            , ( bp::arg("mesh"), bp::arg("tolerance")=irr::core::ROUNDING_ERROR_f32 )
                /* undefined call policies */ )    
        .def( 
            "createMeshWith1TCoords"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh * ) const)(&::irr::scene::IMeshManipulator::createMeshWith1TCoords) )
            , ( bp::arg("mesh") )
                /* undefined call policies */ )    
        .def( 
            "createMeshWith2TCoords"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh * ) const)(&::irr::scene::IMeshManipulator::createMeshWith2TCoords) )
            , ( bp::arg("mesh") )
                /* undefined call policies */ )    
        .def( 
            "createMeshWithTangents"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh *,bool,bool,bool,bool ) const)(&::irr::scene::IMeshManipulator::createMeshWithTangents) )
            , ( bp::arg("mesh"), bp::arg("recalculateNormals")=(bool)(false), bp::arg("smooth")=(bool)(false), bp::arg("angleWeighted")=(bool)(false), bp::arg("recalculateTangents")=(bool)(true) )
                /* undefined call policies */ )    
        .def( 
            "flipSurfaces"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh * ) const)(&::irr::scene::IMeshManipulator::flipSurfaces) )
            , ( bp::arg("mesh") ) )    
        .def( 
            "getPolyCount"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh * ) const)(&::irr::scene::IMeshManipulator::getPolyCount) )
            , ( bp::arg("mesh") ) )    
        .def( 
            "getPolyCount"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IAnimatedMesh * ) const)(&::irr::scene::IMeshManipulator::getPolyCount) )
            , ( bp::arg("mesh") ) )    
        .def( 
            "makePlanarTextureMapping"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh *,::irr::f32 ) const)(&::irr::scene::IMeshManipulator::makePlanarTextureMapping) )
            , ( bp::arg("mesh"), bp::arg("resolution")=1.000000047497451305389404296875e-3f ) )    
        .def( 
            "makePlanarTextureMapping"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMeshBuffer *,::irr::f32 ) const)(&::irr::scene::IMeshManipulator::makePlanarTextureMapping) )
            , ( bp::arg("meshbuffer"), bp::arg("resolution")=1.000000047497451305389404296875e-3f ) )    
        .def( 
            "makePlanarTextureMapping"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMeshBuffer *,::irr::f32,::irr::f32,::irr::u8,::irr::core::vector3df const & ) const)(&::irr::scene::IMeshManipulator::makePlanarTextureMapping) )
            , ( bp::arg("buffer"), bp::arg("resolutionS"), bp::arg("resolutionT"), bp::arg("axis"), bp::arg("offset") ) )    
        .def( 
            "recalculateNormals"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh *,bool,bool ) const)(&::irr::scene::IMeshManipulator::recalculateNormals) )
            , ( bp::arg("mesh"), bp::arg("smooth")=(bool)(false), bp::arg("angleWeighted")=(bool)(false) ) )    
        .def( 
            "recalculateNormals"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMeshBuffer *,bool,bool ) const)(&::irr::scene::IMeshManipulator::recalculateNormals) )
            , ( bp::arg("buffer"), bp::arg("smooth")=(bool)(false), bp::arg("angleWeighted")=(bool)(false) ) )    
        .def( 
            "recalculateTangents"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh *,bool,bool,bool ) const)(&::irr::scene::IMeshManipulator::recalculateTangents) )
            , ( bp::arg("mesh"), bp::arg("recalculateNormals")=(bool)(false), bp::arg("smooth")=(bool)(false), bp::arg("angleWeighted")=(bool)(false) ) )    
        .def( 
            "scale"
            , (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh *,::irr::core::vector3df const & ) const)( &::irr::scene::IMeshManipulator::scale )
            , ( bp::arg("mesh"), bp::arg("factor") ) )    
        .def( 
            "scale"
            , (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMeshBuffer *,::irr::core::vector3df const & ) const)( &::irr::scene::IMeshManipulator::scale )
            , ( bp::arg("buffer"), bp::arg("factor") ) )    
        .def( 
            "scaleMesh"
            , (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh *,::irr::core::vector3df const & ) const)( &::irr::scene::IMeshManipulator::scaleMesh )
            , ( bp::arg("mesh"), bp::arg("factor") ) )    
        .def( 
            "scaleTCoords"
            , (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh *,::irr::core::vector2df const &,::irr::u32 ) const)( &::irr::scene::IMeshManipulator::scaleTCoords )
            , ( bp::arg("mesh"), bp::arg("factor"), bp::arg("level")=(::irr::u32)(1) ) )    
        .def( 
            "scaleTCoords"
            , (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMeshBuffer *,::irr::core::vector2df const &,::irr::u32 ) const)( &::irr::scene::IMeshManipulator::scaleTCoords )
            , ( bp::arg("buffer"), bp::arg("factor"), bp::arg("level")=(::irr::u32)(1) ) )    
        .def( 
            "setVertexColorAlpha"
            , (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh *,::irr::s32 ) const)( &::irr::scene::IMeshManipulator::setVertexColorAlpha )
            , ( bp::arg("mesh"), bp::arg("alpha") ) )    
        .def( 
            "setVertexColors"
            , (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh *,::irr::video::SColor ) const)( &::irr::scene::IMeshManipulator::setVertexColors )
            , ( bp::arg("mesh"), bp::arg("color") ) )    
        .def( 
            "transform"
            , (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh *,::irr::core::matrix4 const & ) const)( &::irr::scene::IMeshManipulator::transform )
            , ( bp::arg("mesh"), bp::arg("m") ) )    
        .def( 
            "transform"
            , (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMeshBuffer *,::irr::core::matrix4 const & ) const)( &::irr::scene::IMeshManipulator::transform )
            , ( bp::arg("buffer"), bp::arg("m") ) )    
        .def( 
            "transformMesh"
            , (void ( ::irr::scene::IMeshManipulator::* )( ::irr::scene::IMesh *,::irr::core::matrix4 const & ) const)(&::irr::scene::IMeshManipulator::transformMesh)
            , (void ( IMeshManipulator_wrapper::* )( ::irr::scene::IMesh *,::irr::core::matrix4 const & ) const)(&IMeshManipulator_wrapper::default_transformMesh)
            , ( bp::arg("mesh"), bp::arg("m") ) )    
        .def( 
            "setDebugName"
            , (void ( IMeshManipulator_wrapper::* )( ::irr::c8 const * ) )(&IMeshManipulator_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IMeshSceneNode_wrapper, bp::bases< irr::scene::ISceneNode >, boost::noncopyable >( "IMeshSceneNode", bp::init< irr::scene::ISceneNode *, irr::scene::ISceneManager *, irr::s32, bp::optional< irr::core::vector3df const &, irr::core::vector3df const &, irr::core::vector3df const & > >(( bp::arg("parent"), bp::arg("mgr"), bp::arg("id"), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )) )    
        .def( 
            "getMesh"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IMeshSceneNode::* )(  ) )(&::irr::scene::IMeshSceneNode::getMesh) )
                /* undefined call policies */ )    
        .def( 
            "isReadOnlyMaterials"
            , bp::pure_virtual( (bool ( ::irr::scene::IMeshSceneNode::* )(  ) const)(&::irr::scene::IMeshSceneNode::isReadOnlyMaterials) ) )    
        .def( 
            "setMesh"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshSceneNode::* )( ::irr::scene::IMesh * ) )(&::irr::scene::IMeshSceneNode::setMesh) )
            , ( bp::arg("mesh") ) )    
        .def( 
            "setReadOnlyMaterials"
            , bp::pure_virtual( (void ( ::irr::scene::IMeshSceneNode::* )( bool ) )(&::irr::scene::IMeshSceneNode::setReadOnlyMaterials) )
            , ( bp::arg("readonly") ) )    
        .def( 
            "OnAnimate"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::OnAnimate)
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::u32 ) )(&IMeshSceneNode_wrapper::default_OnAnimate)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "OnRegisterSceneNode"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::OnRegisterSceneNode)
            , (void ( IMeshSceneNode_wrapper::* )(  ) )(&IMeshSceneNode_wrapper::default_OnRegisterSceneNode) )    
        .def( 
            "addAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::addAnimator)
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IMeshSceneNode_wrapper::default_addAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::addChild)
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IMeshSceneNode_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "clone"
            , (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNode::clone)
            , (::irr::scene::ISceneNode * ( IMeshSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IMeshSceneNode_wrapper::default_clone)
            , ( bp::arg("newParent")=bp::object(), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "cloneMembers"
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IMeshSceneNode_wrapper::cloneMembers)
            , ( bp::arg("toCopyFrom"), bp::arg("newManager") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::scene::ISceneNode::deserializeAttributes)
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IMeshSceneNode_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getAbsolutePosition"
            , (::irr::core::vector3df ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsolutePosition)
            , (::irr::core::vector3df ( IMeshSceneNode_wrapper::* )(  ) const)(&IMeshSceneNode_wrapper::default_getAbsolutePosition) )    
        .def( 
            "getAbsoluteTransformation"
            , (::irr::core::matrix4 const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsoluteTransformation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getID)
            , (::irr::s32 ( IMeshSceneNode_wrapper::* )(  ) const)(&IMeshSceneNode_wrapper::default_getID) )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::getMaterial)
            , ( bp::arg("num") )
                /* undefined call policies */ )    
        .def( 
            "getMaterialCount"
            , (::irr::u32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getMaterialCount)
            , (::irr::u32 ( IMeshSceneNode_wrapper::* )(  ) const)(&IMeshSceneNode_wrapper::default_getMaterialCount) )    
        .def( 
            "getName"
            , (::irr::c8 const * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getName)
            , (::irr::c8 const * ( IMeshSceneNode_wrapper::* )(  ) const)(&IMeshSceneNode_wrapper::default_getName) )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRelativeTransformation"
            , (::irr::core::matrix4 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRelativeTransformation)
            , (::irr::core::matrix4 ( IMeshSceneNode_wrapper::* )(  ) const)(&IMeshSceneNode_wrapper::default_getRelativeTransformation) )    
        .def( 
            "getRotation"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRotation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getScale"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSceneManager"
            , (::irr::scene::ISceneManager * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getSceneManager)
            , (::irr::scene::ISceneManager * ( IMeshSceneNode_wrapper::* )(  ) const)(&IMeshSceneNode_wrapper::default_getSceneManager)
                /* undefined call policies */ )    
        .def( 
            "getTransformedBoundingBox"
            , (::irr::core::aabbox3d< float > const ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTransformedBoundingBox)
            , (::irr::core::aabbox3d< float > const ( IMeshSceneNode_wrapper::* )(  ) const)(&IMeshSceneNode_wrapper::default_getTransformedBoundingBox) )    
        .def( 
            "getTriangleSelector"
            , (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTriangleSelector)
            , (::irr::scene::ITriangleSelector * ( IMeshSceneNode_wrapper::* )(  ) const)(&IMeshSceneNode_wrapper::default_getTriangleSelector)
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_TYPE ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getType)
            , (::irr::scene::ESCENE_NODE_TYPE ( IMeshSceneNode_wrapper::* )(  ) const)(&IMeshSceneNode_wrapper::default_getType) )    
        .def( 
            "isTrulyVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isTrulyVisible)
            , (bool ( IMeshSceneNode_wrapper::* )(  ) const)(&IMeshSceneNode_wrapper::default_isTrulyVisible) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isVisible)
            , (bool ( IMeshSceneNode_wrapper::* )(  ) const)(&IMeshSceneNode_wrapper::default_isVisible) )    
        .def( 
            "remove"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::remove)
            , (void ( IMeshSceneNode_wrapper::* )(  ) )(&IMeshSceneNode_wrapper::default_remove) )    
        .def( 
            "removeAll"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAll)
            , (void ( IMeshSceneNode_wrapper::* )(  ) )(&IMeshSceneNode_wrapper::default_removeAll) )    
        .def( 
            "removeAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::removeAnimator)
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IMeshSceneNode_wrapper::default_removeAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "removeAnimators"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAnimators)
            , (void ( IMeshSceneNode_wrapper::* )(  ) )(&IMeshSceneNode_wrapper::default_removeAnimators) )    
        .def( 
            "removeChild"
            , (bool ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::removeChild)
            , (bool ( IMeshSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IMeshSceneNode_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "render"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::render) ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::scene::ISceneNode::serializeAttributes)
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IMeshSceneNode_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugDataVisible"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setDebugDataVisible)
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::s32 ) )(&IMeshSceneNode_wrapper::default_setDebugDataVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "setDebugName"
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IMeshSceneNode_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setID"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setID)
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::s32 ) )(&IMeshSceneNode_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IMeshSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::stringc const & ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::core::stringc const & ) )(&IMeshSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setParent"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::setParent)
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IMeshSceneNode_wrapper::default_setParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "setPosition"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setPosition)
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IMeshSceneNode_wrapper::default_setPosition)
            , ( bp::arg("newpos") ) )    
        .def( 
            "setRotation"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setRotation)
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IMeshSceneNode_wrapper::default_setRotation)
            , ( bp::arg("rotation") ) )    
        .def( 
            "setScale"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setScale)
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IMeshSceneNode_wrapper::default_setScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "setSceneManager"
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::scene::ISceneManager * ) )(&IMeshSceneNode_wrapper::setSceneManager)
            , ( bp::arg("newManager") ) )    
        .def( 
            "setTriangleSelector"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::ISceneNode::setTriangleSelector)
            , (void ( IMeshSceneNode_wrapper::* )( ::irr::scene::ITriangleSelector * ) )(&IMeshSceneNode_wrapper::default_setTriangleSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::scene::ISceneNode::* )( bool ) )(&::irr::scene::ISceneNode::setVisible)
            , (void ( IMeshSceneNode_wrapper::* )( bool ) )(&IMeshSceneNode_wrapper::default_setVisible)
            , ( bp::arg("isVisible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::updateAbsolutePosition)
            , (void ( IMeshSceneNode_wrapper::* )(  ) )(&IMeshSceneNode_wrapper::default_updateAbsolutePosition) );

    bp::class_< IMeshWriter_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IMeshWriter" )    
        .def( 
            "getType"
            , bp::pure_virtual( (::irr::scene::EMESH_WRITER_TYPE ( ::irr::scene::IMeshWriter::* )(  ) const)(&::irr::scene::IMeshWriter::getType) ) )    
        .def( 
            "writeMesh"
            , bp::pure_virtual( (bool ( ::irr::scene::IMeshWriter::* )( ::irr::io::IWriteFile *,::irr::scene::IMesh *,::irr::s32 ) )(&::irr::scene::IMeshWriter::writeMesh) )
            , ( bp::arg("file"), bp::arg("mesh"), bp::arg("flags")=(::irr::s32)(::irr::s32(::irr::scene::EMWF_NONE)) ) )    
        .def( 
            "setDebugName"
            , (void ( IMeshWriter_wrapper::* )( ::irr::c8 const * ) )(&IMeshWriter_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< ITriangleSelector_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "ITriangleSelector" )    
        .def( 
            "getSceneNodeForTriangle"
            , bp::pure_virtual( (::irr::scene::ISceneNode const * ( ::irr::scene::ITriangleSelector::* )( ::irr::u32 ) const)(&::irr::scene::ITriangleSelector::getSceneNodeForTriangle) )
            , ( bp::arg("triangleIndex") )
                /* undefined call policies */ )    
        .def( 
            "getTriangleCount"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::ITriangleSelector::* )(  ) const)(&::irr::scene::ITriangleSelector::getTriangleCount) ) )    
        .def( 
            "getTriangles"
            , bp::pure_virtual( (void ( ::irr::scene::ITriangleSelector::* )( ::irr::core::triangle3df *,::irr::s32,::irr::s32 &,::irr::core::matrix4 const * ) const)(&::irr::scene::ITriangleSelector::getTriangles) )
            , ( bp::arg("triangles"), bp::arg("arraySize"), bp::arg("outTriangleCount"), bp::arg("transform")=bp::object() ) )    
        .def( 
            "getTriangles"
            , bp::pure_virtual( (void ( ::irr::scene::ITriangleSelector::* )( ::irr::core::triangle3df *,::irr::s32,::irr::s32 &,::irr::core::aabbox3d< float > const &,::irr::core::matrix4 const * ) const)(&::irr::scene::ITriangleSelector::getTriangles) )
            , ( bp::arg("triangles"), bp::arg("arraySize"), bp::arg("outTriangleCount"), bp::arg("box"), bp::arg("transform")=bp::object() ) )    
        .def( 
            "getTriangles"
            , bp::pure_virtual( (void ( ::irr::scene::ITriangleSelector::* )( ::irr::core::triangle3df *,::irr::s32,::irr::s32 &,::irr::core::line3d< float > const &,::irr::core::matrix4 const * ) const)(&::irr::scene::ITriangleSelector::getTriangles) )
            , ( bp::arg("triangles"), bp::arg("arraySize"), bp::arg("outTriangleCount"), bp::arg("line"), bp::arg("transform")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( ITriangleSelector_wrapper::* )( ::irr::c8 const * ) )(&ITriangleSelector_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IMetaTriangleSelector_wrapper, bp::bases< irr::scene::ITriangleSelector >, boost::noncopyable >( "IMetaTriangleSelector" )    
        .def( 
            "addTriangleSelector"
            , bp::pure_virtual( (void ( ::irr::scene::IMetaTriangleSelector::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::IMetaTriangleSelector::addTriangleSelector) )
            , ( bp::arg("toAdd") ) )    
        .def( 
            "removeAllTriangleSelectors"
            , bp::pure_virtual( (void ( ::irr::scene::IMetaTriangleSelector::* )(  ) )(&::irr::scene::IMetaTriangleSelector::removeAllTriangleSelectors) ) )    
        .def( 
            "removeTriangleSelector"
            , bp::pure_virtual( (bool ( ::irr::scene::IMetaTriangleSelector::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::IMetaTriangleSelector::removeTriangleSelector) )
            , ( bp::arg("toRemove") ) )    
        .def( 
            "getSceneNodeForTriangle"
            , bp::pure_virtual( (::irr::scene::ISceneNode const * ( ::irr::scene::ITriangleSelector::* )( ::irr::u32 ) const)(&::irr::scene::ITriangleSelector::getSceneNodeForTriangle) )
            , ( bp::arg("triangleIndex") )
                /* undefined call policies */ )    
        .def( 
            "getTriangleCount"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::ITriangleSelector::* )(  ) const)(&::irr::scene::ITriangleSelector::getTriangleCount) ) )    
        .def( 
            "getTriangles"
            , bp::pure_virtual( (void ( ::irr::scene::ITriangleSelector::* )( ::irr::core::triangle3df *,::irr::s32,::irr::s32 &,::irr::core::matrix4 const * ) const)(&::irr::scene::ITriangleSelector::getTriangles) )
            , ( bp::arg("triangles"), bp::arg("arraySize"), bp::arg("outTriangleCount"), bp::arg("transform")=bp::object() ) )    
        .def( 
            "getTriangles"
            , bp::pure_virtual( (void ( ::irr::scene::ITriangleSelector::* )( ::irr::core::triangle3df *,::irr::s32,::irr::s32 &,::irr::core::aabbox3d< float > const &,::irr::core::matrix4 const * ) const)(&::irr::scene::ITriangleSelector::getTriangles) )
            , ( bp::arg("triangles"), bp::arg("arraySize"), bp::arg("outTriangleCount"), bp::arg("box"), bp::arg("transform")=bp::object() ) )    
        .def( 
            "getTriangles"
            , bp::pure_virtual( (void ( ::irr::scene::ITriangleSelector::* )( ::irr::core::triangle3df *,::irr::s32,::irr::s32 &,::irr::core::line3d< float > const &,::irr::core::matrix4 const * ) const)(&::irr::scene::ITriangleSelector::getTriangles) )
            , ( bp::arg("triangles"), bp::arg("arraySize"), bp::arg("outTriangleCount"), bp::arg("line"), bp::arg("transform")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IMetaTriangleSelector_wrapper::* )( ::irr::c8 const * ) )(&IMetaTriangleSelector_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IParticleAffector_wrapper, bp::bases< irr::io::IAttributeExchangingObject >, boost::noncopyable >( "IParticleAffector", bp::init< >() )    
        .def( 
            "affect"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleAffector::* )( ::irr::u32,::irr::scene::SParticle *,::irr::u32 ) )(&::irr::scene::IParticleAffector::affect) )
            , ( bp::arg("now"), bp::arg("particlearray"), bp::arg("count") ) )    
        .def( 
            "getEnabled"
            , (bool ( ::irr::scene::IParticleAffector::* )(  ) const)(&::irr::scene::IParticleAffector::getEnabled)
            , (bool ( IParticleAffector_wrapper::* )(  ) const)(&IParticleAffector_wrapper::default_getEnabled) )    
        .def( 
            "getType"
            , bp::pure_virtual( (::irr::scene::E_PARTICLE_AFFECTOR_TYPE ( ::irr::scene::IParticleAffector::* )(  ) const)(&::irr::scene::IParticleAffector::getType) ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::scene::IParticleAffector::* )( bool ) )(&::irr::scene::IParticleAffector::setEnabled)
            , (void ( IParticleAffector_wrapper::* )( bool ) )(&IParticleAffector_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( IParticleAffector_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IParticleAffector_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( IParticleAffector_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IParticleAffector_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IParticleAffector_wrapper::* )( ::irr::c8 const * ) )(&IParticleAffector_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IParticleEmitter_wrapper, bp::bases< irr::io::IAttributeExchangingObject >, boost::noncopyable >( "IParticleEmitter" )    
        .def( 
            "emitt"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::IParticleEmitter::* )( ::irr::u32,::irr::u32,::irr::scene::SParticle * & ) )(&::irr::scene::IParticleEmitter::emitt) )
            , ( bp::arg("now"), bp::arg("timeSinceLastCall"), bp::arg("outArray") ) )    
        .def( 
            "getDirection"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getDirection) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaxParticlesPerSecond"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxParticlesPerSecond) ) )    
        .def( 
            "getMaxStartColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxStartColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaxStartSize"
            , bp::pure_virtual( (::irr::core::dimension2df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxStartSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMinParticlesPerSecond"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinParticlesPerSecond) ) )    
        .def( 
            "getMinStartColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinStartColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMinStartSize"
            , bp::pure_virtual( (::irr::core::dimension2df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinStartSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getType"
            , (::irr::scene::E_PARTICLE_EMITTER_TYPE ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getType)
            , (::irr::scene::E_PARTICLE_EMITTER_TYPE ( IParticleEmitter_wrapper::* )(  ) const)(&IParticleEmitter_wrapper::default_getType) )    
        .def( 
            "setDirection"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::vector3df const & ) )(&::irr::scene::IParticleEmitter::setDirection) )
            , ( bp::arg("newDirection") ) )    
        .def( 
            "setMaxParticlesPerSecond"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::u32 ) )(&::irr::scene::IParticleEmitter::setMaxParticlesPerSecond) )
            , ( bp::arg("maxPPS") ) )    
        .def( 
            "setMaxStartColor"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::video::SColor const & ) )(&::irr::scene::IParticleEmitter::setMaxStartColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setMaxStartSize"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::dimension2df const & ) )(&::irr::scene::IParticleEmitter::setMaxStartSize) )
            , ( bp::arg("size") ) )    
        .def( 
            "setMinParticlesPerSecond"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::u32 ) )(&::irr::scene::IParticleEmitter::setMinParticlesPerSecond) )
            , ( bp::arg("minPPS") ) )    
        .def( 
            "setMinStartColor"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::video::SColor const & ) )(&::irr::scene::IParticleEmitter::setMinStartColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setMinStartSize"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::dimension2df const & ) )(&::irr::scene::IParticleEmitter::setMinStartSize) )
            , ( bp::arg("size") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( IParticleEmitter_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IParticleEmitter_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( IParticleEmitter_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IParticleEmitter_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IParticleEmitter_wrapper::* )( ::irr::c8 const * ) )(&IParticleEmitter_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IParticleAnimatedMeshSceneNodeEmitter_wrapper, bp::bases< irr::scene::IParticleEmitter >, boost::noncopyable >( "IParticleAnimatedMeshSceneNodeEmitter" )    
        .def( 
            "getAnimatedMeshSceneNode"
            , bp::pure_virtual( (::irr::scene::IAnimatedMeshSceneNode const * ( ::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::* )(  ) const)(&::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::getAnimatedMeshSceneNode) )
                /* undefined call policies */ )    
        .def( 
            "getEveryMeshVertex"
            , bp::pure_virtual( (bool ( ::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::* )(  ) const)(&::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::getEveryMeshVertex) ) )    
        .def( 
            "getNormalDirectionModifier"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::* )(  ) const)(&::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::getNormalDirectionModifier) ) )    
        .def( 
            "getType"
            , (::irr::scene::E_PARTICLE_EMITTER_TYPE ( ::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::* )(  ) const)(&::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::getType)
            , (::irr::scene::E_PARTICLE_EMITTER_TYPE ( IParticleAnimatedMeshSceneNodeEmitter_wrapper::* )(  ) const)(&IParticleAnimatedMeshSceneNodeEmitter_wrapper::default_getType) )    
        .def( 
            "isUsingNormalDirection"
            , bp::pure_virtual( (bool ( ::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::* )(  ) const)(&::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::isUsingNormalDirection) ) )    
        .def( 
            "setAnimatedMeshSceneNode"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::* )( ::irr::scene::IAnimatedMeshSceneNode * ) )(&::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::setAnimatedMeshSceneNode) )
            , ( bp::arg("node") ) )    
        .def( 
            "setEveryMeshVertex"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::* )( bool ) )(&::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::setEveryMeshVertex) )
            , ( bp::arg("everyMeshVertex")=(bool)(true) ) )    
        .def( 
            "setNormalDirectionModifier"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::* )( ::irr::f32 ) )(&::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::setNormalDirectionModifier) )
            , ( bp::arg("normalDirectionModifier") ) )    
        .def( 
            "setUseNormalDirection"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::* )( bool ) )(&::irr::scene::IParticleAnimatedMeshSceneNodeEmitter::setUseNormalDirection) )
            , ( bp::arg("useNormalDirection")=(bool)(true) ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( IParticleAnimatedMeshSceneNodeEmitter_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IParticleAnimatedMeshSceneNodeEmitter_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "emitt"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::IParticleEmitter::* )( ::irr::u32,::irr::u32,::irr::scene::SParticle * & ) )(&::irr::scene::IParticleEmitter::emitt) )
            , ( bp::arg("now"), bp::arg("timeSinceLastCall"), bp::arg("outArray") ) )    
        .def( 
            "getDirection"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getDirection) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaxParticlesPerSecond"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxParticlesPerSecond) ) )    
        .def( 
            "getMaxStartColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxStartColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaxStartSize"
            , bp::pure_virtual( (::irr::core::dimension2df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxStartSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMinParticlesPerSecond"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinParticlesPerSecond) ) )    
        .def( 
            "getMinStartColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinStartColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMinStartSize"
            , bp::pure_virtual( (::irr::core::dimension2df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinStartSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( IParticleAnimatedMeshSceneNodeEmitter_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IParticleAnimatedMeshSceneNodeEmitter_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IParticleAnimatedMeshSceneNodeEmitter_wrapper::* )( ::irr::c8 const * ) )(&IParticleAnimatedMeshSceneNodeEmitter_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setDirection"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::vector3df const & ) )(&::irr::scene::IParticleEmitter::setDirection) )
            , ( bp::arg("newDirection") ) )    
        .def( 
            "setMaxParticlesPerSecond"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::u32 ) )(&::irr::scene::IParticleEmitter::setMaxParticlesPerSecond) )
            , ( bp::arg("maxPPS") ) )    
        .def( 
            "setMaxStartColor"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::video::SColor const & ) )(&::irr::scene::IParticleEmitter::setMaxStartColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setMaxStartSize"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::dimension2df const & ) )(&::irr::scene::IParticleEmitter::setMaxStartSize) )
            , ( bp::arg("size") ) )    
        .def( 
            "setMinParticlesPerSecond"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::u32 ) )(&::irr::scene::IParticleEmitter::setMinParticlesPerSecond) )
            , ( bp::arg("minPPS") ) )    
        .def( 
            "setMinStartColor"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::video::SColor const & ) )(&::irr::scene::IParticleEmitter::setMinStartColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setMinStartSize"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::dimension2df const & ) )(&::irr::scene::IParticleEmitter::setMinStartSize) )
            , ( bp::arg("size") ) );

    bp::class_< IParticleAttractionAffector_wrapper, bp::bases< irr::scene::IParticleAffector >, boost::noncopyable >( "IParticleAttractionAffector" )    
        .def( 
            "getAffectX"
            , bp::pure_virtual( (bool ( ::irr::scene::IParticleAttractionAffector::* )(  ) const)(&::irr::scene::IParticleAttractionAffector::getAffectX) ) )    
        .def( 
            "getAffectY"
            , bp::pure_virtual( (bool ( ::irr::scene::IParticleAttractionAffector::* )(  ) const)(&::irr::scene::IParticleAttractionAffector::getAffectY) ) )    
        .def( 
            "getAffectZ"
            , bp::pure_virtual( (bool ( ::irr::scene::IParticleAttractionAffector::* )(  ) const)(&::irr::scene::IParticleAttractionAffector::getAffectZ) ) )    
        .def( 
            "getAttract"
            , bp::pure_virtual( (bool ( ::irr::scene::IParticleAttractionAffector::* )(  ) const)(&::irr::scene::IParticleAttractionAffector::getAttract) ) )    
        .def( 
            "getPoint"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IParticleAttractionAffector::* )(  ) const)(&::irr::scene::IParticleAttractionAffector::getPoint) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getType"
            , (::irr::scene::E_PARTICLE_AFFECTOR_TYPE ( ::irr::scene::IParticleAttractionAffector::* )(  ) const)(&::irr::scene::IParticleAttractionAffector::getType)
            , (::irr::scene::E_PARTICLE_AFFECTOR_TYPE ( IParticleAttractionAffector_wrapper::* )(  ) const)(&IParticleAttractionAffector_wrapper::default_getType) )    
        .def( 
            "setAffectX"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleAttractionAffector::* )( bool ) )(&::irr::scene::IParticleAttractionAffector::setAffectX) )
            , ( bp::arg("affect") ) )    
        .def( 
            "setAffectY"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleAttractionAffector::* )( bool ) )(&::irr::scene::IParticleAttractionAffector::setAffectY) )
            , ( bp::arg("affect") ) )    
        .def( 
            "setAffectZ"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleAttractionAffector::* )( bool ) )(&::irr::scene::IParticleAttractionAffector::setAffectZ) )
            , ( bp::arg("affect") ) )    
        .def( 
            "setAttract"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleAttractionAffector::* )( bool ) )(&::irr::scene::IParticleAttractionAffector::setAttract) )
            , ( bp::arg("attract") ) )    
        .def( 
            "setPoint"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleAttractionAffector::* )( ::irr::core::vector3df const & ) )(&::irr::scene::IParticleAttractionAffector::setPoint) )
            , ( bp::arg("point") ) )    
        .def( 
            "affect"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleAffector::* )( ::irr::u32,::irr::scene::SParticle *,::irr::u32 ) )(&::irr::scene::IParticleAffector::affect) )
            , ( bp::arg("now"), bp::arg("particlearray"), bp::arg("count") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( IParticleAttractionAffector_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IParticleAttractionAffector_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getEnabled"
            , (bool ( ::irr::scene::IParticleAffector::* )(  ) const)(&::irr::scene::IParticleAffector::getEnabled)
            , (bool ( IParticleAttractionAffector_wrapper::* )(  ) const)(&IParticleAttractionAffector_wrapper::default_getEnabled) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( IParticleAttractionAffector_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IParticleAttractionAffector_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IParticleAttractionAffector_wrapper::* )( ::irr::c8 const * ) )(&IParticleAttractionAffector_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::scene::IParticleAffector::* )( bool ) )(&::irr::scene::IParticleAffector::setEnabled)
            , (void ( IParticleAttractionAffector_wrapper::* )( bool ) )(&IParticleAttractionAffector_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) );

    bp::class_< IParticleBoxEmitter_wrapper, bp::bases< irr::scene::IParticleEmitter >, boost::noncopyable >( "IParticleBoxEmitter" )    
        .def( 
            "getBox"
            , bp::pure_virtual( (::irr::core::aabbox3df const & ( ::irr::scene::IParticleBoxEmitter::* )(  ) const)(&::irr::scene::IParticleBoxEmitter::getBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getType"
            , (::irr::scene::E_PARTICLE_EMITTER_TYPE ( ::irr::scene::IParticleBoxEmitter::* )(  ) const)(&::irr::scene::IParticleBoxEmitter::getType)
            , (::irr::scene::E_PARTICLE_EMITTER_TYPE ( IParticleBoxEmitter_wrapper::* )(  ) const)(&IParticleBoxEmitter_wrapper::default_getType) )    
        .def( 
            "setBox"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleBoxEmitter::* )( ::irr::core::aabbox3df const & ) )(&::irr::scene::IParticleBoxEmitter::setBox) )
            , ( bp::arg("box") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( IParticleBoxEmitter_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IParticleBoxEmitter_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "emitt"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::IParticleEmitter::* )( ::irr::u32,::irr::u32,::irr::scene::SParticle * & ) )(&::irr::scene::IParticleEmitter::emitt) )
            , ( bp::arg("now"), bp::arg("timeSinceLastCall"), bp::arg("outArray") ) )    
        .def( 
            "getDirection"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getDirection) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaxParticlesPerSecond"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxParticlesPerSecond) ) )    
        .def( 
            "getMaxStartColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxStartColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaxStartSize"
            , bp::pure_virtual( (::irr::core::dimension2df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxStartSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMinParticlesPerSecond"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinParticlesPerSecond) ) )    
        .def( 
            "getMinStartColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinStartColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMinStartSize"
            , bp::pure_virtual( (::irr::core::dimension2df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinStartSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( IParticleBoxEmitter_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IParticleBoxEmitter_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IParticleBoxEmitter_wrapper::* )( ::irr::c8 const * ) )(&IParticleBoxEmitter_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setDirection"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::vector3df const & ) )(&::irr::scene::IParticleEmitter::setDirection) )
            , ( bp::arg("newDirection") ) )    
        .def( 
            "setMaxParticlesPerSecond"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::u32 ) )(&::irr::scene::IParticleEmitter::setMaxParticlesPerSecond) )
            , ( bp::arg("maxPPS") ) )    
        .def( 
            "setMaxStartColor"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::video::SColor const & ) )(&::irr::scene::IParticleEmitter::setMaxStartColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setMaxStartSize"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::dimension2df const & ) )(&::irr::scene::IParticleEmitter::setMaxStartSize) )
            , ( bp::arg("size") ) )    
        .def( 
            "setMinParticlesPerSecond"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::u32 ) )(&::irr::scene::IParticleEmitter::setMinParticlesPerSecond) )
            , ( bp::arg("minPPS") ) )    
        .def( 
            "setMinStartColor"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::video::SColor const & ) )(&::irr::scene::IParticleEmitter::setMinStartColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setMinStartSize"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::dimension2df const & ) )(&::irr::scene::IParticleEmitter::setMinStartSize) )
            , ( bp::arg("size") ) );

    bp::class_< IParticleCylinderEmitter_wrapper, bp::bases< irr::scene::IParticleEmitter >, boost::noncopyable >( "IParticleCylinderEmitter" )    
        .def( 
            "getCenter"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IParticleCylinderEmitter::* )(  ) const)(&::irr::scene::IParticleCylinderEmitter::getCenter) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getLength"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::IParticleCylinderEmitter::* )(  ) const)(&::irr::scene::IParticleCylinderEmitter::getLength) ) )    
        .def( 
            "getNormal"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IParticleCylinderEmitter::* )(  ) const)(&::irr::scene::IParticleCylinderEmitter::getNormal) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getOutlineOnly"
            , bp::pure_virtual( (bool ( ::irr::scene::IParticleCylinderEmitter::* )(  ) const)(&::irr::scene::IParticleCylinderEmitter::getOutlineOnly) ) )    
        .def( 
            "getRadius"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::IParticleCylinderEmitter::* )(  ) const)(&::irr::scene::IParticleCylinderEmitter::getRadius) ) )    
        .def( 
            "getType"
            , (::irr::scene::E_PARTICLE_EMITTER_TYPE ( ::irr::scene::IParticleCylinderEmitter::* )(  ) const)(&::irr::scene::IParticleCylinderEmitter::getType)
            , (::irr::scene::E_PARTICLE_EMITTER_TYPE ( IParticleCylinderEmitter_wrapper::* )(  ) const)(&IParticleCylinderEmitter_wrapper::default_getType) )    
        .def( 
            "setCenter"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleCylinderEmitter::* )( ::irr::core::vector3df const & ) )(&::irr::scene::IParticleCylinderEmitter::setCenter) )
            , ( bp::arg("center") ) )    
        .def( 
            "setLength"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleCylinderEmitter::* )( ::irr::f32 ) )(&::irr::scene::IParticleCylinderEmitter::setLength) )
            , ( bp::arg("length") ) )    
        .def( 
            "setNormal"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleCylinderEmitter::* )( ::irr::core::vector3df const & ) )(&::irr::scene::IParticleCylinderEmitter::setNormal) )
            , ( bp::arg("normal") ) )    
        .def( 
            "setOutlineOnly"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleCylinderEmitter::* )( bool ) )(&::irr::scene::IParticleCylinderEmitter::setOutlineOnly) )
            , ( bp::arg("outlineOnly")=(bool)(true) ) )    
        .def( 
            "setRadius"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleCylinderEmitter::* )( ::irr::f32 ) )(&::irr::scene::IParticleCylinderEmitter::setRadius) )
            , ( bp::arg("radius") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( IParticleCylinderEmitter_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IParticleCylinderEmitter_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "emitt"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::IParticleEmitter::* )( ::irr::u32,::irr::u32,::irr::scene::SParticle * & ) )(&::irr::scene::IParticleEmitter::emitt) )
            , ( bp::arg("now"), bp::arg("timeSinceLastCall"), bp::arg("outArray") ) )    
        .def( 
            "getDirection"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getDirection) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaxParticlesPerSecond"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxParticlesPerSecond) ) )    
        .def( 
            "getMaxStartColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxStartColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaxStartSize"
            , bp::pure_virtual( (::irr::core::dimension2df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxStartSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMinParticlesPerSecond"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinParticlesPerSecond) ) )    
        .def( 
            "getMinStartColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinStartColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMinStartSize"
            , bp::pure_virtual( (::irr::core::dimension2df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinStartSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( IParticleCylinderEmitter_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IParticleCylinderEmitter_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IParticleCylinderEmitter_wrapper::* )( ::irr::c8 const * ) )(&IParticleCylinderEmitter_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setDirection"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::vector3df const & ) )(&::irr::scene::IParticleEmitter::setDirection) )
            , ( bp::arg("newDirection") ) )    
        .def( 
            "setMaxParticlesPerSecond"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::u32 ) )(&::irr::scene::IParticleEmitter::setMaxParticlesPerSecond) )
            , ( bp::arg("maxPPS") ) )    
        .def( 
            "setMaxStartColor"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::video::SColor const & ) )(&::irr::scene::IParticleEmitter::setMaxStartColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setMaxStartSize"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::dimension2df const & ) )(&::irr::scene::IParticleEmitter::setMaxStartSize) )
            , ( bp::arg("size") ) )    
        .def( 
            "setMinParticlesPerSecond"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::u32 ) )(&::irr::scene::IParticleEmitter::setMinParticlesPerSecond) )
            , ( bp::arg("minPPS") ) )    
        .def( 
            "setMinStartColor"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::video::SColor const & ) )(&::irr::scene::IParticleEmitter::setMinStartColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setMinStartSize"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::dimension2df const & ) )(&::irr::scene::IParticleEmitter::setMinStartSize) )
            , ( bp::arg("size") ) );

    bp::class_< IParticleFadeOutAffector_wrapper, bp::bases< irr::scene::IParticleAffector >, boost::noncopyable >( "IParticleFadeOutAffector" )    
        .def( 
            "getFadeOutTime"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::IParticleFadeOutAffector::* )(  ) const)(&::irr::scene::IParticleFadeOutAffector::getFadeOutTime) ) )    
        .def( 
            "getTargetColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::scene::IParticleFadeOutAffector::* )(  ) const)(&::irr::scene::IParticleFadeOutAffector::getTargetColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getType"
            , (::irr::scene::E_PARTICLE_AFFECTOR_TYPE ( ::irr::scene::IParticleFadeOutAffector::* )(  ) const)(&::irr::scene::IParticleFadeOutAffector::getType)
            , (::irr::scene::E_PARTICLE_AFFECTOR_TYPE ( IParticleFadeOutAffector_wrapper::* )(  ) const)(&IParticleFadeOutAffector_wrapper::default_getType) )    
        .def( 
            "setFadeOutTime"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleFadeOutAffector::* )( ::irr::f32 ) )(&::irr::scene::IParticleFadeOutAffector::setFadeOutTime) )
            , ( bp::arg("fadeOutTime") ) )    
        .def( 
            "setTargetColor"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleFadeOutAffector::* )( ::irr::video::SColor const & ) )(&::irr::scene::IParticleFadeOutAffector::setTargetColor) )
            , ( bp::arg("targetColor") ) )    
        .def( 
            "affect"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleAffector::* )( ::irr::u32,::irr::scene::SParticle *,::irr::u32 ) )(&::irr::scene::IParticleAffector::affect) )
            , ( bp::arg("now"), bp::arg("particlearray"), bp::arg("count") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( IParticleFadeOutAffector_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IParticleFadeOutAffector_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getEnabled"
            , (bool ( ::irr::scene::IParticleAffector::* )(  ) const)(&::irr::scene::IParticleAffector::getEnabled)
            , (bool ( IParticleFadeOutAffector_wrapper::* )(  ) const)(&IParticleFadeOutAffector_wrapper::default_getEnabled) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( IParticleFadeOutAffector_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IParticleFadeOutAffector_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IParticleFadeOutAffector_wrapper::* )( ::irr::c8 const * ) )(&IParticleFadeOutAffector_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::scene::IParticleAffector::* )( bool ) )(&::irr::scene::IParticleAffector::setEnabled)
            , (void ( IParticleFadeOutAffector_wrapper::* )( bool ) )(&IParticleFadeOutAffector_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) );

    bp::class_< IParticleGravityAffector_wrapper, bp::bases< irr::scene::IParticleAffector >, boost::noncopyable >( "IParticleGravityAffector" )    
        .def( 
            "getGravity"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IParticleGravityAffector::* )(  ) const)(&::irr::scene::IParticleGravityAffector::getGravity) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTimeForceLost"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::IParticleGravityAffector::* )(  ) const)(&::irr::scene::IParticleGravityAffector::getTimeForceLost) ) )    
        .def( 
            "getType"
            , (::irr::scene::E_PARTICLE_AFFECTOR_TYPE ( ::irr::scene::IParticleGravityAffector::* )(  ) const)(&::irr::scene::IParticleGravityAffector::getType)
            , (::irr::scene::E_PARTICLE_AFFECTOR_TYPE ( IParticleGravityAffector_wrapper::* )(  ) const)(&IParticleGravityAffector_wrapper::default_getType) )    
        .def( 
            "setGravity"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleGravityAffector::* )( ::irr::core::vector3df const & ) )(&::irr::scene::IParticleGravityAffector::setGravity) )
            , ( bp::arg("gravity") ) )    
        .def( 
            "setTimeForceLost"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleGravityAffector::* )( ::irr::f32 ) )(&::irr::scene::IParticleGravityAffector::setTimeForceLost) )
            , ( bp::arg("timeForceLost") ) )    
        .def( 
            "affect"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleAffector::* )( ::irr::u32,::irr::scene::SParticle *,::irr::u32 ) )(&::irr::scene::IParticleAffector::affect) )
            , ( bp::arg("now"), bp::arg("particlearray"), bp::arg("count") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( IParticleGravityAffector_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IParticleGravityAffector_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getEnabled"
            , (bool ( ::irr::scene::IParticleAffector::* )(  ) const)(&::irr::scene::IParticleAffector::getEnabled)
            , (bool ( IParticleGravityAffector_wrapper::* )(  ) const)(&IParticleGravityAffector_wrapper::default_getEnabled) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( IParticleGravityAffector_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IParticleGravityAffector_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IParticleGravityAffector_wrapper::* )( ::irr::c8 const * ) )(&IParticleGravityAffector_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::scene::IParticleAffector::* )( bool ) )(&::irr::scene::IParticleAffector::setEnabled)
            , (void ( IParticleGravityAffector_wrapper::* )( bool ) )(&IParticleGravityAffector_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) );

    bp::class_< IParticleMeshEmitter_wrapper, bp::bases< irr::scene::IParticleEmitter >, boost::noncopyable >( "IParticleMeshEmitter" )    
        .def( 
            "getEveryMeshVertex"
            , bp::pure_virtual( (bool ( ::irr::scene::IParticleMeshEmitter::* )(  ) const)(&::irr::scene::IParticleMeshEmitter::getEveryMeshVertex) ) )    
        .def( 
            "getMesh"
            , bp::pure_virtual( (::irr::scene::IMesh const * ( ::irr::scene::IParticleMeshEmitter::* )(  ) const)(&::irr::scene::IParticleMeshEmitter::getMesh) )
                /* undefined call policies */ )    
        .def( 
            "getNormalDirectionModifier"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::IParticleMeshEmitter::* )(  ) const)(&::irr::scene::IParticleMeshEmitter::getNormalDirectionModifier) ) )    
        .def( 
            "getType"
            , (::irr::scene::E_PARTICLE_EMITTER_TYPE ( ::irr::scene::IParticleMeshEmitter::* )(  ) const)(&::irr::scene::IParticleMeshEmitter::getType)
            , (::irr::scene::E_PARTICLE_EMITTER_TYPE ( IParticleMeshEmitter_wrapper::* )(  ) const)(&IParticleMeshEmitter_wrapper::default_getType) )    
        .def( 
            "isUsingNormalDirection"
            , bp::pure_virtual( (bool ( ::irr::scene::IParticleMeshEmitter::* )(  ) const)(&::irr::scene::IParticleMeshEmitter::isUsingNormalDirection) ) )    
        .def( 
            "setEveryMeshVertex"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleMeshEmitter::* )( bool ) )(&::irr::scene::IParticleMeshEmitter::setEveryMeshVertex) )
            , ( bp::arg("everyMeshVertex")=(bool)(true) ) )    
        .def( 
            "setMesh"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleMeshEmitter::* )( ::irr::scene::IMesh * ) )(&::irr::scene::IParticleMeshEmitter::setMesh) )
            , ( bp::arg("mesh") ) )    
        .def( 
            "setNormalDirectionModifier"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleMeshEmitter::* )( ::irr::f32 ) )(&::irr::scene::IParticleMeshEmitter::setNormalDirectionModifier) )
            , ( bp::arg("normalDirectionModifier") ) )    
        .def( 
            "setUseNormalDirection"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleMeshEmitter::* )( bool ) )(&::irr::scene::IParticleMeshEmitter::setUseNormalDirection) )
            , ( bp::arg("useNormalDirection")=(bool)(true) ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( IParticleMeshEmitter_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IParticleMeshEmitter_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "emitt"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::IParticleEmitter::* )( ::irr::u32,::irr::u32,::irr::scene::SParticle * & ) )(&::irr::scene::IParticleEmitter::emitt) )
            , ( bp::arg("now"), bp::arg("timeSinceLastCall"), bp::arg("outArray") ) )    
        .def( 
            "getDirection"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getDirection) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaxParticlesPerSecond"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxParticlesPerSecond) ) )    
        .def( 
            "getMaxStartColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxStartColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaxStartSize"
            , bp::pure_virtual( (::irr::core::dimension2df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxStartSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMinParticlesPerSecond"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinParticlesPerSecond) ) )    
        .def( 
            "getMinStartColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinStartColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMinStartSize"
            , bp::pure_virtual( (::irr::core::dimension2df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinStartSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( IParticleMeshEmitter_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IParticleMeshEmitter_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IParticleMeshEmitter_wrapper::* )( ::irr::c8 const * ) )(&IParticleMeshEmitter_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setDirection"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::vector3df const & ) )(&::irr::scene::IParticleEmitter::setDirection) )
            , ( bp::arg("newDirection") ) )    
        .def( 
            "setMaxParticlesPerSecond"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::u32 ) )(&::irr::scene::IParticleEmitter::setMaxParticlesPerSecond) )
            , ( bp::arg("maxPPS") ) )    
        .def( 
            "setMaxStartColor"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::video::SColor const & ) )(&::irr::scene::IParticleEmitter::setMaxStartColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setMaxStartSize"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::dimension2df const & ) )(&::irr::scene::IParticleEmitter::setMaxStartSize) )
            , ( bp::arg("size") ) )    
        .def( 
            "setMinParticlesPerSecond"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::u32 ) )(&::irr::scene::IParticleEmitter::setMinParticlesPerSecond) )
            , ( bp::arg("minPPS") ) )    
        .def( 
            "setMinStartColor"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::video::SColor const & ) )(&::irr::scene::IParticleEmitter::setMinStartColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setMinStartSize"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::dimension2df const & ) )(&::irr::scene::IParticleEmitter::setMinStartSize) )
            , ( bp::arg("size") ) );

    bp::class_< IParticleRingEmitter_wrapper, bp::bases< irr::scene::IParticleEmitter >, boost::noncopyable >( "IParticleRingEmitter" )    
        .def( 
            "getCenter"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IParticleRingEmitter::* )(  ) const)(&::irr::scene::IParticleRingEmitter::getCenter) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRadius"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::IParticleRingEmitter::* )(  ) const)(&::irr::scene::IParticleRingEmitter::getRadius) ) )    
        .def( 
            "getRingThickness"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::IParticleRingEmitter::* )(  ) const)(&::irr::scene::IParticleRingEmitter::getRingThickness) ) )    
        .def( 
            "getType"
            , (::irr::scene::E_PARTICLE_EMITTER_TYPE ( ::irr::scene::IParticleRingEmitter::* )(  ) const)(&::irr::scene::IParticleRingEmitter::getType)
            , (::irr::scene::E_PARTICLE_EMITTER_TYPE ( IParticleRingEmitter_wrapper::* )(  ) const)(&IParticleRingEmitter_wrapper::default_getType) )    
        .def( 
            "setCenter"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleRingEmitter::* )( ::irr::core::vector3df const & ) )(&::irr::scene::IParticleRingEmitter::setCenter) )
            , ( bp::arg("center") ) )    
        .def( 
            "setRadius"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleRingEmitter::* )( ::irr::f32 ) )(&::irr::scene::IParticleRingEmitter::setRadius) )
            , ( bp::arg("radius") ) )    
        .def( 
            "setRingThickness"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleRingEmitter::* )( ::irr::f32 ) )(&::irr::scene::IParticleRingEmitter::setRingThickness) )
            , ( bp::arg("ringThickness") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( IParticleRingEmitter_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IParticleRingEmitter_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "emitt"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::IParticleEmitter::* )( ::irr::u32,::irr::u32,::irr::scene::SParticle * & ) )(&::irr::scene::IParticleEmitter::emitt) )
            , ( bp::arg("now"), bp::arg("timeSinceLastCall"), bp::arg("outArray") ) )    
        .def( 
            "getDirection"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getDirection) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaxParticlesPerSecond"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxParticlesPerSecond) ) )    
        .def( 
            "getMaxStartColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxStartColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaxStartSize"
            , bp::pure_virtual( (::irr::core::dimension2df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxStartSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMinParticlesPerSecond"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinParticlesPerSecond) ) )    
        .def( 
            "getMinStartColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinStartColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMinStartSize"
            , bp::pure_virtual( (::irr::core::dimension2df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinStartSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( IParticleRingEmitter_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IParticleRingEmitter_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IParticleRingEmitter_wrapper::* )( ::irr::c8 const * ) )(&IParticleRingEmitter_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setDirection"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::vector3df const & ) )(&::irr::scene::IParticleEmitter::setDirection) )
            , ( bp::arg("newDirection") ) )    
        .def( 
            "setMaxParticlesPerSecond"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::u32 ) )(&::irr::scene::IParticleEmitter::setMaxParticlesPerSecond) )
            , ( bp::arg("maxPPS") ) )    
        .def( 
            "setMaxStartColor"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::video::SColor const & ) )(&::irr::scene::IParticleEmitter::setMaxStartColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setMaxStartSize"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::dimension2df const & ) )(&::irr::scene::IParticleEmitter::setMaxStartSize) )
            , ( bp::arg("size") ) )    
        .def( 
            "setMinParticlesPerSecond"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::u32 ) )(&::irr::scene::IParticleEmitter::setMinParticlesPerSecond) )
            , ( bp::arg("minPPS") ) )    
        .def( 
            "setMinStartColor"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::video::SColor const & ) )(&::irr::scene::IParticleEmitter::setMinStartColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setMinStartSize"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::dimension2df const & ) )(&::irr::scene::IParticleEmitter::setMinStartSize) )
            , ( bp::arg("size") ) );

    bp::class_< IParticleRotationAffector_wrapper, bp::bases< irr::scene::IParticleAffector >, boost::noncopyable >( "IParticleRotationAffector" )    
        .def( 
            "getPivotPoint"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IParticleRotationAffector::* )(  ) const)(&::irr::scene::IParticleRotationAffector::getPivotPoint) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSpeed"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IParticleRotationAffector::* )(  ) const)(&::irr::scene::IParticleRotationAffector::getSpeed) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getType"
            , (::irr::scene::E_PARTICLE_AFFECTOR_TYPE ( ::irr::scene::IParticleRotationAffector::* )(  ) const)(&::irr::scene::IParticleRotationAffector::getType)
            , (::irr::scene::E_PARTICLE_AFFECTOR_TYPE ( IParticleRotationAffector_wrapper::* )(  ) const)(&IParticleRotationAffector_wrapper::default_getType) )    
        .def( 
            "setPivotPoint"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleRotationAffector::* )( ::irr::core::vector3df const & ) )(&::irr::scene::IParticleRotationAffector::setPivotPoint) )
            , ( bp::arg("point") ) )    
        .def( 
            "setSpeed"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleRotationAffector::* )( ::irr::core::vector3df const & ) )(&::irr::scene::IParticleRotationAffector::setSpeed) )
            , ( bp::arg("speed") ) )    
        .def( 
            "affect"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleAffector::* )( ::irr::u32,::irr::scene::SParticle *,::irr::u32 ) )(&::irr::scene::IParticleAffector::affect) )
            , ( bp::arg("now"), bp::arg("particlearray"), bp::arg("count") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( IParticleRotationAffector_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IParticleRotationAffector_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getEnabled"
            , (bool ( ::irr::scene::IParticleAffector::* )(  ) const)(&::irr::scene::IParticleAffector::getEnabled)
            , (bool ( IParticleRotationAffector_wrapper::* )(  ) const)(&IParticleRotationAffector_wrapper::default_getEnabled) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( IParticleRotationAffector_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IParticleRotationAffector_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IParticleRotationAffector_wrapper::* )( ::irr::c8 const * ) )(&IParticleRotationAffector_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setEnabled"
            , (void ( ::irr::scene::IParticleAffector::* )( bool ) )(&::irr::scene::IParticleAffector::setEnabled)
            , (void ( IParticleRotationAffector_wrapper::* )( bool ) )(&IParticleRotationAffector_wrapper::default_setEnabled)
            , ( bp::arg("enabled") ) );

    bp::class_< IParticleSphereEmitter_wrapper, bp::bases< irr::scene::IParticleEmitter >, boost::noncopyable >( "IParticleSphereEmitter" )    
        .def( 
            "getCenter"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IParticleSphereEmitter::* )(  ) const)(&::irr::scene::IParticleSphereEmitter::getCenter) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRadius"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::IParticleSphereEmitter::* )(  ) const)(&::irr::scene::IParticleSphereEmitter::getRadius) ) )    
        .def( 
            "getType"
            , (::irr::scene::E_PARTICLE_EMITTER_TYPE ( ::irr::scene::IParticleSphereEmitter::* )(  ) const)(&::irr::scene::IParticleSphereEmitter::getType)
            , (::irr::scene::E_PARTICLE_EMITTER_TYPE ( IParticleSphereEmitter_wrapper::* )(  ) const)(&IParticleSphereEmitter_wrapper::default_getType) )    
        .def( 
            "setCenter"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleSphereEmitter::* )( ::irr::core::vector3df const & ) )(&::irr::scene::IParticleSphereEmitter::setCenter) )
            , ( bp::arg("center") ) )    
        .def( 
            "setRadius"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleSphereEmitter::* )( ::irr::f32 ) )(&::irr::scene::IParticleSphereEmitter::setRadius) )
            , ( bp::arg("radius") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( IParticleSphereEmitter_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IParticleSphereEmitter_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "emitt"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::IParticleEmitter::* )( ::irr::u32,::irr::u32,::irr::scene::SParticle * & ) )(&::irr::scene::IParticleEmitter::emitt) )
            , ( bp::arg("now"), bp::arg("timeSinceLastCall"), bp::arg("outArray") ) )    
        .def( 
            "getDirection"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getDirection) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaxParticlesPerSecond"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxParticlesPerSecond) ) )    
        .def( 
            "getMaxStartColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxStartColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaxStartSize"
            , bp::pure_virtual( (::irr::core::dimension2df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMaxStartSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMinParticlesPerSecond"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinParticlesPerSecond) ) )    
        .def( 
            "getMinStartColor"
            , bp::pure_virtual( (::irr::video::SColor const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinStartColor) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMinStartSize"
            , bp::pure_virtual( (::irr::core::dimension2df const & ( ::irr::scene::IParticleEmitter::* )(  ) const)(&::irr::scene::IParticleEmitter::getMinStartSize) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( IParticleSphereEmitter_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IParticleSphereEmitter_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( IParticleSphereEmitter_wrapper::* )( ::irr::c8 const * ) )(&IParticleSphereEmitter_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setDirection"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::vector3df const & ) )(&::irr::scene::IParticleEmitter::setDirection) )
            , ( bp::arg("newDirection") ) )    
        .def( 
            "setMaxParticlesPerSecond"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::u32 ) )(&::irr::scene::IParticleEmitter::setMaxParticlesPerSecond) )
            , ( bp::arg("maxPPS") ) )    
        .def( 
            "setMaxStartColor"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::video::SColor const & ) )(&::irr::scene::IParticleEmitter::setMaxStartColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setMaxStartSize"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::dimension2df const & ) )(&::irr::scene::IParticleEmitter::setMaxStartSize) )
            , ( bp::arg("size") ) )    
        .def( 
            "setMinParticlesPerSecond"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::u32 ) )(&::irr::scene::IParticleEmitter::setMinParticlesPerSecond) )
            , ( bp::arg("minPPS") ) )    
        .def( 
            "setMinStartColor"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::video::SColor const & ) )(&::irr::scene::IParticleEmitter::setMinStartColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "setMinStartSize"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleEmitter::* )( ::irr::core::dimension2df const & ) )(&::irr::scene::IParticleEmitter::setMinStartSize) )
            , ( bp::arg("size") ) );

    bp::class_< IParticleSystemSceneNode_wrapper, bp::bases< irr::scene::ISceneNode >, boost::noncopyable >( "IParticleSystemSceneNode", bp::init< irr::scene::ISceneNode *, irr::scene::ISceneManager *, irr::s32, bp::optional< irr::core::vector3df const &, irr::core::vector3df const &, irr::core::vector3df const & > >(( bp::arg("parent"), bp::arg("mgr"), bp::arg("id"), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )) )    
        .def( 
            "addAffector"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleSystemSceneNode::* )( ::irr::scene::IParticleAffector * ) )(&::irr::scene::IParticleSystemSceneNode::addAffector) )
            , ( bp::arg("affector") ) )    
        .def( 
            "createAnimatedMeshSceneNodeEmitter"
            , bp::pure_virtual( (::irr::scene::IParticleAnimatedMeshSceneNodeEmitter * ( ::irr::scene::IParticleSystemSceneNode::* )( ::irr::scene::IAnimatedMeshSceneNode *,bool,::irr::core::vector3df const &,::irr::f32,::irr::s32,bool,::irr::u32,::irr::u32,::irr::video::SColor const &,::irr::video::SColor const &,::irr::u32,::irr::u32,::irr::s32,::irr::core::dimension2df const &,::irr::core::dimension2df const & ) )(&::irr::scene::IParticleSystemSceneNode::createAnimatedMeshSceneNodeEmitter) )
            , ( bp::arg("node"), bp::arg("useNormalDirection")=(bool)(true), bp::arg("direction")=irr::core::vector3d<float>(0.0f, 2.999999932944774627685546875e-2f, 0.0f), bp::arg("normalDirectionModifier")=1.0e+2f, bp::arg("mbNumber")=(::irr::s32)(-0x00000000000000001), bp::arg("everyMeshVertex")=(bool)(false), bp::arg("minParticlesPerSecond")=(::irr::u32)(5), bp::arg("maxParticlesPerSecond")=(::irr::u32)(10), bp::arg("minStartColor")=irr::video::SColor(255u, 0u, 0u, 0u), bp::arg("maxStartColor")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("lifeTimeMin")=(::irr::u32)(2000), bp::arg("lifeTimeMax")=(::irr::u32)(4000), bp::arg("maxAngleDegrees")=(::irr::s32)(0), bp::arg("minStartSize")=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))), bp::arg("maxStartSize")=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) )
                /* undefined call policies */ )    
        .def( 
            "createAttractionAffector"
            , bp::pure_virtual( (::irr::scene::IParticleAttractionAffector * ( ::irr::scene::IParticleSystemSceneNode::* )( ::irr::core::vector3df const &,::irr::f32,bool,bool,bool,bool ) )(&::irr::scene::IParticleSystemSceneNode::createAttractionAffector) )
            , ( bp::arg("point"), bp::arg("speed")=1.0e+0f, bp::arg("attract")=(bool)(true), bp::arg("affectX")=(bool)(true), bp::arg("affectY")=(bool)(true), bp::arg("affectZ")=(bool)(true) )
                /* undefined call policies */ )    
        .def( 
            "createBoxEmitter"
            , bp::pure_virtual( (::irr::scene::IParticleBoxEmitter * ( ::irr::scene::IParticleSystemSceneNode::* )( ::irr::core::aabbox3df const &,::irr::core::vector3df const &,::irr::u32,::irr::u32,::irr::video::SColor const &,::irr::video::SColor const &,::irr::u32,::irr::u32,::irr::s32,::irr::core::dimension2df const &,::irr::core::dimension2df const & ) )(&::irr::scene::IParticleSystemSceneNode::createBoxEmitter) )
            , ( bp::arg("box")=irr::core::aabbox3d<float>(-1.0e+1f, 2.8e+1f, -1.0e+1f, 1.0e+1f, 3.0e+1f, 1.0e+1f), bp::arg("direction")=irr::core::vector3d<float>(0.0f, 2.999999932944774627685546875e-2f, 0.0f), bp::arg("minParticlesPerSecond")=(::irr::u32)(5), bp::arg("maxParticlesPerSecond")=(::irr::u32)(10), bp::arg("minStartColor")=irr::video::SColor(255u, 0u, 0u, 0u), bp::arg("maxStartColor")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("lifeTimeMin")=(::irr::u32)(2000), bp::arg("lifeTimeMax")=(::irr::u32)(4000), bp::arg("maxAngleDegrees")=(::irr::s32)(0), bp::arg("minStartSize")=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))), bp::arg("maxStartSize")=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) )
                /* undefined call policies */ )    
        .def( 
            "createCylinderEmitter"
            , bp::pure_virtual( (::irr::scene::IParticleCylinderEmitter * ( ::irr::scene::IParticleSystemSceneNode::* )( ::irr::core::vector3df const &,::irr::f32,::irr::core::vector3df const &,::irr::f32,bool,::irr::core::vector3df const &,::irr::u32,::irr::u32,::irr::video::SColor const &,::irr::video::SColor const &,::irr::u32,::irr::u32,::irr::s32,::irr::core::dimension2df const &,::irr::core::dimension2df const & ) )(&::irr::scene::IParticleSystemSceneNode::createCylinderEmitter) )
            , ( bp::arg("center"), bp::arg("radius"), bp::arg("normal"), bp::arg("length"), bp::arg("outlineOnly")=(bool)(false), bp::arg("direction")=irr::core::vector3d<float>(0.0f, 2.999999932944774627685546875e-2f, 0.0f), bp::arg("minParticlesPerSecond")=(::irr::u32)(5), bp::arg("maxParticlesPerSecond")=(::irr::u32)(10), bp::arg("minStartColor")=irr::video::SColor(255u, 0u, 0u, 0u), bp::arg("maxStartColor")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("lifeTimeMin")=(::irr::u32)(2000), bp::arg("lifeTimeMax")=(::irr::u32)(4000), bp::arg("maxAngleDegrees")=(::irr::s32)(0), bp::arg("minStartSize")=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))), bp::arg("maxStartSize")=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) )
                /* undefined call policies */ )    
        .def( 
            "createFadeOutParticleAffector"
            , bp::pure_virtual( (::irr::scene::IParticleFadeOutAffector * ( ::irr::scene::IParticleSystemSceneNode::* )( ::irr::video::SColor const &,::irr::u32 ) )(&::irr::scene::IParticleSystemSceneNode::createFadeOutParticleAffector) )
            , ( bp::arg("targetColor")=irr::video::SColor(0u, 0u, 0u, 0u), bp::arg("timeNeededToFadeOut")=(::irr::u32)(1000) )
                /* undefined call policies */ )    
        .def( 
            "createGravityAffector"
            , bp::pure_virtual( (::irr::scene::IParticleGravityAffector * ( ::irr::scene::IParticleSystemSceneNode::* )( ::irr::core::vector3df const &,::irr::u32 ) )(&::irr::scene::IParticleSystemSceneNode::createGravityAffector) )
            , ( bp::arg("gravity")=irr::core::vector3d<float>(0.0f, -2.999999932944774627685546875e-2f, 0.0f), bp::arg("timeForceLost")=(::irr::u32)(1000) )
                /* undefined call policies */ )    
        .def( 
            "createMeshEmitter"
            , bp::pure_virtual( (::irr::scene::IParticleMeshEmitter * ( ::irr::scene::IParticleSystemSceneNode::* )( ::irr::scene::IMesh *,bool,::irr::core::vector3df const &,::irr::f32,::irr::s32,bool,::irr::u32,::irr::u32,::irr::video::SColor const &,::irr::video::SColor const &,::irr::u32,::irr::u32,::irr::s32,::irr::core::dimension2df const &,::irr::core::dimension2df const & ) )(&::irr::scene::IParticleSystemSceneNode::createMeshEmitter) )
            , ( bp::arg("mesh"), bp::arg("useNormalDirection")=(bool)(true), bp::arg("direction")=irr::core::vector3d<float>(0.0f, 2.999999932944774627685546875e-2f, 0.0f), bp::arg("normalDirectionModifier")=1.0e+2f, bp::arg("mbNumber")=(::irr::s32)(-0x00000000000000001), bp::arg("everyMeshVertex")=(bool)(false), bp::arg("minParticlesPerSecond")=(::irr::u32)(5), bp::arg("maxParticlesPerSecond")=(::irr::u32)(10), bp::arg("minStartColor")=irr::video::SColor(255u, 0u, 0u, 0u), bp::arg("maxStartColor")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("lifeTimeMin")=(::irr::u32)(2000), bp::arg("lifeTimeMax")=(::irr::u32)(4000), bp::arg("maxAngleDegrees")=(::irr::s32)(0), bp::arg("minStartSize")=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))), bp::arg("maxStartSize")=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) )
                /* undefined call policies */ )    
        .def( 
            "createPointEmitter"
            , bp::pure_virtual( (::irr::scene::IParticlePointEmitter * ( ::irr::scene::IParticleSystemSceneNode::* )( ::irr::core::vector3df const &,::irr::u32,::irr::u32,::irr::video::SColor const &,::irr::video::SColor const &,::irr::u32,::irr::u32,::irr::s32,::irr::core::dimension2df const &,::irr::core::dimension2df const & ) )(&::irr::scene::IParticleSystemSceneNode::createPointEmitter) )
            , ( bp::arg("direction")=irr::core::vector3d<float>(0.0f, 2.999999932944774627685546875e-2f, 0.0f), bp::arg("minParticlesPerSecond")=(::irr::u32)(5), bp::arg("maxParticlesPerSecond")=(::irr::u32)(10), bp::arg("minStartColor")=irr::video::SColor(255u, 0u, 0u, 0u), bp::arg("maxStartColor")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("lifeTimeMin")=(::irr::u32)(2000), bp::arg("lifeTimeMax")=(::irr::u32)(4000), bp::arg("maxAngleDegrees")=(::irr::s32)(0), bp::arg("minStartSize")=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))), bp::arg("maxStartSize")=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) )
                /* undefined call policies */ )    
        .def( 
            "createRingEmitter"
            , bp::pure_virtual( (::irr::scene::IParticleRingEmitter * ( ::irr::scene::IParticleSystemSceneNode::* )( ::irr::core::vector3df const &,::irr::f32,::irr::f32,::irr::core::vector3df const &,::irr::u32,::irr::u32,::irr::video::SColor const &,::irr::video::SColor const &,::irr::u32,::irr::u32,::irr::s32,::irr::core::dimension2df const &,::irr::core::dimension2df const & ) )(&::irr::scene::IParticleSystemSceneNode::createRingEmitter) )
            , ( bp::arg("center"), bp::arg("radius"), bp::arg("ringThickness"), bp::arg("direction")=irr::core::vector3d<float>(0.0f, 2.999999932944774627685546875e-2f, 0.0f), bp::arg("minParticlesPerSecond")=(::irr::u32)(5), bp::arg("maxParticlesPerSecond")=(::irr::u32)(10), bp::arg("minStartColor")=irr::video::SColor(255u, 0u, 0u, 0u), bp::arg("maxStartColor")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("lifeTimeMin")=(::irr::u32)(2000), bp::arg("lifeTimeMax")=(::irr::u32)(4000), bp::arg("maxAngleDegrees")=(::irr::s32)(0), bp::arg("minStartSize")=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))), bp::arg("maxStartSize")=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) )
                /* undefined call policies */ )    
        .def( 
            "createRotationAffector"
            , bp::pure_virtual( (::irr::scene::IParticleRotationAffector * ( ::irr::scene::IParticleSystemSceneNode::* )( ::irr::core::vector3df const &,::irr::core::vector3df const & ) )(&::irr::scene::IParticleSystemSceneNode::createRotationAffector) )
            , ( bp::arg("speed")=irr::core::vector3d<float>(5.0e+0f, 5.0e+0f, 5.0e+0f), bp::arg("pivotPoint")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f) )
                /* undefined call policies */ )    
        .def( 
            "createScaleParticleAffector"
            , bp::pure_virtual( (::irr::scene::IParticleAffector * ( ::irr::scene::IParticleSystemSceneNode::* )( ::irr::core::dimension2df const & ) )(&::irr::scene::IParticleSystemSceneNode::createScaleParticleAffector) )
            , ( bp::arg("scaleTo")=irr::core::dimension2d<float>(((const float&)((const float*)(&1.0e+0f))), ((const float&)((const float*)(&1.0e+0f)))) )
                /* undefined call policies */ )    
        .def( 
            "createSphereEmitter"
            , bp::pure_virtual( (::irr::scene::IParticleSphereEmitter * ( ::irr::scene::IParticleSystemSceneNode::* )( ::irr::core::vector3df const &,::irr::f32,::irr::core::vector3df const &,::irr::u32,::irr::u32,::irr::video::SColor const &,::irr::video::SColor const &,::irr::u32,::irr::u32,::irr::s32,::irr::core::dimension2df const &,::irr::core::dimension2df const & ) )(&::irr::scene::IParticleSystemSceneNode::createSphereEmitter) )
            , ( bp::arg("center"), bp::arg("radius"), bp::arg("direction")=irr::core::vector3d<float>(0.0f, 2.999999932944774627685546875e-2f, 0.0f), bp::arg("minParticlesPerSecond")=(::irr::u32)(5), bp::arg("maxParticlesPerSecond")=(::irr::u32)(10), bp::arg("minStartColor")=irr::video::SColor(255u, 0u, 0u, 0u), bp::arg("maxStartColor")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("lifeTimeMin")=(::irr::u32)(2000), bp::arg("lifeTimeMax")=(::irr::u32)(4000), bp::arg("maxAngleDegrees")=(::irr::s32)(0), bp::arg("minStartSize")=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))), bp::arg("maxStartSize")=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) )
                /* undefined call policies */ )    
        .def( 
            "getEmitter"
            , bp::pure_virtual( (::irr::scene::IParticleEmitter * ( ::irr::scene::IParticleSystemSceneNode::* )(  ) )(&::irr::scene::IParticleSystemSceneNode::getEmitter) )
                /* undefined call policies */ )    
        .def( 
            "removeAllAffectors"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleSystemSceneNode::* )(  ) )(&::irr::scene::IParticleSystemSceneNode::removeAllAffectors) ) )    
        .def( 
            "setEmitter"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleSystemSceneNode::* )( ::irr::scene::IParticleEmitter * ) )(&::irr::scene::IParticleSystemSceneNode::setEmitter) )
            , ( bp::arg("emitter") ) )    
        .def( 
            "setParticleSize"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleSystemSceneNode::* )( ::irr::core::dimension2d< float > const & ) )(&::irr::scene::IParticleSystemSceneNode::setParticleSize) )
            , ( bp::arg("size")=irr::core::dimension2d<float>(((const float&)((const float*)(&5.0e+0f))), ((const float&)((const float*)(&5.0e+0f)))) ) )    
        .def( 
            "setParticlesAreGlobal"
            , bp::pure_virtual( (void ( ::irr::scene::IParticleSystemSceneNode::* )( bool ) )(&::irr::scene::IParticleSystemSceneNode::setParticlesAreGlobal) )
            , ( bp::arg("global")=(bool)(true) ) )    
        .def( 
            "OnAnimate"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::OnAnimate)
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::u32 ) )(&IParticleSystemSceneNode_wrapper::default_OnAnimate)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "OnRegisterSceneNode"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::OnRegisterSceneNode)
            , (void ( IParticleSystemSceneNode_wrapper::* )(  ) )(&IParticleSystemSceneNode_wrapper::default_OnRegisterSceneNode) )    
        .def( 
            "addAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::addAnimator)
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IParticleSystemSceneNode_wrapper::default_addAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::addChild)
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IParticleSystemSceneNode_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "clone"
            , (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNode::clone)
            , (::irr::scene::ISceneNode * ( IParticleSystemSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IParticleSystemSceneNode_wrapper::default_clone)
            , ( bp::arg("newParent")=bp::object(), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "cloneMembers"
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IParticleSystemSceneNode_wrapper::cloneMembers)
            , ( bp::arg("toCopyFrom"), bp::arg("newManager") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::scene::ISceneNode::deserializeAttributes)
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IParticleSystemSceneNode_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getAbsolutePosition"
            , (::irr::core::vector3df ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsolutePosition)
            , (::irr::core::vector3df ( IParticleSystemSceneNode_wrapper::* )(  ) const)(&IParticleSystemSceneNode_wrapper::default_getAbsolutePosition) )    
        .def( 
            "getAbsoluteTransformation"
            , (::irr::core::matrix4 const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsoluteTransformation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getID)
            , (::irr::s32 ( IParticleSystemSceneNode_wrapper::* )(  ) const)(&IParticleSystemSceneNode_wrapper::default_getID) )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::getMaterial)
            , ( bp::arg("num") )
                /* undefined call policies */ )    
        .def( 
            "getMaterialCount"
            , (::irr::u32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getMaterialCount)
            , (::irr::u32 ( IParticleSystemSceneNode_wrapper::* )(  ) const)(&IParticleSystemSceneNode_wrapper::default_getMaterialCount) )    
        .def( 
            "getName"
            , (::irr::c8 const * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getName)
            , (::irr::c8 const * ( IParticleSystemSceneNode_wrapper::* )(  ) const)(&IParticleSystemSceneNode_wrapper::default_getName) )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRelativeTransformation"
            , (::irr::core::matrix4 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRelativeTransformation)
            , (::irr::core::matrix4 ( IParticleSystemSceneNode_wrapper::* )(  ) const)(&IParticleSystemSceneNode_wrapper::default_getRelativeTransformation) )    
        .def( 
            "getRotation"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRotation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getScale"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSceneManager"
            , (::irr::scene::ISceneManager * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getSceneManager)
            , (::irr::scene::ISceneManager * ( IParticleSystemSceneNode_wrapper::* )(  ) const)(&IParticleSystemSceneNode_wrapper::default_getSceneManager)
                /* undefined call policies */ )    
        .def( 
            "getTransformedBoundingBox"
            , (::irr::core::aabbox3d< float > const ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTransformedBoundingBox)
            , (::irr::core::aabbox3d< float > const ( IParticleSystemSceneNode_wrapper::* )(  ) const)(&IParticleSystemSceneNode_wrapper::default_getTransformedBoundingBox) )    
        .def( 
            "getTriangleSelector"
            , (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTriangleSelector)
            , (::irr::scene::ITriangleSelector * ( IParticleSystemSceneNode_wrapper::* )(  ) const)(&IParticleSystemSceneNode_wrapper::default_getTriangleSelector)
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_TYPE ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getType)
            , (::irr::scene::ESCENE_NODE_TYPE ( IParticleSystemSceneNode_wrapper::* )(  ) const)(&IParticleSystemSceneNode_wrapper::default_getType) )    
        .def( 
            "isTrulyVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isTrulyVisible)
            , (bool ( IParticleSystemSceneNode_wrapper::* )(  ) const)(&IParticleSystemSceneNode_wrapper::default_isTrulyVisible) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isVisible)
            , (bool ( IParticleSystemSceneNode_wrapper::* )(  ) const)(&IParticleSystemSceneNode_wrapper::default_isVisible) )    
        .def( 
            "remove"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::remove)
            , (void ( IParticleSystemSceneNode_wrapper::* )(  ) )(&IParticleSystemSceneNode_wrapper::default_remove) )    
        .def( 
            "removeAll"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAll)
            , (void ( IParticleSystemSceneNode_wrapper::* )(  ) )(&IParticleSystemSceneNode_wrapper::default_removeAll) )    
        .def( 
            "removeAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::removeAnimator)
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IParticleSystemSceneNode_wrapper::default_removeAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "removeAnimators"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAnimators)
            , (void ( IParticleSystemSceneNode_wrapper::* )(  ) )(&IParticleSystemSceneNode_wrapper::default_removeAnimators) )    
        .def( 
            "removeChild"
            , (bool ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::removeChild)
            , (bool ( IParticleSystemSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IParticleSystemSceneNode_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "render"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::render) ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::scene::ISceneNode::serializeAttributes)
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IParticleSystemSceneNode_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugDataVisible"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setDebugDataVisible)
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::s32 ) )(&IParticleSystemSceneNode_wrapper::default_setDebugDataVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "setDebugName"
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IParticleSystemSceneNode_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setID"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setID)
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::s32 ) )(&IParticleSystemSceneNode_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IParticleSystemSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::stringc const & ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::core::stringc const & ) )(&IParticleSystemSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setParent"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::setParent)
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IParticleSystemSceneNode_wrapper::default_setParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "setPosition"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setPosition)
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IParticleSystemSceneNode_wrapper::default_setPosition)
            , ( bp::arg("newpos") ) )    
        .def( 
            "setRotation"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setRotation)
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IParticleSystemSceneNode_wrapper::default_setRotation)
            , ( bp::arg("rotation") ) )    
        .def( 
            "setScale"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setScale)
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IParticleSystemSceneNode_wrapper::default_setScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "setSceneManager"
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::scene::ISceneManager * ) )(&IParticleSystemSceneNode_wrapper::setSceneManager)
            , ( bp::arg("newManager") ) )    
        .def( 
            "setTriangleSelector"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::ISceneNode::setTriangleSelector)
            , (void ( IParticleSystemSceneNode_wrapper::* )( ::irr::scene::ITriangleSelector * ) )(&IParticleSystemSceneNode_wrapper::default_setTriangleSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::scene::ISceneNode::* )( bool ) )(&::irr::scene::ISceneNode::setVisible)
            , (void ( IParticleSystemSceneNode_wrapper::* )( bool ) )(&IParticleSystemSceneNode_wrapper::default_setVisible)
            , ( bp::arg("isVisible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::updateAbsolutePosition)
            , (void ( IParticleSystemSceneNode_wrapper::* )(  ) )(&IParticleSystemSceneNode_wrapper::default_updateAbsolutePosition) );

    bp::class_< IQ3LevelMesh_wrapper, bp::bases< irr::scene::IAnimatedMesh >, boost::noncopyable >( "IQ3LevelMesh" )    
        .def( 
            "getEntityList"
            , bp::pure_virtual( (::irr::scene::quake3::tQ3EntityList & ( ::irr::scene::IQ3LevelMesh::* )(  ) )(&::irr::scene::IQ3LevelMesh::getEntityList) )
                /* undefined call policies */ )    
        .def( 
            "getShader"
            , bp::pure_virtual( (::irr::scene::quake3::IShader const * ( ::irr::scene::IQ3LevelMesh::* )( ::irr::c8 const *,bool ) )(&::irr::scene::IQ3LevelMesh::getShader) )
            , ( bp::arg("filename"), bp::arg("fileNameIsValid")=(bool)(true) )
                /* undefined call policies */ )    
        .def( 
            "getShader"
            , bp::pure_virtual( (::irr::scene::quake3::IShader const * ( ::irr::scene::IQ3LevelMesh::* )( ::irr::u32 ) const)(&::irr::scene::IQ3LevelMesh::getShader) )
            , ( bp::arg("index") )
                /* undefined call policies */ )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::IMesh::* )(  ) const)(&::irr::scene::IMesh::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getFrameCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IAnimatedMesh::* )(  ) const)(&::irr::scene::IAnimatedMesh::getFrameCount) ) )    
        .def( 
            "getMesh"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::IAnimatedMesh::* )( ::irr::s32,::irr::s32,::irr::s32,::irr::s32 ) )(&::irr::scene::IAnimatedMesh::getMesh) )
            , ( bp::arg("frame"), bp::arg("detailLevel")=(::irr::s32)(255), bp::arg("startFrameLoop")=(::irr::s32)(-0x00000000000000001), bp::arg("endFrameLoop")=(::irr::s32)(-0x00000000000000001) )
                /* undefined call policies */ )    
        .def( 
            "getMeshBuffer"
            , bp::pure_virtual( (::irr::scene::IMeshBuffer * ( ::irr::scene::IMesh::* )( ::irr::u32 ) const)(&::irr::scene::IMesh::getMeshBuffer) )
            , ( bp::arg("nr") )
                /* undefined call policies */ )    
        .def( 
            "getMeshBuffer"
            , bp::pure_virtual( (::irr::scene::IMeshBuffer * ( ::irr::scene::IMesh::* )( ::irr::video::SMaterial const & ) const)(&::irr::scene::IMesh::getMeshBuffer) )
            , ( bp::arg("material") )
                /* undefined call policies */ )    
        .def( 
            "getMeshBufferCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IMesh::* )(  ) const)(&::irr::scene::IMesh::getMeshBufferCount) ) )    
        .def( 
            "getMeshType"
            , (::irr::scene::E_ANIMATED_MESH_TYPE ( ::irr::scene::IAnimatedMesh::* )(  ) const)(&::irr::scene::IAnimatedMesh::getMeshType)
            , (::irr::scene::E_ANIMATED_MESH_TYPE ( IQ3LevelMesh_wrapper::* )(  ) const)(&IQ3LevelMesh_wrapper::default_getMeshType) )    
        .def( 
            "setBoundingBox"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::core::aabbox3df const & ) )(&::irr::scene::IMesh::setBoundingBox) )
            , ( bp::arg("box") ) )    
        .def( 
            "setDebugName"
            , (void ( IQ3LevelMesh_wrapper::* )( ::irr::c8 const * ) )(&IQ3LevelMesh_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setDirty"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IMesh::setDirty) )
            , ( bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setHardwareMappingHint"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::IMesh::setHardwareMappingHint) )
            , ( bp::arg("newMappingHint"), bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setMaterialFlag"
            , bp::pure_virtual( (void ( ::irr::scene::IMesh::* )( ::irr::video::E_MATERIAL_FLAG,bool ) )(&::irr::scene::IMesh::setMaterialFlag) )
            , ( bp::arg("flag"), bp::arg("newvalue") ) );

    bp::class_< ISceneCollisionManager_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "ISceneCollisionManager" )    
        .def( 
            "getCollisionPoint"
            , bp::pure_virtual( (bool ( ::irr::scene::ISceneCollisionManager::* )( ::irr::core::line3d< float > const &,::irr::scene::ITriangleSelector *,::irr::core::vector3df &,::irr::core::triangle3df &,::irr::scene::ISceneNode const * & ) )(&::irr::scene::ISceneCollisionManager::getCollisionPoint) )
            , ( bp::arg("ray"), bp::arg("selector"), bp::arg("outCollisionPoint"), bp::arg("outTriangle"), bp::arg("outNode") ) )    
        .def( 
            "getCollisionResultPosition"
            , bp::pure_virtual( (::irr::core::vector3df ( ::irr::scene::ISceneCollisionManager::* )( ::irr::scene::ITriangleSelector *,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::core::vector3df const &,::irr::core::triangle3df &,::irr::core::vector3df &,bool &,::irr::scene::ISceneNode const * &,::irr::f32,::irr::core::vector3df const & ) )(&::irr::scene::ISceneCollisionManager::getCollisionResultPosition) )
            , ( bp::arg("selector"), bp::arg("ellipsoidPosition"), bp::arg("ellipsoidRadius"), bp::arg("ellipsoidDirectionAndSpeed"), bp::arg("triout"), bp::arg("hitPosition"), bp::arg("outFalling"), bp::arg("outNode"), bp::arg("slidingSpeed")=5.000000237487256526947021484375e-4f, bp::arg("gravityDirectionAndSpeed")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f) ) )    
        .def( 
            "getRayFromScreenCoordinates"
            , bp::pure_virtual( (::irr::core::line3d< float > ( ::irr::scene::ISceneCollisionManager::* )( ::irr::core::vector2d< int > const &,::irr::scene::ICameraSceneNode * ) )(&::irr::scene::ISceneCollisionManager::getRayFromScreenCoordinates) )
            , ( bp::arg("pos"), bp::arg("camera")=bp::object() ) )    
        .def( 
            "getSceneNodeAndCollisionPointFromRay"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneCollisionManager::* )( ::irr::core::line3df,::irr::core::vector3df &,::irr::core::triangle3df &,::irr::s32,::irr::scene::ISceneNode *,bool ) )(&::irr::scene::ISceneCollisionManager::getSceneNodeAndCollisionPointFromRay) )
            , ( bp::arg("ray"), bp::arg("outCollisionPoint"), bp::arg("outTriangle"), bp::arg("idBitMask")=(::irr::s32)(0), bp::arg("collisionRootNode")=bp::object(), bp::arg("noDebugObjects")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getSceneNodeFromCameraBB"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneCollisionManager::* )( ::irr::scene::ICameraSceneNode *,::irr::s32,bool ) )(&::irr::scene::ISceneCollisionManager::getSceneNodeFromCameraBB) )
            , ( bp::arg("camera"), bp::arg("idBitMask")=(::irr::s32)(0), bp::arg("bNoDebugObjects")=(bool)(false) )
                /* undefined call policies */ )    
        .def( 
            "getSceneNodeFromRayBB"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneCollisionManager::* )( ::irr::core::line3d< float > const &,::irr::s32,bool,::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneCollisionManager::getSceneNodeFromRayBB) )
            , ( bp::arg("ray"), bp::arg("idBitMask")=(::irr::s32)(0), bp::arg("bNoDebugObjects")=(bool)(false), bp::arg("root")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "getSceneNodeFromScreenCoordinatesBB"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneCollisionManager::* )( ::irr::core::vector2d< int > const &,::irr::s32,bool,::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneCollisionManager::getSceneNodeFromScreenCoordinatesBB) )
            , ( bp::arg("pos"), bp::arg("idBitMask")=(::irr::s32)(0), bp::arg("bNoDebugObjects")=(bool)(false), bp::arg("root")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "getScreenCoordinatesFrom3DPosition"
            , bp::pure_virtual( (::irr::core::vector2d< int > ( ::irr::scene::ISceneCollisionManager::* )( ::irr::core::vector3df const &,::irr::scene::ICameraSceneNode * ) )(&::irr::scene::ISceneCollisionManager::getScreenCoordinatesFrom3DPosition) )
            , ( bp::arg("pos"), bp::arg("camera")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( ISceneCollisionManager_wrapper::* )( ::irr::c8 const * ) )(&ISceneCollisionManager_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< ISceneNodeAnimatorCameraFPS_wrapper, bp::bases< irr::scene::ISceneNodeAnimator >, boost::noncopyable >( "ISceneNodeAnimatorCameraFPS" )    
        .def( 
            "getMoveSpeed"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::ISceneNodeAnimatorCameraFPS::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCameraFPS::getMoveSpeed) ) )    
        .def( 
            "getRotateSpeed"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::ISceneNodeAnimatorCameraFPS::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCameraFPS::getRotateSpeed) ) )    
        .def( 
            "setInvertMouse"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCameraFPS::* )( bool ) )(&::irr::scene::ISceneNodeAnimatorCameraFPS::setInvertMouse) )
            , ( bp::arg("invert") ) )    
        .def( 
            "setKeyMap"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCameraFPS::* )( ::irr::SKeyMap *,::irr::u32 ) )(&::irr::scene::ISceneNodeAnimatorCameraFPS::setKeyMap) )
            , ( bp::arg("map"), bp::arg("count") ) )    
        .def( 
            "setMoveSpeed"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCameraFPS::* )( ::irr::f32 ) )(&::irr::scene::ISceneNodeAnimatorCameraFPS::setMoveSpeed) )
            , ( bp::arg("moveSpeed") ) )    
        .def( 
            "setRotateSpeed"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCameraFPS::* )( ::irr::f32 ) )(&::irr::scene::ISceneNodeAnimatorCameraFPS::setRotateSpeed) )
            , ( bp::arg("rotateSpeed") ) )    
        .def( 
            "setVerticalMovement"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCameraFPS::* )( bool ) )(&::irr::scene::ISceneNodeAnimatorCameraFPS::setVerticalMovement) )
            , ( bp::arg("allow") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )( ::irr::SEvent const & ) )(&::irr::scene::ISceneNodeAnimator::OnEvent)
            , (bool ( ISceneNodeAnimatorCameraFPS_wrapper::* )( ::irr::SEvent const & ) )(&ISceneNodeAnimatorCameraFPS_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "animateNode"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimator::* )( ::irr::scene::ISceneNode *,::irr::u32 ) )(&::irr::scene::ISceneNodeAnimator::animateNode) )
            , ( bp::arg("node"), bp::arg("timeMs") ) )    
        .def( 
            "createClone"
            , bp::pure_virtual( (::irr::scene::ISceneNodeAnimator * ( ::irr::scene::ISceneNodeAnimator::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNodeAnimator::createClone) )
            , ( bp::arg("node"), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( ISceneNodeAnimatorCameraFPS_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&ISceneNodeAnimatorCameraFPS_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_ANIMATOR_TYPE ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::getType)
            , (::irr::scene::ESCENE_NODE_ANIMATOR_TYPE ( ISceneNodeAnimatorCameraFPS_wrapper::* )(  ) const)(&ISceneNodeAnimatorCameraFPS_wrapper::default_getType) )    
        .def( 
            "hasFinished"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::hasFinished)
            , (bool ( ISceneNodeAnimatorCameraFPS_wrapper::* )(  ) const)(&ISceneNodeAnimatorCameraFPS_wrapper::default_hasFinished) )    
        .def( 
            "isEventReceiverEnabled"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::isEventReceiverEnabled)
            , (bool ( ISceneNodeAnimatorCameraFPS_wrapper::* )(  ) const)(&ISceneNodeAnimatorCameraFPS_wrapper::default_isEventReceiverEnabled) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( ISceneNodeAnimatorCameraFPS_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&ISceneNodeAnimatorCameraFPS_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( ISceneNodeAnimatorCameraFPS_wrapper::* )( ::irr::c8 const * ) )(&ISceneNodeAnimatorCameraFPS_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< ISceneNodeAnimatorCameraMaya_wrapper, bp::bases< irr::scene::ISceneNodeAnimator >, boost::noncopyable >( "ISceneNodeAnimatorCameraMaya" )    
        .def( 
            "getMoveSpeed"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::ISceneNodeAnimatorCameraMaya::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCameraMaya::getMoveSpeed) ) )    
        .def( 
            "getRotateSpeed"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::ISceneNodeAnimatorCameraMaya::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCameraMaya::getRotateSpeed) ) )    
        .def( 
            "getZoomSpeed"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::ISceneNodeAnimatorCameraMaya::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCameraMaya::getZoomSpeed) ) )    
        .def( 
            "setMoveSpeed"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCameraMaya::* )( ::irr::f32 ) )(&::irr::scene::ISceneNodeAnimatorCameraMaya::setMoveSpeed) )
            , ( bp::arg("moveSpeed") ) )    
        .def( 
            "setRotateSpeed"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCameraMaya::* )( ::irr::f32 ) )(&::irr::scene::ISceneNodeAnimatorCameraMaya::setRotateSpeed) )
            , ( bp::arg("rotateSpeed") ) )    
        .def( 
            "setZoomSpeed"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCameraMaya::* )( ::irr::f32 ) )(&::irr::scene::ISceneNodeAnimatorCameraMaya::setZoomSpeed) )
            , ( bp::arg("zoomSpeed") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )( ::irr::SEvent const & ) )(&::irr::scene::ISceneNodeAnimator::OnEvent)
            , (bool ( ISceneNodeAnimatorCameraMaya_wrapper::* )( ::irr::SEvent const & ) )(&ISceneNodeAnimatorCameraMaya_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "animateNode"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimator::* )( ::irr::scene::ISceneNode *,::irr::u32 ) )(&::irr::scene::ISceneNodeAnimator::animateNode) )
            , ( bp::arg("node"), bp::arg("timeMs") ) )    
        .def( 
            "createClone"
            , bp::pure_virtual( (::irr::scene::ISceneNodeAnimator * ( ::irr::scene::ISceneNodeAnimator::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNodeAnimator::createClone) )
            , ( bp::arg("node"), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( ISceneNodeAnimatorCameraMaya_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&ISceneNodeAnimatorCameraMaya_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_ANIMATOR_TYPE ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::getType)
            , (::irr::scene::ESCENE_NODE_ANIMATOR_TYPE ( ISceneNodeAnimatorCameraMaya_wrapper::* )(  ) const)(&ISceneNodeAnimatorCameraMaya_wrapper::default_getType) )    
        .def( 
            "hasFinished"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::hasFinished)
            , (bool ( ISceneNodeAnimatorCameraMaya_wrapper::* )(  ) const)(&ISceneNodeAnimatorCameraMaya_wrapper::default_hasFinished) )    
        .def( 
            "isEventReceiverEnabled"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::isEventReceiverEnabled)
            , (bool ( ISceneNodeAnimatorCameraMaya_wrapper::* )(  ) const)(&ISceneNodeAnimatorCameraMaya_wrapper::default_isEventReceiverEnabled) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( ISceneNodeAnimatorCameraMaya_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&ISceneNodeAnimatorCameraMaya_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( ISceneNodeAnimatorCameraMaya_wrapper::* )( ::irr::c8 const * ) )(&ISceneNodeAnimatorCameraMaya_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< ISceneNodeAnimatorCollisionResponse_wrapper, bp::bases< irr::scene::ISceneNodeAnimator >, boost::noncopyable >( "ISceneNodeAnimatorCollisionResponse" )    
        .def( 
            "collisionOccurred"
            , bp::pure_virtual( (bool ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCollisionResponse::collisionOccurred) ) )    
        .def( 
            "getAnimateTarget"
            , bp::pure_virtual( (bool ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCollisionResponse::getAnimateTarget) ) )    
        .def( 
            "getCollisionNode"
            , bp::pure_virtual( (::irr::scene::ISceneNode const * ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCollisionResponse::getCollisionNode) )
                /* undefined call policies */ )    
        .def( 
            "getCollisionPoint"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCollisionResponse::getCollisionPoint) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getCollisionResultPosition"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCollisionResponse::getCollisionResultPosition) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getCollisionTriangle"
            , bp::pure_virtual( (::irr::core::triangle3df const & ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCollisionResponse::getCollisionTriangle) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getEllipsoidRadius"
            , bp::pure_virtual( (::irr::core::vector3df ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCollisionResponse::getEllipsoidRadius) ) )    
        .def( 
            "getEllipsoidTranslation"
            , bp::pure_virtual( (::irr::core::vector3df ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCollisionResponse::getEllipsoidTranslation) ) )    
        .def( 
            "getGravity"
            , bp::pure_virtual( (::irr::core::vector3df ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCollisionResponse::getGravity) ) )    
        .def( 
            "getTargetNode"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCollisionResponse::getTargetNode) )
                /* undefined call policies */ )    
        .def( 
            "getWorld"
            , bp::pure_virtual( (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCollisionResponse::getWorld) )
                /* undefined call policies */ )    
        .def( 
            "isFalling"
            , bp::pure_virtual( (bool ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorCollisionResponse::isFalling) ) )    
        .def( 
            "jump"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )( ::irr::f32 ) )(&::irr::scene::ISceneNodeAnimatorCollisionResponse::jump) )
            , ( bp::arg("jumpSpeed") ) )    
        .def( 
            "setAnimateTarget"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )( bool ) )(&::irr::scene::ISceneNodeAnimatorCollisionResponse::setAnimateTarget) )
            , ( bp::arg("enable") ) )    
        .def( 
            "setCollisionCallback"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )( ::irr::scene::ICollisionCallback * ) )(&::irr::scene::ISceneNodeAnimatorCollisionResponse::setCollisionCallback) )
            , ( bp::arg("callback") ) )    
        .def( 
            "setEllipsoidRadius"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNodeAnimatorCollisionResponse::setEllipsoidRadius) )
            , ( bp::arg("radius") ) )    
        .def( 
            "setEllipsoidTranslation"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNodeAnimatorCollisionResponse::setEllipsoidTranslation) )
            , ( bp::arg("translation") ) )    
        .def( 
            "setGravity"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNodeAnimatorCollisionResponse::setGravity) )
            , ( bp::arg("gravity") ) )    
        .def( 
            "setTargetNode"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNodeAnimatorCollisionResponse::setTargetNode) )
            , ( bp::arg("node") ) )    
        .def( 
            "setWorld"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimatorCollisionResponse::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::ISceneNodeAnimatorCollisionResponse::setWorld) )
            , ( bp::arg("newWorld") ) )    
        .def( 
            "OnEvent"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )( ::irr::SEvent const & ) )(&::irr::scene::ISceneNodeAnimator::OnEvent)
            , (bool ( ISceneNodeAnimatorCollisionResponse_wrapper::* )( ::irr::SEvent const & ) )(&ISceneNodeAnimatorCollisionResponse_wrapper::default_OnEvent)
            , ( bp::arg("event") ) )    
        .def( 
            "animateNode"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNodeAnimator::* )( ::irr::scene::ISceneNode *,::irr::u32 ) )(&::irr::scene::ISceneNodeAnimator::animateNode) )
            , ( bp::arg("node"), bp::arg("timeMs") ) )    
        .def( 
            "createClone"
            , bp::pure_virtual( (::irr::scene::ISceneNodeAnimator * ( ::irr::scene::ISceneNodeAnimator::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNodeAnimator::createClone) )
            , ( bp::arg("node"), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::io::IAttributeExchangingObject::deserializeAttributes)
            , (void ( ISceneNodeAnimatorCollisionResponse_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&ISceneNodeAnimatorCollisionResponse_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_ANIMATOR_TYPE ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::getType)
            , (::irr::scene::ESCENE_NODE_ANIMATOR_TYPE ( ISceneNodeAnimatorCollisionResponse_wrapper::* )(  ) const)(&ISceneNodeAnimatorCollisionResponse_wrapper::default_getType) )    
        .def( 
            "hasFinished"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::hasFinished)
            , (bool ( ISceneNodeAnimatorCollisionResponse_wrapper::* )(  ) const)(&ISceneNodeAnimatorCollisionResponse_wrapper::default_hasFinished) )    
        .def( 
            "isEventReceiverEnabled"
            , (bool ( ::irr::scene::ISceneNodeAnimator::* )(  ) const)(&::irr::scene::ISceneNodeAnimator::isEventReceiverEnabled)
            , (bool ( ISceneNodeAnimatorCollisionResponse_wrapper::* )(  ) const)(&ISceneNodeAnimatorCollisionResponse_wrapper::default_isEventReceiverEnabled) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::io::IAttributeExchangingObject::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::io::IAttributeExchangingObject::serializeAttributes)
            , (void ( ISceneNodeAnimatorCollisionResponse_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&ISceneNodeAnimatorCollisionResponse_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugName"
            , (void ( ISceneNodeAnimatorCollisionResponse_wrapper::* )( ::irr::c8 const * ) )(&ISceneNodeAnimatorCollisionResponse_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< ISceneNodeAnimatorFactory_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "ISceneNodeAnimatorFactory" )    
        .def( 
            "createSceneNodeAnimator"
            , bp::pure_virtual( (::irr::scene::ISceneNodeAnimator * ( ::irr::scene::ISceneNodeAnimatorFactory::* )( ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE,::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNodeAnimatorFactory::createSceneNodeAnimator) )
            , ( bp::arg("type"), bp::arg("target") )
                /* undefined call policies */ )    
        .def( 
            "createSceneNodeAnimator"
            , bp::pure_virtual( (::irr::scene::ISceneNodeAnimator * ( ::irr::scene::ISceneNodeAnimatorFactory::* )( ::irr::c8 const *,::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNodeAnimatorFactory::createSceneNodeAnimator) )
            , ( bp::arg("typeName"), bp::arg("target") )
                /* undefined call policies */ )    
        .def( 
            "getCreatableSceneNodeAnimatorTypeCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::ISceneNodeAnimatorFactory::* )(  ) const)(&::irr::scene::ISceneNodeAnimatorFactory::getCreatableSceneNodeAnimatorTypeCount) ) )    
        .def( 
            "getCreateableSceneNodeAnimatorType"
            , bp::pure_virtual( (::irr::scene::ESCENE_NODE_ANIMATOR_TYPE ( ::irr::scene::ISceneNodeAnimatorFactory::* )( ::irr::u32 ) const)(&::irr::scene::ISceneNodeAnimatorFactory::getCreateableSceneNodeAnimatorType) )
            , ( bp::arg("idx") ) )    
        .def( 
            "getCreateableSceneNodeAnimatorTypeName"
            , bp::pure_virtual( (::irr::c8 const * ( ::irr::scene::ISceneNodeAnimatorFactory::* )( ::irr::u32 ) const)(&::irr::scene::ISceneNodeAnimatorFactory::getCreateableSceneNodeAnimatorTypeName) )
            , ( bp::arg("idx") ) )    
        .def( 
            "getCreateableSceneNodeAnimatorTypeName"
            , bp::pure_virtual( (::irr::c8 const * ( ::irr::scene::ISceneNodeAnimatorFactory::* )( ::irr::scene::ESCENE_NODE_ANIMATOR_TYPE ) const)(&::irr::scene::ISceneNodeAnimatorFactory::getCreateableSceneNodeAnimatorTypeName) )
            , ( bp::arg("type") ) )    
        .def( 
            "setDebugName"
            , (void ( ISceneNodeAnimatorFactory_wrapper::* )( ::irr::c8 const * ) )(&ISceneNodeAnimatorFactory_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< ISceneNodeFactory_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "ISceneNodeFactory" )    
        .def( 
            "addSceneNode"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNodeFactory::* )( ::irr::scene::ESCENE_NODE_TYPE,::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNodeFactory::addSceneNode) )
            , ( bp::arg("type"), bp::arg("parent")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "addSceneNode"
            , bp::pure_virtual( (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNodeFactory::* )( ::irr::c8 const *,::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNodeFactory::addSceneNode) )
            , ( bp::arg("typeName"), bp::arg("parent")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "getCreatableSceneNodeTypeCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::ISceneNodeFactory::* )(  ) const)(&::irr::scene::ISceneNodeFactory::getCreatableSceneNodeTypeCount) ) )    
        .def( 
            "getCreateableSceneNodeType"
            , bp::pure_virtual( (::irr::scene::ESCENE_NODE_TYPE ( ::irr::scene::ISceneNodeFactory::* )( ::irr::u32 ) const)(&::irr::scene::ISceneNodeFactory::getCreateableSceneNodeType) )
            , ( bp::arg("idx") ) )    
        .def( 
            "getCreateableSceneNodeTypeName"
            , bp::pure_virtual( (::irr::c8 const * ( ::irr::scene::ISceneNodeFactory::* )( ::irr::u32 ) const)(&::irr::scene::ISceneNodeFactory::getCreateableSceneNodeTypeName) )
            , ( bp::arg("idx") ) )    
        .def( 
            "getCreateableSceneNodeTypeName"
            , bp::pure_virtual( (::irr::c8 const * ( ::irr::scene::ISceneNodeFactory::* )( ::irr::scene::ESCENE_NODE_TYPE ) const)(&::irr::scene::ISceneNodeFactory::getCreateableSceneNodeTypeName) )
            , ( bp::arg("type") ) )    
        .def( 
            "setDebugName"
            , (void ( ISceneNodeFactory_wrapper::* )( ::irr::c8 const * ) )(&ISceneNodeFactory_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IShadowVolumeSceneNode_wrapper, bp::bases< irr::scene::ISceneNode >, boost::noncopyable >( "IShadowVolumeSceneNode", bp::init< irr::scene::ISceneNode *, irr::scene::ISceneManager *, irr::s32 >(( bp::arg("parent"), bp::arg("mgr"), bp::arg("id") )) )    
        .def( 
            "setShadowMesh"
            , bp::pure_virtual( (void ( ::irr::scene::IShadowVolumeSceneNode::* )( ::irr::scene::IMesh const * ) )(&::irr::scene::IShadowVolumeSceneNode::setShadowMesh) )
            , ( bp::arg("mesh") ) )    
        .def( 
            "updateShadowVolumes"
            , bp::pure_virtual( (void ( ::irr::scene::IShadowVolumeSceneNode::* )(  ) )(&::irr::scene::IShadowVolumeSceneNode::updateShadowVolumes) ) )    
        .def( 
            "OnAnimate"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::OnAnimate)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::u32 ) )(&IShadowVolumeSceneNode_wrapper::default_OnAnimate)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "OnRegisterSceneNode"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::OnRegisterSceneNode)
            , (void ( IShadowVolumeSceneNode_wrapper::* )(  ) )(&IShadowVolumeSceneNode_wrapper::default_OnRegisterSceneNode) )    
        .def( 
            "addAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::addAnimator)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IShadowVolumeSceneNode_wrapper::default_addAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::addChild)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IShadowVolumeSceneNode_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "clone"
            , (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNode::clone)
            , (::irr::scene::ISceneNode * ( IShadowVolumeSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IShadowVolumeSceneNode_wrapper::default_clone)
            , ( bp::arg("newParent")=bp::object(), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "cloneMembers"
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IShadowVolumeSceneNode_wrapper::cloneMembers)
            , ( bp::arg("toCopyFrom"), bp::arg("newManager") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::scene::ISceneNode::deserializeAttributes)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IShadowVolumeSceneNode_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getAbsolutePosition"
            , (::irr::core::vector3df ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsolutePosition)
            , (::irr::core::vector3df ( IShadowVolumeSceneNode_wrapper::* )(  ) const)(&IShadowVolumeSceneNode_wrapper::default_getAbsolutePosition) )    
        .def( 
            "getAbsoluteTransformation"
            , (::irr::core::matrix4 const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsoluteTransformation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getID)
            , (::irr::s32 ( IShadowVolumeSceneNode_wrapper::* )(  ) const)(&IShadowVolumeSceneNode_wrapper::default_getID) )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::getMaterial)
            , ( bp::arg("num") )
                /* undefined call policies */ )    
        .def( 
            "getMaterialCount"
            , (::irr::u32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getMaterialCount)
            , (::irr::u32 ( IShadowVolumeSceneNode_wrapper::* )(  ) const)(&IShadowVolumeSceneNode_wrapper::default_getMaterialCount) )    
        .def( 
            "getName"
            , (::irr::c8 const * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getName)
            , (::irr::c8 const * ( IShadowVolumeSceneNode_wrapper::* )(  ) const)(&IShadowVolumeSceneNode_wrapper::default_getName) )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRelativeTransformation"
            , (::irr::core::matrix4 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRelativeTransformation)
            , (::irr::core::matrix4 ( IShadowVolumeSceneNode_wrapper::* )(  ) const)(&IShadowVolumeSceneNode_wrapper::default_getRelativeTransformation) )    
        .def( 
            "getRotation"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRotation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getScale"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSceneManager"
            , (::irr::scene::ISceneManager * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getSceneManager)
            , (::irr::scene::ISceneManager * ( IShadowVolumeSceneNode_wrapper::* )(  ) const)(&IShadowVolumeSceneNode_wrapper::default_getSceneManager)
                /* undefined call policies */ )    
        .def( 
            "getTransformedBoundingBox"
            , (::irr::core::aabbox3d< float > const ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTransformedBoundingBox)
            , (::irr::core::aabbox3d< float > const ( IShadowVolumeSceneNode_wrapper::* )(  ) const)(&IShadowVolumeSceneNode_wrapper::default_getTransformedBoundingBox) )    
        .def( 
            "getTriangleSelector"
            , (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTriangleSelector)
            , (::irr::scene::ITriangleSelector * ( IShadowVolumeSceneNode_wrapper::* )(  ) const)(&IShadowVolumeSceneNode_wrapper::default_getTriangleSelector)
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_TYPE ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getType)
            , (::irr::scene::ESCENE_NODE_TYPE ( IShadowVolumeSceneNode_wrapper::* )(  ) const)(&IShadowVolumeSceneNode_wrapper::default_getType) )    
        .def( 
            "isTrulyVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isTrulyVisible)
            , (bool ( IShadowVolumeSceneNode_wrapper::* )(  ) const)(&IShadowVolumeSceneNode_wrapper::default_isTrulyVisible) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isVisible)
            , (bool ( IShadowVolumeSceneNode_wrapper::* )(  ) const)(&IShadowVolumeSceneNode_wrapper::default_isVisible) )    
        .def( 
            "remove"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::remove)
            , (void ( IShadowVolumeSceneNode_wrapper::* )(  ) )(&IShadowVolumeSceneNode_wrapper::default_remove) )    
        .def( 
            "removeAll"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAll)
            , (void ( IShadowVolumeSceneNode_wrapper::* )(  ) )(&IShadowVolumeSceneNode_wrapper::default_removeAll) )    
        .def( 
            "removeAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::removeAnimator)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IShadowVolumeSceneNode_wrapper::default_removeAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "removeAnimators"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAnimators)
            , (void ( IShadowVolumeSceneNode_wrapper::* )(  ) )(&IShadowVolumeSceneNode_wrapper::default_removeAnimators) )    
        .def( 
            "removeChild"
            , (bool ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::removeChild)
            , (bool ( IShadowVolumeSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IShadowVolumeSceneNode_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "render"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::render) ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::scene::ISceneNode::serializeAttributes)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IShadowVolumeSceneNode_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugDataVisible"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setDebugDataVisible)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::s32 ) )(&IShadowVolumeSceneNode_wrapper::default_setDebugDataVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "setDebugName"
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IShadowVolumeSceneNode_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setID"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setID)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::s32 ) )(&IShadowVolumeSceneNode_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IShadowVolumeSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::stringc const & ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::core::stringc const & ) )(&IShadowVolumeSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setParent"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::setParent)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IShadowVolumeSceneNode_wrapper::default_setParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "setPosition"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setPosition)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IShadowVolumeSceneNode_wrapper::default_setPosition)
            , ( bp::arg("newpos") ) )    
        .def( 
            "setRotation"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setRotation)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IShadowVolumeSceneNode_wrapper::default_setRotation)
            , ( bp::arg("rotation") ) )    
        .def( 
            "setScale"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setScale)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IShadowVolumeSceneNode_wrapper::default_setScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "setSceneManager"
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::scene::ISceneManager * ) )(&IShadowVolumeSceneNode_wrapper::setSceneManager)
            , ( bp::arg("newManager") ) )    
        .def( 
            "setTriangleSelector"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::ISceneNode::setTriangleSelector)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( ::irr::scene::ITriangleSelector * ) )(&IShadowVolumeSceneNode_wrapper::default_setTriangleSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::scene::ISceneNode::* )( bool ) )(&::irr::scene::ISceneNode::setVisible)
            , (void ( IShadowVolumeSceneNode_wrapper::* )( bool ) )(&IShadowVolumeSceneNode_wrapper::default_setVisible)
            , ( bp::arg("isVisible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::updateAbsolutePosition)
            , (void ( IShadowVolumeSceneNode_wrapper::* )(  ) )(&IShadowVolumeSceneNode_wrapper::default_updateAbsolutePosition) );

    { //::irr::scene::ISkinnedMesh
        typedef bp::class_< ISkinnedMesh_wrapper, bp::bases< irr::scene::IAnimatedMesh >, boost::noncopyable > ISkinnedMesh_exposer_t;
        ISkinnedMesh_exposer_t ISkinnedMesh_exposer = ISkinnedMesh_exposer_t( "ISkinnedMesh" );
        bp::scope ISkinnedMesh_scope( ISkinnedMesh_exposer );
        bp::class_< irr::scene::ISkinnedMesh::SJoint, boost::noncopyable >( "SJoint", bp::no_init )    
            .def( bp::init< >() )    
            .def_readwrite( "Animatedposition", &irr::scene::ISkinnedMesh::SJoint::Animatedposition )    
            .def_readwrite( "Animatedrotation", &irr::scene::ISkinnedMesh::SJoint::Animatedrotation )    
            .def_readwrite( "Animatedscale", &irr::scene::ISkinnedMesh::SJoint::Animatedscale )    
            .def_readwrite( "AttachedMeshes", &irr::scene::ISkinnedMesh::SJoint::AttachedMeshes )    
            .def_readwrite( "Children", &irr::scene::ISkinnedMesh::SJoint::Children )    
            .def_readwrite( "GlobalAnimatedMatrix", &irr::scene::ISkinnedMesh::SJoint::GlobalAnimatedMatrix )    
            .def_readwrite( "GlobalInversedMatrix", &irr::scene::ISkinnedMesh::SJoint::GlobalInversedMatrix )    
            .def_readwrite( "GlobalMatrix", &irr::scene::ISkinnedMesh::SJoint::GlobalMatrix )    
            .def_readwrite( "LocalAnimatedMatrix", &irr::scene::ISkinnedMesh::SJoint::LocalAnimatedMatrix )    
            .def_readwrite( "LocalMatrix", &irr::scene::ISkinnedMesh::SJoint::LocalMatrix )    
            .def_readwrite( "Name", &irr::scene::ISkinnedMesh::SJoint::Name )    
            .def_readwrite( "PositionKeys", &irr::scene::ISkinnedMesh::SJoint::PositionKeys )    
            .def_readwrite( "RotationKeys", &irr::scene::ISkinnedMesh::SJoint::RotationKeys )    
            .def_readwrite( "ScaleKeys", &irr::scene::ISkinnedMesh::SJoint::ScaleKeys )    
            .def_readwrite( "Weights", &irr::scene::ISkinnedMesh::SJoint::Weights );
        bp::class_< irr::scene::ISkinnedMesh::SPositionKey >( "SPositionKey" )    
            .def_readwrite( "frame", &irr::scene::ISkinnedMesh::SPositionKey::frame )    
            .def_readwrite( "position", &irr::scene::ISkinnedMesh::SPositionKey::position );
        bp::class_< irr::scene::ISkinnedMesh::SRotationKey >( "SRotationKey" )    
            .def_readwrite( "frame", &irr::scene::ISkinnedMesh::SRotationKey::frame )    
            .def_readwrite( "rotation", &irr::scene::ISkinnedMesh::SRotationKey::rotation );
        bp::class_< irr::scene::ISkinnedMesh::SScaleKey >( "SScaleKey" )    
            .def_readwrite( "frame", &irr::scene::ISkinnedMesh::SScaleKey::frame )    
            .def_readwrite( "scale", &irr::scene::ISkinnedMesh::SScaleKey::scale );
        bp::class_< irr::scene::ISkinnedMesh::SWeight >( "SWeight" )    
            .def_readwrite( "buffer_id", &irr::scene::ISkinnedMesh::SWeight::buffer_id )    
            .def_readwrite( "strength", &irr::scene::ISkinnedMesh::SWeight::strength )    
            .def_readwrite( "vertex_id", &irr::scene::ISkinnedMesh::SWeight::vertex_id );
        { //::irr::scene::ISkinnedMesh::addJoint
        
            typedef ::irr::scene::ISkinnedMesh::SJoint * ( ::irr::scene::ISkinnedMesh::*addJoint_function_type )( ::irr::scene::ISkinnedMesh::SJoint * ) ;
            
            ISkinnedMesh_exposer.def( 
                "addJoint"
                , bp::pure_virtual( addJoint_function_type(&::irr::scene::ISkinnedMesh::addJoint) )
                , ( bp::arg("parent")=bp::object() )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::ISkinnedMesh::addMeshBuffer
        
            typedef ::irr::scene::SSkinMeshBuffer * ( ::irr::scene::ISkinnedMesh::*addMeshBuffer_function_type )(  ) ;
            
            ISkinnedMesh_exposer.def( 
                "addMeshBuffer"
                , bp::pure_virtual( addMeshBuffer_function_type(&::irr::scene::ISkinnedMesh::addMeshBuffer) )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::ISkinnedMesh::addPositionKey
        
            typedef ::irr::scene::ISkinnedMesh::SPositionKey * ( ::irr::scene::ISkinnedMesh::*addPositionKey_function_type )( ::irr::scene::ISkinnedMesh::SJoint * ) ;
            
            ISkinnedMesh_exposer.def( 
                "addPositionKey"
                , bp::pure_virtual( addPositionKey_function_type(&::irr::scene::ISkinnedMesh::addPositionKey) )
                , ( bp::arg("joint") )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::ISkinnedMesh::addRotationKey
        
            typedef ::irr::scene::ISkinnedMesh::SRotationKey * ( ::irr::scene::ISkinnedMesh::*addRotationKey_function_type )( ::irr::scene::ISkinnedMesh::SJoint * ) ;
            
            ISkinnedMesh_exposer.def( 
                "addRotationKey"
                , bp::pure_virtual( addRotationKey_function_type(&::irr::scene::ISkinnedMesh::addRotationKey) )
                , ( bp::arg("joint") )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::ISkinnedMesh::addScaleKey
        
            typedef ::irr::scene::ISkinnedMesh::SScaleKey * ( ::irr::scene::ISkinnedMesh::*addScaleKey_function_type )( ::irr::scene::ISkinnedMesh::SJoint * ) ;
            
            ISkinnedMesh_exposer.def( 
                "addScaleKey"
                , bp::pure_virtual( addScaleKey_function_type(&::irr::scene::ISkinnedMesh::addScaleKey) )
                , ( bp::arg("joint") )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::ISkinnedMesh::addWeight
        
            typedef ::irr::scene::ISkinnedMesh::SWeight * ( ::irr::scene::ISkinnedMesh::*addWeight_function_type )( ::irr::scene::ISkinnedMesh::SJoint * ) ;
            
            ISkinnedMesh_exposer.def( 
                "addWeight"
                , bp::pure_virtual( addWeight_function_type(&::irr::scene::ISkinnedMesh::addWeight) )
                , ( bp::arg("joint") )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::ISkinnedMesh::animateMesh
        
            typedef void ( ::irr::scene::ISkinnedMesh::*animateMesh_function_type )( ::irr::f32,::irr::f32 ) ;
            
            ISkinnedMesh_exposer.def( 
                "animateMesh"
                , bp::pure_virtual( animateMesh_function_type(&::irr::scene::ISkinnedMesh::animateMesh) )
                , ( bp::arg("frame"), bp::arg("blend") ) );
        
        }
        { //::irr::scene::ISkinnedMesh::convertMeshToTangents
        
            typedef void ( ::irr::scene::ISkinnedMesh::*convertMeshToTangents_function_type )(  ) ;
            
            ISkinnedMesh_exposer.def( 
                "convertMeshToTangents"
                , bp::pure_virtual( convertMeshToTangents_function_type(&::irr::scene::ISkinnedMesh::convertMeshToTangents) ) );
        
        }
        { //::irr::scene::ISkinnedMesh::finalize
        
            typedef void ( ::irr::scene::ISkinnedMesh::*finalize_function_type )(  ) ;
            
            ISkinnedMesh_exposer.def( 
                "finalize"
                , bp::pure_virtual( finalize_function_type(&::irr::scene::ISkinnedMesh::finalize) ) );
        
        }
        { //::irr::scene::ISkinnedMesh::getAllJoints
        
            typedef ::irr::core::array<irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator<irr::scene::ISkinnedMesh::SJoint*> > & ( ::irr::scene::ISkinnedMesh::*getAllJoints_function_type )(  ) ;
            
            ISkinnedMesh_exposer.def( 
                "getAllJoints"
                , bp::pure_virtual( getAllJoints_function_type(&::irr::scene::ISkinnedMesh::getAllJoints) )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::ISkinnedMesh::getAllJoints
        
            typedef ::irr::core::array<irr::scene::ISkinnedMesh::SJoint*, irr::core::irrAllocator<irr::scene::ISkinnedMesh::SJoint*> > const & ( ::irr::scene::ISkinnedMesh::*getAllJoints_function_type )(  ) const;
            
            ISkinnedMesh_exposer.def( 
                "getAllJoints"
                , bp::pure_virtual( getAllJoints_function_type(&::irr::scene::ISkinnedMesh::getAllJoints) )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::scene::ISkinnedMesh::getJointCount
        
            typedef ::irr::u32 ( ::irr::scene::ISkinnedMesh::*getJointCount_function_type )(  ) const;
            
            ISkinnedMesh_exposer.def( 
                "getJointCount"
                , bp::pure_virtual( getJointCount_function_type(&::irr::scene::ISkinnedMesh::getJointCount) ) );
        
        }
        { //::irr::scene::ISkinnedMesh::getJointName
        
            typedef ::irr::c8 const * ( ::irr::scene::ISkinnedMesh::*getJointName_function_type )( ::irr::u32 ) const;
            
            ISkinnedMesh_exposer.def( 
                "getJointName"
                , bp::pure_virtual( getJointName_function_type(&::irr::scene::ISkinnedMesh::getJointName) )
                , ( bp::arg("number") ) );
        
        }
        { //::irr::scene::ISkinnedMesh::getJointNumber
        
            typedef ::irr::s32 ( ::irr::scene::ISkinnedMesh::*getJointNumber_function_type )( ::irr::c8 const * ) const;
            
            ISkinnedMesh_exposer.def( 
                "getJointNumber"
                , bp::pure_virtual( getJointNumber_function_type(&::irr::scene::ISkinnedMesh::getJointNumber) )
                , ( bp::arg("name") ) );
        
        }
        { //::irr::scene::ISkinnedMesh::getMeshBuffers
        
            typedef ::irr::core::array<irr::scene::SSkinMeshBuffer*,irr::core::irrAllocator<irr::scene::SSkinMeshBuffer*> > & ( ::irr::scene::ISkinnedMesh::*getMeshBuffers_function_type )(  ) ;
            
            ISkinnedMesh_exposer.def( 
                "getMeshBuffers"
                , bp::pure_virtual( getMeshBuffers_function_type(&::irr::scene::ISkinnedMesh::getMeshBuffers) )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::ISkinnedMesh::isStatic
        
            typedef bool ( ::irr::scene::ISkinnedMesh::*isStatic_function_type )(  ) ;
            
            ISkinnedMesh_exposer.def( 
                "isStatic"
                , bp::pure_virtual( isStatic_function_type(&::irr::scene::ISkinnedMesh::isStatic) ) );
        
        }
        { //::irr::scene::ISkinnedMesh::setHardwareSkinning
        
            typedef bool ( ::irr::scene::ISkinnedMesh::*setHardwareSkinning_function_type )( bool ) ;
            
            ISkinnedMesh_exposer.def( 
                "setHardwareSkinning"
                , bp::pure_virtual( setHardwareSkinning_function_type(&::irr::scene::ISkinnedMesh::setHardwareSkinning) )
                , ( bp::arg("on") ) );
        
        }
        { //::irr::scene::ISkinnedMesh::setInterpolationMode
        
            typedef void ( ::irr::scene::ISkinnedMesh::*setInterpolationMode_function_type )( ::irr::scene::E_INTERPOLATION_MODE ) ;
            
            ISkinnedMesh_exposer.def( 
                "setInterpolationMode"
                , bp::pure_virtual( setInterpolationMode_function_type(&::irr::scene::ISkinnedMesh::setInterpolationMode) )
                , ( bp::arg("mode") ) );
        
        }
        { //::irr::scene::ISkinnedMesh::skinMesh
        
            typedef void ( ::irr::scene::ISkinnedMesh::*skinMesh_function_type )(  ) ;
            
            ISkinnedMesh_exposer.def( 
                "skinMesh"
                , bp::pure_virtual( skinMesh_function_type(&::irr::scene::ISkinnedMesh::skinMesh) ) );
        
        }
        { //::irr::scene::ISkinnedMesh::updateNormalsWhenAnimating
        
            typedef void ( ::irr::scene::ISkinnedMesh::*updateNormalsWhenAnimating_function_type )( bool ) ;
            
            ISkinnedMesh_exposer.def( 
                "updateNormalsWhenAnimating"
                , bp::pure_virtual( updateNormalsWhenAnimating_function_type(&::irr::scene::ISkinnedMesh::updateNormalsWhenAnimating) )
                , ( bp::arg("on") ) );
        
        }
        { //::irr::scene::ISkinnedMesh::useAnimationFrom
        
            typedef bool ( ::irr::scene::ISkinnedMesh::*useAnimationFrom_function_type )( ::irr::scene::ISkinnedMesh const * ) ;
            
            ISkinnedMesh_exposer.def( 
                "useAnimationFrom"
                , bp::pure_virtual( useAnimationFrom_function_type(&::irr::scene::ISkinnedMesh::useAnimationFrom) )
                , ( bp::arg("mesh") ) );
        
        }
        { //::irr::scene::IMesh::getBoundingBox
        
            typedef ::irr::core::aabbox3d<float> const & ( ::irr::scene::IMesh::*getBoundingBox_function_type )(  ) const;
            
            ISkinnedMesh_exposer.def( 
                "getBoundingBox"
                , bp::pure_virtual( getBoundingBox_function_type(&::irr::scene::IMesh::getBoundingBox) )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::scene::IAnimatedMesh::getFrameCount
        
            typedef ::irr::u32 ( ::irr::scene::IAnimatedMesh::*getFrameCount_function_type )(  ) const;
            
            ISkinnedMesh_exposer.def( 
                "getFrameCount"
                , bp::pure_virtual( getFrameCount_function_type(&::irr::scene::IAnimatedMesh::getFrameCount) ) );
        
        }
        { //::irr::scene::IAnimatedMesh::getMesh
        
            typedef ::irr::scene::IMesh * ( ::irr::scene::IAnimatedMesh::*getMesh_function_type )( ::irr::s32,::irr::s32,::irr::s32,::irr::s32 ) ;
            
            ISkinnedMesh_exposer.def( 
                "getMesh"
                , bp::pure_virtual( getMesh_function_type(&::irr::scene::IAnimatedMesh::getMesh) )
                , ( bp::arg("frame"), bp::arg("detailLevel")=(::irr::s32)(255), bp::arg("startFrameLoop")=(::irr::s32)(-0x00000000000000001), bp::arg("endFrameLoop")=(::irr::s32)(-0x00000000000000001) )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::IMesh::getMeshBuffer
        
            typedef ::irr::scene::IMeshBuffer * ( ::irr::scene::IMesh::*getMeshBuffer_function_type )( ::irr::u32 ) const;
            
            ISkinnedMesh_exposer.def( 
                "getMeshBuffer"
                , bp::pure_virtual( getMeshBuffer_function_type(&::irr::scene::IMesh::getMeshBuffer) )
                , ( bp::arg("nr") )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::IMesh::getMeshBuffer
        
            typedef ::irr::scene::IMeshBuffer * ( ::irr::scene::IMesh::*getMeshBuffer_function_type )( ::irr::video::SMaterial const & ) const;
            
            ISkinnedMesh_exposer.def( 
                "getMeshBuffer"
                , bp::pure_virtual( getMeshBuffer_function_type(&::irr::scene::IMesh::getMeshBuffer) )
                , ( bp::arg("material") )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::IMesh::getMeshBufferCount
        
            typedef ::irr::u32 ( ::irr::scene::IMesh::*getMeshBufferCount_function_type )(  ) const;
            
            ISkinnedMesh_exposer.def( 
                "getMeshBufferCount"
                , bp::pure_virtual( getMeshBufferCount_function_type(&::irr::scene::IMesh::getMeshBufferCount) ) );
        
        }
        { //::irr::scene::IAnimatedMesh::getMeshType
        
            typedef ::irr::scene::E_ANIMATED_MESH_TYPE ( ::irr::scene::IAnimatedMesh::*getMeshType_function_type )(  ) const;
            typedef ::irr::scene::E_ANIMATED_MESH_TYPE ( ISkinnedMesh_wrapper::*default_getMeshType_function_type )(  ) const;
            
            ISkinnedMesh_exposer.def( 
                "getMeshType"
                , getMeshType_function_type(&::irr::scene::IAnimatedMesh::getMeshType)
                , default_getMeshType_function_type(&ISkinnedMesh_wrapper::default_getMeshType) );
        
        }
        { //::irr::scene::IMesh::setBoundingBox
        
            typedef void ( ::irr::scene::IMesh::*setBoundingBox_function_type )( ::irr::core::aabbox3df const & ) ;
            
            ISkinnedMesh_exposer.def( 
                "setBoundingBox"
                , bp::pure_virtual( setBoundingBox_function_type(&::irr::scene::IMesh::setBoundingBox) )
                , ( bp::arg("box") ) );
        
        }
        { //::irr::IReferenceCounted::setDebugName
        
            typedef void ( ISkinnedMesh_wrapper::*setDebugName_function_type )( ::irr::c8 const * ) ;
            
            ISkinnedMesh_exposer.def( 
                "setDebugName"
                , setDebugName_function_type( &ISkinnedMesh_wrapper::setDebugName )
                , ( bp::arg("newName") ) );
        
        }
        { //::irr::scene::IMesh::setDirty
        
            typedef void ( ::irr::scene::IMesh::*setDirty_function_type )( ::irr::scene::E_BUFFER_TYPE ) ;
            
            ISkinnedMesh_exposer.def( 
                "setDirty"
                , bp::pure_virtual( setDirty_function_type(&::irr::scene::IMesh::setDirty) )
                , ( bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) );
        
        }
        { //::irr::scene::IMesh::setHardwareMappingHint
        
            typedef void ( ::irr::scene::IMesh::*setHardwareMappingHint_function_type )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) ;
            
            ISkinnedMesh_exposer.def( 
                "setHardwareMappingHint"
                , bp::pure_virtual( setHardwareMappingHint_function_type(&::irr::scene::IMesh::setHardwareMappingHint) )
                , ( bp::arg("newMappingHint"), bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) );
        
        }
        { //::irr::scene::IMesh::setMaterialFlag
        
            typedef void ( ::irr::scene::IMesh::*setMaterialFlag_function_type )( ::irr::video::E_MATERIAL_FLAG,bool ) ;
            
            ISkinnedMesh_exposer.def( 
                "setMaterialFlag"
                , bp::pure_virtual( setMaterialFlag_function_type(&::irr::scene::IMesh::setMaterialFlag) )
                , ( bp::arg("flag"), bp::arg("newvalue") ) );
        
        }
    }

    bp::class_< ITerrainSceneNode_wrapper, bp::bases< irr::scene::ISceneNode >, boost::noncopyable >( "ITerrainSceneNode", bp::init< irr::scene::ISceneNode *, irr::scene::ISceneManager *, irr::s32, bp::optional< irr::core::vector3df const &, irr::core::vector3df const &, irr::core::vector3df const & > >(( bp::arg("parent"), bp::arg("mgr"), bp::arg("id"), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("rotation")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f), bp::arg("scale")=irr::core::vector3d<float>(1.0e+0f, 1.0e+0f, 1.0e+0f) )) )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::ITerrainSceneNode::* )(  ) const)(&::irr::scene::ITerrainSceneNode::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::ITerrainSceneNode::* )( ::irr::s32,::irr::s32 ) const)(&::irr::scene::ITerrainSceneNode::getBoundingBox) )
            , ( bp::arg("patchX"), bp::arg("patchZ") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getCurrentLODOfPatches"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::ITerrainSceneNode::* )( ::irr::core::array< int, irr::core::irrAllocator< int > > & ) const)(&::irr::scene::ITerrainSceneNode::getCurrentLODOfPatches) )
            , ( bp::arg("LODs") ) )    
        .def( 
            "getHeight"
            , bp::pure_virtual( (::irr::f32 ( ::irr::scene::ITerrainSceneNode::* )( ::irr::f32,::irr::f32 ) const)(&::irr::scene::ITerrainSceneNode::getHeight) )
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "getIndexCount"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::ITerrainSceneNode::* )(  ) const)(&::irr::scene::ITerrainSceneNode::getIndexCount) ) )    
        .def( 
            "getIndicesForPatch"
            , bp::pure_virtual( (::irr::s32 ( ::irr::scene::ITerrainSceneNode::* )( ::irr::core::array< unsigned int, irr::core::irrAllocator< unsigned int > > &,::irr::s32,::irr::s32,::irr::s32 ) )(&::irr::scene::ITerrainSceneNode::getIndicesForPatch) )
            , ( bp::arg("indices"), bp::arg("patchX"), bp::arg("patchZ"), bp::arg("LOD")=(::irr::s32)(0) ) )    
        .def( 
            "getMesh"
            , bp::pure_virtual( (::irr::scene::IMesh * ( ::irr::scene::ITerrainSceneNode::* )(  ) )(&::irr::scene::ITerrainSceneNode::getMesh) )
                /* undefined call policies */ )    
        .def( 
            "getMeshBufferForLOD"
            , bp::pure_virtual( (void ( ::irr::scene::ITerrainSceneNode::* )( ::irr::scene::IDynamicMeshBuffer &,::irr::s32 ) const)(&::irr::scene::ITerrainSceneNode::getMeshBufferForLOD) )
            , ( bp::arg("mb"), bp::arg("LOD")=(::irr::s32)(0) ) )    
        .def( 
            "getRenderBuffer"
            , bp::pure_virtual( (::irr::scene::IMeshBuffer * ( ::irr::scene::ITerrainSceneNode::* )(  ) )(&::irr::scene::ITerrainSceneNode::getRenderBuffer) )
                /* undefined call policies */ )    
        .def( 
            "getTerrainCenter"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::ITerrainSceneNode::* )(  ) const)(&::irr::scene::ITerrainSceneNode::getTerrainCenter) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "loadHeightMap"
            , bp::pure_virtual( (bool ( ::irr::scene::ITerrainSceneNode::* )( ::irr::io::IReadFile *,::irr::video::SColor,::irr::s32 ) )(&::irr::scene::ITerrainSceneNode::loadHeightMap) )
            , ( bp::arg("file"), bp::arg("vertexColor")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("smoothFactor")=(::irr::s32)(0) ) )    
        .def( 
            "loadHeightMapRAW"
            , bp::pure_virtual( (bool ( ::irr::scene::ITerrainSceneNode::* )( ::irr::io::IReadFile *,::irr::s32,bool,bool,::irr::s32,::irr::video::SColor,::irr::s32 ) )(&::irr::scene::ITerrainSceneNode::loadHeightMapRAW) )
            , ( bp::arg("file"), bp::arg("bitsPerPixel")=(::irr::s32)(16), bp::arg("signedData")=(bool)(false), bp::arg("floatVals")=(bool)(false), bp::arg("width")=(::irr::s32)(0), bp::arg("vertexColor")=irr::video::SColor(255u, 255u, 255u, 255u), bp::arg("smoothFactor")=(::irr::s32)(0) ) )    
        .def( 
            "overrideLODDistance"
            , bp::pure_virtual( (bool ( ::irr::scene::ITerrainSceneNode::* )( ::irr::s32,::irr::f64 ) )(&::irr::scene::ITerrainSceneNode::overrideLODDistance) )
            , ( bp::arg("LOD"), bp::arg("newDistance") ) )    
        .def( 
            "scaleTexture"
            , bp::pure_virtual( (void ( ::irr::scene::ITerrainSceneNode::* )( ::irr::f32,::irr::f32 ) )(&::irr::scene::ITerrainSceneNode::scaleTexture) )
            , ( bp::arg("scale")=1.0e+0f, bp::arg("scale2")=0.0f ) )    
        .def( 
            "setCameraMovementDelta"
            , bp::pure_virtual( (void ( ::irr::scene::ITerrainSceneNode::* )( ::irr::f32 ) )(&::irr::scene::ITerrainSceneNode::setCameraMovementDelta) )
            , ( bp::arg("delta") ) )    
        .def( 
            "setCameraRotationDelta"
            , bp::pure_virtual( (void ( ::irr::scene::ITerrainSceneNode::* )( ::irr::f32 ) )(&::irr::scene::ITerrainSceneNode::setCameraRotationDelta) )
            , ( bp::arg("delta") ) )    
        .def( 
            "setDynamicSelectorUpdate"
            , bp::pure_virtual( (void ( ::irr::scene::ITerrainSceneNode::* )( bool ) )(&::irr::scene::ITerrainSceneNode::setDynamicSelectorUpdate) )
            , ( bp::arg("bVal") ) )    
        .def( 
            "setLODOfPatch"
            , bp::pure_virtual( (void ( ::irr::scene::ITerrainSceneNode::* )( ::irr::s32,::irr::s32,::irr::s32 ) )(&::irr::scene::ITerrainSceneNode::setLODOfPatch) )
            , ( bp::arg("patchX"), bp::arg("patchZ"), bp::arg("LOD")=(::irr::s32)(0) ) )    
        .def( 
            "OnAnimate"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::OnAnimate)
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::u32 ) )(&ITerrainSceneNode_wrapper::default_OnAnimate)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "OnRegisterSceneNode"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::OnRegisterSceneNode)
            , (void ( ITerrainSceneNode_wrapper::* )(  ) )(&ITerrainSceneNode_wrapper::default_OnRegisterSceneNode) )    
        .def( 
            "addAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::addAnimator)
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&ITerrainSceneNode_wrapper::default_addAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::addChild)
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&ITerrainSceneNode_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "clone"
            , (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNode::clone)
            , (::irr::scene::ISceneNode * ( ITerrainSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&ITerrainSceneNode_wrapper::default_clone)
            , ( bp::arg("newParent")=bp::object(), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "cloneMembers"
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&ITerrainSceneNode_wrapper::cloneMembers)
            , ( bp::arg("toCopyFrom"), bp::arg("newManager") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::scene::ISceneNode::deserializeAttributes)
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&ITerrainSceneNode_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getAbsolutePosition"
            , (::irr::core::vector3df ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsolutePosition)
            , (::irr::core::vector3df ( ITerrainSceneNode_wrapper::* )(  ) const)(&ITerrainSceneNode_wrapper::default_getAbsolutePosition) )    
        .def( 
            "getAbsoluteTransformation"
            , (::irr::core::matrix4 const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsoluteTransformation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getID)
            , (::irr::s32 ( ITerrainSceneNode_wrapper::* )(  ) const)(&ITerrainSceneNode_wrapper::default_getID) )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::getMaterial)
            , ( bp::arg("num") )
                /* undefined call policies */ )    
        .def( 
            "getMaterialCount"
            , (::irr::u32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getMaterialCount)
            , (::irr::u32 ( ITerrainSceneNode_wrapper::* )(  ) const)(&ITerrainSceneNode_wrapper::default_getMaterialCount) )    
        .def( 
            "getName"
            , (::irr::c8 const * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getName)
            , (::irr::c8 const * ( ITerrainSceneNode_wrapper::* )(  ) const)(&ITerrainSceneNode_wrapper::default_getName) )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRelativeTransformation"
            , (::irr::core::matrix4 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRelativeTransformation)
            , (::irr::core::matrix4 ( ITerrainSceneNode_wrapper::* )(  ) const)(&ITerrainSceneNode_wrapper::default_getRelativeTransformation) )    
        .def( 
            "getRotation"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRotation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getScale"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSceneManager"
            , (::irr::scene::ISceneManager * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getSceneManager)
            , (::irr::scene::ISceneManager * ( ITerrainSceneNode_wrapper::* )(  ) const)(&ITerrainSceneNode_wrapper::default_getSceneManager)
                /* undefined call policies */ )    
        .def( 
            "getTransformedBoundingBox"
            , (::irr::core::aabbox3d< float > const ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTransformedBoundingBox)
            , (::irr::core::aabbox3d< float > const ( ITerrainSceneNode_wrapper::* )(  ) const)(&ITerrainSceneNode_wrapper::default_getTransformedBoundingBox) )    
        .def( 
            "getTriangleSelector"
            , (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTriangleSelector)
            , (::irr::scene::ITriangleSelector * ( ITerrainSceneNode_wrapper::* )(  ) const)(&ITerrainSceneNode_wrapper::default_getTriangleSelector)
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_TYPE ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getType)
            , (::irr::scene::ESCENE_NODE_TYPE ( ITerrainSceneNode_wrapper::* )(  ) const)(&ITerrainSceneNode_wrapper::default_getType) )    
        .def( 
            "isTrulyVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isTrulyVisible)
            , (bool ( ITerrainSceneNode_wrapper::* )(  ) const)(&ITerrainSceneNode_wrapper::default_isTrulyVisible) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isVisible)
            , (bool ( ITerrainSceneNode_wrapper::* )(  ) const)(&ITerrainSceneNode_wrapper::default_isVisible) )    
        .def( 
            "remove"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::remove)
            , (void ( ITerrainSceneNode_wrapper::* )(  ) )(&ITerrainSceneNode_wrapper::default_remove) )    
        .def( 
            "removeAll"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAll)
            , (void ( ITerrainSceneNode_wrapper::* )(  ) )(&ITerrainSceneNode_wrapper::default_removeAll) )    
        .def( 
            "removeAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::removeAnimator)
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&ITerrainSceneNode_wrapper::default_removeAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "removeAnimators"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAnimators)
            , (void ( ITerrainSceneNode_wrapper::* )(  ) )(&ITerrainSceneNode_wrapper::default_removeAnimators) )    
        .def( 
            "removeChild"
            , (bool ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::removeChild)
            , (bool ( ITerrainSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&ITerrainSceneNode_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "render"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::render) ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::scene::ISceneNode::serializeAttributes)
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&ITerrainSceneNode_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugDataVisible"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setDebugDataVisible)
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::s32 ) )(&ITerrainSceneNode_wrapper::default_setDebugDataVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "setDebugName"
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::c8 const * ) )(&ITerrainSceneNode_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setID"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setID)
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::s32 ) )(&ITerrainSceneNode_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::ISceneNode::setName)
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::c8 const * ) )(&ITerrainSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::stringc const & ) )(&::irr::scene::ISceneNode::setName)
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::core::stringc const & ) )(&ITerrainSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setParent"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::setParent)
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&ITerrainSceneNode_wrapper::default_setParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "setPosition"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setPosition)
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&ITerrainSceneNode_wrapper::default_setPosition)
            , ( bp::arg("newpos") ) )    
        .def( 
            "setRotation"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setRotation)
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&ITerrainSceneNode_wrapper::default_setRotation)
            , ( bp::arg("rotation") ) )    
        .def( 
            "setScale"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setScale)
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&ITerrainSceneNode_wrapper::default_setScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "setSceneManager"
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::scene::ISceneManager * ) )(&ITerrainSceneNode_wrapper::setSceneManager)
            , ( bp::arg("newManager") ) )    
        .def( 
            "setTriangleSelector"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::ISceneNode::setTriangleSelector)
            , (void ( ITerrainSceneNode_wrapper::* )( ::irr::scene::ITriangleSelector * ) )(&ITerrainSceneNode_wrapper::default_setTriangleSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::scene::ISceneNode::* )( bool ) )(&::irr::scene::ISceneNode::setVisible)
            , (void ( ITerrainSceneNode_wrapper::* )( bool ) )(&ITerrainSceneNode_wrapper::default_setVisible)
            , ( bp::arg("isVisible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::updateAbsolutePosition)
            , (void ( ITerrainSceneNode_wrapper::* )(  ) )(&ITerrainSceneNode_wrapper::default_updateAbsolutePosition) );

    bp::class_< ITextSceneNode_wrapper, bp::bases< irr::scene::ISceneNode >, boost::noncopyable >( "ITextSceneNode", bp::init< irr::scene::ISceneNode *, irr::scene::ISceneManager *, irr::s32, bp::optional< irr::core::vector3df const & > >(( bp::arg("parent"), bp::arg("mgr"), bp::arg("id"), bp::arg("position")=irr::core::vector3d<float>(0.0f, 0.0f, 0.0f) )) )    
        .def( 
            "setText"
            , bp::pure_virtual( (void ( ::irr::scene::ITextSceneNode::* )( wchar_t const * ) )(&::irr::scene::ITextSceneNode::setText) )
            , ( bp::arg("text") ) )    
        .def( 
            "setTextColor"
            , bp::pure_virtual( (void ( ::irr::scene::ITextSceneNode::* )( ::irr::video::SColor ) )(&::irr::scene::ITextSceneNode::setTextColor) )
            , ( bp::arg("color") ) )    
        .def( 
            "OnAnimate"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::OnAnimate)
            , (void ( ITextSceneNode_wrapper::* )( ::irr::u32 ) )(&ITextSceneNode_wrapper::default_OnAnimate)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "OnRegisterSceneNode"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::OnRegisterSceneNode)
            , (void ( ITextSceneNode_wrapper::* )(  ) )(&ITextSceneNode_wrapper::default_OnRegisterSceneNode) )    
        .def( 
            "addAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::addAnimator)
            , (void ( ITextSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&ITextSceneNode_wrapper::default_addAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::addChild)
            , (void ( ITextSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&ITextSceneNode_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "clone"
            , (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNode::clone)
            , (::irr::scene::ISceneNode * ( ITextSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&ITextSceneNode_wrapper::default_clone)
            , ( bp::arg("newParent")=bp::object(), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "cloneMembers"
            , (void ( ITextSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&ITextSceneNode_wrapper::cloneMembers)
            , ( bp::arg("toCopyFrom"), bp::arg("newManager") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::scene::ISceneNode::deserializeAttributes)
            , (void ( ITextSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&ITextSceneNode_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getAbsolutePosition"
            , (::irr::core::vector3df ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsolutePosition)
            , (::irr::core::vector3df ( ITextSceneNode_wrapper::* )(  ) const)(&ITextSceneNode_wrapper::default_getAbsolutePosition) )    
        .def( 
            "getAbsoluteTransformation"
            , (::irr::core::matrix4 const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsoluteTransformation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getID)
            , (::irr::s32 ( ITextSceneNode_wrapper::* )(  ) const)(&ITextSceneNode_wrapper::default_getID) )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::getMaterial)
            , ( bp::arg("num") )
                /* undefined call policies */ )    
        .def( 
            "getMaterialCount"
            , (::irr::u32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getMaterialCount)
            , (::irr::u32 ( ITextSceneNode_wrapper::* )(  ) const)(&ITextSceneNode_wrapper::default_getMaterialCount) )    
        .def( 
            "getName"
            , (::irr::c8 const * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getName)
            , (::irr::c8 const * ( ITextSceneNode_wrapper::* )(  ) const)(&ITextSceneNode_wrapper::default_getName) )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRelativeTransformation"
            , (::irr::core::matrix4 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRelativeTransformation)
            , (::irr::core::matrix4 ( ITextSceneNode_wrapper::* )(  ) const)(&ITextSceneNode_wrapper::default_getRelativeTransformation) )    
        .def( 
            "getRotation"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRotation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getScale"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSceneManager"
            , (::irr::scene::ISceneManager * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getSceneManager)
            , (::irr::scene::ISceneManager * ( ITextSceneNode_wrapper::* )(  ) const)(&ITextSceneNode_wrapper::default_getSceneManager)
                /* undefined call policies */ )    
        .def( 
            "getTransformedBoundingBox"
            , (::irr::core::aabbox3d< float > const ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTransformedBoundingBox)
            , (::irr::core::aabbox3d< float > const ( ITextSceneNode_wrapper::* )(  ) const)(&ITextSceneNode_wrapper::default_getTransformedBoundingBox) )    
        .def( 
            "getTriangleSelector"
            , (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTriangleSelector)
            , (::irr::scene::ITriangleSelector * ( ITextSceneNode_wrapper::* )(  ) const)(&ITextSceneNode_wrapper::default_getTriangleSelector)
                /* undefined call policies */ )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_TYPE ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getType)
            , (::irr::scene::ESCENE_NODE_TYPE ( ITextSceneNode_wrapper::* )(  ) const)(&ITextSceneNode_wrapper::default_getType) )    
        .def( 
            "isTrulyVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isTrulyVisible)
            , (bool ( ITextSceneNode_wrapper::* )(  ) const)(&ITextSceneNode_wrapper::default_isTrulyVisible) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isVisible)
            , (bool ( ITextSceneNode_wrapper::* )(  ) const)(&ITextSceneNode_wrapper::default_isVisible) )    
        .def( 
            "remove"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::remove)
            , (void ( ITextSceneNode_wrapper::* )(  ) )(&ITextSceneNode_wrapper::default_remove) )    
        .def( 
            "removeAll"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAll)
            , (void ( ITextSceneNode_wrapper::* )(  ) )(&ITextSceneNode_wrapper::default_removeAll) )    
        .def( 
            "removeAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::removeAnimator)
            , (void ( ITextSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&ITextSceneNode_wrapper::default_removeAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "removeAnimators"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAnimators)
            , (void ( ITextSceneNode_wrapper::* )(  ) )(&ITextSceneNode_wrapper::default_removeAnimators) )    
        .def( 
            "removeChild"
            , (bool ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::removeChild)
            , (bool ( ITextSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&ITextSceneNode_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "render"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::render) ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::scene::ISceneNode::serializeAttributes)
            , (void ( ITextSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&ITextSceneNode_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugDataVisible"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setDebugDataVisible)
            , (void ( ITextSceneNode_wrapper::* )( ::irr::s32 ) )(&ITextSceneNode_wrapper::default_setDebugDataVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "setDebugName"
            , (void ( ITextSceneNode_wrapper::* )( ::irr::c8 const * ) )(&ITextSceneNode_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setID"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setID)
            , (void ( ITextSceneNode_wrapper::* )( ::irr::s32 ) )(&ITextSceneNode_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::ISceneNode::setName)
            , (void ( ITextSceneNode_wrapper::* )( ::irr::c8 const * ) )(&ITextSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::stringc const & ) )(&::irr::scene::ISceneNode::setName)
            , (void ( ITextSceneNode_wrapper::* )( ::irr::core::stringc const & ) )(&ITextSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setParent"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::setParent)
            , (void ( ITextSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&ITextSceneNode_wrapper::default_setParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "setPosition"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setPosition)
            , (void ( ITextSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&ITextSceneNode_wrapper::default_setPosition)
            , ( bp::arg("newpos") ) )    
        .def( 
            "setRotation"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setRotation)
            , (void ( ITextSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&ITextSceneNode_wrapper::default_setRotation)
            , ( bp::arg("rotation") ) )    
        .def( 
            "setScale"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setScale)
            , (void ( ITextSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&ITextSceneNode_wrapper::default_setScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "setSceneManager"
            , (void ( ITextSceneNode_wrapper::* )( ::irr::scene::ISceneManager * ) )(&ITextSceneNode_wrapper::setSceneManager)
            , ( bp::arg("newManager") ) )    
        .def( 
            "setTriangleSelector"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::ISceneNode::setTriangleSelector)
            , (void ( ITextSceneNode_wrapper::* )( ::irr::scene::ITriangleSelector * ) )(&ITextSceneNode_wrapper::default_setTriangleSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::scene::ISceneNode::* )( bool ) )(&::irr::scene::ISceneNode::setVisible)
            , (void ( ITextSceneNode_wrapper::* )( bool ) )(&ITextSceneNode_wrapper::default_setVisible)
            , ( bp::arg("isVisible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::updateAbsolutePosition)
            , (void ( ITextSceneNode_wrapper::* )(  ) )(&ITextSceneNode_wrapper::default_updateAbsolutePosition) );

    bp::class_< irr::scene::IVertexManipulator >( "IVertexManipulator" );

    bp::class_< IVolumeLightSceneNode_wrapper, bp::bases< irr::scene::ISceneNode >, boost::noncopyable >( "IVolumeLightSceneNode", bp::init< irr::scene::ISceneNode *, irr::scene::ISceneManager *, irr::s32, irr::core::vector3df const &, irr::core::vector3df const &, irr::core::vector3df const & >(( bp::arg("parent"), bp::arg("mgr"), bp::arg("id"), bp::arg("position"), bp::arg("rotation"), bp::arg("scale") )) )    
        .def( 
            "getFootColor"
            , bp::pure_virtual( (::irr::video::SColor ( ::irr::scene::IVolumeLightSceneNode::* )(  ) const)(&::irr::scene::IVolumeLightSceneNode::getFootColor) ) )    
        .def( 
            "getSubDivideU"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IVolumeLightSceneNode::* )(  ) const)(&::irr::scene::IVolumeLightSceneNode::getSubDivideU) ) )    
        .def( 
            "getSubDivideV"
            , bp::pure_virtual( (::irr::u32 ( ::irr::scene::IVolumeLightSceneNode::* )(  ) const)(&::irr::scene::IVolumeLightSceneNode::getSubDivideV) ) )    
        .def( 
            "getTailColor"
            , bp::pure_virtual( (::irr::video::SColor ( ::irr::scene::IVolumeLightSceneNode::* )(  ) const)(&::irr::scene::IVolumeLightSceneNode::getTailColor) ) )    
        .def( 
            "getType"
            , (::irr::scene::ESCENE_NODE_TYPE ( ::irr::scene::IVolumeLightSceneNode::* )(  ) const)(&::irr::scene::IVolumeLightSceneNode::getType)
            , (::irr::scene::ESCENE_NODE_TYPE ( IVolumeLightSceneNode_wrapper::* )(  ) const)(&IVolumeLightSceneNode_wrapper::default_getType) )    
        .def( 
            "setFootColor"
            , bp::pure_virtual( (void ( ::irr::scene::IVolumeLightSceneNode::* )( ::irr::video::SColor const ) )(&::irr::scene::IVolumeLightSceneNode::setFootColor) )
            , ( bp::arg("inColour") ) )    
        .def( 
            "setSubDivideU"
            , bp::pure_virtual( (void ( ::irr::scene::IVolumeLightSceneNode::* )( ::irr::u32 const ) )(&::irr::scene::IVolumeLightSceneNode::setSubDivideU) )
            , ( bp::arg("inU") ) )    
        .def( 
            "setSubDivideV"
            , bp::pure_virtual( (void ( ::irr::scene::IVolumeLightSceneNode::* )( ::irr::u32 const ) )(&::irr::scene::IVolumeLightSceneNode::setSubDivideV) )
            , ( bp::arg("inV") ) )    
        .def( 
            "setTailColor"
            , bp::pure_virtual( (void ( ::irr::scene::IVolumeLightSceneNode::* )( ::irr::video::SColor const ) )(&::irr::scene::IVolumeLightSceneNode::setTailColor) )
            , ( bp::arg("inColour") ) )    
        .def( 
            "OnAnimate"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::OnAnimate)
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::u32 ) )(&IVolumeLightSceneNode_wrapper::default_OnAnimate)
            , ( bp::arg("timeMs") ) )    
        .def( 
            "OnRegisterSceneNode"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::OnRegisterSceneNode)
            , (void ( IVolumeLightSceneNode_wrapper::* )(  ) )(&IVolumeLightSceneNode_wrapper::default_OnRegisterSceneNode) )    
        .def( 
            "addAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::addAnimator)
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IVolumeLightSceneNode_wrapper::default_addAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "addChild"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::addChild)
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IVolumeLightSceneNode_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "clone"
            , (::irr::scene::ISceneNode * ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&::irr::scene::ISceneNode::clone)
            , (::irr::scene::ISceneNode * ( IVolumeLightSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IVolumeLightSceneNode_wrapper::default_clone)
            , ( bp::arg("newParent")=bp::object(), bp::arg("newManager")=bp::object() )
                /* undefined call policies */ )    
        .def( 
            "cloneMembers"
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::scene::ISceneNode *,::irr::scene::ISceneManager * ) )(&IVolumeLightSceneNode_wrapper::cloneMembers)
            , ( bp::arg("toCopyFrom"), bp::arg("newManager") ) )    
        .def( 
            "deserializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&::irr::scene::ISceneNode::deserializeAttributes)
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) )(&IVolumeLightSceneNode_wrapper::default_deserializeAttributes)
            , ( bp::arg("in"), bp::arg("options")=bp::object() ) )    
        .def( 
            "getAbsolutePosition"
            , (::irr::core::vector3df ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsolutePosition)
            , (::irr::core::vector3df ( IVolumeLightSceneNode_wrapper::* )(  ) const)(&IVolumeLightSceneNode_wrapper::default_getAbsolutePosition) )    
        .def( 
            "getAbsoluteTransformation"
            , (::irr::core::matrix4 const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getAbsoluteTransformation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getBoundingBox"
            , bp::pure_virtual( (::irr::core::aabbox3d< float > const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getBoundingBox) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getID"
            , (::irr::s32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getID)
            , (::irr::s32 ( IVolumeLightSceneNode_wrapper::* )(  ) const)(&IVolumeLightSceneNode_wrapper::default_getID) )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::ISceneNode::* )( ::irr::u32 ) )(&::irr::scene::ISceneNode::getMaterial)
            , ( bp::arg("num") )
                /* undefined call policies */ )    
        .def( 
            "getMaterialCount"
            , (::irr::u32 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getMaterialCount)
            , (::irr::u32 ( IVolumeLightSceneNode_wrapper::* )(  ) const)(&IVolumeLightSceneNode_wrapper::default_getMaterialCount) )    
        .def( 
            "getName"
            , (::irr::c8 const * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getName)
            , (::irr::c8 const * ( IVolumeLightSceneNode_wrapper::* )(  ) const)(&IVolumeLightSceneNode_wrapper::default_getName) )    
        .def( 
            "getPosition"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getPosition)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getRelativeTransformation"
            , (::irr::core::matrix4 ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRelativeTransformation)
            , (::irr::core::matrix4 ( IVolumeLightSceneNode_wrapper::* )(  ) const)(&IVolumeLightSceneNode_wrapper::default_getRelativeTransformation) )    
        .def( 
            "getRotation"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getRotation)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getScale"
            , (::irr::core::vector3df const & ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getScale)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getSceneManager"
            , (::irr::scene::ISceneManager * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getSceneManager)
            , (::irr::scene::ISceneManager * ( IVolumeLightSceneNode_wrapper::* )(  ) const)(&IVolumeLightSceneNode_wrapper::default_getSceneManager)
                /* undefined call policies */ )    
        .def( 
            "getTransformedBoundingBox"
            , (::irr::core::aabbox3d< float > const ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTransformedBoundingBox)
            , (::irr::core::aabbox3d< float > const ( IVolumeLightSceneNode_wrapper::* )(  ) const)(&IVolumeLightSceneNode_wrapper::default_getTransformedBoundingBox) )    
        .def( 
            "getTriangleSelector"
            , (::irr::scene::ITriangleSelector * ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::getTriangleSelector)
            , (::irr::scene::ITriangleSelector * ( IVolumeLightSceneNode_wrapper::* )(  ) const)(&IVolumeLightSceneNode_wrapper::default_getTriangleSelector)
                /* undefined call policies */ )    
        .def( 
            "isTrulyVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isTrulyVisible)
            , (bool ( IVolumeLightSceneNode_wrapper::* )(  ) const)(&IVolumeLightSceneNode_wrapper::default_isTrulyVisible) )    
        .def( 
            "isVisible"
            , (bool ( ::irr::scene::ISceneNode::* )(  ) const)(&::irr::scene::ISceneNode::isVisible)
            , (bool ( IVolumeLightSceneNode_wrapper::* )(  ) const)(&IVolumeLightSceneNode_wrapper::default_isVisible) )    
        .def( 
            "remove"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::remove)
            , (void ( IVolumeLightSceneNode_wrapper::* )(  ) )(&IVolumeLightSceneNode_wrapper::default_remove) )    
        .def( 
            "removeAll"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAll)
            , (void ( IVolumeLightSceneNode_wrapper::* )(  ) )(&IVolumeLightSceneNode_wrapper::default_removeAll) )    
        .def( 
            "removeAnimator"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNodeAnimator * ) )(&::irr::scene::ISceneNode::removeAnimator)
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::scene::ISceneNodeAnimator * ) )(&IVolumeLightSceneNode_wrapper::default_removeAnimator)
            , ( bp::arg("animator") ) )    
        .def( 
            "removeAnimators"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::removeAnimators)
            , (void ( IVolumeLightSceneNode_wrapper::* )(  ) )(&IVolumeLightSceneNode_wrapper::default_removeAnimators) )    
        .def( 
            "removeChild"
            , (bool ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::removeChild)
            , (bool ( IVolumeLightSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IVolumeLightSceneNode_wrapper::default_removeChild)
            , ( bp::arg("child") ) )    
        .def( 
            "render"
            , bp::pure_virtual( (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::render) ) )    
        .def( 
            "serializeAttributes"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&::irr::scene::ISceneNode::serializeAttributes)
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::io::IAttributes *,::irr::io::SAttributeReadWriteOptions * ) const)(&IVolumeLightSceneNode_wrapper::default_serializeAttributes)
            , ( bp::arg("out"), bp::arg("options")=bp::object() ) )    
        .def( 
            "setDebugDataVisible"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setDebugDataVisible)
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::s32 ) )(&IVolumeLightSceneNode_wrapper::default_setDebugDataVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "setDebugName"
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IVolumeLightSceneNode_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .def( 
            "setID"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::s32 ) )(&::irr::scene::ISceneNode::setID)
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::s32 ) )(&IVolumeLightSceneNode_wrapper::default_setID)
            , ( bp::arg("id") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::c8 const * ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::c8 const * ) )(&IVolumeLightSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::stringc const & ) )(&::irr::scene::ISceneNode::setName)
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::core::stringc const & ) )(&IVolumeLightSceneNode_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setParent"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ISceneNode * ) )(&::irr::scene::ISceneNode::setParent)
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::scene::ISceneNode * ) )(&IVolumeLightSceneNode_wrapper::default_setParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "setPosition"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setPosition)
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IVolumeLightSceneNode_wrapper::default_setPosition)
            , ( bp::arg("newpos") ) )    
        .def( 
            "setRotation"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setRotation)
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IVolumeLightSceneNode_wrapper::default_setRotation)
            , ( bp::arg("rotation") ) )    
        .def( 
            "setScale"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::core::vector3df const & ) )(&::irr::scene::ISceneNode::setScale)
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::core::vector3df const & ) )(&IVolumeLightSceneNode_wrapper::default_setScale)
            , ( bp::arg("scale") ) )    
        .def( 
            "setSceneManager"
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::scene::ISceneManager * ) )(&IVolumeLightSceneNode_wrapper::setSceneManager)
            , ( bp::arg("newManager") ) )    
        .def( 
            "setTriangleSelector"
            , (void ( ::irr::scene::ISceneNode::* )( ::irr::scene::ITriangleSelector * ) )(&::irr::scene::ISceneNode::setTriangleSelector)
            , (void ( IVolumeLightSceneNode_wrapper::* )( ::irr::scene::ITriangleSelector * ) )(&IVolumeLightSceneNode_wrapper::default_setTriangleSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "setVisible"
            , (void ( ::irr::scene::ISceneNode::* )( bool ) )(&::irr::scene::ISceneNode::setVisible)
            , (void ( IVolumeLightSceneNode_wrapper::* )( bool ) )(&IVolumeLightSceneNode_wrapper::default_setVisible)
            , ( bp::arg("isVisible") ) )    
        .def( 
            "updateAbsolutePosition"
            , (void ( ::irr::scene::ISceneNode::* )(  ) )(&::irr::scene::ISceneNode::updateAbsolutePosition)
            , (void ( IVolumeLightSceneNode_wrapper::* )(  ) )(&IVolumeLightSceneNode_wrapper::default_updateAbsolutePosition) );

    { //::irr::scene::SAnimatedMesh
        typedef bp::class_< SAnimatedMesh_wrapper, bp::bases< irr::scene::IAnimatedMesh > > SAnimatedMesh_exposer_t;
        SAnimatedMesh_exposer_t SAnimatedMesh_exposer = SAnimatedMesh_exposer_t( "SAnimatedMesh", bp::init< bp::optional< irr::scene::IMesh *, irr::scene::E_ANIMATED_MESH_TYPE > >(( bp::arg("mesh")=bp::object(), bp::arg("type")=::irr::scene::EAMT_UNKNOWN )) );
        bp::scope SAnimatedMesh_scope( SAnimatedMesh_exposer );
        bp::implicitly_convertible< irr::scene::IMesh *, irr::scene::SAnimatedMesh >();
        { //::irr::scene::SAnimatedMesh::addMesh
        
            typedef void ( ::irr::scene::SAnimatedMesh::*addMesh_function_type )( ::irr::scene::IMesh * ) ;
            
            SAnimatedMesh_exposer.def( 
                "addMesh"
                , addMesh_function_type( &::irr::scene::SAnimatedMesh::addMesh )
                , ( bp::arg("mesh") ) );
        
        }
        { //::irr::scene::SAnimatedMesh::getBoundingBox
        
            typedef ::irr::core::aabbox3d< float > const & ( ::irr::scene::SAnimatedMesh::*getBoundingBox_function_type )(  ) const;
            
            SAnimatedMesh_exposer.def( 
                "getBoundingBox"
                , getBoundingBox_function_type(&::irr::scene::SAnimatedMesh::getBoundingBox)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::scene::SAnimatedMesh::getFrameCount
        
            typedef ::irr::u32 ( ::irr::scene::SAnimatedMesh::*getFrameCount_function_type )(  ) const;
            typedef ::irr::u32 ( SAnimatedMesh_wrapper::*default_getFrameCount_function_type )(  ) const;
            
            SAnimatedMesh_exposer.def( 
                "getFrameCount"
                , getFrameCount_function_type(&::irr::scene::SAnimatedMesh::getFrameCount)
                , default_getFrameCount_function_type(&SAnimatedMesh_wrapper::default_getFrameCount) );
        
        }
        { //::irr::scene::SAnimatedMesh::getMesh
        
            typedef ::irr::scene::IMesh * ( ::irr::scene::SAnimatedMesh::*getMesh_function_type )( ::irr::s32,::irr::s32,::irr::s32,::irr::s32 ) ;
            typedef ::irr::scene::IMesh * ( SAnimatedMesh_wrapper::*default_getMesh_function_type )( ::irr::s32,::irr::s32,::irr::s32,::irr::s32 ) ;
            
            SAnimatedMesh_exposer.def( 
                "getMesh"
                , getMesh_function_type(&::irr::scene::SAnimatedMesh::getMesh)
                , default_getMesh_function_type(&SAnimatedMesh_wrapper::default_getMesh)
                , ( bp::arg("frame"), bp::arg("detailLevel"), bp::arg("startFrameLoop")=(::irr::s32)(-0x00000000000000001), bp::arg("endFrameLoop")=(::irr::s32)(-0x00000000000000001) )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::SAnimatedMesh::getMeshBuffer
        
            typedef ::irr::scene::IMeshBuffer * ( ::irr::scene::SAnimatedMesh::*getMeshBuffer_function_type )( ::irr::u32 ) const;
            typedef ::irr::scene::IMeshBuffer * ( SAnimatedMesh_wrapper::*default_getMeshBuffer_function_type )( ::irr::u32 ) const;
            
            SAnimatedMesh_exposer.def( 
                "getMeshBuffer"
                , getMeshBuffer_function_type(&::irr::scene::SAnimatedMesh::getMeshBuffer)
                , default_getMeshBuffer_function_type(&SAnimatedMesh_wrapper::default_getMeshBuffer)
                , ( bp::arg("nr") )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::SAnimatedMesh::getMeshBuffer
        
            typedef ::irr::scene::IMeshBuffer * ( ::irr::scene::SAnimatedMesh::*getMeshBuffer_function_type )( ::irr::video::SMaterial const & ) const;
            typedef ::irr::scene::IMeshBuffer * ( SAnimatedMesh_wrapper::*default_getMeshBuffer_function_type )( ::irr::video::SMaterial const & ) const;
            
            SAnimatedMesh_exposer.def( 
                "getMeshBuffer"
                , getMeshBuffer_function_type(&::irr::scene::SAnimatedMesh::getMeshBuffer)
                , default_getMeshBuffer_function_type(&SAnimatedMesh_wrapper::default_getMeshBuffer)
                , ( bp::arg("material") )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::SAnimatedMesh::getMeshBufferCount
        
            typedef ::irr::u32 ( ::irr::scene::SAnimatedMesh::*getMeshBufferCount_function_type )(  ) const;
            typedef ::irr::u32 ( SAnimatedMesh_wrapper::*default_getMeshBufferCount_function_type )(  ) const;
            
            SAnimatedMesh_exposer.def( 
                "getMeshBufferCount"
                , getMeshBufferCount_function_type(&::irr::scene::SAnimatedMesh::getMeshBufferCount)
                , default_getMeshBufferCount_function_type(&SAnimatedMesh_wrapper::default_getMeshBufferCount) );
        
        }
        { //::irr::scene::SAnimatedMesh::getMeshType
        
            typedef ::irr::scene::E_ANIMATED_MESH_TYPE ( ::irr::scene::SAnimatedMesh::*getMeshType_function_type )(  ) const;
            typedef ::irr::scene::E_ANIMATED_MESH_TYPE ( SAnimatedMesh_wrapper::*default_getMeshType_function_type )(  ) const;
            
            SAnimatedMesh_exposer.def( 
                "getMeshType"
                , getMeshType_function_type(&::irr::scene::SAnimatedMesh::getMeshType)
                , default_getMeshType_function_type(&SAnimatedMesh_wrapper::default_getMeshType) );
        
        }
        { //::irr::scene::SAnimatedMesh::recalculateBoundingBox
        
            typedef void ( ::irr::scene::SAnimatedMesh::*recalculateBoundingBox_function_type )(  ) ;
            
            SAnimatedMesh_exposer.def( 
                "recalculateBoundingBox"
                , recalculateBoundingBox_function_type( &::irr::scene::SAnimatedMesh::recalculateBoundingBox ) );
        
        }
        { //::irr::scene::SAnimatedMesh::setBoundingBox
        
            typedef void ( ::irr::scene::SAnimatedMesh::*setBoundingBox_function_type )( ::irr::core::aabbox3df const & ) ;
            typedef void ( SAnimatedMesh_wrapper::*default_setBoundingBox_function_type )( ::irr::core::aabbox3df const & ) ;
            
            SAnimatedMesh_exposer.def( 
                "setBoundingBox"
                , setBoundingBox_function_type(&::irr::scene::SAnimatedMesh::setBoundingBox)
                , default_setBoundingBox_function_type(&SAnimatedMesh_wrapper::default_setBoundingBox)
                , ( bp::arg("box") ) );
        
        }
        { //::irr::scene::SAnimatedMesh::setDirty
        
            typedef void ( ::irr::scene::SAnimatedMesh::*setDirty_function_type )( ::irr::scene::E_BUFFER_TYPE ) ;
            typedef void ( SAnimatedMesh_wrapper::*default_setDirty_function_type )( ::irr::scene::E_BUFFER_TYPE ) ;
            
            SAnimatedMesh_exposer.def( 
                "setDirty"
                , setDirty_function_type(&::irr::scene::SAnimatedMesh::setDirty)
                , default_setDirty_function_type(&SAnimatedMesh_wrapper::default_setDirty)
                , ( bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) );
        
        }
        { //::irr::scene::SAnimatedMesh::setHardwareMappingHint
        
            typedef void ( ::irr::scene::SAnimatedMesh::*setHardwareMappingHint_function_type )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) ;
            typedef void ( SAnimatedMesh_wrapper::*default_setHardwareMappingHint_function_type )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) ;
            
            SAnimatedMesh_exposer.def( 
                "setHardwareMappingHint"
                , setHardwareMappingHint_function_type(&::irr::scene::SAnimatedMesh::setHardwareMappingHint)
                , default_setHardwareMappingHint_function_type(&SAnimatedMesh_wrapper::default_setHardwareMappingHint)
                , ( bp::arg("newMappingHint"), bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) );
        
        }
        { //::irr::scene::SAnimatedMesh::setMaterialFlag
        
            typedef void ( ::irr::scene::SAnimatedMesh::*setMaterialFlag_function_type )( ::irr::video::E_MATERIAL_FLAG,bool ) ;
            typedef void ( SAnimatedMesh_wrapper::*default_setMaterialFlag_function_type )( ::irr::video::E_MATERIAL_FLAG,bool ) ;
            
            SAnimatedMesh_exposer.def( 
                "setMaterialFlag"
                , setMaterialFlag_function_type(&::irr::scene::SAnimatedMesh::setMaterialFlag)
                , default_setMaterialFlag_function_type(&SAnimatedMesh_wrapper::default_setMaterialFlag)
                , ( bp::arg("flag"), bp::arg("newvalue") ) );
        
        }
        SAnimatedMesh_exposer.def_readwrite( "Box", &irr::scene::SAnimatedMesh::Box );
        SAnimatedMesh_exposer.def_readwrite( "Meshes", &irr::scene::SAnimatedMesh::Meshes );
        SAnimatedMesh_exposer.def_readwrite( "Type", &irr::scene::SAnimatedMesh::Type );
        { //::irr::IReferenceCounted::setDebugName
        
            typedef void ( SAnimatedMesh_wrapper::*setDebugName_function_type )( ::irr::c8 const * ) ;
            
            SAnimatedMesh_exposer.def( 
                "setDebugName"
                , setDebugName_function_type( &SAnimatedMesh_wrapper::setDebugName )
                , ( bp::arg("newName") ) );
        
        }
    }

    bp::class_< irr::scene::SMD3AnimationInfo >( "SMD3AnimationInfo" )    
        .def_readwrite( "first", &irr::scene::SMD3AnimationInfo::first )    
        .def_readwrite( "fps", &irr::scene::SMD3AnimationInfo::fps )    
        .def_readwrite( "looping", &irr::scene::SMD3AnimationInfo::looping )    
        .def_readwrite( "num", &irr::scene::SMD3AnimationInfo::num );

    { //::irr::scene::SMD3Face
        typedef bp::class_< SMD3Face_wrapper > SMD3Face_exposer_t;
        SMD3Face_exposer_t SMD3Face_exposer = SMD3Face_exposer_t( "SMD3Face" );
        bp::scope SMD3Face_scope( SMD3Face_exposer );
        pyplusplus::containers::static_sized::register_array_1< int, 3 >( "__array_1_int_3" );
        { //irr::scene::SMD3Face::Index [variable], type=irr::s32[3]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 3> ( *array_wrapper_creator )( ::irr::scene::SMD3Face & );
            
            SMD3Face_exposer.add_property( "Index"
                , bp::make_function( array_wrapper_creator(&SMD3Face_wrapper::pyplusplus_Index_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    { //::irr::scene::SMD3Header
        typedef bp::class_< SMD3Header_wrapper > SMD3Header_exposer_t;
        SMD3Header_exposer_t SMD3Header_exposer = SMD3Header_exposer_t( "SMD3Header" );
        bp::scope SMD3Header_scope( SMD3Header_exposer );
        SMD3Header_exposer.def_readwrite( "Version", &irr::scene::SMD3Header::Version );
        pyplusplus::containers::static_sized::register_array_1< signed char, 68 >( "__array_1_signed_char_68" );
        { //irr::scene::SMD3Header::fileName [variable], type=irr::s8[68]
        
            typedef pyplusplus::containers::static_sized::array_1_t< signed char, 68> ( *array_wrapper_creator )( ::irr::scene::SMD3Header & );
            
            SMD3Header_exposer.add_property( "fileName"
                , bp::make_function( array_wrapper_creator(&SMD3Header_wrapper::pyplusplus_fileName_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        SMD3Header_exposer.def_readwrite( "fileSize", &irr::scene::SMD3Header::fileSize );
        SMD3Header_exposer.def_readwrite( "frameStart", &irr::scene::SMD3Header::frameStart );
        pyplusplus::containers::static_sized::register_array_1< char, 4 >( "__array_1_char_4" );
        { //irr::scene::SMD3Header::headerID [variable], type=irr::c8[4]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 4> ( *array_wrapper_creator )( ::irr::scene::SMD3Header & );
            
            SMD3Header_exposer.add_property( "headerID"
                , bp::make_function( array_wrapper_creator(&SMD3Header_wrapper::pyplusplus_headerID_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        SMD3Header_exposer.def_readwrite( "numFrames", &irr::scene::SMD3Header::numFrames );
        SMD3Header_exposer.def_readwrite( "numMaxSkins", &irr::scene::SMD3Header::numMaxSkins );
        SMD3Header_exposer.def_readwrite( "numMeshes", &irr::scene::SMD3Header::numMeshes );
        SMD3Header_exposer.def_readwrite( "numTags", &irr::scene::SMD3Header::numTags );
        SMD3Header_exposer.def_readwrite( "tagEnd", &irr::scene::SMD3Header::tagEnd );
        SMD3Header_exposer.def_readwrite( "tagStart", &irr::scene::SMD3Header::tagStart );
    }

    bp::class_< SMD3Mesh_wrapper, bp::bases< irr::IReferenceCounted > >( "SMD3Mesh", bp::init< >() )    
        .def_readwrite( "Buffer", &irr::scene::SMD3Mesh::Buffer )    
        .def_readwrite( "MD3Header", &irr::scene::SMD3Mesh::MD3Header )    
        .def_readwrite( "Name", &irr::scene::SMD3Mesh::Name )    
        .def_readwrite( "TagList", &irr::scene::SMD3Mesh::TagList )    
        .def( 
            "setDebugName"
            , (void ( SMD3Mesh_wrapper::* )( ::irr::c8 const * ) )(&SMD3Mesh_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< SMD3MeshBuffer_wrapper, bp::bases< irr::IReferenceCounted > >( "SMD3MeshBuffer" )    
        .def_readwrite( "Indices", &irr::scene::SMD3MeshBuffer::Indices )    
        .def_readwrite( "MeshHeader", &irr::scene::SMD3MeshBuffer::MeshHeader )    
        .def_readwrite( "Shader", &irr::scene::SMD3MeshBuffer::Shader )    
        .def_readwrite( "Tex", &irr::scene::SMD3MeshBuffer::Tex )    
        .def_readwrite( "Vertices", &irr::scene::SMD3MeshBuffer::Vertices )    
        .def( 
            "setDebugName"
            , (void ( SMD3MeshBuffer_wrapper::* )( ::irr::c8 const * ) )(&SMD3MeshBuffer_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    { //::irr::scene::SMD3MeshHeader
        typedef bp::class_< SMD3MeshHeader_wrapper > SMD3MeshHeader_exposer_t;
        SMD3MeshHeader_exposer_t SMD3MeshHeader_exposer = SMD3MeshHeader_exposer_t( "SMD3MeshHeader" );
        bp::scope SMD3MeshHeader_scope( SMD3MeshHeader_exposer );
        { //irr::scene::SMD3MeshHeader::meshID [variable], type=irr::c8[4]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 4> ( *array_wrapper_creator )( ::irr::scene::SMD3MeshHeader & );
            
            SMD3MeshHeader_exposer.add_property( "meshID"
                , bp::make_function( array_wrapper_creator(&SMD3MeshHeader_wrapper::pyplusplus_meshID_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        pyplusplus::containers::static_sized::register_array_1< char, 68 >( "__array_1_char_68" );
        { //irr::scene::SMD3MeshHeader::meshName [variable], type=irr::c8[68]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 68> ( *array_wrapper_creator )( ::irr::scene::SMD3MeshHeader & );
            
            SMD3MeshHeader_exposer.add_property( "meshName"
                , bp::make_function( array_wrapper_creator(&SMD3MeshHeader_wrapper::pyplusplus_meshName_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        SMD3MeshHeader_exposer.def_readwrite( "numFrames", &irr::scene::SMD3MeshHeader::numFrames );
        SMD3MeshHeader_exposer.def_readwrite( "numShader", &irr::scene::SMD3MeshHeader::numShader );
        SMD3MeshHeader_exposer.def_readwrite( "numTriangles", &irr::scene::SMD3MeshHeader::numTriangles );
        SMD3MeshHeader_exposer.def_readwrite( "numVertices", &irr::scene::SMD3MeshHeader::numVertices );
        SMD3MeshHeader_exposer.def_readwrite( "offset_end", &irr::scene::SMD3MeshHeader::offset_end );
        SMD3MeshHeader_exposer.def_readwrite( "offset_shaders", &irr::scene::SMD3MeshHeader::offset_shaders );
        SMD3MeshHeader_exposer.def_readwrite( "offset_st", &irr::scene::SMD3MeshHeader::offset_st );
        SMD3MeshHeader_exposer.def_readwrite( "offset_triangles", &irr::scene::SMD3MeshHeader::offset_triangles );
        SMD3MeshHeader_exposer.def_readwrite( "vertexStart", &irr::scene::SMD3MeshHeader::vertexStart );
    }

    { //::irr::scene::SMD3QuaternionTag
        typedef bp::class_< irr::scene::SMD3QuaternionTag > SMD3QuaternionTag_exposer_t;
        SMD3QuaternionTag_exposer_t SMD3QuaternionTag_exposer = SMD3QuaternionTag_exposer_t( "SMD3QuaternionTag", bp::init< irr::scene::SMD3QuaternionTag const & >(( bp::arg("copyMe") )) );
        bp::scope SMD3QuaternionTag_scope( SMD3QuaternionTag_exposer );
        SMD3QuaternionTag_exposer.def( bp::init< irr::core::stringc const & >(( bp::arg("name") )) );
        bp::implicitly_convertible< irr::core::stringc const &, irr::scene::SMD3QuaternionTag >();
        SMD3QuaternionTag_exposer.def( bp::init< irr::core::stringc const &, irr::core::matrix4 const & >(( bp::arg("name"), bp::arg("m") )) );
        SMD3QuaternionTag_exposer.def( bp::init< irr::core::vector3df const &, irr::core::vector3df const & >(( bp::arg("pos"), bp::arg("angle") )) );
        { //::irr::scene::SMD3QuaternionTag::operator=
        
            typedef ::irr::scene::SMD3QuaternionTag & ( ::irr::scene::SMD3QuaternionTag::*assign_function_type )( ::irr::scene::SMD3QuaternionTag const & ) ;
            
            SMD3QuaternionTag_exposer.def( 
                "assign"
                , assign_function_type( &::irr::scene::SMD3QuaternionTag::operator= )
                , ( bp::arg("copyMe") )
                , bp::return_self< >() );
        
        }
        SMD3QuaternionTag_exposer.def( bp::self == bp::self );
        { //::irr::scene::SMD3QuaternionTag::setto
        
            typedef void ( ::irr::scene::SMD3QuaternionTag::*setto_function_type )( ::irr::core::matrix4 & ) ;
            
            SMD3QuaternionTag_exposer.def( 
                "setto"
                , setto_function_type( &::irr::scene::SMD3QuaternionTag::setto )
                , ( bp::arg("m") ) );
        
        }
        SMD3QuaternionTag_exposer.def_readwrite( "Name", &irr::scene::SMD3QuaternionTag::Name );
        SMD3QuaternionTag_exposer.def_readwrite( "position", &irr::scene::SMD3QuaternionTag::position );
        SMD3QuaternionTag_exposer.def_readwrite( "rotation", &irr::scene::SMD3QuaternionTag::rotation );
    }

    { //::irr::scene::SMD3QuaternionTagList
        typedef bp::class_< irr::scene::SMD3QuaternionTagList > SMD3QuaternionTagList_exposer_t;
        SMD3QuaternionTagList_exposer_t SMD3QuaternionTagList_exposer = SMD3QuaternionTagList_exposer_t( "SMD3QuaternionTagList", bp::init< >() );
        bp::scope SMD3QuaternionTagList_scope( SMD3QuaternionTagList_exposer );
        SMD3QuaternionTagList_exposer.def( bp::init< irr::scene::SMD3QuaternionTagList const & >(( bp::arg("copyMe") )) );
        { //::irr::scene::SMD3QuaternionTagList::get
        
            typedef ::irr::scene::SMD3QuaternionTag * ( ::irr::scene::SMD3QuaternionTagList::*get_function_type )( ::irr::core::stringc const & ) ;
            
            SMD3QuaternionTagList_exposer.def( 
                "get"
                , get_function_type( &::irr::scene::SMD3QuaternionTagList::get )
                , ( bp::arg("name") )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::SMD3QuaternionTagList::operator=
        
            typedef ::irr::scene::SMD3QuaternionTagList & ( ::irr::scene::SMD3QuaternionTagList::*assign_function_type )( ::irr::scene::SMD3QuaternionTagList const & ) ;
            
            SMD3QuaternionTagList_exposer.def( 
                "assign"
                , assign_function_type( &::irr::scene::SMD3QuaternionTagList::operator= )
                , ( bp::arg("copyMe") )
                , bp::return_self< >() );
        
        }
        { //::irr::scene::SMD3QuaternionTagList::operator[]
        
            typedef ::irr::scene::SMD3QuaternionTag const & ( ::irr::scene::SMD3QuaternionTagList::*__getitem___function_type )( ::irr::u32 ) const;
            
            SMD3QuaternionTagList_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::scene::SMD3QuaternionTagList::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::scene::SMD3QuaternionTagList::operator[]
        
            typedef ::irr::scene::SMD3QuaternionTag & ( ::irr::scene::SMD3QuaternionTagList::*__getitem___function_type )( ::irr::u32 ) ;
            
            SMD3QuaternionTagList_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::irr::scene::SMD3QuaternionTagList::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::irr::scene::SMD3QuaternionTagList::push_back
        
            typedef void ( ::irr::scene::SMD3QuaternionTagList::*push_back_function_type )( ::irr::scene::SMD3QuaternionTag const & ) ;
            
            SMD3QuaternionTagList_exposer.def( 
                "push_back"
                , push_back_function_type( &::irr::scene::SMD3QuaternionTagList::push_back )
                , ( bp::arg("other") ) );
        
        }
        { //::irr::scene::SMD3QuaternionTagList::set_used
        
            typedef void ( ::irr::scene::SMD3QuaternionTagList::*set_used_function_type )( ::irr::u32 ) ;
            
            SMD3QuaternionTagList_exposer.def( 
                "set_used"
                , set_used_function_type( &::irr::scene::SMD3QuaternionTagList::set_used )
                , ( bp::arg("new_size") ) );
        
        }
        { //::irr::scene::SMD3QuaternionTagList::size
        
            typedef ::irr::u32 ( ::irr::scene::SMD3QuaternionTagList::*size_function_type )(  ) const;
            
            SMD3QuaternionTagList_exposer.def( 
                "size"
                , size_function_type( &::irr::scene::SMD3QuaternionTagList::size ) );
        
        }
    }

    bp::class_< irr::scene::SMD3TexCoord >( "SMD3TexCoord" )    
        .def_readwrite( "u", &irr::scene::SMD3TexCoord::u )    
        .def_readwrite( "v", &irr::scene::SMD3TexCoord::v );

    { //::irr::scene::SMD3Vertex
        typedef bp::class_< SMD3Vertex_wrapper > SMD3Vertex_exposer_t;
        SMD3Vertex_exposer_t SMD3Vertex_exposer = SMD3Vertex_exposer_t( "SMD3Vertex" );
        bp::scope SMD3Vertex_scope( SMD3Vertex_exposer );
        pyplusplus::containers::static_sized::register_array_1< unsigned char, 2 >( "__array_1_unsigned_char_2" );
        { //irr::scene::SMD3Vertex::normal [variable], type=irr::u8[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< unsigned char, 2> ( *array_wrapper_creator )( ::irr::scene::SMD3Vertex & );
            
            SMD3Vertex_exposer.add_property( "normal"
                , bp::make_function( array_wrapper_creator(&SMD3Vertex_wrapper::pyplusplus_normal_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        pyplusplus::containers::static_sized::register_array_1< short int, 3 >( "__array_1_short_int_3" );
        { //irr::scene::SMD3Vertex::position [variable], type=irr::s16[3]
        
            typedef pyplusplus::containers::static_sized::array_1_t< short int, 3> ( *array_wrapper_creator )( ::irr::scene::SMD3Vertex & );
            
            SMD3Vertex_exposer.add_property( "position"
                , bp::make_function( array_wrapper_creator(&SMD3Vertex_wrapper::pyplusplus_position_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    bp::class_< SMesh_wrapper, bp::bases< irr::scene::IMesh > >( "SMesh", bp::init< >() )    
        .def( 
            "addMeshBuffer"
            , (void ( ::irr::scene::SMesh::* )( ::irr::scene::IMeshBuffer * ) )( &::irr::scene::SMesh::addMeshBuffer )
            , ( bp::arg("buf") ) )    
        .def( 
            "getBoundingBox"
            , (::irr::core::aabbox3d< float > const & ( ::irr::scene::SMesh::* )(  ) const)(&::irr::scene::SMesh::getBoundingBox)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMeshBuffer"
            , (::irr::scene::IMeshBuffer * ( ::irr::scene::SMesh::* )( ::irr::u32 ) const)(&::irr::scene::SMesh::getMeshBuffer)
            , (::irr::scene::IMeshBuffer * ( SMesh_wrapper::* )( ::irr::u32 ) const)(&SMesh_wrapper::default_getMeshBuffer)
            , ( bp::arg("nr") )
                /* undefined call policies */ )    
        .def( 
            "getMeshBuffer"
            , (::irr::scene::IMeshBuffer * ( ::irr::scene::SMesh::* )( ::irr::video::SMaterial const & ) const)(&::irr::scene::SMesh::getMeshBuffer)
            , (::irr::scene::IMeshBuffer * ( SMesh_wrapper::* )( ::irr::video::SMaterial const & ) const)(&SMesh_wrapper::default_getMeshBuffer)
            , ( bp::arg("material") )
                /* undefined call policies */ )    
        .def( 
            "getMeshBufferCount"
            , (::irr::u32 ( ::irr::scene::SMesh::* )(  ) const)(&::irr::scene::SMesh::getMeshBufferCount)
            , (::irr::u32 ( SMesh_wrapper::* )(  ) const)(&SMesh_wrapper::default_getMeshBufferCount) )    
        .def( 
            "recalculateBoundingBox"
            , (void ( ::irr::scene::SMesh::* )(  ) )( &::irr::scene::SMesh::recalculateBoundingBox ) )    
        .def( 
            "setBoundingBox"
            , (void ( ::irr::scene::SMesh::* )( ::irr::core::aabbox3df const & ) )(&::irr::scene::SMesh::setBoundingBox)
            , (void ( SMesh_wrapper::* )( ::irr::core::aabbox3df const & ) )(&SMesh_wrapper::default_setBoundingBox)
            , ( bp::arg("box") ) )    
        .def( 
            "setDirty"
            , (void ( ::irr::scene::SMesh::* )( ::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::SMesh::setDirty)
            , (void ( SMesh_wrapper::* )( ::irr::scene::E_BUFFER_TYPE ) )(&SMesh_wrapper::default_setDirty)
            , ( bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setHardwareMappingHint"
            , (void ( ::irr::scene::SMesh::* )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::SMesh::setHardwareMappingHint)
            , (void ( SMesh_wrapper::* )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) )(&SMesh_wrapper::default_setHardwareMappingHint)
            , ( bp::arg("newMappingHint"), bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setMaterialFlag"
            , (void ( ::irr::scene::SMesh::* )( ::irr::video::E_MATERIAL_FLAG,bool ) )(&::irr::scene::SMesh::setMaterialFlag)
            , (void ( SMesh_wrapper::* )( ::irr::video::E_MATERIAL_FLAG,bool ) )(&SMesh_wrapper::default_setMaterialFlag)
            , ( bp::arg("flag"), bp::arg("newvalue") ) )    
        .def_readwrite( "BoundingBox", &irr::scene::SMesh::BoundingBox )    
        .def_readwrite( "MeshBuffers", &irr::scene::SMesh::MeshBuffers )    
        .def( 
            "setDebugName"
            , (void ( SMesh_wrapper::* )( ::irr::c8 const * ) )(&SMesh_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< irr::scene::SParticle >( "SParticle" )    
        .def_readwrite( "color", &irr::scene::SParticle::color )    
        .def_readwrite( "endTime", &irr::scene::SParticle::endTime )    
        .def_readwrite( "pos", &irr::scene::SParticle::pos )    
        .def_readwrite( "size", &irr::scene::SParticle::size )    
        .def_readwrite( "startColor", &irr::scene::SParticle::startColor )    
        .def_readwrite( "startSize", &irr::scene::SParticle::startSize )    
        .def_readwrite( "startTime", &irr::scene::SParticle::startTime )    
        .def_readwrite( "startVector", &irr::scene::SParticle::startVector )    
        .def_readwrite( "vector", &irr::scene::SParticle::vector );

    bp::class_< SSharedMeshBuffer_wrapper, bp::bases< irr::scene::IMeshBuffer >, boost::noncopyable >( "SSharedMeshBuffer", bp::init< >() )    
        .def( bp::init< irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > * >(( bp::arg("vertices") )) )    
        .def( 
            "append"
            , (void ( ::irr::scene::SSharedMeshBuffer::* )( void const * const,::irr::u32,::irr::u16 const * const,::irr::u32 ) )(&::irr::scene::SSharedMeshBuffer::append)
            , (void ( SSharedMeshBuffer_wrapper::* )( void const * const,::irr::u32,::irr::u16 const * const,::irr::u32 ) )(&SSharedMeshBuffer_wrapper::default_append)
            , ( bp::arg("vertices"), bp::arg("numVertices"), bp::arg("indices"), bp::arg("numIndices") ) )    
        .def( 
            "append"
            , (void ( ::irr::scene::SSharedMeshBuffer::* )( ::irr::scene::IMeshBuffer const * const ) )(&::irr::scene::SSharedMeshBuffer::append)
            , (void ( SSharedMeshBuffer_wrapper::* )( ::irr::scene::IMeshBuffer const * const ) )(&SSharedMeshBuffer_wrapper::default_append)
            , ( bp::arg("other") ) )    
        .def( 
            "getBoundingBox"
            , (::irr::core::aabbox3d< float > const & ( ::irr::scene::SSharedMeshBuffer::* )(  ) const)(&::irr::scene::SSharedMeshBuffer::getBoundingBox)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getChangedID_Index"
            , (::irr::u32 ( ::irr::scene::SSharedMeshBuffer::* )(  ) const)(&::irr::scene::SSharedMeshBuffer::getChangedID_Index)
            , (::irr::u32 ( SSharedMeshBuffer_wrapper::* )(  ) const)(&SSharedMeshBuffer_wrapper::default_getChangedID_Index) )    
        .def( 
            "getChangedID_Vertex"
            , (::irr::u32 ( ::irr::scene::SSharedMeshBuffer::* )(  ) const)(&::irr::scene::SSharedMeshBuffer::getChangedID_Vertex)
            , (::irr::u32 ( SSharedMeshBuffer_wrapper::* )(  ) const)(&SSharedMeshBuffer_wrapper::default_getChangedID_Vertex) )    
        .def( 
            "getHardwareMappingHint_Index"
            , (::irr::scene::E_HARDWARE_MAPPING ( ::irr::scene::SSharedMeshBuffer::* )(  ) const)(&::irr::scene::SSharedMeshBuffer::getHardwareMappingHint_Index)
            , (::irr::scene::E_HARDWARE_MAPPING ( SSharedMeshBuffer_wrapper::* )(  ) const)(&SSharedMeshBuffer_wrapper::default_getHardwareMappingHint_Index) )    
        .def( 
            "getHardwareMappingHint_Vertex"
            , (::irr::scene::E_HARDWARE_MAPPING ( ::irr::scene::SSharedMeshBuffer::* )(  ) const)(&::irr::scene::SSharedMeshBuffer::getHardwareMappingHint_Vertex)
            , (::irr::scene::E_HARDWARE_MAPPING ( SSharedMeshBuffer_wrapper::* )(  ) const)(&SSharedMeshBuffer_wrapper::default_getHardwareMappingHint_Vertex) )    
        .def( 
            "getIndexCount"
            , (::irr::u32 ( ::irr::scene::SSharedMeshBuffer::* )(  ) const)(&::irr::scene::SSharedMeshBuffer::getIndexCount)
            , (::irr::u32 ( SSharedMeshBuffer_wrapper::* )(  ) const)(&SSharedMeshBuffer_wrapper::default_getIndexCount) )    
        .def( 
            "getIndices"
            , (::irr::u16 const * ( ::irr::scene::SSharedMeshBuffer::* )(  ) const)(&::irr::scene::SSharedMeshBuffer::getIndices)
            , (::irr::u16 const * ( SSharedMeshBuffer_wrapper::* )(  ) const)(&SSharedMeshBuffer_wrapper::default_getIndices)
                /* undefined call policies */ )    
        .def( 
            "getIndices"
            , (::irr::u16 * ( ::irr::scene::SSharedMeshBuffer::* )(  ) )(&::irr::scene::SSharedMeshBuffer::getIndices)
            , (::irr::u16 * ( SSharedMeshBuffer_wrapper::* )(  ) )(&SSharedMeshBuffer_wrapper::default_getIndices)
                /* undefined call policies */ )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial const & ( ::irr::scene::SSharedMeshBuffer::* )(  ) const)(&::irr::scene::SSharedMeshBuffer::getMaterial)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getMaterial"
            , (::irr::video::SMaterial & ( ::irr::scene::SSharedMeshBuffer::* )(  ) )(&::irr::scene::SSharedMeshBuffer::getMaterial)
                /* undefined call policies */ )    
        .def( 
            "getVertexCount"
            , (::irr::u32 ( ::irr::scene::SSharedMeshBuffer::* )(  ) const)(&::irr::scene::SSharedMeshBuffer::getVertexCount)
            , (::irr::u32 ( SSharedMeshBuffer_wrapper::* )(  ) const)(&SSharedMeshBuffer_wrapper::default_getVertexCount) )    
        .def( 
            "getVertexType"
            , (::irr::video::E_VERTEX_TYPE ( ::irr::scene::SSharedMeshBuffer::* )(  ) const)(&::irr::scene::SSharedMeshBuffer::getVertexType)
            , (::irr::video::E_VERTEX_TYPE ( SSharedMeshBuffer_wrapper::* )(  ) const)(&SSharedMeshBuffer_wrapper::default_getVertexType) )    
        .def( 
            "getVertices"
            , (void const * ( ::irr::scene::SSharedMeshBuffer::* )(  ) const)(&::irr::scene::SSharedMeshBuffer::getVertices)
            , (void const * ( SSharedMeshBuffer_wrapper::* )(  ) const)(&SSharedMeshBuffer_wrapper::default_getVertices)
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "getVertices"
            , (void * ( ::irr::scene::SSharedMeshBuffer::* )(  ) )(&::irr::scene::SSharedMeshBuffer::getVertices)
            , (void * ( SSharedMeshBuffer_wrapper::* )(  ) )(&SSharedMeshBuffer_wrapper::default_getVertices)
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "recalculateBoundingBox"
            , (void ( ::irr::scene::SSharedMeshBuffer::* )(  ) )(&::irr::scene::SSharedMeshBuffer::recalculateBoundingBox)
            , (void ( SSharedMeshBuffer_wrapper::* )(  ) )(&SSharedMeshBuffer_wrapper::default_recalculateBoundingBox) )    
        .def( 
            "setBoundingBox"
            , (void ( ::irr::scene::SSharedMeshBuffer::* )( ::irr::core::aabbox3df const & ) )(&::irr::scene::SSharedMeshBuffer::setBoundingBox)
            , (void ( SSharedMeshBuffer_wrapper::* )( ::irr::core::aabbox3df const & ) )(&SSharedMeshBuffer_wrapper::default_setBoundingBox)
            , ( bp::arg("box") ) )    
        .def( 
            "setDirty"
            , (void ( ::irr::scene::SSharedMeshBuffer::* )( ::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::SSharedMeshBuffer::setDirty)
            , (void ( SSharedMeshBuffer_wrapper::* )( ::irr::scene::E_BUFFER_TYPE ) )(&SSharedMeshBuffer_wrapper::default_setDirty)
            , ( bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def( 
            "setHardwareMappingHint"
            , (void ( ::irr::scene::SSharedMeshBuffer::* )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) )(&::irr::scene::SSharedMeshBuffer::setHardwareMappingHint)
            , (void ( SSharedMeshBuffer_wrapper::* )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) )(&SSharedMeshBuffer_wrapper::default_setHardwareMappingHint)
            , ( bp::arg("NewMappingHint"), bp::arg("buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) )    
        .def_readwrite( "BoundingBox", &irr::scene::SSharedMeshBuffer::BoundingBox )    
        .def_readwrite( "ChangedID_Index", &irr::scene::SSharedMeshBuffer::ChangedID_Index )    
        .def_readwrite( "ChangedID_Vertex", &irr::scene::SSharedMeshBuffer::ChangedID_Vertex )    
        .def_readwrite( "Indices", &irr::scene::SSharedMeshBuffer::Indices )    
        .def_readwrite( "MappingHintIndex", &irr::scene::SSharedMeshBuffer::MappingHintIndex )    
        .def_readwrite( "MappingHintVertex", &irr::scene::SSharedMeshBuffer::MappingHintVertex )    
        .def_readwrite( "Material", &irr::scene::SSharedMeshBuffer::Material )    
        .add_property( "Vertices"
                    , bp::make_function( (::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > * (*)( ::irr::scene::SSharedMeshBuffer const & ))(&SSharedMeshBuffer_wrapper::get_Vertices), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::irr::scene::SSharedMeshBuffer &,::irr::core::array< irr::video::S3DVertex, irr::core::irrAllocator< irr::video::S3DVertex > > * ))(&SSharedMeshBuffer_wrapper::set_Vertices), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .def( 
            "getIndexType"
            , bp::pure_virtual( (::irr::video::E_INDEX_TYPE ( ::irr::scene::IMeshBuffer::* )(  ) const)(&::irr::scene::IMeshBuffer::getIndexType) ) )    
        .def( 
            "getNormal"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IMeshBuffer::* )( ::irr::u32 ) const)(&::irr::scene::IMeshBuffer::getNormal) )
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getNormal"
            , bp::pure_virtual( (::irr::core::vector3df & ( ::irr::scene::IMeshBuffer::* )( ::irr::u32 ) )(&::irr::scene::IMeshBuffer::getNormal) )
            , ( bp::arg("i") )
                /* undefined call policies */ )    
        .def( 
            "getPosition"
            , bp::pure_virtual( (::irr::core::vector3df const & ( ::irr::scene::IMeshBuffer::* )( ::irr::u32 ) const)(&::irr::scene::IMeshBuffer::getPosition) )
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getPosition"
            , bp::pure_virtual( (::irr::core::vector3df & ( ::irr::scene::IMeshBuffer::* )( ::irr::u32 ) )(&::irr::scene::IMeshBuffer::getPosition) )
            , ( bp::arg("i") )
                /* undefined call policies */ )    
        .def( 
            "getTCoords"
            , bp::pure_virtual( (::irr::core::vector2df const & ( ::irr::scene::IMeshBuffer::* )( ::irr::u32 ) const)(&::irr::scene::IMeshBuffer::getTCoords) )
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getTCoords"
            , bp::pure_virtual( (::irr::core::vector2df & ( ::irr::scene::IMeshBuffer::* )( ::irr::u32 ) )(&::irr::scene::IMeshBuffer::getTCoords) )
            , ( bp::arg("i") )
                /* undefined call policies */ )    
        .def( 
            "setDebugName"
            , (void ( SSharedMeshBuffer_wrapper::* )( ::irr::c8 const * ) )(&SSharedMeshBuffer_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    { //::irr::scene::SSkinMeshBuffer
        typedef bp::class_< SSkinMeshBuffer_wrapper, bp::bases< irr::scene::IMeshBuffer >, boost::noncopyable > SSkinMeshBuffer_exposer_t;
        SSkinMeshBuffer_exposer_t SSkinMeshBuffer_exposer = SSkinMeshBuffer_exposer_t( "SSkinMeshBuffer", bp::init< bp::optional< irr::video::E_VERTEX_TYPE > >(( bp::arg("vt")=::irr::video::EVT_STANDARD )) );
        bp::scope SSkinMeshBuffer_scope( SSkinMeshBuffer_exposer );
        bp::implicitly_convertible< irr::video::E_VERTEX_TYPE, irr::scene::SSkinMeshBuffer >();
        { //::irr::scene::SSkinMeshBuffer::append
        
            typedef void ( ::irr::scene::SSkinMeshBuffer::*append_function_type )( void const * const,::irr::u32,::irr::u16 const * const,::irr::u32 ) ;
            typedef void ( SSkinMeshBuffer_wrapper::*default_append_function_type )( void const * const,::irr::u32,::irr::u16 const * const,::irr::u32 ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "append"
                , append_function_type(&::irr::scene::SSkinMeshBuffer::append)
                , default_append_function_type(&SSkinMeshBuffer_wrapper::default_append)
                , ( bp::arg("vertices"), bp::arg("numVertices"), bp::arg("indices"), bp::arg("numIndices") ) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::append
        
            typedef void ( ::irr::scene::SSkinMeshBuffer::*append_function_type )( ::irr::scene::IMeshBuffer const * const ) ;
            typedef void ( SSkinMeshBuffer_wrapper::*default_append_function_type )( ::irr::scene::IMeshBuffer const * const ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "append"
                , append_function_type(&::irr::scene::SSkinMeshBuffer::append)
                , default_append_function_type(&SSkinMeshBuffer_wrapper::default_append)
                , ( bp::arg("other") ) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::boundingBoxNeedsRecalculated
        
            typedef void ( ::irr::scene::SSkinMeshBuffer::*boundingBoxNeedsRecalculated_function_type )(  ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "boundingBoxNeedsRecalculated"
                , boundingBoxNeedsRecalculated_function_type( &::irr::scene::SSkinMeshBuffer::boundingBoxNeedsRecalculated ) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::convertTo2TCoords
        
            typedef void ( ::irr::scene::SSkinMeshBuffer::*convertTo2TCoords_function_type )(  ) ;
            typedef void ( SSkinMeshBuffer_wrapper::*default_convertTo2TCoords_function_type )(  ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "convertTo2TCoords"
                , convertTo2TCoords_function_type(&::irr::scene::SSkinMeshBuffer::convertTo2TCoords)
                , default_convertTo2TCoords_function_type(&SSkinMeshBuffer_wrapper::default_convertTo2TCoords) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::convertToTangents
        
            typedef void ( ::irr::scene::SSkinMeshBuffer::*convertToTangents_function_type )(  ) ;
            typedef void ( SSkinMeshBuffer_wrapper::*default_convertToTangents_function_type )(  ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "convertToTangents"
                , convertToTangents_function_type(&::irr::scene::SSkinMeshBuffer::convertToTangents)
                , default_convertToTangents_function_type(&SSkinMeshBuffer_wrapper::default_convertToTangents) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getBoundingBox
        
            typedef ::irr::core::aabbox3d< float > const & ( ::irr::scene::SSkinMeshBuffer::*getBoundingBox_function_type )(  ) const;
            
            SSkinMeshBuffer_exposer.def( 
                "getBoundingBox"
                , getBoundingBox_function_type(&::irr::scene::SSkinMeshBuffer::getBoundingBox)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getChangedID_Index
        
            typedef ::irr::u32 ( ::irr::scene::SSkinMeshBuffer::*getChangedID_Index_function_type )(  ) const;
            typedef ::irr::u32 ( SSkinMeshBuffer_wrapper::*default_getChangedID_Index_function_type )(  ) const;
            
            SSkinMeshBuffer_exposer.def( 
                "getChangedID_Index"
                , getChangedID_Index_function_type(&::irr::scene::SSkinMeshBuffer::getChangedID_Index)
                , default_getChangedID_Index_function_type(&SSkinMeshBuffer_wrapper::default_getChangedID_Index) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getChangedID_Vertex
        
            typedef ::irr::u32 ( ::irr::scene::SSkinMeshBuffer::*getChangedID_Vertex_function_type )(  ) const;
            typedef ::irr::u32 ( SSkinMeshBuffer_wrapper::*default_getChangedID_Vertex_function_type )(  ) const;
            
            SSkinMeshBuffer_exposer.def( 
                "getChangedID_Vertex"
                , getChangedID_Vertex_function_type(&::irr::scene::SSkinMeshBuffer::getChangedID_Vertex)
                , default_getChangedID_Vertex_function_type(&SSkinMeshBuffer_wrapper::default_getChangedID_Vertex) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getHardwareMappingHint_Index
        
            typedef ::irr::scene::E_HARDWARE_MAPPING ( ::irr::scene::SSkinMeshBuffer::*getHardwareMappingHint_Index_function_type )(  ) const;
            typedef ::irr::scene::E_HARDWARE_MAPPING ( SSkinMeshBuffer_wrapper::*default_getHardwareMappingHint_Index_function_type )(  ) const;
            
            SSkinMeshBuffer_exposer.def( 
                "getHardwareMappingHint_Index"
                , getHardwareMappingHint_Index_function_type(&::irr::scene::SSkinMeshBuffer::getHardwareMappingHint_Index)
                , default_getHardwareMappingHint_Index_function_type(&SSkinMeshBuffer_wrapper::default_getHardwareMappingHint_Index) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getHardwareMappingHint_Vertex
        
            typedef ::irr::scene::E_HARDWARE_MAPPING ( ::irr::scene::SSkinMeshBuffer::*getHardwareMappingHint_Vertex_function_type )(  ) const;
            typedef ::irr::scene::E_HARDWARE_MAPPING ( SSkinMeshBuffer_wrapper::*default_getHardwareMappingHint_Vertex_function_type )(  ) const;
            
            SSkinMeshBuffer_exposer.def( 
                "getHardwareMappingHint_Vertex"
                , getHardwareMappingHint_Vertex_function_type(&::irr::scene::SSkinMeshBuffer::getHardwareMappingHint_Vertex)
                , default_getHardwareMappingHint_Vertex_function_type(&SSkinMeshBuffer_wrapper::default_getHardwareMappingHint_Vertex) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getIndexCount
        
            typedef ::irr::u32 ( ::irr::scene::SSkinMeshBuffer::*getIndexCount_function_type )(  ) const;
            typedef ::irr::u32 ( SSkinMeshBuffer_wrapper::*default_getIndexCount_function_type )(  ) const;
            
            SSkinMeshBuffer_exposer.def( 
                "getIndexCount"
                , getIndexCount_function_type(&::irr::scene::SSkinMeshBuffer::getIndexCount)
                , default_getIndexCount_function_type(&SSkinMeshBuffer_wrapper::default_getIndexCount) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getIndexType
        
            typedef ::irr::video::E_INDEX_TYPE ( ::irr::scene::SSkinMeshBuffer::*getIndexType_function_type )(  ) const;
            typedef ::irr::video::E_INDEX_TYPE ( SSkinMeshBuffer_wrapper::*default_getIndexType_function_type )(  ) const;
            
            SSkinMeshBuffer_exposer.def( 
                "getIndexType"
                , getIndexType_function_type(&::irr::scene::SSkinMeshBuffer::getIndexType)
                , default_getIndexType_function_type(&SSkinMeshBuffer_wrapper::default_getIndexType) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getIndices
        
            typedef ::irr::u16 const * ( ::irr::scene::SSkinMeshBuffer::*getIndices_function_type )(  ) const;
            typedef ::irr::u16 const * ( SSkinMeshBuffer_wrapper::*default_getIndices_function_type )(  ) const;
            
            SSkinMeshBuffer_exposer.def( 
                "getIndices"
                , getIndices_function_type(&::irr::scene::SSkinMeshBuffer::getIndices)
                , default_getIndices_function_type(&SSkinMeshBuffer_wrapper::default_getIndices)
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getIndices
        
            typedef ::irr::u16 * ( ::irr::scene::SSkinMeshBuffer::*getIndices_function_type )(  ) ;
            typedef ::irr::u16 * ( SSkinMeshBuffer_wrapper::*default_getIndices_function_type )(  ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "getIndices"
                , getIndices_function_type(&::irr::scene::SSkinMeshBuffer::getIndices)
                , default_getIndices_function_type(&SSkinMeshBuffer_wrapper::default_getIndices)
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getMaterial
        
            typedef ::irr::video::SMaterial const & ( ::irr::scene::SSkinMeshBuffer::*getMaterial_function_type )(  ) const;
            
            SSkinMeshBuffer_exposer.def( 
                "getMaterial"
                , getMaterial_function_type(&::irr::scene::SSkinMeshBuffer::getMaterial)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getMaterial
        
            typedef ::irr::video::SMaterial & ( ::irr::scene::SSkinMeshBuffer::*getMaterial_function_type )(  ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "getMaterial"
                , getMaterial_function_type(&::irr::scene::SSkinMeshBuffer::getMaterial)
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getNormal
        
            typedef ::irr::core::vector3df const & ( ::irr::scene::SSkinMeshBuffer::*getNormal_function_type )( ::irr::u32 ) const;
            
            SSkinMeshBuffer_exposer.def( 
                "getNormal"
                , getNormal_function_type(&::irr::scene::SSkinMeshBuffer::getNormal)
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getNormal
        
            typedef ::irr::core::vector3df & ( ::irr::scene::SSkinMeshBuffer::*getNormal_function_type )( ::irr::u32 ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "getNormal"
                , getNormal_function_type(&::irr::scene::SSkinMeshBuffer::getNormal)
                , ( bp::arg("i") )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getPosition
        
            typedef ::irr::core::vector3df const & ( ::irr::scene::SSkinMeshBuffer::*getPosition_function_type )( ::irr::u32 ) const;
            
            SSkinMeshBuffer_exposer.def( 
                "getPosition"
                , getPosition_function_type(&::irr::scene::SSkinMeshBuffer::getPosition)
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getPosition
        
            typedef ::irr::core::vector3df & ( ::irr::scene::SSkinMeshBuffer::*getPosition_function_type )( ::irr::u32 ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "getPosition"
                , getPosition_function_type(&::irr::scene::SSkinMeshBuffer::getPosition)
                , ( bp::arg("i") )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getTCoords
        
            typedef ::irr::core::vector2df const & ( ::irr::scene::SSkinMeshBuffer::*getTCoords_function_type )( ::irr::u32 ) const;
            
            SSkinMeshBuffer_exposer.def( 
                "getTCoords"
                , getTCoords_function_type(&::irr::scene::SSkinMeshBuffer::getTCoords)
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getTCoords
        
            typedef ::irr::core::vector2df & ( ::irr::scene::SSkinMeshBuffer::*getTCoords_function_type )( ::irr::u32 ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "getTCoords"
                , getTCoords_function_type(&::irr::scene::SSkinMeshBuffer::getTCoords)
                , ( bp::arg("i") )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getVertex
        
            typedef ::irr::video::S3DVertex * ( ::irr::scene::SSkinMeshBuffer::*getVertex_function_type )( ::irr::u32 ) ;
            typedef ::irr::video::S3DVertex * ( SSkinMeshBuffer_wrapper::*default_getVertex_function_type )( ::irr::u32 ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "getVertex"
                , getVertex_function_type(&::irr::scene::SSkinMeshBuffer::getVertex)
                , default_getVertex_function_type(&SSkinMeshBuffer_wrapper::default_getVertex)
                , ( bp::arg("index") )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getVertexCount
        
            typedef ::irr::u32 ( ::irr::scene::SSkinMeshBuffer::*getVertexCount_function_type )(  ) const;
            typedef ::irr::u32 ( SSkinMeshBuffer_wrapper::*default_getVertexCount_function_type )(  ) const;
            
            SSkinMeshBuffer_exposer.def( 
                "getVertexCount"
                , getVertexCount_function_type(&::irr::scene::SSkinMeshBuffer::getVertexCount)
                , default_getVertexCount_function_type(&SSkinMeshBuffer_wrapper::default_getVertexCount) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getVertexType
        
            typedef ::irr::video::E_VERTEX_TYPE ( ::irr::scene::SSkinMeshBuffer::*getVertexType_function_type )(  ) const;
            typedef ::irr::video::E_VERTEX_TYPE ( SSkinMeshBuffer_wrapper::*default_getVertexType_function_type )(  ) const;
            
            SSkinMeshBuffer_exposer.def( 
                "getVertexType"
                , getVertexType_function_type(&::irr::scene::SSkinMeshBuffer::getVertexType)
                , default_getVertexType_function_type(&SSkinMeshBuffer_wrapper::default_getVertexType) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getVertices
        
            typedef void const * ( ::irr::scene::SSkinMeshBuffer::*getVertices_function_type )(  ) const;
            typedef void const * ( SSkinMeshBuffer_wrapper::*default_getVertices_function_type )(  ) const;
            
            SSkinMeshBuffer_exposer.def( 
                "getVertices"
                , getVertices_function_type(&::irr::scene::SSkinMeshBuffer::getVertices)
                , default_getVertices_function_type(&SSkinMeshBuffer_wrapper::default_getVertices)
                , bp::return_value_policy< bp::return_opaque_pointer >() );
        
        }
        { //::irr::scene::SSkinMeshBuffer::getVertices
        
            typedef void * ( ::irr::scene::SSkinMeshBuffer::*getVertices_function_type )(  ) ;
            typedef void * ( SSkinMeshBuffer_wrapper::*default_getVertices_function_type )(  ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "getVertices"
                , getVertices_function_type(&::irr::scene::SSkinMeshBuffer::getVertices)
                , default_getVertices_function_type(&SSkinMeshBuffer_wrapper::default_getVertices)
                , bp::return_value_policy< bp::return_opaque_pointer >() );
        
        }
        { //::irr::scene::SSkinMeshBuffer::recalculateBoundingBox
        
            typedef void ( ::irr::scene::SSkinMeshBuffer::*recalculateBoundingBox_function_type )(  ) ;
            typedef void ( SSkinMeshBuffer_wrapper::*default_recalculateBoundingBox_function_type )(  ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "recalculateBoundingBox"
                , recalculateBoundingBox_function_type(&::irr::scene::SSkinMeshBuffer::recalculateBoundingBox)
                , default_recalculateBoundingBox_function_type(&SSkinMeshBuffer_wrapper::default_recalculateBoundingBox) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::setBoundingBox
        
            typedef void ( ::irr::scene::SSkinMeshBuffer::*setBoundingBox_function_type )( ::irr::core::aabbox3df const & ) ;
            typedef void ( SSkinMeshBuffer_wrapper::*default_setBoundingBox_function_type )( ::irr::core::aabbox3df const & ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "setBoundingBox"
                , setBoundingBox_function_type(&::irr::scene::SSkinMeshBuffer::setBoundingBox)
                , default_setBoundingBox_function_type(&SSkinMeshBuffer_wrapper::default_setBoundingBox)
                , ( bp::arg("box") ) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::setDirty
        
            typedef void ( ::irr::scene::SSkinMeshBuffer::*setDirty_function_type )( ::irr::scene::E_BUFFER_TYPE ) ;
            typedef void ( SSkinMeshBuffer_wrapper::*default_setDirty_function_type )( ::irr::scene::E_BUFFER_TYPE ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "setDirty"
                , setDirty_function_type(&::irr::scene::SSkinMeshBuffer::setDirty)
                , default_setDirty_function_type(&SSkinMeshBuffer_wrapper::default_setDirty)
                , ( bp::arg("Buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) );
        
        }
        { //::irr::scene::SSkinMeshBuffer::setHardwareMappingHint
        
            typedef void ( ::irr::scene::SSkinMeshBuffer::*setHardwareMappingHint_function_type )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) ;
            typedef void ( SSkinMeshBuffer_wrapper::*default_setHardwareMappingHint_function_type )( ::irr::scene::E_HARDWARE_MAPPING,::irr::scene::E_BUFFER_TYPE ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "setHardwareMappingHint"
                , setHardwareMappingHint_function_type(&::irr::scene::SSkinMeshBuffer::setHardwareMappingHint)
                , default_setHardwareMappingHint_function_type(&SSkinMeshBuffer_wrapper::default_setHardwareMappingHint)
                , ( bp::arg("NewMappingHint"), bp::arg("Buffer")=::irr::scene::EBT_VERTEX_AND_INDEX ) );
        
        }
        SSkinMeshBuffer_exposer.def_readwrite( "BoundingBox", &irr::scene::SSkinMeshBuffer::BoundingBox );
        SSkinMeshBuffer_exposer.add_property( "BoundingBoxNeedsRecalculated"
                    , bp::make_function( (bool (*)( ::irr::scene::SSkinMeshBuffer const & ))(&SSkinMeshBuffer_wrapper::get_BoundingBoxNeedsRecalculated) )
                    , bp::make_function( (void (*)( ::irr::scene::SSkinMeshBuffer &,bool ))(&SSkinMeshBuffer_wrapper::set_BoundingBoxNeedsRecalculated) ) );
        SSkinMeshBuffer_exposer.def_readwrite( "ChangedID_Index", &irr::scene::SSkinMeshBuffer::ChangedID_Index );
        SSkinMeshBuffer_exposer.def_readwrite( "ChangedID_Vertex", &irr::scene::SSkinMeshBuffer::ChangedID_Vertex );
        SSkinMeshBuffer_exposer.def_readwrite( "Indices", &irr::scene::SSkinMeshBuffer::Indices );
        SSkinMeshBuffer_exposer.add_property( "MappingHint_Index"
                    , bp::make_function( (::irr::scene::E_HARDWARE_MAPPING (*)( ::irr::scene::SSkinMeshBuffer const & ))(&SSkinMeshBuffer_wrapper::get_MappingHint_Index) )
                    , bp::make_function( (void (*)( ::irr::scene::SSkinMeshBuffer &,::irr::scene::E_HARDWARE_MAPPING ))(&SSkinMeshBuffer_wrapper::set_MappingHint_Index) ) );
        SSkinMeshBuffer_exposer.add_property( "MappingHint_Vertex"
                    , bp::make_function( (::irr::scene::E_HARDWARE_MAPPING (*)( ::irr::scene::SSkinMeshBuffer const & ))(&SSkinMeshBuffer_wrapper::get_MappingHint_Vertex) )
                    , bp::make_function( (void (*)( ::irr::scene::SSkinMeshBuffer &,::irr::scene::E_HARDWARE_MAPPING ))(&SSkinMeshBuffer_wrapper::set_MappingHint_Vertex) ) );
        SSkinMeshBuffer_exposer.def_readwrite( "Material", &irr::scene::SSkinMeshBuffer::Material );
        SSkinMeshBuffer_exposer.def_readwrite( "Transformation", &irr::scene::SSkinMeshBuffer::Transformation );
        SSkinMeshBuffer_exposer.def_readwrite( "VertexType", &irr::scene::SSkinMeshBuffer::VertexType );
        SSkinMeshBuffer_exposer.def_readwrite( "Vertices_2TCoords", &irr::scene::SSkinMeshBuffer::Vertices_2TCoords );
        SSkinMeshBuffer_exposer.def_readwrite( "Vertices_Standard", &irr::scene::SSkinMeshBuffer::Vertices_Standard );
        SSkinMeshBuffer_exposer.def_readwrite( "Vertices_Tangents", &irr::scene::SSkinMeshBuffer::Vertices_Tangents );
        { //::irr::IReferenceCounted::setDebugName
        
            typedef void ( SSkinMeshBuffer_wrapper::*setDebugName_function_type )( ::irr::c8 const * ) ;
            
            SSkinMeshBuffer_exposer.def( 
                "setDebugName"
                , setDebugName_function_type( &SSkinMeshBuffer_wrapper::setDebugName )
                , ( bp::arg("newName") ) );
        
        }
    }

    { //::irr::scene::SVertexColorBrightnessManipulator
        typedef bp::class_< irr::scene::SVertexColorBrightnessManipulator, bp::bases< irr::scene::IVertexManipulator > > SVertexColorBrightnessManipulator_exposer_t;
        SVertexColorBrightnessManipulator_exposer_t SVertexColorBrightnessManipulator_exposer = SVertexColorBrightnessManipulator_exposer_t( "SVertexColorBrightnessManipulator", bp::init< irr::s32 >(( bp::arg("amount") )) );
        bp::scope SVertexColorBrightnessManipulator_scope( SVertexColorBrightnessManipulator_exposer );
        bp::implicitly_convertible< irr::s32, irr::scene::SVertexColorBrightnessManipulator >();
        { //::irr::scene::SVertexColorBrightnessManipulator::operator()
        
            typedef void ( ::irr::scene::SVertexColorBrightnessManipulator::*__call___function_type )( ::irr::video::S3DVertex & ) const;
            
            SVertexColorBrightnessManipulator_exposer.def( 
                "__call__"
                , __call___function_type( &::irr::scene::SVertexColorBrightnessManipulator::operator() )
                , ( bp::arg("vertex") ) );
        
        }
    }

    bp::class_< irr::scene::SVertexColorContrastBrightnessManipulator, bp::bases< irr::scene::IVertexManipulator > >( "SVertexColorContrastBrightnessManipulator", bp::init< irr::f32, irr::s32 >(( bp::arg("factor"), bp::arg("amount") )) )    
        .def( 
            "__call__"
            , (void ( ::irr::scene::SVertexColorContrastBrightnessManipulator::* )( ::irr::video::S3DVertex & ) const)( &::irr::scene::SVertexColorContrastBrightnessManipulator::operator() )
            , ( bp::arg("vertex") ) );

    { //::irr::scene::SVertexColorContrastManipulator
        typedef bp::class_< irr::scene::SVertexColorContrastManipulator, bp::bases< irr::scene::IVertexManipulator > > SVertexColorContrastManipulator_exposer_t;
        SVertexColorContrastManipulator_exposer_t SVertexColorContrastManipulator_exposer = SVertexColorContrastManipulator_exposer_t( "SVertexColorContrastManipulator", bp::init< irr::f32 >(( bp::arg("factor") )) );
        bp::scope SVertexColorContrastManipulator_scope( SVertexColorContrastManipulator_exposer );
        bp::implicitly_convertible< irr::f32, irr::scene::SVertexColorContrastManipulator >();
        { //::irr::scene::SVertexColorContrastManipulator::operator()
        
            typedef void ( ::irr::scene::SVertexColorContrastManipulator::*__call___function_type )( ::irr::video::S3DVertex & ) const;
            
            SVertexColorContrastManipulator_exposer.def( 
                "__call__"
                , __call___function_type( &::irr::scene::SVertexColorContrastManipulator::operator() )
                , ( bp::arg("vertex") ) );
        
        }
    }

    bp::class_< irr::scene::SVertexColorDesaturateToAverageManipulator, bp::bases< irr::scene::IVertexManipulator > >( "SVertexColorDesaturateToAverageManipulator" )    
        .def( 
            "__call__"
            , (void ( ::irr::scene::SVertexColorDesaturateToAverageManipulator::* )( ::irr::video::S3DVertex & ) const)( &::irr::scene::SVertexColorDesaturateToAverageManipulator::operator() )
            , ( bp::arg("vertex") ) );

    bp::class_< irr::scene::SVertexColorDesaturateToLightnessManipulator, bp::bases< irr::scene::IVertexManipulator > >( "SVertexColorDesaturateToLightnessManipulator" )    
        .def( 
            "__call__"
            , (void ( ::irr::scene::SVertexColorDesaturateToLightnessManipulator::* )( ::irr::video::S3DVertex & ) const)( &::irr::scene::SVertexColorDesaturateToLightnessManipulator::operator() )
            , ( bp::arg("vertex") ) );

    bp::class_< irr::scene::SVertexColorDesaturateToLuminanceManipulator, bp::bases< irr::scene::IVertexManipulator > >( "SVertexColorDesaturateToLuminanceManipulator" )    
        .def( 
            "__call__"
            , (void ( ::irr::scene::SVertexColorDesaturateToLuminanceManipulator::* )( ::irr::video::S3DVertex & ) const)( &::irr::scene::SVertexColorDesaturateToLuminanceManipulator::operator() )
            , ( bp::arg("vertex") ) );

    { //::irr::scene::SVertexColorGammaManipulator
        typedef bp::class_< irr::scene::SVertexColorGammaManipulator, bp::bases< irr::scene::IVertexManipulator > > SVertexColorGammaManipulator_exposer_t;
        SVertexColorGammaManipulator_exposer_t SVertexColorGammaManipulator_exposer = SVertexColorGammaManipulator_exposer_t( "SVertexColorGammaManipulator", bp::init< irr::f32 >(( bp::arg("gamma") )) );
        bp::scope SVertexColorGammaManipulator_scope( SVertexColorGammaManipulator_exposer );
        bp::implicitly_convertible< irr::f32, irr::scene::SVertexColorGammaManipulator >();
        { //::irr::scene::SVertexColorGammaManipulator::operator()
        
            typedef void ( ::irr::scene::SVertexColorGammaManipulator::*__call___function_type )( ::irr::video::S3DVertex & ) const;
            
            SVertexColorGammaManipulator_exposer.def( 
                "__call__"
                , __call___function_type( &::irr::scene::SVertexColorGammaManipulator::operator() )
                , ( bp::arg("vertex") ) );
        
        }
    }

    bp::class_< irr::scene::SVertexColorInterpolateLinearManipulator, bp::bases< irr::scene::IVertexManipulator > >( "SVertexColorInterpolateLinearManipulator", bp::init< irr::video::SColor, irr::f32 >(( bp::arg("color"), bp::arg("factor") )) )    
        .def( 
            "__call__"
            , (void ( ::irr::scene::SVertexColorInterpolateLinearManipulator::* )( ::irr::video::S3DVertex & ) const)( &::irr::scene::SVertexColorInterpolateLinearManipulator::operator() )
            , ( bp::arg("vertex") ) );

    bp::class_< irr::scene::SVertexColorInterpolateQuadraticManipulator, bp::bases< irr::scene::IVertexManipulator > >( "SVertexColorInterpolateQuadraticManipulator", bp::init< irr::video::SColor, irr::video::SColor, irr::f32 >(( bp::arg("color1"), bp::arg("color2"), bp::arg("factor") )) )    
        .def( 
            "__call__"
            , (void ( ::irr::scene::SVertexColorInterpolateQuadraticManipulator::* )( ::irr::video::S3DVertex & ) const)( &::irr::scene::SVertexColorInterpolateQuadraticManipulator::operator() )
            , ( bp::arg("vertex") ) );

    bp::class_< irr::scene::SVertexColorInvertManipulator, bp::bases< irr::scene::IVertexManipulator > >( "SVertexColorInvertManipulator" )    
        .def( 
            "__call__"
            , (void ( ::irr::scene::SVertexColorInvertManipulator::* )( ::irr::video::S3DVertex & ) const)( &::irr::scene::SVertexColorInvertManipulator::operator() )
            , ( bp::arg("vertex") ) );

    { //::irr::scene::SVertexColorScaleManipulator
        typedef bp::class_< irr::scene::SVertexColorScaleManipulator, bp::bases< irr::scene::IVertexManipulator > > SVertexColorScaleManipulator_exposer_t;
        SVertexColorScaleManipulator_exposer_t SVertexColorScaleManipulator_exposer = SVertexColorScaleManipulator_exposer_t( "SVertexColorScaleManipulator", bp::init< irr::f32 >(( bp::arg("factor") )) );
        bp::scope SVertexColorScaleManipulator_scope( SVertexColorScaleManipulator_exposer );
        bp::implicitly_convertible< irr::f32, irr::scene::SVertexColorScaleManipulator >();
        { //::irr::scene::SVertexColorScaleManipulator::operator()
        
            typedef void ( ::irr::scene::SVertexColorScaleManipulator::*__call___function_type )( ::irr::video::S3DVertex & ) const;
            
            SVertexColorScaleManipulator_exposer.def( 
                "__call__"
                , __call___function_type( &::irr::scene::SVertexColorScaleManipulator::operator() )
                , ( bp::arg("vertex") ) );
        
        }
    }

    { //::irr::scene::SVertexColorSetAlphaManipulator
        typedef bp::class_< irr::scene::SVertexColorSetAlphaManipulator, bp::bases< irr::scene::IVertexManipulator > > SVertexColorSetAlphaManipulator_exposer_t;
        SVertexColorSetAlphaManipulator_exposer_t SVertexColorSetAlphaManipulator_exposer = SVertexColorSetAlphaManipulator_exposer_t( "SVertexColorSetAlphaManipulator", bp::init< irr::u32 >(( bp::arg("alpha") )) );
        bp::scope SVertexColorSetAlphaManipulator_scope( SVertexColorSetAlphaManipulator_exposer );
        bp::implicitly_convertible< irr::u32, irr::scene::SVertexColorSetAlphaManipulator >();
        { //::irr::scene::SVertexColorSetAlphaManipulator::operator()
        
            typedef void ( ::irr::scene::SVertexColorSetAlphaManipulator::*__call___function_type )( ::irr::video::S3DVertex & ) const;
            
            SVertexColorSetAlphaManipulator_exposer.def( 
                "__call__"
                , __call___function_type( &::irr::scene::SVertexColorSetAlphaManipulator::operator() )
                , ( bp::arg("vertex") ) );
        
        }
    }

    { //::irr::scene::SVertexColorSetManipulator
        typedef bp::class_< irr::scene::SVertexColorSetManipulator, bp::bases< irr::scene::IVertexManipulator > > SVertexColorSetManipulator_exposer_t;
        SVertexColorSetManipulator_exposer_t SVertexColorSetManipulator_exposer = SVertexColorSetManipulator_exposer_t( "SVertexColorSetManipulator", bp::init< irr::video::SColor >(( bp::arg("color") )) );
        bp::scope SVertexColorSetManipulator_scope( SVertexColorSetManipulator_exposer );
        bp::implicitly_convertible< irr::video::SColor, irr::scene::SVertexColorSetManipulator >();
        { //::irr::scene::SVertexColorSetManipulator::operator()
        
            typedef void ( ::irr::scene::SVertexColorSetManipulator::*__call___function_type )( ::irr::video::S3DVertex & ) const;
            
            SVertexColorSetManipulator_exposer.def( 
                "__call__"
                , __call___function_type( &::irr::scene::SVertexColorSetManipulator::operator() )
                , ( bp::arg("vertex") ) );
        
        }
    }

    bp::class_< irr::scene::SVertexColorThresholdManipulator, bp::bases< irr::scene::IVertexManipulator > >( "SVertexColorThresholdManipulator", bp::init< irr::u8, irr::video::SColor, irr::video::SColor >(( bp::arg("threshold"), bp::arg("low"), bp::arg("high") )) )    
        .def( 
            "__call__"
            , (void ( ::irr::scene::SVertexColorThresholdManipulator::* )( ::irr::video::S3DVertex & ) const)( &::irr::scene::SVertexColorThresholdManipulator::operator() )
            , ( bp::arg("vertex") ) );

    { //::irr::scene::SVertexPositionScaleAlongNormalsManipulator
        typedef bp::class_< irr::scene::SVertexPositionScaleAlongNormalsManipulator, bp::bases< irr::scene::IVertexManipulator > > SVertexPositionScaleAlongNormalsManipulator_exposer_t;
        SVertexPositionScaleAlongNormalsManipulator_exposer_t SVertexPositionScaleAlongNormalsManipulator_exposer = SVertexPositionScaleAlongNormalsManipulator_exposer_t( "SVertexPositionScaleAlongNormalsManipulator", bp::init< irr::core::vector3df const & >(( bp::arg("factor") )) );
        bp::scope SVertexPositionScaleAlongNormalsManipulator_scope( SVertexPositionScaleAlongNormalsManipulator_exposer );
        bp::implicitly_convertible< irr::core::vector3df const &, irr::scene::SVertexPositionScaleAlongNormalsManipulator >();
    }

    { //::irr::scene::SVertexPositionScaleManipulator
        typedef bp::class_< irr::scene::SVertexPositionScaleManipulator, bp::bases< irr::scene::IVertexManipulator > > SVertexPositionScaleManipulator_exposer_t;
        SVertexPositionScaleManipulator_exposer_t SVertexPositionScaleManipulator_exposer = SVertexPositionScaleManipulator_exposer_t( "SVertexPositionScaleManipulator", bp::init< irr::core::vector3df const & >(( bp::arg("factor") )) );
        bp::scope SVertexPositionScaleManipulator_scope( SVertexPositionScaleManipulator_exposer );
        bp::implicitly_convertible< irr::core::vector3df const &, irr::scene::SVertexPositionScaleManipulator >();
    }

    { //::irr::scene::SVertexPositionTransformManipulator
        typedef bp::class_< irr::scene::SVertexPositionTransformManipulator, bp::bases< irr::scene::IVertexManipulator >, boost::noncopyable > SVertexPositionTransformManipulator_exposer_t;
        SVertexPositionTransformManipulator_exposer_t SVertexPositionTransformManipulator_exposer = SVertexPositionTransformManipulator_exposer_t( "SVertexPositionTransformManipulator", bp::init< irr::core::matrix4 const & >(( bp::arg("m") )) );
        bp::scope SVertexPositionTransformManipulator_scope( SVertexPositionTransformManipulator_exposer );
        bp::implicitly_convertible< irr::core::matrix4 const &, irr::scene::SVertexPositionTransformManipulator >();
    }

    { //::irr::scene::SVertexTCoordsScaleManipulator
        typedef bp::class_< irr::scene::SVertexTCoordsScaleManipulator, bp::bases< irr::scene::IVertexManipulator > > SVertexTCoordsScaleManipulator_exposer_t;
        SVertexTCoordsScaleManipulator_exposer_t SVertexTCoordsScaleManipulator_exposer = SVertexTCoordsScaleManipulator_exposer_t( "SVertexTCoordsScaleManipulator", bp::init< irr::core::vector2df const &, bp::optional< irr::u32 > >(( bp::arg("factor"), bp::arg("uvSet")=(::irr::u32)(1) )) );
        bp::scope SVertexTCoordsScaleManipulator_scope( SVertexTCoordsScaleManipulator_exposer );
        bp::implicitly_convertible< irr::core::vector2df const &, irr::scene::SVertexTCoordsScaleManipulator >();
        { //::irr::scene::SVertexTCoordsScaleManipulator::operator()
        
            typedef void ( ::irr::scene::SVertexTCoordsScaleManipulator::*__call___function_type )( ::irr::video::S3DVertex2TCoords & ) const;
            
            SVertexTCoordsScaleManipulator_exposer.def( 
                "__call__"
                , __call___function_type( &::irr::scene::SVertexTCoordsScaleManipulator::operator() )
                , ( bp::arg("vertex") ) );
        
        }
    }

    { //::irr::scene::SViewFrustum
        typedef bp::class_< SViewFrustum_wrapper > SViewFrustum_exposer_t;
        SViewFrustum_exposer_t SViewFrustum_exposer = SViewFrustum_exposer_t( "SViewFrustum", bp::init< >() );
        bp::scope SViewFrustum_scope( SViewFrustum_exposer );
        bp::enum_< irr::scene::SViewFrustum::VFPLANES>("VFPLANES")
            .value("VF_FAR_PLANE", irr::scene::SViewFrustum::VF_FAR_PLANE)
            .value("VF_NEAR_PLANE", irr::scene::SViewFrustum::VF_NEAR_PLANE)
            .value("VF_LEFT_PLANE", irr::scene::SViewFrustum::VF_LEFT_PLANE)
            .value("VF_RIGHT_PLANE", irr::scene::SViewFrustum::VF_RIGHT_PLANE)
            .value("VF_BOTTOM_PLANE", irr::scene::SViewFrustum::VF_BOTTOM_PLANE)
            .value("VF_TOP_PLANE", irr::scene::SViewFrustum::VF_TOP_PLANE)
            .value("VF_PLANE_COUNT", irr::scene::SViewFrustum::VF_PLANE_COUNT)
            .export_values()
            ;
        SViewFrustum_exposer.def( bp::init< irr::scene::SViewFrustum const & >(( bp::arg("other") )) );
        SViewFrustum_exposer.def( bp::init< irr::core::matrix4 const & >(( bp::arg("mat") )) );
        bp::implicitly_convertible< irr::core::matrix4 const &, irr::scene::SViewFrustum >();
        { //::irr::scene::SViewFrustum::clipLine
        
            typedef bool ( ::irr::scene::SViewFrustum::*clipLine_function_type )( ::irr::core::line3d< float > & ) const;
            
            SViewFrustum_exposer.def( 
                "clipLine"
                , clipLine_function_type( &::irr::scene::SViewFrustum::clipLine )
                , ( bp::arg("line") ) );
        
        }
        { //::irr::scene::SViewFrustum::getBoundingBox
        
            typedef ::irr::core::aabbox3d< float > const & ( ::irr::scene::SViewFrustum::*getBoundingBox_function_type )(  ) const;
            
            SViewFrustum_exposer.def( 
                "getBoundingBox"
                , getBoundingBox_function_type( &::irr::scene::SViewFrustum::getBoundingBox )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::scene::SViewFrustum::getFarLeftDown
        
            typedef ::irr::core::vector3df ( ::irr::scene::SViewFrustum::*getFarLeftDown_function_type )(  ) const;
            
            SViewFrustum_exposer.def( 
                "getFarLeftDown"
                , getFarLeftDown_function_type( &::irr::scene::SViewFrustum::getFarLeftDown ) );
        
        }
        { //::irr::scene::SViewFrustum::getFarLeftUp
        
            typedef ::irr::core::vector3df ( ::irr::scene::SViewFrustum::*getFarLeftUp_function_type )(  ) const;
            
            SViewFrustum_exposer.def( 
                "getFarLeftUp"
                , getFarLeftUp_function_type( &::irr::scene::SViewFrustum::getFarLeftUp ) );
        
        }
        { //::irr::scene::SViewFrustum::getFarRightDown
        
            typedef ::irr::core::vector3df ( ::irr::scene::SViewFrustum::*getFarRightDown_function_type )(  ) const;
            
            SViewFrustum_exposer.def( 
                "getFarRightDown"
                , getFarRightDown_function_type( &::irr::scene::SViewFrustum::getFarRightDown ) );
        
        }
        { //::irr::scene::SViewFrustum::getFarRightUp
        
            typedef ::irr::core::vector3df ( ::irr::scene::SViewFrustum::*getFarRightUp_function_type )(  ) const;
            
            SViewFrustum_exposer.def( 
                "getFarRightUp"
                , getFarRightUp_function_type( &::irr::scene::SViewFrustum::getFarRightUp ) );
        
        }
        { //::irr::scene::SViewFrustum::getTransform
        
            typedef ::irr::core::matrix4 & ( ::irr::scene::SViewFrustum::*getTransform_function_type )( ::irr::video::E_TRANSFORMATION_STATE ) ;
            
            SViewFrustum_exposer.def( 
                "getTransform"
                , getTransform_function_type( &::irr::scene::SViewFrustum::getTransform )
                , ( bp::arg("state") )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::SViewFrustum::getTransform
        
            typedef ::irr::core::matrix4 const & ( ::irr::scene::SViewFrustum::*getTransform_function_type )( ::irr::video::E_TRANSFORMATION_STATE ) const;
            
            SViewFrustum_exposer.def( 
                "getTransform"
                , getTransform_function_type( &::irr::scene::SViewFrustum::getTransform )
                , ( bp::arg("state") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::irr::scene::SViewFrustum::recalculateBoundingBox
        
            typedef void ( ::irr::scene::SViewFrustum::*recalculateBoundingBox_function_type )(  ) ;
            
            SViewFrustum_exposer.def( 
                "recalculateBoundingBox"
                , recalculateBoundingBox_function_type( &::irr::scene::SViewFrustum::recalculateBoundingBox ) );
        
        }
        { //::irr::scene::SViewFrustum::setFrom
        
            typedef void ( ::irr::scene::SViewFrustum::*setFrom_function_type )( ::irr::core::matrix4 const & ) ;
            
            SViewFrustum_exposer.def( 
                "setFrom"
                , setFrom_function_type( &::irr::scene::SViewFrustum::setFrom )
                , ( bp::arg("mat") ) );
        
        }
        { //::irr::scene::SViewFrustum::transform
        
            typedef void ( ::irr::scene::SViewFrustum::*transform_function_type )( ::irr::core::matrix4 const & ) ;
            
            SViewFrustum_exposer.def( 
                "transform"
                , transform_function_type( &::irr::scene::SViewFrustum::transform )
                , ( bp::arg("mat") ) );
        
        }
        SViewFrustum_exposer.def_readwrite( "boundingBox", &irr::scene::SViewFrustum::boundingBox );
        SViewFrustum_exposer.def_readwrite( "cameraPosition", &irr::scene::SViewFrustum::cameraPosition );
        pyplusplus::containers::static_sized::register_array_1< ::irr::core::plane3d<float>, 6, bp::return_internal_reference< > >( "__array_1__scope_irr_scope_core_scope_plane3d_less_float_greater__6" );
        { //irr::scene::SViewFrustum::planes [variable], type=irr::core::plane3d<float>[6]
        
            typedef pyplusplus::containers::static_sized::array_1_t< ::irr::core::plane3d<float>, 6> ( *array_wrapper_creator )( ::irr::scene::SViewFrustum & );
            
            SViewFrustum_exposer.add_property( "planes"
                , bp::make_function( array_wrapper_creator(&SViewFrustum_wrapper::pyplusplus_planes_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    { //::irr::scene::quake3::IShader
        typedef bp::class_< IShader_wrapper > IShader_exposer_t;
        IShader_exposer_t IShader_exposer = IShader_exposer_t( "IShader", bp::init< >() );
        bp::scope IShader_scope( IShader_exposer );
        { //::irr::scene::quake3::IShader::getGroup
        
            typedef ::irr::scene::quake3::SVarGroup const * ( ::irr::scene::quake3::IShader::*getGroup_function_type )( ::irr::u32 ) const;
            
            IShader_exposer.def( 
                "getGroup"
                , getGroup_function_type( &::irr::scene::quake3::IShader::getGroup )
                , ( bp::arg("stage") )
                    /* undefined call policies */ );
        
        }
        { //::irr::scene::quake3::IShader::getGroupSize
        
            typedef ::irr::u32 ( ::irr::scene::quake3::IShader::*getGroupSize_function_type )(  ) const;
            
            IShader_exposer.def( 
                "getGroupSize"
                , getGroupSize_function_type( &::irr::scene::quake3::IShader::getGroupSize ) );
        
        }
        IShader_exposer.def( bp::self < bp::self );
        { //::irr::scene::quake3::IShader::operator=
        
            typedef void ( ::irr::scene::quake3::IShader::*assign_function_type )( ::irr::scene::quake3::IShader const & ) ;
            
            IShader_exposer.def( 
                "assign"
                , assign_function_type( &::irr::scene::quake3::IShader::operator= )
                , ( bp::arg("other") ) );
        
        }
        IShader_exposer.def( bp::self == bp::self );
        IShader_exposer.def_readwrite( "ID", &irr::scene::quake3::IShader::ID );
        IShader_exposer.add_property( "VarGroup"
                    , bp::make_function( (::irr::scene::quake3::SVarGroupList * (*)( ::irr::scene::quake3::IShader const & ))(&IShader_wrapper::get_VarGroup), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::irr::scene::quake3::IShader &,::irr::scene::quake3::SVarGroupList * ))(&IShader_wrapper::set_VarGroup), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        IShader_exposer.def_readwrite( "name", &irr::scene::quake3::IShader::name );
    }

    bp::class_< IShaderManager_wrapper, bp::bases< irr::IReferenceCounted > >( "IShaderManager" )    
        .def( 
            "setDebugName"
            , (void ( IShaderManager_wrapper::* )( ::irr::c8 const * ) )(&IShaderManager_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< irr::scene::quake3::Noiser >( "Noiser" )    
        .def( 
            "get"
            , (::irr::f32 (*)(  ))( &::irr::scene::quake3::Noiser::get ) )    
        .staticmethod( "get" );

    { //::irr::scene::quake3::Q3LevelLoadParameter
        typedef bp::class_< Q3LevelLoadParameter_wrapper > Q3LevelLoadParameter_exposer_t;
        Q3LevelLoadParameter_exposer_t Q3LevelLoadParameter_exposer = Q3LevelLoadParameter_exposer_t( "Q3LevelLoadParameter", bp::init< >() );
        bp::scope Q3LevelLoadParameter_scope( Q3LevelLoadParameter_exposer );
        Q3LevelLoadParameter_exposer.def_readwrite( "alpharef", &irr::scene::quake3::Q3LevelLoadParameter::alpharef );
        Q3LevelLoadParameter_exposer.def_readwrite( "cleanUnResolvedMeshes", &irr::scene::quake3::Q3LevelLoadParameter::cleanUnResolvedMeshes );
        Q3LevelLoadParameter_exposer.def_readwrite( "defaultFilter", &irr::scene::quake3::Q3LevelLoadParameter::defaultFilter );
        Q3LevelLoadParameter_exposer.def_readwrite( "defaultLightMapMaterial", &irr::scene::quake3::Q3LevelLoadParameter::defaultLightMapMaterial );
        Q3LevelLoadParameter_exposer.def_readwrite( "defaultModulate", &irr::scene::quake3::Q3LevelLoadParameter::defaultModulate );
        Q3LevelLoadParameter_exposer.def_readwrite( "endTime", &irr::scene::quake3::Q3LevelLoadParameter::endTime );
        Q3LevelLoadParameter_exposer.def_readwrite( "loadAllShaders", &irr::scene::quake3::Q3LevelLoadParameter::loadAllShaders );
        Q3LevelLoadParameter_exposer.def_readwrite( "loadSkyShader", &irr::scene::quake3::Q3LevelLoadParameter::loadSkyShader );
        Q3LevelLoadParameter_exposer.def_readwrite( "mergeShaderBuffer", &irr::scene::quake3::Q3LevelLoadParameter::mergeShaderBuffer );
        Q3LevelLoadParameter_exposer.def_readwrite( "patchTesselation", &irr::scene::quake3::Q3LevelLoadParameter::patchTesselation );
        pyplusplus::containers::static_sized::register_array_1< char, 64 >( "__array_1_char_64" );
        { //irr::scene::quake3::Q3LevelLoadParameter::scriptDir [variable], type=irr::c8[64]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 64> ( *array_wrapper_creator )( ::irr::scene::quake3::Q3LevelLoadParameter & );
            
            Q3LevelLoadParameter_exposer.add_property( "scriptDir"
                , bp::make_function( array_wrapper_creator(&Q3LevelLoadParameter_wrapper::pyplusplus_scriptDir_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        Q3LevelLoadParameter_exposer.def_readwrite( "startTime", &irr::scene::quake3::Q3LevelLoadParameter::startTime );
        Q3LevelLoadParameter_exposer.def_readwrite( "swapHeader", &irr::scene::quake3::Q3LevelLoadParameter::swapHeader );
        Q3LevelLoadParameter_exposer.def_readwrite( "swapLump", &irr::scene::quake3::Q3LevelLoadParameter::swapLump );
        Q3LevelLoadParameter_exposer.def_readwrite( "verbose", &irr::scene::quake3::Q3LevelLoadParameter::verbose );
    }

    { //::irr::scene::quake3::SBlendFunc
        typedef bp::class_< irr::scene::quake3::SBlendFunc > SBlendFunc_exposer_t;
        SBlendFunc_exposer_t SBlendFunc_exposer = SBlendFunc_exposer_t( "SBlendFunc", bp::init< irr::video::E_MODULATE_FUNC >(( bp::arg("mod") )) );
        bp::scope SBlendFunc_scope( SBlendFunc_exposer );
        bp::implicitly_convertible< irr::video::E_MODULATE_FUNC, irr::scene::quake3::SBlendFunc >();
        SBlendFunc_exposer.def_readwrite( "isTransparent", &irr::scene::quake3::SBlendFunc::isTransparent );
        SBlendFunc_exposer.def_readwrite( "modulate", &irr::scene::quake3::SBlendFunc::modulate );
        SBlendFunc_exposer.def_readwrite( "param0", &irr::scene::quake3::SBlendFunc::param0 );
        SBlendFunc_exposer.def_readwrite( "type", &irr::scene::quake3::SBlendFunc::type );
    }

    bp::class_< irr::scene::quake3::SModifierFunction >( "SModifierFunction", bp::init< >() )    
        .def_readwrite( "div", &irr::scene::quake3::SModifierFunction::div )    
        .def_readwrite( "wave", &irr::scene::quake3::SModifierFunction::wave )    
        .def_readwrite( "base", &irr::scene::quake3::SModifierFunction::base )    
        .def_readwrite( "bulgewidth", &irr::scene::quake3::SModifierFunction::bulgewidth )    
        .def_readwrite( "amp", &irr::scene::quake3::SModifierFunction::amp )    
        .def_readwrite( "bulgeheight", &irr::scene::quake3::SModifierFunction::bulgeheight )    
        .def_readwrite( "bulgespeed", &irr::scene::quake3::SModifierFunction::bulgespeed )    
        .def_readwrite( "frequency", &irr::scene::quake3::SModifierFunction::frequency )    
        .def( 
            "evaluate"
            , (::irr::f32 ( ::irr::scene::quake3::SModifierFunction::* )( ::irr::f32 ) const)( &::irr::scene::quake3::SModifierFunction::evaluate )
            , ( bp::arg("dt") ) )    
        .def_readwrite( "alphagen", &irr::scene::quake3::SModifierFunction::alphagen )    
        .def_readwrite( "count", &irr::scene::quake3::SModifierFunction::count )    
        .def_readwrite( "func", &irr::scene::quake3::SModifierFunction::func )    
        .def_readwrite( "masterfunc0", &irr::scene::quake3::SModifierFunction::masterfunc0 )    
        .def_readwrite( "masterfunc1", &irr::scene::quake3::SModifierFunction::masterfunc1 )    
        .def_readwrite( "phase", &irr::scene::quake3::SModifierFunction::phase )    
        .def_readwrite( "rgbgen", &irr::scene::quake3::SModifierFunction::rgbgen )    
        .def_readwrite( "tcgen", &irr::scene::quake3::SModifierFunction::tcgen )    
        .def_readwrite( "x", &irr::scene::quake3::SModifierFunction::x )    
        .def_readwrite( "y", &irr::scene::quake3::SModifierFunction::y )    
        .def_readwrite( "z", &irr::scene::quake3::SModifierFunction::z );

    bp::class_< irr::scene::quake3::SVarGroup >( "SVarGroup", bp::init< >() )    
        .def( 
            "get"
            , (::irr::core::stringc const & ( ::irr::scene::quake3::SVarGroup::* )( ::irr::c8 const * ) const)( &::irr::scene::quake3::SVarGroup::get )
            , ( bp::arg("name") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "isDefined"
            , (::irr::u32 ( ::irr::scene::quake3::SVarGroup::* )( ::irr::c8 const *,::irr::c8 const * ) const)( &::irr::scene::quake3::SVarGroup::isDefined )
            , ( bp::arg("name"), bp::arg("content")=bp::object() ) )    
        .def( 
            "set"
            , (void ( ::irr::scene::quake3::SVarGroup::* )( ::irr::c8 const *,::irr::c8 const * ) )( &::irr::scene::quake3::SVarGroup::set )
            , ( bp::arg("name"), bp::arg("content")=bp::object() ) )    
        .def_readwrite( "Variable", &irr::scene::quake3::SVarGroup::Variable );

    bp::class_< SVarGroupList_wrapper, bp::bases< irr::IReferenceCounted > >( "SVarGroupList", bp::init< >() )    
        .def_readwrite( "VariableGroup", &irr::scene::quake3::SVarGroupList::VariableGroup )    
        .def( 
            "setDebugName"
            , (void ( SVarGroupList_wrapper::* )( ::irr::c8 const * ) )(&SVarGroupList_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    { //::irr::scene::quake3::SVariable
        typedef bp::class_< irr::scene::quake3::SVariable > SVariable_exposer_t;
        SVariable_exposer_t SVariable_exposer = SVariable_exposer_t( "SVariable", bp::init< irr::c8 const *, bp::optional< irr::c8 const * > >(( bp::arg("n"), bp::arg("c")=bp::object() )) );
        bp::scope SVariable_scope( SVariable_exposer );
        bp::implicitly_convertible< irr::c8 const *, irr::scene::quake3::SVariable >();
        { //::irr::scene::quake3::SVariable::clear
        
            typedef void ( ::irr::scene::quake3::SVariable::*clear_function_type )(  ) ;
            
            SVariable_exposer.def( 
                "clear"
                , clear_function_type( &::irr::scene::quake3::SVariable::clear ) );
        
        }
        { //::irr::scene::quake3::SVariable::isValid
        
            typedef ::irr::s32 ( ::irr::scene::quake3::SVariable::*isValid_function_type )(  ) const;
            
            SVariable_exposer.def( 
                "isValid"
                , isValid_function_type( &::irr::scene::quake3::SVariable::isValid ) );
        
        }
        SVariable_exposer.def( bp::self < bp::self );
        SVariable_exposer.def( bp::self == bp::self );
        SVariable_exposer.def_readwrite( "content", &irr::scene::quake3::SVariable::content );
        SVariable_exposer.def_readwrite( "name", &irr::scene::quake3::SVariable::name );
    }

    bp::class_< IShaderConstantSetCallBack_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IShaderConstantSetCallBack" )    
        .def( 
            "OnSetConstants"
            , bp::pure_virtual( (void ( ::irr::video::IShaderConstantSetCallBack::* )( ::irr::video::IMaterialRendererServices *,::irr::s32 ) )(&::irr::video::IShaderConstantSetCallBack::OnSetConstants) )
            , ( bp::arg("services"), bp::arg("userData") ) )    
        .def( 
            "OnSetMaterial"
            , (void ( ::irr::video::IShaderConstantSetCallBack::* )( ::irr::video::SMaterial const & ) )(&::irr::video::IShaderConstantSetCallBack::OnSetMaterial)
            , (void ( IShaderConstantSetCallBack_wrapper::* )( ::irr::video::SMaterial const & ) )(&IShaderConstantSetCallBack_wrapper::default_OnSetMaterial)
            , ( bp::arg("material") ) )    
        .def( 
            "setDebugName"
            , (void ( IShaderConstantSetCallBack_wrapper::* )( ::irr::c8 const * ) )(&IShaderConstantSetCallBack_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IGPUProgrammingServices_wrapper, boost::noncopyable >( "IGPUProgrammingServices" )    
        .def( 
            "addHighLevelShaderMaterial"
            , bp::pure_virtual( (::irr::s32 ( ::irr::video::IGPUProgrammingServices::* )( ::irr::c8 const *,::irr::c8 const *,::irr::video::E_VERTEX_SHADER_TYPE,::irr::c8 const *,::irr::c8 const *,::irr::video::E_PIXEL_SHADER_TYPE,::irr::c8 const *,::irr::c8 const *,::irr::video::E_GEOMETRY_SHADER_TYPE,::irr::scene::E_PRIMITIVE_TYPE,::irr::scene::E_PRIMITIVE_TYPE,::irr::u32,::irr::video::IShaderConstantSetCallBack *,::irr::video::E_MATERIAL_TYPE,::irr::s32 ) )(&::irr::video::IGPUProgrammingServices::addHighLevelShaderMaterial) )
            , ( bp::arg("vertexShaderProgram"), bp::arg("vertexShaderEntryPointName"), bp::arg("vsCompileTarget"), bp::arg("pixelShaderProgram"), bp::arg("pixelShaderEntryPointName"), bp::arg("psCompileTarget"), bp::arg("geometryShaderProgram"), bp::arg("geometryShaderEntryPointName")="main", bp::arg("gsCompileTarget")=::irr::video::EGST_GS_4_0, bp::arg("inType")=::irr::scene::EPT_TRIANGLES, bp::arg("outType")=::irr::scene::EPT_TRIANGLE_STRIP, bp::arg("verticesOut")=(::irr::u32)(0), bp::arg("callback")=bp::object(), bp::arg("baseMaterial")=::irr::video::EMT_SOLID, bp::arg("userData")=(::irr::s32)(0) ) )    
        .def( 
            "addHighLevelShaderMaterial"
            , (::irr::s32 ( ::irr::video::IGPUProgrammingServices::* )( ::irr::c8 const *,::irr::c8 const *,::irr::video::E_VERTEX_SHADER_TYPE,::irr::c8 const *,::irr::c8 const *,::irr::video::E_PIXEL_SHADER_TYPE,::irr::video::IShaderConstantSetCallBack *,::irr::video::E_MATERIAL_TYPE,::irr::s32 ) )( &::irr::video::IGPUProgrammingServices::addHighLevelShaderMaterial )
            , ( bp::arg("vertexShaderProgram"), bp::arg("vertexShaderEntryPointName")="main", bp::arg("vsCompileTarget")=::irr::video::EVST_VS_1_1, bp::arg("pixelShaderProgram")=bp::object(), bp::arg("pixelShaderEntryPointName")="main", bp::arg("psCompileTarget")=::irr::video::EPST_PS_1_1, bp::arg("callback")=bp::object(), bp::arg("baseMaterial")=::irr::video::EMT_SOLID, bp::arg("userData")=(::irr::s32)(0) ) )    
        .def( 
            "addHighLevelShaderMaterialFromFiles"
            , bp::pure_virtual( (::irr::s32 ( ::irr::video::IGPUProgrammingServices::* )( ::irr::io::path const &,::irr::c8 const *,::irr::video::E_VERTEX_SHADER_TYPE,::irr::io::path const &,::irr::c8 const *,::irr::video::E_PIXEL_SHADER_TYPE,::irr::io::path const &,::irr::c8 const *,::irr::video::E_GEOMETRY_SHADER_TYPE,::irr::scene::E_PRIMITIVE_TYPE,::irr::scene::E_PRIMITIVE_TYPE,::irr::u32,::irr::video::IShaderConstantSetCallBack *,::irr::video::E_MATERIAL_TYPE,::irr::s32 ) )(&::irr::video::IGPUProgrammingServices::addHighLevelShaderMaterialFromFiles) )
            , ( bp::arg("vertexShaderProgramFileName"), bp::arg("vertexShaderEntryPointName"), bp::arg("vsCompileTarget"), bp::arg("pixelShaderProgramFileName"), bp::arg("pixelShaderEntryPointName"), bp::arg("psCompileTarget"), bp::arg("geometryShaderProgramFileName"), bp::arg("geometryShaderEntryPointName")="main", bp::arg("gsCompileTarget")=::irr::video::EGST_GS_4_0, bp::arg("inType")=::irr::scene::EPT_TRIANGLES, bp::arg("outType")=::irr::scene::EPT_TRIANGLE_STRIP, bp::arg("verticesOut")=(::irr::u32)(0), bp::arg("callback")=bp::object(), bp::arg("baseMaterial")=::irr::video::EMT_SOLID, bp::arg("userData")=(::irr::s32)(0) ) )    
        .def( 
            "addHighLevelShaderMaterialFromFiles"
            , (::irr::s32 ( ::irr::video::IGPUProgrammingServices::* )( ::irr::io::path const &,::irr::c8 const *,::irr::video::E_VERTEX_SHADER_TYPE,::irr::io::path const &,::irr::c8 const *,::irr::video::E_PIXEL_SHADER_TYPE,::irr::video::IShaderConstantSetCallBack *,::irr::video::E_MATERIAL_TYPE,::irr::s32 ) )( &::irr::video::IGPUProgrammingServices::addHighLevelShaderMaterialFromFiles )
            , ( bp::arg("vertexShaderProgramFileName"), bp::arg("vertexShaderEntryPointName")="main", bp::arg("vsCompileTarget")=::irr::video::EVST_VS_1_1, bp::arg("pixelShaderProgramFileName")="", bp::arg("pixelShaderEntryPointName")="main", bp::arg("psCompileTarget")=::irr::video::EPST_PS_1_1, bp::arg("callback")=bp::object(), bp::arg("baseMaterial")=::irr::video::EMT_SOLID, bp::arg("userData")=(::irr::s32)(0) ) )    
        .def( 
            "addHighLevelShaderMaterialFromFiles"
            , bp::pure_virtual( (::irr::s32 ( ::irr::video::IGPUProgrammingServices::* )( ::irr::io::IReadFile *,::irr::c8 const *,::irr::video::E_VERTEX_SHADER_TYPE,::irr::io::IReadFile *,::irr::c8 const *,::irr::video::E_PIXEL_SHADER_TYPE,::irr::io::IReadFile *,::irr::c8 const *,::irr::video::E_GEOMETRY_SHADER_TYPE,::irr::scene::E_PRIMITIVE_TYPE,::irr::scene::E_PRIMITIVE_TYPE,::irr::u32,::irr::video::IShaderConstantSetCallBack *,::irr::video::E_MATERIAL_TYPE,::irr::s32 ) )(&::irr::video::IGPUProgrammingServices::addHighLevelShaderMaterialFromFiles) )
            , ( bp::arg("vertexShaderProgram"), bp::arg("vertexShaderEntryPointName"), bp::arg("vsCompileTarget"), bp::arg("pixelShaderProgram"), bp::arg("pixelShaderEntryPointName"), bp::arg("psCompileTarget"), bp::arg("geometryShaderProgram"), bp::arg("geometryShaderEntryPointName")="main", bp::arg("gsCompileTarget")=::irr::video::EGST_GS_4_0, bp::arg("inType")=::irr::scene::EPT_TRIANGLES, bp::arg("outType")=::irr::scene::EPT_TRIANGLE_STRIP, bp::arg("verticesOut")=(::irr::u32)(0), bp::arg("callback")=bp::object(), bp::arg("baseMaterial")=::irr::video::EMT_SOLID, bp::arg("userData")=(::irr::s32)(0) ) )    
        .def( 
            "addHighLevelShaderMaterialFromFiles"
            , (::irr::s32 ( ::irr::video::IGPUProgrammingServices::* )( ::irr::io::IReadFile *,::irr::c8 const *,::irr::video::E_VERTEX_SHADER_TYPE,::irr::io::IReadFile *,::irr::c8 const *,::irr::video::E_PIXEL_SHADER_TYPE,::irr::video::IShaderConstantSetCallBack *,::irr::video::E_MATERIAL_TYPE,::irr::s32 ) )( &::irr::video::IGPUProgrammingServices::addHighLevelShaderMaterialFromFiles )
            , ( bp::arg("vertexShaderProgram"), bp::arg("vertexShaderEntryPointName")="main", bp::arg("vsCompileTarget")=::irr::video::EVST_VS_1_1, bp::arg("pixelShaderProgram")=bp::object(), bp::arg("pixelShaderEntryPointName")="main", bp::arg("psCompileTarget")=::irr::video::EPST_PS_1_1, bp::arg("callback")=bp::object(), bp::arg("baseMaterial")=::irr::video::EMT_SOLID, bp::arg("userData")=(::irr::s32)(0) ) )    
        .def( 
            "addShaderMaterial"
            , bp::pure_virtual( (::irr::s32 ( ::irr::video::IGPUProgrammingServices::* )( ::irr::c8 const *,::irr::c8 const *,::irr::video::IShaderConstantSetCallBack *,::irr::video::E_MATERIAL_TYPE,::irr::s32 ) )(&::irr::video::IGPUProgrammingServices::addShaderMaterial) )
            , ( bp::arg("vertexShaderProgram")=bp::object(), bp::arg("pixelShaderProgram")=bp::object(), bp::arg("callback")=bp::object(), bp::arg("baseMaterial")=::irr::video::EMT_SOLID, bp::arg("userData")=(::irr::s32)(0) ) )    
        .def( 
            "addShaderMaterialFromFiles"
            , bp::pure_virtual( (::irr::s32 ( ::irr::video::IGPUProgrammingServices::* )( ::irr::io::IReadFile *,::irr::io::IReadFile *,::irr::video::IShaderConstantSetCallBack *,::irr::video::E_MATERIAL_TYPE,::irr::s32 ) )(&::irr::video::IGPUProgrammingServices::addShaderMaterialFromFiles) )
            , ( bp::arg("vertexShaderProgram"), bp::arg("pixelShaderProgram"), bp::arg("callback")=bp::object(), bp::arg("baseMaterial")=::irr::video::EMT_SOLID, bp::arg("userData")=(::irr::s32)(0) ) )    
        .def( 
            "addShaderMaterialFromFiles"
            , bp::pure_virtual( (::irr::s32 ( ::irr::video::IGPUProgrammingServices::* )( ::irr::io::path const &,::irr::io::path const &,::irr::video::IShaderConstantSetCallBack *,::irr::video::E_MATERIAL_TYPE,::irr::s32 ) )(&::irr::video::IGPUProgrammingServices::addShaderMaterialFromFiles) )
            , ( bp::arg("vertexShaderProgramFileName"), bp::arg("pixelShaderProgramFileName"), bp::arg("callback")=bp::object(), bp::arg("baseMaterial")=::irr::video::EMT_SOLID, bp::arg("userData")=(::irr::s32)(0) ) );

    bp::class_< IImage_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IImage" )    
        .def( 
            "copyTo"
            , bp::pure_virtual( (void ( ::irr::video::IImage::* )( ::irr::video::IImage *,::irr::core::vector2d< int > const & ) )(&::irr::video::IImage::copyTo) )
            , ( bp::arg("target"), bp::arg("pos")=irr::core::vector2d<int>(0, 0) ) )    
        .def( 
            "copyTo"
            , bp::pure_virtual( (void ( ::irr::video::IImage::* )( ::irr::video::IImage *,::irr::core::vector2d< int > const &,::irr::core::rect< int > const &,::irr::core::rect< int > const * ) )(&::irr::video::IImage::copyTo) )
            , ( bp::arg("target"), bp::arg("pos"), bp::arg("sourceRect"), bp::arg("clipRect")=bp::object() ) )    
        .def( 
            "copyToScaling"
            , bp::pure_virtual( (void ( ::irr::video::IImage::* )( void *,::irr::u32,::irr::u32,::irr::video::ECOLOR_FORMAT,::irr::u32 ) )(&::irr::video::IImage::copyToScaling) )
            , ( bp::arg("target"), bp::arg("width"), bp::arg("height"), bp::arg("format")=::irr::video::ECF_A8R8G8B8, bp::arg("pitch")=(::irr::u32)(0) ) )    
        .def( 
            "copyToScaling"
            , bp::pure_virtual( (void ( ::irr::video::IImage::* )( ::irr::video::IImage * ) )(&::irr::video::IImage::copyToScaling) )
            , ( bp::arg("target") ) )    
        .def( 
            "copyToScalingBoxFilter"
            , bp::pure_virtual( (void ( ::irr::video::IImage::* )( ::irr::video::IImage *,::irr::s32,bool ) )(&::irr::video::IImage::copyToScalingBoxFilter) )
            , ( bp::arg("target"), bp::arg("bias")=(::irr::s32)(0), bp::arg("blend")=(bool)(false) ) )    
        .def( 
            "copyToWithAlpha"
            , bp::pure_virtual( (void ( ::irr::video::IImage::* )( ::irr::video::IImage *,::irr::core::vector2d< int > const &,::irr::core::rect< int > const &,::irr::video::SColor const &,::irr::core::rect< int > const * ) )(&::irr::video::IImage::copyToWithAlpha) )
            , ( bp::arg("target"), bp::arg("pos"), bp::arg("sourceRect"), bp::arg("color"), bp::arg("clipRect")=bp::object() ) )    
        .def( 
            "fill"
            , bp::pure_virtual( (void ( ::irr::video::IImage::* )( ::irr::video::SColor const & ) )(&::irr::video::IImage::fill) )
            , ( bp::arg("color") ) )    
        .def( 
            "getAlphaMask"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IImage::* )(  ) const)(&::irr::video::IImage::getAlphaMask) ) )    
        .def( 
            "getBitsPerPixel"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IImage::* )(  ) const)(&::irr::video::IImage::getBitsPerPixel) ) )    
        .def( 
            "getBitsPerPixelFromFormat"
            , (::irr::u32 (*)( ::irr::video::ECOLOR_FORMAT const ))( &::irr::video::IImage::getBitsPerPixelFromFormat )
            , ( bp::arg("format") ) )    
        .def( 
            "getBlueMask"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IImage::* )(  ) const)(&::irr::video::IImage::getBlueMask) ) )    
        .def( 
            "getBytesPerPixel"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IImage::* )(  ) const)(&::irr::video::IImage::getBytesPerPixel) ) )    
        .def( 
            "getColorFormat"
            , bp::pure_virtual( (::irr::video::ECOLOR_FORMAT ( ::irr::video::IImage::* )(  ) const)(&::irr::video::IImage::getColorFormat) ) )    
        .def( 
            "getDimension"
            , bp::pure_virtual( (::irr::core::dimension2d< unsigned int > const & ( ::irr::video::IImage::* )(  ) const)(&::irr::video::IImage::getDimension) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getGreenMask"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IImage::* )(  ) const)(&::irr::video::IImage::getGreenMask) ) )    
        .def( 
            "getImageDataSizeInBytes"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IImage::* )(  ) const)(&::irr::video::IImage::getImageDataSizeInBytes) ) )    
        .def( 
            "getImageDataSizeInPixels"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IImage::* )(  ) const)(&::irr::video::IImage::getImageDataSizeInPixels) ) )    
        .def( 
            "getPitch"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IImage::* )(  ) const)(&::irr::video::IImage::getPitch) ) )    
        .def( 
            "getPixel"
            , bp::pure_virtual( (::irr::video::SColor ( ::irr::video::IImage::* )( ::irr::u32,::irr::u32 ) const)(&::irr::video::IImage::getPixel) )
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "getRedMask"
            , bp::pure_virtual( (::irr::u32 ( ::irr::video::IImage::* )(  ) const)(&::irr::video::IImage::getRedMask) ) )    
        .def( 
            "isRenderTargetOnlyFormat"
            , (bool (*)( ::irr::video::ECOLOR_FORMAT const ))( &::irr::video::IImage::isRenderTargetOnlyFormat )
            , ( bp::arg("format") ) )    
        .def( 
            "lock"
            , bp::pure_virtual( (void * ( ::irr::video::IImage::* )(  ) )(&::irr::video::IImage::lock) )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "setPixel"
            , bp::pure_virtual( (void ( ::irr::video::IImage::* )( ::irr::u32,::irr::u32,::irr::video::SColor const &,bool ) )(&::irr::video::IImage::setPixel) )
            , ( bp::arg("x"), bp::arg("y"), bp::arg("color"), bp::arg("blend")=(bool)(false) ) )    
        .def( 
            "unlock"
            , bp::pure_virtual( (void ( ::irr::video::IImage::* )(  ) )(&::irr::video::IImage::unlock) ) )    
        .def( 
            "setDebugName"
            , (void ( IImage_wrapper::* )( ::irr::c8 const * ) )(&IImage_wrapper::setDebugName)
            , ( bp::arg("newName") ) )    
        .staticmethod( "getBitsPerPixelFromFormat" )    
        .staticmethod( "isRenderTargetOnlyFormat" );

    bp::class_< IImageLoader_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IImageLoader" )    
        .def( 
            "isALoadableFileExtension"
            , bp::pure_virtual( (bool ( ::irr::video::IImageLoader::* )( ::irr::io::path const & ) const)(&::irr::video::IImageLoader::isALoadableFileExtension) )
            , ( bp::arg("filename") ) )    
        .def( 
            "isALoadableFileFormat"
            , bp::pure_virtual( (bool ( ::irr::video::IImageLoader::* )( ::irr::io::IReadFile * ) const)(&::irr::video::IImageLoader::isALoadableFileFormat) )
            , ( bp::arg("file") ) )    
        .def( 
            "loadImage"
            , bp::pure_virtual( (::irr::video::IImage * ( ::irr::video::IImageLoader::* )( ::irr::io::IReadFile * ) const)(&::irr::video::IImageLoader::loadImage) )
            , ( bp::arg("file") )
                /* undefined call policies */ )    
        .def( 
            "setDebugName"
            , (void ( IImageLoader_wrapper::* )( ::irr::c8 const * ) )(&IImageLoader_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IImageWriter_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IImageWriter" )    
        .def( 
            "isAWriteableFileExtension"
            , bp::pure_virtual( (bool ( ::irr::video::IImageWriter::* )( ::irr::io::path const & ) const)(&::irr::video::IImageWriter::isAWriteableFileExtension) )
            , ( bp::arg("filename") ) )    
        .def( 
            "writeImage"
            , bp::pure_virtual( (bool ( ::irr::video::IImageWriter::* )( ::irr::io::IWriteFile *,::irr::video::IImage *,::irr::u32 ) const)(&::irr::video::IImageWriter::writeImage) )
            , ( bp::arg("file"), bp::arg("image"), bp::arg("param")=(::irr::u32)(0) ) )    
        .def( 
            "setDebugName"
            , (void ( IImageWriter_wrapper::* )( ::irr::c8 const * ) )(&IImageWriter_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IMaterialRenderer_wrapper, bp::bases< irr::IReferenceCounted > >( "IMaterialRenderer" )    
        .def( 
            "OnRender"
            , (bool ( ::irr::video::IMaterialRenderer::* )( ::irr::video::IMaterialRendererServices *,::irr::video::E_VERTEX_TYPE ) )(&::irr::video::IMaterialRenderer::OnRender)
            , (bool ( IMaterialRenderer_wrapper::* )( ::irr::video::IMaterialRendererServices *,::irr::video::E_VERTEX_TYPE ) )(&IMaterialRenderer_wrapper::default_OnRender)
            , ( bp::arg("service"), bp::arg("vtxtype") ) )    
        .def( 
            "OnSetMaterial"
            , (void ( ::irr::video::IMaterialRenderer::* )( ::irr::video::SMaterial const &,::irr::video::SMaterial const &,bool,::irr::video::IMaterialRendererServices * ) )(&::irr::video::IMaterialRenderer::OnSetMaterial)
            , (void ( IMaterialRenderer_wrapper::* )( ::irr::video::SMaterial const &,::irr::video::SMaterial const &,bool,::irr::video::IMaterialRendererServices * ) )(&IMaterialRenderer_wrapper::default_OnSetMaterial)
            , ( bp::arg("material"), bp::arg("lastMaterial"), bp::arg("resetAllRenderstates"), bp::arg("services") ) )    
        .def( 
            "OnUnsetMaterial"
            , (void ( ::irr::video::IMaterialRenderer::* )(  ) )(&::irr::video::IMaterialRenderer::OnUnsetMaterial)
            , (void ( IMaterialRenderer_wrapper::* )(  ) )(&IMaterialRenderer_wrapper::default_OnUnsetMaterial) )    
        .def( 
            "getRenderCapability"
            , (::irr::s32 ( ::irr::video::IMaterialRenderer::* )(  ) const)(&::irr::video::IMaterialRenderer::getRenderCapability)
            , (::irr::s32 ( IMaterialRenderer_wrapper::* )(  ) const)(&IMaterialRenderer_wrapper::default_getRenderCapability) )    
        .def( 
            "isTransparent"
            , (bool ( ::irr::video::IMaterialRenderer::* )(  ) const)(&::irr::video::IMaterialRenderer::isTransparent)
            , (bool ( IMaterialRenderer_wrapper::* )(  ) const)(&IMaterialRenderer_wrapper::default_isTransparent) )    
        .def( 
            "setDebugName"
            , (void ( IMaterialRenderer_wrapper::* )( ::irr::c8 const * ) )(&IMaterialRenderer_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< IMaterialRendererServices_wrapper, boost::noncopyable >( "IMaterialRendererServices" )    
        .def( 
            "getVideoDriver"
            , bp::pure_virtual( (::irr::video::IVideoDriver * ( ::irr::video::IMaterialRendererServices::* )(  ) )(&::irr::video::IMaterialRendererServices::getVideoDriver) )
                /* undefined call policies */ )    
        .def( 
            "setBasicRenderStates"
            , bp::pure_virtual( (void ( ::irr::video::IMaterialRendererServices::* )( ::irr::video::SMaterial const &,::irr::video::SMaterial const &,bool ) )(&::irr::video::IMaterialRendererServices::setBasicRenderStates) )
            , ( bp::arg("material"), bp::arg("lastMaterial"), bp::arg("resetAllRenderstates") ) )    
        .def( 
            "setPixelShaderConstant"
            , bp::pure_virtual( (bool ( ::irr::video::IMaterialRendererServices::* )( ::irr::c8 const *,::irr::f32 const *,int ) )(&::irr::video::IMaterialRendererServices::setPixelShaderConstant) )
            , ( bp::arg("name"), bp::arg("floats"), bp::arg("count") ) )    
        .def( 
            "setPixelShaderConstant"
            , bp::pure_virtual( (void ( ::irr::video::IMaterialRendererServices::* )( ::irr::f32 const *,::irr::s32,::irr::s32 ) )(&::irr::video::IMaterialRendererServices::setPixelShaderConstant) )
            , ( bp::arg("data"), bp::arg("startRegister"), bp::arg("constantAmount")=(::irr::s32)(1) ) )    
        .def( 
            "setVertexShaderConstant"
            , bp::pure_virtual( (bool ( ::irr::video::IMaterialRendererServices::* )( ::irr::c8 const *,::irr::f32 const *,int ) )(&::irr::video::IMaterialRendererServices::setVertexShaderConstant) )
            , ( bp::arg("name"), bp::arg("floats"), bp::arg("count") ) )    
        .def( 
            "setVertexShaderConstant"
            , bp::pure_virtual( (void ( ::irr::video::IMaterialRendererServices::* )( ::irr::f32 const *,::irr::s32,::irr::s32 ) )(&::irr::video::IMaterialRendererServices::setVertexShaderConstant) )
            , ( bp::arg("data"), bp::arg("startRegister"), bp::arg("constantAmount")=(::irr::s32)(1) ) );

    { //::irr::video::IRenderTarget
        typedef bp::class_< IRenderTarget_wrapper > IRenderTarget_exposer_t;
        IRenderTarget_exposer_t IRenderTarget_exposer = IRenderTarget_exposer_t( "IRenderTarget", bp::init< irr::video::ITexture *, bp::optional< irr::video::E_COLOR_PLANE, irr::video::E_BLEND_FACTOR, irr::video::E_BLEND_FACTOR, bool > >(( bp::arg("texture"), bp::arg("colorMask")=::irr::video::ECP_ALL, bp::arg("blendFuncSrc")=::irr::video::EBF_ONE, bp::arg("blendFuncDst")=::irr::video::EBF_ONE_MINUS_SRC_ALPHA, bp::arg("blendEnable")=(bool)(false) )) );
        bp::scope IRenderTarget_scope( IRenderTarget_exposer );
        bp::implicitly_convertible< irr::video::ITexture *, irr::video::IRenderTarget >();
        IRenderTarget_exposer.def( bp::init< irr::video::E_RENDER_TARGET, bp::optional< irr::video::E_COLOR_PLANE, irr::video::E_BLEND_FACTOR, irr::video::E_BLEND_FACTOR, bool > >(( bp::arg("target"), bp::arg("colorMask")=::irr::video::ECP_ALL, bp::arg("blendFuncSrc")=::irr::video::EBF_ONE, bp::arg("blendFuncDst")=::irr::video::EBF_ONE_MINUS_SRC_ALPHA, bp::arg("blendEnable")=(bool)(false) )) );
        bp::implicitly_convertible< irr::video::E_RENDER_TARGET, irr::video::IRenderTarget >();
        IRenderTarget_exposer.def_readwrite( "BlendEnable", &irr::video::IRenderTarget::BlendEnable );
        IRenderTarget_exposer.add_property( "BlendFuncDst"
                    , bp::make_function( (::irr::video::E_BLEND_FACTOR (*)( ::irr::video::IRenderTarget const & ))(&IRenderTarget_wrapper::get_BlendFuncDst) )
                    , bp::make_function( (void (*)( ::irr::video::IRenderTarget &,::irr::video::E_BLEND_FACTOR ))(&IRenderTarget_wrapper::set_BlendFuncDst) ) );
        IRenderTarget_exposer.add_property( "BlendFuncSrc"
                    , bp::make_function( (::irr::video::E_BLEND_FACTOR (*)( ::irr::video::IRenderTarget const & ))(&IRenderTarget_wrapper::get_BlendFuncSrc) )
                    , bp::make_function( (void (*)( ::irr::video::IRenderTarget &,::irr::video::E_BLEND_FACTOR ))(&IRenderTarget_wrapper::set_BlendFuncSrc) ) );
        IRenderTarget_exposer.add_property( "ColorMask"
                    , bp::make_function( (::irr::video::E_COLOR_PLANE (*)( ::irr::video::IRenderTarget const & ))(&IRenderTarget_wrapper::get_ColorMask) )
                    , bp::make_function( (void (*)( ::irr::video::IRenderTarget &,::irr::video::E_COLOR_PLANE ))(&IRenderTarget_wrapper::set_ColorMask) ) );
        IRenderTarget_exposer.add_property( "RenderTexture"
                    , bp::make_function( (::irr::video::ITexture * (*)( ::irr::video::IRenderTarget const & ))(&IRenderTarget_wrapper::get_RenderTexture), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::irr::video::IRenderTarget &,::irr::video::ITexture * ))(&IRenderTarget_wrapper::set_RenderTexture), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        IRenderTarget_exposer.add_property( "TargetType"
                    , bp::make_function( (::irr::video::E_RENDER_TARGET (*)( ::irr::video::IRenderTarget const & ))(&IRenderTarget_wrapper::get_TargetType) )
                    , bp::make_function( (void (*)( ::irr::video::IRenderTarget &,::irr::video::E_RENDER_TARGET ))(&IRenderTarget_wrapper::set_TargetType) ) );
    }

    bp::class_< IVideoModeList_wrapper, bp::bases< irr::IReferenceCounted >, boost::noncopyable >( "IVideoModeList" )    
        .def( 
            "getDesktopDepth"
            , bp::pure_virtual( (::irr::s32 ( ::irr::video::IVideoModeList::* )(  ) const)(&::irr::video::IVideoModeList::getDesktopDepth) ) )    
        .def( 
            "getDesktopResolution"
            , bp::pure_virtual( (::irr::core::dimension2d< unsigned int > const & ( ::irr::video::IVideoModeList::* )(  ) const)(&::irr::video::IVideoModeList::getDesktopResolution) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getVideoModeCount"
            , bp::pure_virtual( (::irr::s32 ( ::irr::video::IVideoModeList::* )(  ) const)(&::irr::video::IVideoModeList::getVideoModeCount) ) )    
        .def( 
            "getVideoModeDepth"
            , bp::pure_virtual( (::irr::s32 ( ::irr::video::IVideoModeList::* )( ::irr::s32 ) const)(&::irr::video::IVideoModeList::getVideoModeDepth) )
            , ( bp::arg("modeNumber") ) )    
        .def( 
            "getVideoModeResolution"
            , bp::pure_virtual( (::irr::core::dimension2d< unsigned int > ( ::irr::video::IVideoModeList::* )( ::irr::s32 ) const)(&::irr::video::IVideoModeList::getVideoModeResolution) )
            , ( bp::arg("modeNumber") ) )    
        .def( 
            "getVideoModeResolution"
            , bp::pure_virtual( (::irr::core::dimension2d< unsigned int > ( ::irr::video::IVideoModeList::* )( ::irr::core::dimension2d< unsigned int > const &,::irr::core::dimension2d< unsigned int > const & ) const)(&::irr::video::IVideoModeList::getVideoModeResolution) )
            , ( bp::arg("minSize"), bp::arg("maxSize") ) )    
        .def( 
            "setDebugName"
            , (void ( IVideoModeList_wrapper::* )( ::irr::c8 const * ) )(&IVideoModeList_wrapper::setDebugName)
            , ( bp::arg("newName") ) );

    bp::class_< irr::video::S3DVertex >( "S3DVertex", bp::init< >() )    
        .def( bp::init< irr::f32, irr::f32, irr::f32, irr::f32, irr::f32, irr::f32, irr::video::SColor, irr::f32, irr::f32 >(( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("nx"), bp::arg("ny"), bp::arg("nz"), bp::arg("c"), bp::arg("tu"), bp::arg("tv") )) )    
        .def( bp::init< irr::core::vector3df const &, irr::core::vector3df const &, irr::video::SColor, irr::core::vector2d< float > const & >(( bp::arg("pos"), bp::arg("normal"), bp::arg("color"), bp::arg("tcoords") )) )    
        .def( 
            "getType"
            , (::irr::video::E_VERTEX_TYPE ( ::irr::video::S3DVertex::* )(  ) const)( &::irr::video::S3DVertex::getType ) )    
        .def( bp::self != bp::self )    
        .def( bp::self < bp::self )    
        .def( bp::self == bp::self )    
        .def_readwrite( "Color", &irr::video::S3DVertex::Color )    
        .def_readwrite( "Normal", &irr::video::S3DVertex::Normal )    
        .def_readwrite( "Pos", &irr::video::S3DVertex::Pos )    
        .def_readwrite( "TCoords", &irr::video::S3DVertex::TCoords );

    { //::irr::video::S3DVertex2TCoords
        typedef bp::class_< irr::video::S3DVertex2TCoords, bp::bases< irr::video::S3DVertex > > S3DVertex2TCoords_exposer_t;
        S3DVertex2TCoords_exposer_t S3DVertex2TCoords_exposer = S3DVertex2TCoords_exposer_t( "S3DVertex2TCoords", bp::init< >() );
        bp::scope S3DVertex2TCoords_scope( S3DVertex2TCoords_exposer );
        S3DVertex2TCoords_exposer.def( bp::init< irr::f32, irr::f32, irr::f32, irr::video::SColor, irr::f32, irr::f32, irr::f32, irr::f32 >(( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("c"), bp::arg("tu"), bp::arg("tv"), bp::arg("tu2"), bp::arg("tv2") )) );
        S3DVertex2TCoords_exposer.def( bp::init< irr::core::vector3df const &, irr::video::SColor, irr::core::vector2d< float > const &, irr::core::vector2d< float > const & >(( bp::arg("pos"), bp::arg("color"), bp::arg("tcoords"), bp::arg("tcoords2") )) );
        S3DVertex2TCoords_exposer.def( bp::init< irr::core::vector3df const &, irr::core::vector3df const &, irr::video::SColor const &, irr::core::vector2d< float > const &, irr::core::vector2d< float > const & >(( bp::arg("pos"), bp::arg("normal"), bp::arg("color"), bp::arg("tcoords"), bp::arg("tcoords2") )) );
        S3DVertex2TCoords_exposer.def( bp::init< irr::f32, irr::f32, irr::f32, irr::f32, irr::f32, irr::f32, irr::video::SColor, irr::f32, irr::f32, irr::f32, irr::f32 >(( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("nx"), bp::arg("ny"), bp::arg("nz"), bp::arg("c"), bp::arg("tu"), bp::arg("tv"), bp::arg("tu2"), bp::arg("tv2") )) );
        S3DVertex2TCoords_exposer.def( bp::init< irr::f32, irr::f32, irr::f32, irr::f32, irr::f32, irr::f32, irr::video::SColor, irr::f32, irr::f32 >(( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("nx"), bp::arg("ny"), bp::arg("nz"), bp::arg("c"), bp::arg("tu"), bp::arg("tv") )) );
        S3DVertex2TCoords_exposer.def( bp::init< irr::core::vector3df const &, irr::core::vector3df const &, irr::video::SColor, irr::core::vector2d< float > const & >(( bp::arg("pos"), bp::arg("normal"), bp::arg("color"), bp::arg("tcoords") )) );
        S3DVertex2TCoords_exposer.def( bp::init< irr::video::S3DVertex & >(( bp::arg("o") )) );
        bp::implicitly_convertible< irr::video::S3DVertex &, irr::video::S3DVertex2TCoords >();
        { //::irr::video::S3DVertex2TCoords::getType
        
            typedef ::irr::video::E_VERTEX_TYPE ( ::irr::video::S3DVertex2TCoords::*getType_function_type )(  ) const;
            
            S3DVertex2TCoords_exposer.def( 
                "getType"
                , getType_function_type( &::irr::video::S3DVertex2TCoords::getType ) );
        
        }
        S3DVertex2TCoords_exposer.def( bp::self != bp::self );
        S3DVertex2TCoords_exposer.def( bp::self < bp::self );
        S3DVertex2TCoords_exposer.def( bp::self == bp::self );
        S3DVertex2TCoords_exposer.def_readwrite( "TCoords2", &irr::video::S3DVertex2TCoords::TCoords2 );
    }

    bp::class_< irr::video::S3DVertexTangents, bp::bases< irr::video::S3DVertex > >( "S3DVertexTangents", bp::init< >() )    
        .def( bp::init< irr::f32, irr::f32, irr::f32, bp::optional< irr::f32, irr::f32, irr::f32, irr::video::SColor, irr::f32, irr::f32, irr::f32, irr::f32, irr::f32, irr::f32, irr::f32, irr::f32 > >(( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("nx")=0.0f, bp::arg("ny")=0.0f, bp::arg("nz")=0.0f, bp::arg("c")=4294967295u, bp::arg("tu")=0.0f, bp::arg("tv")=0.0f, bp::arg("tanx")=0.0f, bp::arg("tany")=0.0f, bp::arg("tanz")=0.0f, bp::arg("bx")=0.0f, bp::arg("by")=0.0f, bp::arg("bz")=0.0f )) )    
        .def( bp::init< irr::core::vector3df const &, irr::video::SColor, irr::core::vector2df const & >(( bp::arg("pos"), bp::arg("c"), bp::arg("tcoords") )) )    
        .def( bp::init< irr::core::vector3df const &, irr::core::vector3df const &, irr::video::SColor, irr::core::vector2df const &, bp::optional< irr::core::vector3df const &, irr::core::vector3df const & > >(( bp::arg("pos"), bp::arg("normal"), bp::arg("c"), bp::arg("tcoords"), bp::arg("tangent")=irr::core::vector3d<float>(), bp::arg("binormal")=irr::core::vector3d<float>() )) )    
        .def( 
            "getType"
            , (::irr::video::E_VERTEX_TYPE ( ::irr::video::S3DVertexTangents::* )(  ) const)( &::irr::video::S3DVertexTangents::getType ) )    
        .def( bp::self != bp::self )    
        .def( bp::self < bp::self )    
        .def( bp::self == bp::self )    
        .def_readwrite( "Binormal", &irr::video::S3DVertexTangents::Binormal )    
        .def_readwrite( "Tangent", &irr::video::S3DVertexTangents::Tangent );

    { //::irr::video::SColorHSL
        typedef bp::class_< irr::video::SColorHSL > SColorHSL_exposer_t;
        SColorHSL_exposer_t SColorHSL_exposer = SColorHSL_exposer_t( "SColorHSL", bp::init< bp::optional< irr::f32, irr::f32, irr::f32 > >(( bp::arg("h")=0.0f, bp::arg("s")=0.0f, bp::arg("l")=0.0f )) );
        bp::scope SColorHSL_scope( SColorHSL_exposer );
        bp::implicitly_convertible< irr::f32, irr::video::SColorHSL >();
        { //::irr::video::SColorHSL::fromRGB
        
            typedef void ( ::irr::video::SColorHSL::*fromRGB_function_type )( ::irr::video::SColor const & ) ;
            
            SColorHSL_exposer.def( 
                "fromRGB"
                , fromRGB_function_type( &::irr::video::SColorHSL::fromRGB )
                , ( bp::arg("color") ) );
        
        }
        { //::irr::video::SColorHSL::toRGB
        
            typedef void ( ::irr::video::SColorHSL::*toRGB_function_type )( ::irr::video::SColor & ) const;
            
            SColorHSL_exposer.def( 
                "toRGB"
                , toRGB_function_type( &::irr::video::SColorHSL::toRGB )
                , ( bp::arg("color") ) );
        
        }
        SColorHSL_exposer.def_readwrite( "Hue", &irr::video::SColorHSL::Hue );
        SColorHSL_exposer.def_readwrite( "Luminance", &irr::video::SColorHSL::Luminance );
        SColorHSL_exposer.def_readwrite( "Saturation", &irr::video::SColorHSL::Saturation );
    }

    bp::class_< SLight_wrapper >( "SLight", bp::init< >() )    
        .def_readwrite( "AmbientColor", &irr::video::SLight::AmbientColor )    
        .def_readwrite( "Attenuation", &irr::video::SLight::Attenuation )    
        .add_property( "CastShadows"
                    , bp::make_function( (bool (*)( ::irr::video::SLight const & ))(&SLight_wrapper::get_CastShadows) )
                    , bp::make_function( (void (*)( ::irr::video::SLight &,bool ))(&SLight_wrapper::set_CastShadows) ) )    
        .def_readwrite( "DiffuseColor", &irr::video::SLight::DiffuseColor )    
        .def_readwrite( "Direction", &irr::video::SLight::Direction )    
        .def_readwrite( "Falloff", &irr::video::SLight::Falloff )    
        .def_readwrite( "InnerCone", &irr::video::SLight::InnerCone )    
        .def_readwrite( "OuterCone", &irr::video::SLight::OuterCone )    
        .def_readwrite( "Position", &irr::video::SLight::Position )    
        .def_readwrite( "Radius", &irr::video::SLight::Radius )    
        .def_readwrite( "SpecularColor", &irr::video::SLight::SpecularColor )    
        .def_readwrite( "Type", &irr::video::SLight::Type );

    { //::irr::video::SMaterialLayer
        typedef bp::class_< SMaterialLayer_wrapper > SMaterialLayer_exposer_t;
        SMaterialLayer_exposer_t SMaterialLayer_exposer = SMaterialLayer_exposer_t( "SMaterialLayer", bp::init< >() );
        bp::scope SMaterialLayer_scope( SMaterialLayer_exposer );
        SMaterialLayer_exposer.def( bp::init< irr::video::SMaterialLayer const & >(( bp::arg("other") )) );
        { //::irr::video::SMaterialLayer::getTextureMatrix
        
            typedef ::irr::core::matrix4 & ( ::irr::video::SMaterialLayer::*getTextureMatrix_function_type )(  ) ;
            
            SMaterialLayer_exposer.def( 
                "getTextureMatrix"
                , getTextureMatrix_function_type( &::irr::video::SMaterialLayer::getTextureMatrix )
                    /* undefined call policies */ );
        
        }
        { //::irr::video::SMaterialLayer::getTextureMatrix
        
            typedef ::irr::core::matrix4 const & ( ::irr::video::SMaterialLayer::*getTextureMatrix_function_type )(  ) const;
            
            SMaterialLayer_exposer.def( 
                "getTextureMatrix"
                , getTextureMatrix_function_type( &::irr::video::SMaterialLayer::getTextureMatrix )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        SMaterialLayer_exposer.def( bp::self != bp::self );
        { //::irr::video::SMaterialLayer::operator=
        
            typedef ::irr::video::SMaterialLayer & ( ::irr::video::SMaterialLayer::*assign_function_type )( ::irr::video::SMaterialLayer const & ) ;
            
            SMaterialLayer_exposer.def( 
                "assign"
                , assign_function_type( &::irr::video::SMaterialLayer::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        SMaterialLayer_exposer.def( bp::self == bp::self );
        { //::irr::video::SMaterialLayer::setTextureMatrix
        
            typedef void ( ::irr::video::SMaterialLayer::*setTextureMatrix_function_type )( ::irr::core::matrix4 const & ) ;
            
            SMaterialLayer_exposer.def( 
                "setTextureMatrix"
                , setTextureMatrix_function_type( &::irr::video::SMaterialLayer::setTextureMatrix )
                , ( bp::arg("mat") ) );
        
        }
        SMaterialLayer_exposer.def_readwrite( "AnisotropicFilter", &irr::video::SMaterialLayer::AnisotropicFilter );
        SMaterialLayer_exposer.add_property( "BilinearFilter"
                    , bp::make_function( (bool (*)( ::irr::video::SMaterialLayer const & ))(&SMaterialLayer_wrapper::get_BilinearFilter) )
                    , bp::make_function( (void (*)( ::irr::video::SMaterialLayer &,bool ))(&SMaterialLayer_wrapper::set_BilinearFilter) ) );
        SMaterialLayer_exposer.def_readwrite( "LODBias", &irr::video::SMaterialLayer::LODBias );
        SMaterialLayer_exposer.add_property( "Texture"
                    , bp::make_function( (::irr::video::ITexture * (*)( ::irr::video::SMaterialLayer const & ))(&SMaterialLayer_wrapper::get_Texture), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::irr::video::SMaterialLayer &,::irr::video::ITexture * ))(&SMaterialLayer_wrapper::set_Texture), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        SMaterialLayer_exposer.add_property( "TextureWrapU"
                    , bp::make_function( (::irr::u8 (*)( ::irr::video::SMaterialLayer const & ))(&SMaterialLayer_wrapper::get_TextureWrapU) )
                    , bp::make_function( (void (*)( ::irr::video::SMaterialLayer &,::irr::u8 ))(&SMaterialLayer_wrapper::set_TextureWrapU) ) );
        SMaterialLayer_exposer.add_property( "TextureWrapV"
                    , bp::make_function( (::irr::u8 (*)( ::irr::video::SMaterialLayer const & ))(&SMaterialLayer_wrapper::get_TextureWrapV) )
                    , bp::make_function( (void (*)( ::irr::video::SMaterialLayer &,::irr::u8 ))(&SMaterialLayer_wrapper::set_TextureWrapV) ) );
        SMaterialLayer_exposer.add_property( "TrilinearFilter"
                    , bp::make_function( (bool (*)( ::irr::video::SMaterialLayer const & ))(&SMaterialLayer_wrapper::get_TrilinearFilter) )
                    , bp::make_function( (void (*)( ::irr::video::SMaterialLayer &,bool ))(&SMaterialLayer_wrapper::set_TrilinearFilter) ) );
    }

    bp::class_< irr::video::SOverrideMaterial >( "SOverrideMaterial", bp::init< >() )    
        .def( 
            "apply"
            , (void ( ::irr::video::SOverrideMaterial::* )( ::irr::video::SMaterial & ) )( &::irr::video::SOverrideMaterial::apply )
            , ( bp::arg("material") ) )    
        .def_readwrite( "EnableFlags", &irr::video::SOverrideMaterial::EnableFlags )    
        .def_readwrite( "EnablePasses", &irr::video::SOverrideMaterial::EnablePasses )    
        .def_readwrite( "Enabled", &irr::video::SOverrideMaterial::Enabled )    
        .def_readwrite( "Material", &irr::video::SOverrideMaterial::Material );

    { //::irr::video::A1R5G5B5toA8R8G8B8
    
        typedef ::irr::u32 ( *A1R5G5B5toA8R8G8B8_function_type )( ::irr::u16 );
        
        bp::def( 
            "A1R5G5B5toA8R8G8B8"
            , A1R5G5B5toA8R8G8B8_function_type( &::irr::video::A1R5G5B5toA8R8G8B8 )
            , ( bp::arg("color") ) );
    
    }

    { //::irr::video::A1R5G5B5toR5G6B5
    
        typedef ::irr::u16 ( *A1R5G5B5toR5G6B5_function_type )( ::irr::u16 );
        
        bp::def( 
            "A1R5G5B5toR5G6B5"
            , A1R5G5B5toR5G6B5_function_type( &::irr::video::A1R5G5B5toR5G6B5 )
            , ( bp::arg("color") ) );
    
    }

    { //::irr::video::A8R8G8B8toA1R5G5B5
    
        typedef ::irr::u16 ( *A8R8G8B8toA1R5G5B5_function_type )( ::irr::u32 );
        
        bp::def( 
            "A8R8G8B8toA1R5G5B5"
            , A8R8G8B8toA1R5G5B5_function_type( &::irr::video::A8R8G8B8toA1R5G5B5 )
            , ( bp::arg("color") ) );
    
    }

    { //::irr::video::A8R8G8B8toR5G6B5
    
        typedef ::irr::u16 ( *A8R8G8B8toR5G6B5_function_type )( ::irr::u32 );
        
        bp::def( 
            "A8R8G8B8toR5G6B5"
            , A8R8G8B8toR5G6B5_function_type( &::irr::video::A8R8G8B8toR5G6B5 )
            , ( bp::arg("color") ) );
    
    }

    { //::irr::core::FR
    
        typedef ::irr::f32 ( *FR_function_type )( ::irr::u32 );
        
        bp::def( 
            "FR"
            , FR_function_type( &::irr::core::FR )
            , ( bp::arg("x") ) );
    
    }

    { //::irr::core::FR
    
        typedef ::irr::f32 ( *FR_function_type )( ::irr::s32 );
        
        bp::def( 
            "FR"
            , FR_function_type( &::irr::core::FR )
            , ( bp::arg("x") ) );
    
    }

    { //::irr::core::IR
    
        typedef ::irr::u32 ( *IR_function_type )( ::irr::f32 );
        
        bp::def( 
            "IR"
            , IR_function_type( &::irr::core::IR )
            , ( bp::arg("x") ) );
    
    }

    { //::irr::video::R5G6B5toA1R5G5B5
    
        typedef ::irr::u16 ( *R5G6B5toA1R5G5B5_function_type )( ::irr::u16 );
        
        bp::def( 
            "R5G6B5toA1R5G5B5"
            , R5G6B5toA1R5G5B5_function_type( &::irr::video::R5G6B5toA1R5G5B5 )
            , ( bp::arg("color") ) );
    
    }

    { //::irr::video::R5G6B5toA8R8G8B8
    
        typedef ::irr::u32 ( *R5G6B5toA8R8G8B8_function_type )( ::irr::u16 );
        
        bp::def( 
            "R5G6B5toA8R8G8B8"
            , R5G6B5toA8R8G8B8_function_type( &::irr::video::R5G6B5toA8R8G8B8 )
            , ( bp::arg("color") ) );
    
    }

    { //::irr::video::RGB16
    
        typedef ::irr::u16 ( *RGB16_function_type )( ::irr::u32,::irr::u32,::irr::u32 );
        
        bp::def( 
            "RGB16"
            , RGB16_function_type( &::irr::video::RGB16 )
            , ( bp::arg("r"), bp::arg("g"), bp::arg("b") ) );
    
    }

    { //::irr::video::RGB16from16
    
        typedef ::irr::u16 ( *RGB16from16_function_type )( ::irr::u16,::irr::u16,::irr::u16 );
        
        bp::def( 
            "RGB16from16"
            , RGB16from16_function_type( &::irr::video::RGB16from16 )
            , ( bp::arg("r"), bp::arg("g"), bp::arg("b") ) );
    
    }

    { //::irr::video::RGBA16
    
        typedef ::irr::u16 ( *RGBA16_function_type )( ::irr::u32,::irr::u32,::irr::u32,::irr::u32 );
        
        bp::def( 
            "RGBA16"
            , RGBA16_function_type( &::irr::video::RGBA16 )
            , ( bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a")=(::irr::u32)(255) ) );
    
    }

    { //::irr::video::X8R8G8B8toA1R5G5B5
    
        typedef ::irr::u16 ( *X8R8G8B8toA1R5G5B5_function_type )( ::irr::u32 );
        
        bp::def( 
            "X8R8G8B8toA1R5G5B5"
            , X8R8G8B8toA1R5G5B5_function_type( &::irr::video::X8R8G8B8toA1R5G5B5 )
            , ( bp::arg("color") ) );
    
    }

    { //::irr::core::ceil32
    
        typedef ::irr::s32 ( *ceil32_function_type )( ::irr::f32 );
        
        bp::def( 
            "ceil32"
            , ceil32_function_type( &::irr::core::ceil32 )
            , ( bp::arg("x") ) );
    
    }

    { //::irr::core::clamp
    
        typedef ::irr::s32 const ( *clamp_function_type )( ::irr::s32 const &,::irr::s32 const &,::irr::s32 const & );
        
        bp::def( 
            "clamp"
            , clamp_function_type( &::irr::core::clamp )
            , ( bp::arg("value"), bp::arg("low"), bp::arg("high") ) );
    
    }

    { //::irr::core::clamp
    
        typedef unsigned int const ( *clamp_function_type )( unsigned int const &,unsigned int const &,unsigned int const & );
        
        bp::def( 
            "clamp"
            , clamp_function_type( &::irr::core::clamp )
            , ( bp::arg("value"), bp::arg("low"), bp::arg("high") ) );
    
    }

    { //::irr::core::clamp
    
        typedef ::irr::f32 const ( *clamp_function_type )( ::irr::f32 const &,::irr::f32 const &,::irr::f32 const & );
        
        bp::def( 
            "clamp"
            , clamp_function_type( &::irr::core::clamp )
            , ( bp::arg("value"), bp::arg("low"), bp::arg("high") ) );
    
    }

    { //::irr::core::clamp
    
        typedef int const ( *clamp_function_type )( int const &,int const &,int const & );
        
        bp::def( 
            "clamp"
            , clamp_function_type( &::irr::core::clamp )
            , ( bp::arg("value"), bp::arg("low"), bp::arg("high") ) );
    
    }

    { //::irr::core::clamp
    
        typedef int const ( *clamp_function_type )( int const &,int const &,int const & );
        
        bp::def( 
            "clamp"
            , clamp_function_type( &::irr::core::clamp )
            , ( bp::arg("value"), bp::arg("low"), bp::arg("high") ) );
    
    }

    { //::irr::core::clearFPUException
    
        typedef void ( *clearFPUException_function_type )(  );
        
        bp::def( 
            "clearFPUException"
            , clearFPUException_function_type( &::irr::core::clearFPUException ) );
    
    }

    { //::irr::createDevice
    
        typedef ::irr::IrrlichtDevice * ( *createDevice_function_type )( ::irr::video::E_DRIVER_TYPE,::irr::core::dimension2d< unsigned int > const &,::irr::u32,bool,bool,bool,::irr::IEventReceiver * );
        
        bp::def( 
            "createDevice"
            , createDevice_function_type( &::irr::createDevice )
            , ( bp::arg("deviceType")=::irr::video::EDT_SOFTWARE, bp::arg("windowSize")=irr::core::dimension2d<unsigned int>(((const unsigned int&)((const unsigned int*)(&640u))), ((const unsigned int&)((const unsigned int*)(&480u)))), bp::arg("bits")=(::irr::u32)(16), bp::arg("fullscreen")=(bool)(false), bp::arg("stencilbuffer")=(bool)(false), bp::arg("vsync")=(bool)(false), bp::arg("receiver")=bp::object() )
                /* undefined call policies */ );
    
    }

    { //::irr::createDeviceEx
    
        typedef ::irr::IrrlichtDevice * ( *createDeviceEx_function_type )( ::irr::SIrrlichtCreationParameters const & );
        
        bp::def( 
            "createDeviceEx"
            , createDeviceEx_function_type( &::irr::createDeviceEx )
            , ( bp::arg("parameters") )
                /* undefined call policies */ );
    
    }

    { //::irr::io::createIrrXMLReader
    
        typedef ::irr::io::IrrXMLReader * ( *createIrrXMLReader_function_type )( char const * );
        
        bp::def( 
            "createIrrXMLReader"
            , createIrrXMLReader_function_type( &::irr::io::createIrrXMLReader )
            , ( bp::arg("filename") )
                /* undefined call policies */ );
    
    }

    { //::irr::io::createIrrXMLReader
    
        typedef ::irr::io::IrrXMLReader * ( *createIrrXMLReader_function_type )( ::FILE * );
        
        bp::def( 
            "createIrrXMLReader"
            , createIrrXMLReader_function_type( &::irr::io::createIrrXMLReader )
            , ( bp::arg("file") )
                /* undefined call policies */ );
    
    }

    { //::irr::io::createIrrXMLReader
    
        typedef ::irr::io::IrrXMLReader * ( *createIrrXMLReader_function_type )( ::irr::io::IFileReadCallBack *,bool );
        
        bp::def( 
            "createIrrXMLReader"
            , createIrrXMLReader_function_type( &::irr::io::createIrrXMLReader )
            , ( bp::arg("callback"), bp::arg("deleteCallback")=(bool)(false) )
                /* undefined call policies */ );
    
    }

    { //::irr::io::createIrrXMLReaderUTF16
    
        typedef ::irr::io::IrrXMLReaderUTF16 * ( *createIrrXMLReaderUTF16_function_type )( char const * );
        
        bp::def( 
            "createIrrXMLReaderUTF16"
            , createIrrXMLReaderUTF16_function_type( &::irr::io::createIrrXMLReaderUTF16 )
            , ( bp::arg("filename") )
                /* undefined call policies */ );
    
    }

    { //::irr::io::createIrrXMLReaderUTF16
    
        typedef ::irr::io::IrrXMLReaderUTF16 * ( *createIrrXMLReaderUTF16_function_type )( ::FILE * );
        
        bp::def( 
            "createIrrXMLReaderUTF16"
            , createIrrXMLReaderUTF16_function_type( &::irr::io::createIrrXMLReaderUTF16 )
            , ( bp::arg("file") )
                /* undefined call policies */ );
    
    }

    { //::irr::io::createIrrXMLReaderUTF16
    
        typedef ::irr::io::IrrXMLReaderUTF16 * ( *createIrrXMLReaderUTF16_function_type )( ::irr::io::IFileReadCallBack *,bool );
        
        bp::def( 
            "createIrrXMLReaderUTF16"
            , createIrrXMLReaderUTF16_function_type( &::irr::io::createIrrXMLReaderUTF16 )
            , ( bp::arg("callback"), bp::arg("deleteCallback")=(bool)(false) )
                /* undefined call policies */ );
    
    }

    { //::irr::io::createIrrXMLReaderUTF32
    
        typedef ::irr::io::IrrXMLReaderUTF32 * ( *createIrrXMLReaderUTF32_function_type )( char const * );
        
        bp::def( 
            "createIrrXMLReaderUTF32"
            , createIrrXMLReaderUTF32_function_type( &::irr::io::createIrrXMLReaderUTF32 )
            , ( bp::arg("filename") )
                /* undefined call policies */ );
    
    }

    { //::irr::io::createIrrXMLReaderUTF32
    
        typedef ::irr::io::IrrXMLReaderUTF32 * ( *createIrrXMLReaderUTF32_function_type )( ::FILE * );
        
        bp::def( 
            "createIrrXMLReaderUTF32"
            , createIrrXMLReaderUTF32_function_type( &::irr::io::createIrrXMLReaderUTF32 )
            , ( bp::arg("file") )
                /* undefined call policies */ );
    
    }

    { //::irr::io::createIrrXMLReaderUTF32
    
        typedef ::irr::io::IrrXMLReaderUTF32 * ( *createIrrXMLReaderUTF32_function_type )( ::irr::io::IFileReadCallBack *,bool );
        
        bp::def( 
            "createIrrXMLReaderUTF32"
            , createIrrXMLReaderUTF32_function_type( &::irr::io::createIrrXMLReaderUTF32 )
            , ( bp::arg("callback"), bp::arg("deleteCallback")=(bool)(false) )
                /* undefined call policies */ );
    
    }

    { //::irr::io::createLimitReadFile
    
        typedef ::irr::io::IReadFile * ( *createLimitReadFile_function_type )( ::irr::io::path const &,::irr::io::IReadFile *,long int,long int );
        
        bp::def( 
            "createLimitReadFile"
            , createLimitReadFile_function_type( &::irr::io::createLimitReadFile )
            , ( bp::arg("fileName"), bp::arg("alreadyOpenedFile"), bp::arg("pos"), bp::arg("areaSize") )
                /* undefined call policies */ );
    
    }

    { //::irr::io::createMemoryReadFile
    
        typedef ::irr::io::IReadFile * ( *createMemoryReadFile_function_type )( void *,long int,::irr::io::path const &,bool );
        
        bp::def( 
            "createMemoryReadFile"
            , createMemoryReadFile_function_type( &::irr::io::createMemoryReadFile )
            , ( bp::arg("memory"), bp::arg("size"), bp::arg("fileName"), bp::arg("deleteMemoryWhenDropped") )
                /* undefined call policies */ );
    
    }

    { //::irr::io::createReadFile
    
        typedef ::irr::io::IReadFile * ( *createReadFile_function_type )( ::irr::io::path const & );
        
        bp::def( 
            "createReadFile"
            , createReadFile_function_type( &::irr::io::createReadFile )
            , ( bp::arg("fileName") )
                /* undefined call policies */ );
    
    }

    { //::irr::io::createWriteFile
    
        typedef ::irr::io::IWriteFile * ( *createWriteFile_function_type )( ::irr::io::path const &,bool );
        
        bp::def( 
            "createWriteFile"
            , createWriteFile_function_type( &::irr::io::createWriteFile )
            , ( bp::arg("fileName"), bp::arg("append") )
                /* undefined call policies */ );
    
    }

    { //::irr::core::cutFilenameExtension
    
        typedef ::irr::io::path & ( *cutFilenameExtension_function_type )( ::irr::io::path &,::irr::io::path const & );
        
        bp::def( 
            "cutFilenameExtension"
            , cutFilenameExtension_function_type( &::irr::core::cutFilenameExtension )
            , ( bp::arg("dest"), bp::arg("source") )
                /* undefined call policies */ );
    
    }

    { //::irr::core::degToRad
    
        typedef ::irr::f32 ( *degToRad_function_type )( ::irr::f32 );
        
        bp::def( 
            "degToRad"
            , degToRad_function_type( &::irr::core::degToRad )
            , ( bp::arg("degrees") ) );
    
    }

    { //::irr::core::degToRad
    
        typedef ::irr::f64 ( *degToRad_function_type )( ::irr::f64 );
        
        bp::def( 
            "degToRad"
            , degToRad_function_type( &::irr::core::degToRad )
            , ( bp::arg("degrees") ) );
    
    }

    { //::irr::core::deletePathFromFilename
    
        typedef ::irr::io::path & ( *deletePathFromFilename_function_type )( ::irr::io::path & );
        
        bp::def( 
            "deletePathFromFilename"
            , deletePathFromFilename_function_type( &::irr::core::deletePathFromFilename )
            , ( bp::arg("filename") )
                /* undefined call policies */ );
    
    }

    { //::irr::core::deletePathFromPath
    
        typedef ::irr::io::path & ( *deletePathFromPath_function_type )( ::irr::io::path &,::irr::s32 );
        
        bp::def( 
            "deletePathFromPath"
            , deletePathFromPath_function_type( &::irr::core::deletePathFromPath )
            , ( bp::arg("filename"), bp::arg("pathCount") )
                /* undefined call policies */ );
    
    }

    { //::irr::scene::quake3::dumpShader
    
        typedef ::irr::core::stringc & ( *dumpShader_function_type )( ::irr::core::stringc &,::irr::scene::quake3::IShader const *,bool );
        
        bp::def( 
            "dumpShader"
            , dumpShader_function_type( &::irr::scene::quake3::dumpShader )
            , ( bp::arg("dest"), bp::arg("shader"), bp::arg("entity")=(bool)(false) )
                /* undefined call policies */ );
    
    }

    { //::irr::scene::quake3::dumpVarGroup
    
        typedef void ( *dumpVarGroup_function_type )( ::irr::core::stringc &,::irr::scene::quake3::SVarGroup const *,::irr::s32 );
        
        bp::def( 
            "dumpVarGroup"
            , dumpVarGroup_function_type( &::irr::scene::quake3::dumpVarGroup )
            , ( bp::arg("dest"), bp::arg("group"), bp::arg("stack") ) );
    
    }

    { //::irr::core::equals
    
        typedef bool ( *equals_function_type )( ::irr::f64 const,::irr::f64 const,::irr::f64 const );
        
        bp::def( 
            "equals"
            , equals_function_type( &::irr::core::equals )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("tolerance")=irr::core::ROUNDING_ERROR_f64 ) );
    
    }

    { //::irr::core::equals
    
        typedef bool ( *equals_function_type )( ::irr::f32 const,::irr::f32 const,::irr::f32 const );
        
        bp::def( 
            "equals"
            , equals_function_type( &::irr::core::equals )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("tolerance")=irr::core::ROUNDING_ERROR_f32 ) );
    
    }

    { //::irr::core::equals
    
        typedef bool ( *equals_function_type )( ::irr::s32 const,::irr::s32 const,::irr::s32 const );
        
        bp::def( 
            "equals"
            , equals_function_type( &::irr::core::equals )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("tolerance")=(::irr::s32 const)(irr::core::ROUNDING_ERROR_S32) ) );
    
    }

    { //::irr::core::equals
    
        typedef bool ( *equals_function_type )( ::irr::u32 const,::irr::u32 const,::irr::s32 const );
        
        bp::def( 
            "equals"
            , equals_function_type( &::irr::core::equals )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("tolerance")=(::irr::s32 const)(irr::core::ROUNDING_ERROR_S32) ) );
    
    }

    { //::irr::core::f32_max3
    
        typedef ::irr::f32 ( *f32_max3_function_type )( ::irr::f32 const,::irr::f32 const,::irr::f32 const );
        
        bp::def( 
            "f32_max3"
            , f32_max3_function_type( &::irr::core::f32_max3 )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::irr::core::f32_min3
    
        typedef ::irr::f32 ( *f32_min3_function_type )( ::irr::f32 const,::irr::f32 const,::irr::f32 const );
        
        bp::def( 
            "f32_min3"
            , f32_min3_function_type( &::irr::core::f32_min3 )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::irr::core::fast_atof
    
        typedef float ( *fast_atof_function_type )( char const * );
        
        bp::def( 
            "fast_atof"
            , fast_atof_function_type( &::irr::core::fast_atof )
            , ( bp::arg("floatAsString") ) );
    
    }

    { //::irr::core::fast_atof_move
    
        typedef char const * ( *fast_atof_move_function_type )( char const *,::irr::f32 & );
        
        bp::def( 
            "fast_atof_move"
            , fast_atof_move_function_type( &::irr::core::fast_atof_move )
            , ( bp::arg("in"), bp::arg("out") ) );
    
    }

    { //::irr::core::floor32
    
        typedef ::irr::s32 ( *floor32_function_type )( ::irr::f32 );
        
        bp::def( 
            "floor32"
            , floor32_function_type( &::irr::core::floor32 )
            , ( bp::arg("x") ) );
    
    }

    { //::irr::core::fract
    
        typedef ::irr::f32 ( *fract_function_type )( ::irr::f32 );
        
        bp::def( 
            "fract"
            , fract_function_type( &::irr::core::fract )
            , ( bp::arg("x") ) );
    
    }

    { //::irr::video::getAlpha
    
        typedef ::irr::u32 ( *getAlpha_function_type )( ::irr::u16 );
        
        bp::def( 
            "getAlpha"
            , getAlpha_function_type( &::irr::video::getAlpha )
            , ( bp::arg("color") ) );
    
    }

    { //::irr::scene::quake3::getAsFloat
    
        typedef ::irr::f32 ( *getAsFloat_function_type )( ::irr::core::stringc const &,::irr::u32 & );
        
        bp::def( 
            "getAsFloat"
            , getAsFloat_function_type( &::irr::scene::quake3::getAsFloat )
            , ( bp::arg("string"), bp::arg("pos") ) );
    
    }

    { //::irr::scene::quake3::getAsStringList
    
        typedef void ( *getAsStringList_function_type )( ::irr::scene::quake3::tStringList &,::irr::s32,::irr::core::stringc const &,::irr::u32 & );
        
        bp::def( 
            "getAsStringList"
            , getAsStringList_function_type( &::irr::scene::quake3::getAsStringList )
            , ( bp::arg("list"), bp::arg("max"), bp::arg("string"), bp::arg("startPos") ) );
    
    }

    { //::irr::scene::quake3::getAsVector3df
    
        typedef ::irr::core::vector3df ( *getAsVector3df_function_type )( ::irr::core::stringc const &,::irr::u32 & );
        
        bp::def( 
            "getAsVector3df"
            , getAsVector3df_function_type( &::irr::scene::quake3::getAsVector3df )
            , ( bp::arg("string"), bp::arg("pos") ) );
    
    }

    { //::irr::video::getAverage
    
        typedef ::irr::s32 ( *getAverage_function_type )( ::irr::s16 );
        
        bp::def( 
            "getAverage"
            , getAverage_function_type( &::irr::video::getAverage )
            , ( bp::arg("color") ) );
    
    }

    { //::irr::scene::quake3::getBlendFunc
    
        typedef void ( *getBlendFunc_function_type )( ::irr::core::stringc const &,::irr::scene::quake3::SBlendFunc & );
        
        bp::def( 
            "getBlendFunc"
            , getBlendFunc_function_type( &::irr::scene::quake3::getBlendFunc )
            , ( bp::arg("string"), bp::arg("blendfunc") ) );
    
    }

    { //::irr::video::getBlue
    
        typedef ::irr::u32 ( *getBlue_function_type )( ::irr::u16 );
        
        bp::def( 
            "getBlue"
            , getBlue_function_type( &::irr::video::getBlue )
            , ( bp::arg("color") ) );
    
    }

    { //::irr::scene::quake3::getCullingFunction
    
        typedef bool ( *getCullingFunction_function_type )( ::irr::core::stringc const & );
        
        bp::def( 
            "getCullingFunction"
            , getCullingFunction_function_type( &::irr::scene::quake3::getCullingFunction )
            , ( bp::arg("cull") ) );
    
    }

    { //::irr::scene::quake3::getDepthFunction
    
        typedef ::irr::u8 ( *getDepthFunction_function_type )( ::irr::core::stringc const & );
        
        bp::def( 
            "getDepthFunction"
            , getDepthFunction_function_type( &::irr::scene::quake3::getDepthFunction )
            , ( bp::arg("string") ) );
    
    }

    { //::irr::core::getFileNameExtension
    
        typedef ::irr::io::path & ( *getFileNameExtension_function_type )( ::irr::io::path &,::irr::io::path const & );
        
        bp::def( 
            "getFileNameExtension"
            , getFileNameExtension_function_type( &::irr::core::getFileNameExtension )
            , ( bp::arg("dest"), bp::arg("source") )
                /* undefined call policies */ );
    
    }

    { //::irr::video::getGreen
    
        typedef ::irr::u32 ( *getGreen_function_type )( ::irr::u16 );
        
        bp::def( 
            "getGreen"
            , getGreen_function_type( &::irr::video::getGreen )
            , ( bp::arg("color") ) );
    
    }

    { //::irr::scene::quake3::getMD3Normal
    
        typedef ::irr::core::vector3df ( *getMD3Normal_function_type )( ::irr::u32,::irr::u32 );
        
        bp::def( 
            "getMD3Normal"
            , getMD3Normal_function_type( &::irr::scene::quake3::getMD3Normal )
            , ( bp::arg("i"), bp::arg("j") ) );
    
    }

    { //::irr::scene::quake3::getModifierFunc
    
        typedef void ( *getModifierFunc_function_type )( ::irr::scene::quake3::SModifierFunction &,::irr::core::stringc const &,::irr::u32 & );
        
        bp::def( 
            "getModifierFunc"
            , getModifierFunc_function_type( &::irr::scene::quake3::getModifierFunc )
            , ( bp::arg("fill"), bp::arg("string"), bp::arg("pos") ) );
    
    }

    { //::irr::video::getRed
    
        typedef ::irr::u32 ( *getRed_function_type )( ::irr::u16 );
        
        bp::def( 
            "getRed"
            , getRed_function_type( &::irr::video::getRed )
            , ( bp::arg("color") ) );
    
    }

    { //::irr::scene::quake3::getTextures
    
        typedef void ( *getTextures_function_type )( ::irr::scene::quake3::tTexArray &,::irr::core::stringc const &,::irr::u32 &,::irr::io::IFileSystem *,::irr::video::IVideoDriver * );
        
        bp::def( 
            "getTextures"
            , getTextures_function_type( &::irr::scene::quake3::getTextures )
            , ( bp::arg("textures"), bp::arg("name"), bp::arg("startPos"), bp::arg("fileSystem"), bp::arg("driver") ) );
    
    }

    { //::irr::video::getVertexPitchFromType
    
        typedef ::irr::u32 ( *getVertexPitchFromType_function_type )( ::irr::video::E_VERTEX_TYPE );
        
        bp::def( 
            "getVertexPitchFromType"
            , getVertexPitchFromType_function_type( &::irr::video::getVertexPitchFromType )
            , ( bp::arg("vertexType") ) );
    
    }

    { //::irr::core::hasFileExtension
    
        typedef bool ( *hasFileExtension_function_type )( ::irr::io::path const &,::irr::io::path const &,::irr::io::path const &,::irr::io::path const & );
        
        bp::def( 
            "hasFileExtension"
            , hasFileExtension_function_type( &::irr::core::hasFileExtension )
            , ( bp::arg("filename"), bp::arg("ext0"), bp::arg("ext1")="", bp::arg("ext2")="" ) );
    
    }

    { //::irr::core::if_c_a_else_0
    
        typedef ::irr::u32 ( *if_c_a_else_0_function_type )( ::irr::s32 const,::irr::u32 const );
        
        bp::def( 
            "if_c_a_else_0"
            , if_c_a_else_0_function_type( &::irr::core::if_c_a_else_0 )
            , ( bp::arg("condition"), bp::arg("a") ) );
    
    }

    { //::irr::core::if_c_a_else_b
    
        typedef ::irr::u32 ( *if_c_a_else_b_function_type )( ::irr::s32 const,::irr::u32 const,::irr::u32 const );
        
        bp::def( 
            "if_c_a_else_b"
            , if_c_a_else_b_function_type( &::irr::core::if_c_a_else_b )
            , ( bp::arg("condition"), bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::irr::core::if_c_a_else_b
    
        typedef ::irr::u16 ( *if_c_a_else_b_function_type )( ::irr::s16 const,::irr::u16 const,::irr::u16 const );
        
        bp::def( 
            "if_c_a_else_b"
            , if_c_a_else_b_function_type( &::irr::core::if_c_a_else_b )
            , ( bp::arg("condition"), bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::irr::scene::quake3::isEqual
    
        typedef ::irr::s16 ( *isEqual_function_type )( ::irr::core::stringc const &,::irr::u32 &,::irr::c8 const * *,::irr::u16 );
        
        bp::def( 
            "isEqual"
            , isEqual_function_type( &::irr::scene::quake3::isEqual )
            , ( bp::arg("string"), bp::arg("pos"), bp::arg("list"), bp::arg("listSize") ) );
    
    }

    { //::irr::core::isFileExtension
    
        typedef ::irr::s32 ( *isFileExtension_function_type )( ::irr::io::path const &,::irr::io::path const &,::irr::io::path const &,::irr::io::path const & );
        
        bp::def( 
            "isFileExtension"
            , isFileExtension_function_type( &::irr::core::isFileExtension )
            , ( bp::arg("filename"), bp::arg("ext0"), bp::arg("ext1"), bp::arg("ext2") ) );
    
    }

    { //::irr::core::isInSameDirectory
    
        typedef ::irr::s32 ( *isInSameDirectory_function_type )( ::irr::io::path const &,::irr::io::path const & );
        
        bp::def( 
            "isInSameDirectory"
            , isInSameDirectory_function_type( &::irr::core::isInSameDirectory )
            , ( bp::arg("path"), bp::arg("file") ) );
    
    }

    { //::irr::core::isnotzero
    
        typedef bool ( *isnotzero_function_type )( ::irr::f32 const,::irr::f32 const );
        
        bp::def( 
            "isnotzero"
            , isnotzero_function_type( &::irr::core::isnotzero )
            , ( bp::arg("a"), bp::arg("tolerance")=irr::core::ROUNDING_ERROR_f32 ) );
    
    }

    { //::irr::core::isspace
    
        typedef ::irr::s32 ( *isspace_function_type )( ::irr::s32 );
        
        bp::def( 
            "isspace"
            , isspace_function_type( &::irr::core::isspace )
            , ( bp::arg("c") ) );
    
    }

    { //::irr::core::isupper
    
        typedef ::irr::s32 ( *isupper_function_type )( ::irr::s32 );
        
        bp::def( 
            "isupper"
            , isupper_function_type( &::irr::core::isupper )
            , ( bp::arg("c") ) );
    
    }

    { //::irr::core::iszero
    
        typedef bool ( *iszero_function_type )( ::irr::f64 const,::irr::f64 const );
        
        bp::def( 
            "iszero"
            , iszero_function_type( &::irr::core::iszero )
            , ( bp::arg("a"), bp::arg("tolerance")=irr::core::ROUNDING_ERROR_f64 ) );
    
    }

    { //::irr::core::iszero
    
        typedef bool ( *iszero_function_type )( ::irr::f32 const,::irr::f32 const );
        
        bp::def( 
            "iszero"
            , iszero_function_type( &::irr::core::iszero )
            , ( bp::arg("a"), bp::arg("tolerance")=irr::core::ROUNDING_ERROR_f32 ) );
    
    }

    { //::irr::core::iszero
    
        typedef bool ( *iszero_function_type )( ::irr::s32 const,::irr::s32 const );
        
        bp::def( 
            "iszero"
            , iszero_function_type( &::irr::core::iszero )
            , ( bp::arg("a"), bp::arg("tolerance")=(::irr::s32 const)(0) ) );
    
    }

    { //::irr::core::iszero
    
        typedef bool ( *iszero_function_type )( ::irr::u32 const,::irr::u32 const );
        
        bp::def( 
            "iszero"
            , iszero_function_type( &::irr::core::iszero )
            , ( bp::arg("a"), bp::arg("tolerance")=(::irr::u32 const)(0) ) );
    
    }

    { //::irr::core::locale_lower
    
        typedef ::irr::u32 ( *locale_lower_function_type )( ::irr::u32 );
        
        bp::def( 
            "locale_lower"
            , locale_lower_function_type( &::irr::core::locale_lower )
            , ( bp::arg("x") ) );
    
    }

    { //::irr::core::locale_set
    
        typedef void ( *locale_set_function_type )( ::irr::core::eLocaleID );
        
        bp::def( 
            "locale_set"
            , locale_set_function_type( &::irr::core::locale_set )
            , ( bp::arg("id") ) );
    
    }

    { //::irr::core::locale_upper
    
        typedef ::irr::u32 ( *locale_upper_function_type )( ::irr::u32 );
        
        bp::def( 
            "locale_upper"
            , locale_upper_function_type( &::irr::core::locale_upper )
            , ( bp::arg("x") ) );
    
    }

    { //::irr::core::max_
    
        typedef ::irr::u32 const & ( *max__function_type )( ::irr::u32 const &,::irr::u32 const & );
        
        bp::def( 
            "max_"
            , max__function_type( &::irr::core::max_ )
            , ( bp::arg("a"), bp::arg("b") )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

    { //::irr::core::max_
    
        typedef ::irr::u32 const & ( *max__function_type )( ::irr::u32 const &,::irr::u32 const &,::irr::u32 const & );
        
        bp::def( 
            "max_"
            , max__function_type( &::irr::core::max_ )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

    { //::irr::core::min_
    
        typedef ::irr::u32 const & ( *min__function_type )( ::irr::u32 const &,::irr::u32 const & );
        
        bp::def( 
            "min_"
            , min__function_type( &::irr::core::min_ )
            , ( bp::arg("a"), bp::arg("b") )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

    { //::irr::core::min_
    
        typedef ::irr::u32 const & ( *min__function_type )( ::irr::u32 const &,::irr::u32 const &,::irr::u32 const & );
        
        bp::def( 
            "min_"
            , min__function_type( &::irr::core::min_ )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

    { //::irr::video::pack_texureBlendFunc
    
        typedef ::irr::f32 ( *pack_texureBlendFunc_function_type )( ::irr::video::E_BLEND_FACTOR const,::irr::video::E_BLEND_FACTOR const,::irr::video::E_MODULATE_FUNC const,::irr::u32 const );
        
        bp::def( 
            "pack_texureBlendFunc"
            , pack_texureBlendFunc_function_type( &::irr::video::pack_texureBlendFunc )
            , ( bp::arg("srcFact"), bp::arg("dstFact"), bp::arg("modulate")=::irr::video::EMFN_MODULATE_1X, bp::arg("alphaSource")=(::irr::u32 const)((::irr::u32 const)(::irr::video::EAS_TEXTURE)) ) );
    
    }

    { //::irr::core::radToDeg
    
        typedef ::irr::f32 ( *radToDeg_function_type )( ::irr::f32 );
        
        bp::def( 
            "radToDeg"
            , radToDeg_function_type( &::irr::core::radToDeg )
            , ( bp::arg("radians") ) );
    
    }

    { //::irr::core::radToDeg
    
        typedef ::irr::f64 ( *radToDeg_function_type )( ::irr::f64 );
        
        bp::def( 
            "radToDeg"
            , radToDeg_function_type( &::irr::core::radToDeg )
            , ( bp::arg("radians") ) );
    
    }

    { //::irr::core::reciprocal
    
        typedef ::irr::f32 ( *reciprocal_function_type )( ::irr::f32 const );
        
        bp::def( 
            "reciprocal"
            , reciprocal_function_type( &::irr::core::reciprocal )
            , ( bp::arg("f") ) );
    
    }

    { //::irr::core::reciprocal
    
        typedef ::irr::f64 ( *reciprocal_function_type )( ::irr::f64 const );
        
        bp::def( 
            "reciprocal"
            , reciprocal_function_type( &::irr::core::reciprocal )
            , ( bp::arg("f") ) );
    
    }

    { //::irr::core::reciprocal_approxim
    
        typedef ::irr::f32 ( *reciprocal_approxim_function_type )( ::irr::f32 const );
        
        bp::def( 
            "reciprocal_approxim"
            , reciprocal_approxim_function_type( &::irr::core::reciprocal_approxim )
            , ( bp::arg("f") ) );
    
    }

    { //::irr::core::reciprocal_squareroot
    
        typedef ::irr::f64 ( *reciprocal_squareroot_function_type )( ::irr::f64 const );
        
        bp::def( 
            "reciprocal_squareroot"
            , reciprocal_squareroot_function_type( &::irr::core::reciprocal_squareroot )
            , ( bp::arg("x") ) );
    
    }

    { //::irr::core::reciprocal_squareroot
    
        typedef ::irr::f32 ( *reciprocal_squareroot_function_type )( ::irr::f32 const );
        
        bp::def( 
            "reciprocal_squareroot"
            , reciprocal_squareroot_function_type( &::irr::core::reciprocal_squareroot )
            , ( bp::arg("f") ) );
    
    }

    { //::irr::core::reciprocal_squareroot
    
        typedef ::irr::s32 ( *reciprocal_squareroot_function_type )( ::irr::s32 const );
        
        bp::def( 
            "reciprocal_squareroot"
            , reciprocal_squareroot_function_type( &::irr::core::reciprocal_squareroot )
            , ( bp::arg("x") ) );
    
    }

    { //::irr::core::round32
    
        typedef ::irr::s32 ( *round32_function_type )( ::irr::f32 );
        
        bp::def( 
            "round32"
            , round32_function_type( &::irr::core::round32 )
            , ( bp::arg("x") ) );
    
    }

    { //::irr::core::round_
    
        typedef ::irr::f32 ( *round__function_type )( ::irr::f32 );
        
        bp::def( 
            "round_"
            , round__function_type( &::irr::core::round_ )
            , ( bp::arg("x") ) );
    
    }

    { //::irr::core::s32_clamp
    
        typedef ::irr::s32 ( *s32_clamp_function_type )( ::irr::s32,::irr::s32,::irr::s32 );
        
        bp::def( 
            "s32_clamp"
            , s32_clamp_function_type( &::irr::core::s32_clamp )
            , ( bp::arg("value"), bp::arg("low"), bp::arg("high") ) );
    
    }

    { //::irr::core::s32_max
    
        typedef ::irr::s32 ( *s32_max_function_type )( ::irr::s32,::irr::s32 );
        
        bp::def( 
            "s32_max"
            , s32_max_function_type( &::irr::core::s32_max )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::irr::core::s32_min
    
        typedef ::irr::s32 ( *s32_min_function_type )( ::irr::s32,::irr::s32 );
        
        bp::def( 
            "s32_min"
            , s32_min_function_type( &::irr::core::s32_min )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::irr::core::setbit_cond
    
        typedef void ( *setbit_cond_function_type )( ::irr::u32 &,::irr::s32,::irr::u32 );
        
        bp::def( 
            "setbit_cond"
            , setbit_cond_function_type( &::irr::core::setbit_cond )
            , ( bp::arg("state"), bp::arg("condition"), bp::arg("mask") ) );
    
    }

    { //::irr::core::squareroot
    
        typedef ::irr::f32 ( *squareroot_function_type )( ::irr::f32 const );
        
        bp::def( 
            "squareroot"
            , squareroot_function_type( &::irr::core::squareroot )
            , ( bp::arg("f") ) );
    
    }

    { //::irr::core::squareroot
    
        typedef ::irr::f64 ( *squareroot_function_type )( ::irr::f64 const );
        
        bp::def( 
            "squareroot"
            , squareroot_function_type( &::irr::core::squareroot )
            , ( bp::arg("f") ) );
    
    }

    { //::irr::core::squareroot
    
        typedef ::irr::s32 ( *squareroot_function_type )( ::irr::s32 const );
        
        bp::def( 
            "squareroot"
            , squareroot_function_type( &::irr::core::squareroot )
            , ( bp::arg("f") ) );
    
    }

    { //::irr::core::strtof10
    
        typedef ::irr::f32 ( *strtof10_function_type )( char const *,char const * * );
        
        bp::def( 
            "strtof10"
            , strtof10_function_type( &::irr::core::strtof10 )
            , ( bp::arg("in"), bp::arg("out")=bp::object() ) );
    
    }

    { //::irr::core::strtol10
    
        typedef ::irr::s32 ( *strtol10_function_type )( char const *,char const * * );
        
        bp::def( 
            "strtol10"
            , strtol10_function_type( &::irr::core::strtol10 )
            , ( bp::arg("in"), bp::arg("out")=bp::object() ) );
    
    }

    { //::irr::video::textureBlendFunc_hasAlpha
    
        typedef bool ( *textureBlendFunc_hasAlpha_function_type )( ::irr::video::E_BLEND_FACTOR const );
        
        bp::def( 
            "textureBlendFunc_hasAlpha"
            , textureBlendFunc_hasAlpha_function_type( &::irr::video::textureBlendFunc_hasAlpha )
            , ( bp::arg("factor") ) );
    
    }

    { //::irr::video::unpack_texureBlendFunc
    
        typedef void ( *unpack_texureBlendFunc_function_type )( ::irr::video::E_BLEND_FACTOR &,::irr::video::E_BLEND_FACTOR &,::irr::video::E_MODULATE_FUNC &,::irr::u32 &,::irr::f32 const );
        
        bp::def( 
            "unpack_texureBlendFunc"
            , unpack_texureBlendFunc_function_type( &::irr::video::unpack_texureBlendFunc )
            , ( bp::arg("srcFact"), bp::arg("dstFact"), bp::arg("modulo"), bp::arg("alphaSource"), bp::arg("param") ) );
    
    }

    bp::scope().attr("DEGTORAD") = irr::core::DEGTORAD;

    bp::scope().attr("DEGTORAD64") = irr::core::DEGTORAD64;

    bp::scope().attr("HALF_PI") = irr::core::HALF_PI;

    bp::scope().attr("IdentityMaterial") = bp::object( boost::ref( irr::video::IdentityMaterial ) );

    bp::scope().attr("IdentityMatrix") = irr::core::IdentityMatrix;

    bp::scope().attr("MATERIAL_MAX_TEXTURES") = irr::video::MATERIAL_MAX_TEXTURES;

    bp::scope().attr("PI") = irr::core::PI;

    bp::scope().attr("PI64") = irr::core::PI64;

    bp::scope().attr("RADTODEG") = irr::core::RADTODEG;

    bp::scope().attr("RADTODEG64") = irr::core::RADTODEG64;

    bp::scope().attr("RECIPROCAL_PI") = irr::core::RECIPROCAL_PI;

    bp::scope().attr("RECIPROCAL_PI64") = irr::core::RECIPROCAL_PI64;

    bp::scope().attr("ROUNDING_ERROR_S32") = irr::core::ROUNDING_ERROR_S32;

    bp::scope().attr("ROUNDING_ERROR_f32") = irr::core::ROUNDING_ERROR_f32;

    bp::scope().attr("ROUNDING_ERROR_f64") = irr::core::ROUNDING_ERROR_f64;

    pyplusplus::containers::static_sized::register_const_array_1< float, 17 >( "__array_1_float_17" );

    bp::scope().attr("fast_atof_table") = irr::core::fast_atof_table_wrapper();

    bp::scope().attr("irrEmptyStringc") = bp::object( boost::ref( irr::scene::quake3::irrEmptyStringc ) );

    bp::scope().attr("locale_current") = irr::core::locale_current;
}
